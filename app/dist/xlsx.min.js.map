{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///xlsx.min.js","webpack:///webpack/bootstrap 53215f6fa62a168bd6c8","webpack:///./index.js","webpack:///./lib/xlsx.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js","webpack:///(webpack)/~/node-libs-browser/~/buffer/~/is-array/index.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/index.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/base64.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/object.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/support.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/utils.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/compressions.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/flate.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/index.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/utils/common.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/deflate.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/deflate.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/trees.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/adler32.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/crc32.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/messages.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/utils/strings.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/zstream.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/inflate.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/inflate.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/inffast.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/inftrees.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/constants.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/gzheader.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/nodeBuffer.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/crc32.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/signature.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/defaults.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/compressedObject.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/utf8.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/stringWriter.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/uint8ArrayWriter.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/load.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/zipEntries.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/stringReader.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/dataReader.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/nodeBufferReader.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/uint8ArrayReader.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/zipEntry.js","webpack:////home/everton/programacao/github/xlsx/~/jszip/lib/deprecatedPublicUtils.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/index.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/rng.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/create-hash.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/index.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/hash.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha1.js","webpack:///(webpack)/~/node-libs-browser/~/util/util.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///(webpack)/~/node-libs-browser/~/util/support/isBufferBrowser.js","webpack:///(webpack)/~/node-libs-browser/~/util/~/inherits/inherits_browser.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha256.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha512.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/md5.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/helpers.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/ripemd160/lib/ripemd160.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/create-hmac.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/pbkdf2.js","webpack:///(webpack)/~/node-libs-browser/~/crypto-browserify/~/pbkdf2-compat/pbkdf2.js","webpack:///./lib/workbook.js","webpack:////home/everton/programacao/github/xlsx/~/blob/index.js","webpack:///./lib/FileSaver.js","webpack:///(webpack)/buildin/module.js","webpack:///(webpack)/buildin/amd-define.js","webpack:///(webpack)/buildin/amd-options.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","streamToBuffer","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","gerar","planilha","linhas","merge","workbook","Workbook","addRowsToSheet","finalize","map","mergeCells","stream","XLSX","write","bookType","bookSST","type","Blob","saveAs","xlsx","Buffer","reset_cp","set_cp","char_codes","data","o","len","new_raw_buf","has_buf","Array","s2a","split","x","isval","undefined","keys","Object","evert_key","obj","key","K","evert","evert_num","parseInt","evert_arr","push","datenum","v","date1904","epoch","Date","parse","cc2str","arr","String","fromCharCode","getdata","name","substr","asNodeBuffer","_data","getContent","prototype","slice","debom_xml","toString","asBinary","safegetzipfile","zip","file","f","files","toLowerCase","replace","getzipfile","Error","getzipdata","safe","e","parsexmltag","tag","skip_root","z","eq","match","attregexg","j","q","cc","substring","strip_ns","nsregex2","escapexml","text","decregex","y","rencoding","charegex","parsexmlbool","value","parseVector","h","matches","vtregex","baseType","size","res","forEach","vtvregex","vtmregex","t","writetag","g","wtregex","wxt_helper","k","join","writextag","write_w3cdtf","d","toISOString","write_vt","readIEEE754","idx","isLE","nl","ml","el","eMax","eBias","bits","NaN","Infinity","Math","pow","ReadShift","oI","oR","w","vv","loc","oo","l","isBuffer","__readUInt16LE","__utf8","__utf16le","__lpstr","__lpwstr","__readUInt8","_getchar","lens","indexOf","__readInt16LE","__readInt32LE","__readUInt32LE","__double","__hexlify","WriteShift","val","writeUInt16LE","writeUInt32LE","writeDoubleLE","writeInt32LE","CheckField","hexstr","fld","prep_blob","blob","pos","read_shift","chk","write_shift","parsenoop","new_buf","sz","recordhopper","cb","opts","tmpbyte","cntbyte","RT","R","XLSBRecordEnum","buf_array","bufs","blksz","newblk","curbuf","endbuf","next","max","end","__toBuffer","_bufs","write_record","ba","payload","evert_RE","is_buf","shift_cell_xls","cell","tgt","cRel","rRel","r","shift_range_xls","range","parse_StrRun","ich","ifnt","parse_RichStr","start","flags","str","parse_XLWideString","rgsStrRun","dwSizeStrRun","write_RichStr","write_XLWideString","parse_XLSBCell","col","iStyleRef","write_XLSBCell","parse_XLSBCodeName","parse_XLNullableWideString","cchCharacters","write_XLNullableWideString","parse_RkNumber","b","fX100","fInt","RK","parse_UncheckedRfX","write_UncheckedRfX","parse_Xnum","write_Xnum","parse_BrtColor","out","fValidRGB","xColorType","index","nTintAndShade","bRed","bGreen","bBlue","bAlpha","parse_FontFlags","fItalic","fStrikeout","fOutline","fShadow","fCondense","fExtend","rgbify","parse_ct","ctext","ct","workbooks","sheets","calcchains","themes","styles","coreprops","extprops","custprops","strs","comments","vba","TODO","rels","xmlns","tagregex","nsregex","Extension","ContentType","ct2type","PartName","WTF","console","error","XMLNS","CT","calcchain","sst","style","defaults","write_ct","concat","CTYPE_DEFAULTS","f1","CT_LIST","f2","f3","type2ct","parse_rels","currentFilePath","charAt","hash","resolveRelativePathIntoAbsolute","to","toksFrom","pop","toksTo","tokTo","shift","rel","Type","Target","Id","TargetMode","canonictarget","write_rels","rid","parse_core_props","CORE_PROPS","cur","CORE_PROPS_REGEX","cp_doit","write_core_props","cp","XML_HEADER","CORE_PROPS_XML_ROOT","CreatedDate","xsi:type","ModifiedDate","parse_ext_props","EXT_PROPS","matchtag","RegExp","HeadingPairs","TitlesOfParts","widx","Worksheets","parts","utf8read","SheetNames","write_ext_props","W","Application","parse_cust_props","custregex","CUST_PROPS","xmlnsvt","vt","toks","unescapexml","parseFloat","warn","write_cust_props","CUST_PROPS_XML_ROOT","pid","fmtid","xlml_set_prop","Props","parse_FILETIME","dwLowDateTime","dwHighDateTime","parse_lpstr","pad","parse_lpwstr","parse_VtStringBase","stringType","parse_VtString","parse_VtUnalignedString","parse_VtVecUnalignedLpstrValue","ret","parse_VtVecUnalignedLpstr","parse_VtHeadingPair","headingString","parse_TypedPropertyValue","VT_USTR","headerParts","VT_I4","parse_VtVecHeadingPairValue","cElements","parse_VtVecHeadingPair","parse_dictionary","CodePage","cnt","dict","chr0","chr1","parse_BLOB","bytes","parse_ClipboardData","Size","_opts","VT_VARIANT","VT_CUSTOM","raw","parse_PropertySet","PIDSI","DictObj","start_addr","NumProps","Dictionary","PropID","Offset","PropH","fail","piddsi","n","VT_I2","oldpos","parsebool","parse_PropertySetStream","content","NumSets","FMTID0","FMTID1","Offset0","Offset1","SystemIdentifier","CFB","utils","consts","HEADER_CLSID","PSet0","rval","FMTID","PSet1","parsenoop2","parslurp","target","parslurp2","parseuint16","parseuint16a","parse_Bes","parse_ShortXLUnicodeString","cch","width","encoding","current_codepage","biff","fHighByte","parse_XLUnicodeRichExtendedString","cRun","cbExtRst","fExtSt","fRichSt","msg","parse_XLUnicodeStringNoCch","retval","parse_XLUnicodeString","parse_XLUnicodeString2","parse_LongRGBA","a","parse_LongRGB","parse_XLSCell","rw","ixfe","parse_frtHeader","rt","parse_OptXLUnicodeString","parse_XTI","iSupBook","itabFirst","itabLast","parse_RkRec","parse_AddinUdf","udfName","parse_Ref8U","rwFirst","rwLast","colFirst","colLast","parse_RefU","parse_FtCmo","ot","parse_FtNts","fSharedNote","parse_FtCf","cf","parse_FtArray","fts","ft","FtTab","parse_BOF","BIFFVer","parse_InterfaceHdr","parse_WriteAccess","enc","UserName","parse_BoundSheet8","hidden","dt","hs","parse_SST","ucnt","Count","Unique","parse_ExtSST","extsst","dsst","parse_Row","Col","parse_ForceFullCalculation","header","fullcalc","parse_RecalcId","parse_DefaultRowHeight","miyRw","fl","Unsynced","DyZero","ExAsc","ExDsc","parse_Window1","xWn","yWn","dxWn","dyWn","iTabCur","iTabFirst","ctabSel","wTabRatio","Pos","Dim","Flags","CurTab","FirstTab","Selected","TabRatio","parse_Font","parse_LabelSst","isst","parse_Label","parse_Format","ifmt","fmtstr","parse_Dimensions","C","parse_RK","rkrec","rknum","parse_MulRk","rkrecs","lastcol","parse_CellStyleXF","patternType","XLSFillPattern","icvFore","icvBack","parse_XF","fStyle","parse_Guts","parse_BoolErr","parse_Number","xnum","parse_SupBook","virtPath","ctab","rgst","sbcch","parse_ExternName","body","fBuiltIn","fWantAdvise","fWantPict","fOle","fOleLink","fIcon","parse_Lbl","chKey","cce","rgce","parse_NameParsedFormula","Name","parse_ExternSheet","snames","parse_ShrFmla","cUse","parse_SharedParsedFormula","parse_Array","ref","parse_Ref","parse_ArrayParsedFormula","parse_MTRSettings","fMTREnabled","fUserSetThreadCount","cUserThreadCount","parse_NoteSh","row","idObj","stAuthor","parse_Note","parse_MergeCells","merges","cmcs","parse_Obj","cmo","parse_TxO","controlInfo","lastobj","parse_ControlInfo","cchText","parse_FontIndex","texts","hdr","parse_Country","CountryEnum","parse_ClrtClient","ccv","parse_Palette","parse_XFCRC","cxfs","crc","parse_BIFF2STR","parse_BIFF2NUM","num","parse_si","html","cellHTML","sirregex","sitregex","parse_rs","parse_sst_xml","ss","sstr0","sstr1","sstr2","count","uniqueCount","write_sst_xml","main","sitag","straywsregex","parse_BrtBeginSst","parse_sst_bin","pass","write_BrtBeginSst","write_sst_bin","write_BrtSSTItem","_JS2ANSI","cptable","encode","parse_Version","Major","Minor","parse_EncryptionHeader","tmp","AlgID","parse_EncryptionVerifier","parse_RC4CryptoHeader","vers","EncryptionVersionInfo","EncryptionHeader","EncryptionVerifier","parse_RC4Header","Salt","EncryptedVerifier","EncryptedVerifierHash","crypto_CreatePasswordVerifier_Method1","Password","PasswordArray","PasswordByte","Intermediate1","Intermediate2","Intermediate3","Verifier","PasswordDecoded","parse_XORObfuscation","verificationBytes","password","verifier","valid","insitu_decrypt","crypto_MakeXorDecryptor","parse_FilePassHeader","Info","Data","parse_FilePass","hex2RGB","rgb2Hex","rgb","toUpperCase","rgb2HSL","G","B","M","min","H6","S","L2","hsl2RGB","hsl","X","H","L","h6","round","rgb_tint","hex","tint","rev","width2px","MDW","px2char","px","char2width","chr","cycle_width","collw","find_mdw","coll","DEF_MDW","MIN_MDW","MAX_MDW","parse_fills","Fills","fill","bgColor","indexed","theme","themeElements","clrScheme","raw_rgb","fgColor","parse_fonts","Fonts","font","bold","underline","italic","strike","outline","shadow","vertAlign","color","parse_borders","Borders","border","sub_border","diagonalUp","diagonalDown","left","right","top","bottom","diagonal","auto","parse_numFmts","NumberFmt","SSF","_table","formatCode","numFmtId","load","write_numFmts","NF","parse_cellXfs","CellXf","xf","fillId","alignment","vertical","horizontal","textRotation","indent","wrapText","write_cellXfs","cellXfs","write_sty_xml","wb","style_builder","toXml","STYLES_XML_ROOT","parse_BrtFmt","stFmtCode","parse_BrtFont","dyHeight","grbit","bls","sss","uls","bFamily","bCharSet","brtColor","bFontScheme","Bold","Italic","Strikeout","Outline","Shadow","Condense","Extend","Sub","Sup","parse_BrtXF","ixfeParent","parse_sty_bin","state","write_sty_bin","parse_clrScheme","lastClr","parse_fontScheme","parse_fmtScheme","parse_themeElements","clrsregex","fntsregex","fmtsregex","parse_theme_xml","themeltregex","write_theme","themeXml","parse_Theme","dwThemeVersion","parse_ColorTheme","parse_FullColorExt","xclrType","nTintShade","xclrValue","parse_IcvXF","parse_XFExtGradient","parse_ExtProp","extType","parse_XFExt","cexts","ext","update_xfext","xfext","xfe","parse_cc_xml","parse_BrtCalcChainItem$","encode_cell","parse_cc_bin","parse_comments","dirComments","sheetRels","canonicalpath","parse_cmnt","sheetNames","sheetName","insertCommentsIntoSheet","sheet","comment","safe_decode_range","thisCell","decode_cell","encoded","encode_range","author","parse_comments_xml","authors","commentList","trim","authorId","guid","sheetRows","textMatch","parse_BrtBeginComment","iauthor","rfx","parse_comments_bin","parseread","parseread1","parse_ColRelU","parse_RgceArea","parse_RgceAreaRel","parse_RgceLoc","parse_RgceLocRel","cl","parse_PtgArea","area","parse_PtgArea3d","ixti","parse_PtgAreaErr","parse_PtgAreaErr3d","parse_PtgAreaN","parse_PtgArray","parse_PtgAttrBaxcel","bitSemi","bitBaxcel","parse_PtgAttrChoose","offset","parse_PtgAttrGoto","bitGoto","parse_PtgAttrIf","bitIf","parse_PtgAttrSemi","parse_PtgAttrSpaceType","parse_PtgAttrSpace","parse_PtgAttrSpaceSemi","parse_PtgRef","parse_PtgRefN","parse_PtgRef3d","parse_PtgFunc","iftab","FtabArgc","Ftab","parse_PtgFuncVar","cparams","tab","parsetab","Cetab","parse_PtgExp","parse_PtgErr","BErr","parse_PtgInt","parse_PtgBool","parse_PtgNum","parse_PtgStr","parse_SerAr","parse_PtgExtraMem","parse_PtgExtraArray","cols","rows","parse_PtgName","nameindex","parse_PtgNameX","parse_PtgMemArea","parse_PtgMemFunc","parse_PtgRefErr","parse_Formula","parse_FormulaValue","cbf","parse_XLSCellParsedFormula","formula","shared","tt","parse_RgbExtra","rgcb","parse_Rgce","ptgs","PtgTypes","Ptg18","Ptg19","mapper","stringify_formula","supbooks","e1","e2","nameidx","_range","stack","ff","fflen","argc","func","args","lbl","XLSXFutureFunctions","bookidx","externbook","sharedf","parsedf","fnd","arrayf","parse_XLSBCellParsedFormula","get_sst_id","get_cell_style","exec","numFmt","addStyle","revssf","fontId","borderId","xfId","applyNumberFormat","get_cell_style_csf","cellXf","applyAlignment","safe_format","fillid","_general_int","_ssfopts","_general_num","dd","_general","format","cellNF","parse_ws_xml_dim","ws","parse_ws_xml","ridx","dimregex","mergecells","mergecregex","columns","cellStyles","colregex","parse_ws_xml_cols","refguess","mtch","sheetdataregex","parse_ws_xml_data","parse_ws_xml_hlinks","hlinkregex","tmpref","write_ws_xml_merges","location","Rel","rng","addr","seencol","coli","colm","colM","wpx","wch","write_ws_xml_cols","customWidth","write_ws_xml_cell","oldt","oldv","cellDates","os","Strings","write_ws_xml_data","rr","encode_col","encode_row","write_ws_xml","WS_XML_ROOT","sidx","rdata","Sheets","parse_BrtRowHdr","parse_BrtWsProp","parse_BrtCellBlank","write_BrtCellBlank","parse_BrtCellBool","fBool","parse_BrtCellError","parse_BrtCellIsst","parse_BrtCellReal","parse_BrtCellRk","parse_BrtCellSt","parse_BrtFmlaBool","cellFormula","parse_BrtFmlaError","parse_BrtFmlaNum","parse_BrtFmlaString","parse_BrtHLink","relId","tooltip","display","parse_ws_bin","!id","sstr","sheetStubs","write_ws_bin_cell","write_CELLTABLE","write_ws_bin","write_BrtWsDim","push_defaults_array","push_defaults","parse_wb_defaults","WBProps","WBPropsDef","CalcPr","CalcPrDef","WBView","WBViewDef","SheetDef","parse_wb_xml","AppVersion","wbnsregex","safe1904","write_wb_xml","WB_XML_ROOT","sheetId","r:id","parse_BrtBundleSh","hsState","iTabID","strRelID","parse_RelID","write_BrtBundleSh","write_RelID","parse_BrtWbProp","strName","write_BrtWbProp","parse_BrtFRTArchID$","ArchID","parse_wb_bin","write_BUNDLESHS","write_BrtFileVersion","version","write_BOOKVIEWS","write_BrtCalcProp","write_BrtFileRecover","write_wb_bin","parse_wb","parse_ws","parse_sty","parse_sty_xml","parse_theme","parse_sst","parse_cc","write_wb","write_ws","write_sty","write_sst","xlml_parsexmltag","words","attregexg2","attregex2","xlml_parsexmltagobj","xlml_format","fmt","XLMLFormatMap","xlml_set_custprop","Custprops","Rn","safe_format_xlml","nf","process_style_xlml","stag","Interior","I","Pattern","XLMLPatternTypeMap","ID","parse_xlml_data","xml","base","csty","sid","StyleID","interiors","Parent","xlml_fixstr","UTC","RBErr","Formula","rc_to_a1","xlml_clean_comment","xlml_normalize","parse_xlml_xml","dtag","didx","sheetnames","cursheet","sheetname","table","fidx","pidx","cstys","xlmlregex","lastIndex","HRef","HRefScreenTip","MergeAcross","MergeDown","Index","Format","Span","Author","seen","bookSheets","bookProps","get_table","parse_xlml","fix_read_opts","Base64","decode","_chr","write_xlml","parse_compobj","UserType","Reserved1","slurp","XLSRecordEnum","bconcat","ll","safe_format_xf","XF","make_cell","parse_workbook","options","lastcell","last_cell","cmnt","rngC","rngR","temp_val","country","Directory","last_formula","cur_sheet","Preamble","shared_formulae","array_formulae","cell_valid","XFs","palette","get_rgb","icv","XLSIcv","process_cell_style","line","xfd","addcell","rrtabid","lastuser","codepage","winlocked","wtf","objects","sbc","sbci","sbcli","last_Rn","file_depth","RecordType","Date1904","WriteProtect","RefreshAll","CalcCount","CalcDelta","CalcIter","CalcMode","CalcPrecision","CalcSaveRecalc","CalcRefMode","FullCalc","TxO","noteobj","sheetnamesraw","sort","Number","Encryption","Metadata","Country","parse_xlscfb","cfb","CompObj","Summary","find","CompObjP","WorkbookP","parse_props","props","DocSummary","bookFiles","DSI","DocSummaryPIDDSI","SI","SummaryPIDSI","parse_ods","ODS","fix_opts_func","safe_parse_wbrels","wbrels","safe_parse_ws","path","relsPath","parse_zip","make_ssf","binname","entries","filter","nodirs","dir","xlsb","propdata","deps","bookDeps","wbsheets","wbext","wbrelsfile","nmode","Deps","Styles","Themes","bookVBA","vbaraw","bin","add_rels","rId","relobj","write_zip","load_table","fix_write_opts","jszip","General","RELS","WB","WS","SST","THEME","STY","firstbyte","read_zip","base64","_fs","readFileSync","readSync","isfile","read","FILENAME","write_zip_type","StyleBuilder","generate","writeFileSync","writeSync","filename","decode_row","rowstr","unfix_row","cstr","decode_col","colstr","unfix_col","floor","split_cell","splt","decode_range","cs","ce","safe_format_cell","format_cell","sheet_to_json","isempty","isArray","outi","defineProperty","enumerable","__rowNum__","sheet_to_row_object_array","sheet_to_csv","txt","qreg","FS","fs","RS","rs","sheet_to_formulae","cmds","current_cptable","input","utf8","c1","c2","c3","e3","e4","isNaN","apply","_strrev","pad0","pad_","rpad_","pad0r1","pad0r2","pad0r","p2_32","isgeneral","fixopts","opts_fmt","frac","D","mixed","sgn","P_2","P_1","P","Q_2","Q_1","Q","A","general_fmt_int","general_fmt","general_fmt_num","fix_hijri","date","parse_date_code","b2","time","dow","dout","T","u","abs","setDate","getDate","getFullYear","getMonth","getDay","write_date","ss0","outl","months","days","commaify","split_fmt","in_str","eval_fmt","flen","lst","hr","abstime","ssm","bt","jj","nstr","myv","ostr","write_num","decpt","lasti","chkcond","thresh","choose_fmt","lat","cfregex","m1","cfregex2","m2","sfmt","table_fmt",1,2,3,4,9,10,11,12,13,14,15,16,17,18,19,20,21,22,37,38,39,40,45,46,47,48,49,56,65535,"gfn2","gfn5","toFixed","toPrecision","toExponential","gfn3","gnr1","gfn4","gnr4","gnr5","gnr6","gnr2","V","log","LOG10E","write_num_pct","pct1","mul","write_num_cm","write_num_exp","period","ee","fakee","$$","$1","$2","$3","write_num_f1","aval","sign","den","myn","myd","write_num_f2","hashq","rnd","dec","flr","write_num_flt","closeparen","ffmt","ri","frac1","dec1","phone","oa","lres","rres","write_num_cm2","write_num_pct2","write_num_exp2","write_num_int","_split","_eval","tbl","General Number","General Date","Long Date","Medium Date","Short Date","Long Time","Medium Time","Short Time","Currency","Fixed","Standard","Percent","Scientific","Yes/No","True/False","On/Off","DO_NOT_EXPORT_CFB","mver","ssz","nmfs","ndfs","dir_start","minifat_start","difat_start","fat_addrs","mv","check_get_mver","check_shifts","nds","sectors","sectorify","sleuth_fat","sector_list","make_sector_list","ENDOFCHAIN","Paths","FileIndex","FullPaths","FullPathDir","read_directory","build_full_paths","root_name","find_path","make_find_path","HEADER_SIGNATURE","nsectors","ceil","FI","FPD","FP","pl","dad","UCFullPaths","UCPaths","UCPath","sector","get_sector_list","chkd","buf_chain","sl","modulus","nodes","ctime","mtime","minifat_store","namelen","clsid","read_date","mt","storage","MSSZ","MAXREGSECT","DIFSECT","FATSECT","FREESECT","HEADER_MINOR_VERSION","MAXREGSID","NOSTREAM","EntryTypes","encodings","&quot;","&apos;","&gt;","&lt;","&amp;","encregex","coderegex","entrepl","entregex","orig","utf8readb","ww","corpus","utf8readc","mtcache","vt_cache","dc","dcterms","dcmitype","mx","sjs","xsi","xsd","___toBuffer","___utf16le","___hexlify","___utf8","___lpstr","___lpwstr","___double","readUInt32LE","readDoubleLE","OFFCRYPTO","make_offcrypto","O","_crypto","crypto","rc4","md5","createHash","update","digest",7,23,29,36,42,43,255,"VT_BOOL","VT_UI4","VT_LPSTR","VT_FILETIME","VT_CF","VT_VECTOR","VT_STRING",5,6,8,26,27,28,"SpecialProperties",2147483648,2147483651,1919054434,"hasOwnProperty",30,31,32,33,34,41,44,52,55,61,64,66,81,82,84,86,90,105,213,216,218,351,354,358,420,886,961,962,963,964,965,966,971,972,974,981,"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml","application/vnd.ms-excel.binIndexWs","application/vnd.ms-excel.chartsheet","application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml","application/vnd.ms-excel.dialogsheet","application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml","application/vnd.ms-excel.macrosheet","application/vnd.ms-excel.macrosheet+xml","application/vnd.ms-excel.intlmacrosheet","application/vnd.ms-excel.binIndexMs","application/vnd.openxmlformats-package.core-properties+xml","application/vnd.openxmlformats-officedocument.custom-properties+xml","application/vnd.openxmlformats-officedocument.extended-properties+xml","application/vnd.openxmlformats-officedocument.customXmlProperties+xml","application/vnd.ms-excel.comments","application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml","application/vnd.ms-excel.pivotTable","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml","application/vnd.ms-excel.calcChain","application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml","application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings","application/vnd.ms-office.activeX","application/vnd.ms-office.activeX+xml","application/vnd.ms-excel.attachedToolbars","application/vnd.ms-excel.connections","application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml","application/vnd.ms-excel.externalLink","application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml","application/vnd.ms-excel.sheetMetadata","application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml","application/vnd.ms-excel.pivotCacheDefinition","application/vnd.ms-excel.pivotCacheRecords","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml","application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml","application/vnd.ms-excel.queryTable","application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml","application/vnd.ms-excel.userNames","application/vnd.ms-excel.revisionHeaders","application/vnd.ms-excel.revisionLog","application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml","application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml","application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml","application/vnd.ms-excel.tableSingleCells","application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml","application/vnd.ms-excel.slicer","application/vnd.ms-excel.slicerCache","application/vnd.ms-excel.slicer+xml","application/vnd.ms-excel.slicerCache+xml","application/vnd.ms-excel.wsSortMap","application/vnd.ms-excel.table","application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml","application/vnd.openxmlformats-officedocument.theme+xml","application/vnd.ms-excel.Timeline+xml","application/vnd.ms-excel.TimelineCache+xml","application/vnd.ms-office.vbaProject","application/vnd.ms-office.vbaProjectSignature","application/vnd.ms-office.volatileDependencies","application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml","application/vnd.ms-excel.controlproperties+xml","application/vnd.openxmlformats-officedocument.model+data","application/vnd.ms-excel.Survey+xml","application/vnd.openxmlformats-officedocument.drawing+xml","application/vnd.openxmlformats-officedocument.drawingml.chart+xml","application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml","application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml","application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml","application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml","application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml","application/vnd.openxmlformats-officedocument.vmlDrawing","application/vnd.openxmlformats-package.relationships+xml","application/vnd.openxmlformats-officedocument.oleObject","xlsm","xltx","CTYPE_XML_ROOT","xmlns:xsd","xmlns:xsi","SHEET","RELS_ROOT","xmlns:cp","xmlns:dc","xmlns:dcterms","xmlns:dcmitype","EXT_PROPS_XML_ROOT","xmlns:vt","parse_URLMoniker","extra","url","parse_FileMoniker","ansiLength","ansiPath","cbUnicodePathSize","cbUnicodePathBytes","unicodePath","parse_HyperlinkMoniker","parse_HyperlinkString","parse_Hyperlink","sVer","displayName","targetFrameName","moniker","oleMoniker","fileTime","parse_HideObjEnum","parse_CompressPictures","parse_XLHeaderFooter","parse_HLink","hlink","parse_HLinkTooltip","wzTooltip","parse_Style","parse_StyleExt","parse_ColInfo","parse_Window2","parse_Backup","parse_Blank","parse_BottomMargin","parse_BuiltInFnGroupCount","parse_CalcCount","parse_CalcDelta","parse_CalcIter","parse_CalcMode","parse_CalcPrecision","parse_CalcRefMode","parse_CalcSaveRecalc","parse_CodePage","parse_Compat12","parse_Date1904","parse_DefColWidth","parse_DSF","parse_EntExU2","parse_EOF","parse_Excel9File","parse_FeatHdr","parse_FontX","parse_Footer","parse_GridSet","parse_HCenter","parse_Header","parse_HideObj","parse_InterfaceEnd","parse_LeftMargin","parse_Mms","parse_ObjProtect","parse_Password","parse_PrintGrid","parse_PrintRowCol","parse_PrintSize","parse_Prot4Rev","parse_Prot4RevPass","parse_Protect","parse_RefreshAll","parse_RightMargin","parse_RRTabId","parse_ScenarioProtect","parse_Scl","parse_String","parse_SxBool","parse_TopMargin","parse_UsesELFs","parse_VCenter","parse_WinProtect","parse_WriteProtect","parse_VerticalPageBreaks","parse_HorizontalPageBreaks","parse_Selection","parse_Continue","parse_Pane","parse_Pls","parse_DCon","parse_DConRef","parse_DConName","parse_XCT","parse_CRN","parse_FileSharing","parse_Uncalced","parse_Template","parse_Intl","parse_WsBool","parse_Sort","parse_Sync","parse_LPr","parse_DxGCol","parse_FnGroupName","parse_FilterMode","parse_AutoFilterInfo","parse_AutoFilter","parse_Setup","parse_ScenMan","parse_SCENARIO","parse_SxView","parse_Sxvd","parse_SXVI","parse_SxIvd","parse_SXLI","parse_SXPI","parse_DocRoute","parse_RecipName","parse_MulBlank","parse_SXDI","parse_SXDB","parse_SXFDB","parse_SXDBB","parse_SXNum","parse_SxErr","parse_SXInt","parse_SXString","parse_SXDtr","parse_SxNil","parse_SXTbl","parse_SXTBRGIITM","parse_SxTbpg","parse_ObProj","parse_SXStreamID","parse_DBCell","parse_SXRng","parse_SxIsxoper","parse_BookBool","parse_DbOrParamQry","parse_OleObjectSize","parse_SXVS","parse_BkHim","parse_MsoDrawingGroup","parse_MsoDrawing","parse_MsoDrawingSelection","parse_PhoneticInfo","parse_SxRule","parse_SXEx","parse_SxFilt","parse_SxDXF","parse_SxItm","parse_SxName","parse_SxSelect","parse_SXPair","parse_SxFmla","parse_SxFormat","parse_SXVDEx","parse_SXFormula","parse_SXDBEx","parse_RRDInsDel","parse_RRDHead","parse_RRDChgCell","parse_RRDRenSheet","parse_RRSort","parse_RRDMove","parse_RRFormat","parse_RRAutoFmt","parse_RRInsertSh","parse_RRDMoveBegin","parse_RRDMoveEnd","parse_RRDInsDelBegin","parse_RRDInsDelEnd","parse_RRDConflict","parse_RRDDefName","parse_RRDRstEtxp","parse_LRng","parse_CUsr","parse_CbUsr","parse_UsrInfo","parse_UsrExcl","parse_FileLock","parse_RRDInfo","parse_BCUsrs","parse_UsrChk","parse_UserBView","parse_UserSViewBegin","parse_UserSViewEnd","parse_RRDUserView","parse_Qsi","parse_CondFmt","parse_CF","parse_DVal","parse_DConBin","parse_Lel","parse_XLSCodeName","parse_SXFDBType","parse_ObNoMacros","parse_Dv","parse_Index","parse_Table","parse_BigName","parse_ContinueBigName","parse_WebPub","parse_QsiSXTag","parse_DBQueryExt","parse_ExtString","parse_TxtQry","parse_Qsir","parse_Qsif","parse_RRDTQSIF","parse_OleDbConn","parse_WOpt","parse_SXViewEx","parse_SXTH","parse_SXPIEx","parse_SXVDTEx","parse_SXViewEx9","parse_ContinueFrt","parse_RealTimeData","parse_ChartFrtInfo","parse_FrtWrapper","parse_StartBlock","parse_EndBlock","parse_StartObject","parse_EndObject","parse_CatLab","parse_YMult","parse_SXViewLink","parse_PivotChartBits","parse_FrtFontList","parse_SheetExt","parse_BookExt","parse_SXAddl","parse_CrErr","parse_HFPicture","parse_Feat","parse_DataLabExt","parse_DataLabExtContents","parse_CellWatch","parse_FeatHdr11","parse_Feature11","parse_DropDownObjIds","parse_ContinueFrt11","parse_DConn","parse_List12","parse_Feature12","parse_CondFmt12","parse_CF12","parse_CFEx","parse_AutoFilter12","parse_ContinueFrt12","parse_MDTInfo","parse_MDXStr","parse_MDXTuple","parse_MDXSet","parse_MDXProp","parse_MDXKPI","parse_MDB","parse_PLV","parse_DXF","parse_TableStyles","parse_TableStyle","parse_TableStyleElement","parse_NamePublish","parse_NameCmt","parse_SortData","parse_GUIDTypeLib","parse_FnGrp12","parse_NameFnGrp12","parse_HeaderFooter","parse_CrtLayout12","parse_CrtMlFrt","parse_CrtMlFrtContinue","parse_ShapePropsStream","parse_TextPropsStream","parse_RichTextStream","parse_CrtLayout12A","parse_Units","parse_Chart","parse_Series","parse_DataFormat","parse_LineFormat","parse_MarkerFormat","parse_AreaFormat","parse_PieFormat","parse_AttachedLabel","parse_SeriesText","parse_ChartFormat","parse_Legend","parse_SeriesList","parse_Bar","parse_Line","parse_Pie","parse_Area","parse_Scatter","parse_CrtLine","parse_Axis","parse_Tick","parse_ValueRange","parse_CatSerRange","parse_AxisLine","parse_CrtLink","parse_DefaultText","parse_Text","parse_ObjectLink","parse_Frame","parse_Begin","parse_End","parse_PlotArea","parse_Chart3d","parse_PicF","parse_DropBar","parse_Radar","parse_Surf","parse_RadarArea","parse_AxisParent","parse_LegendException","parse_ShtProps","parse_SerToCrt","parse_AxesUsed","parse_SBaseRef","parse_SerParent","parse_SerAuxTrend","parse_IFmtRecord","parse_Pos","parse_AlRuns","parse_BRAI","parse_SerAuxErrBar","parse_SerFmt","parse_Chart3DBarShape","parse_Fbi","parse_BopPop","parse_AxcExt","parse_Dat","parse_PlotGrowth","parse_SIIndex","parse_GelFrame","parse_BopPopCustom","parse_Fbi2","CS2CP",77,128,129,130,134,136,161,162,163,177,178,186,204,222,238,69,"parse_r","terms","tregex","rpr","rpregex","parse_rpr","nlregex","rregex","rend","intro","outro","family","crypto_CreateXorArray_Method1","PadArray","InitialCode","XorMatrix","Ror","Byte","XorRor","byte1","byte2","CreateXorKey_Method1","XorKey","CurrentElement","Char","ObfuscationArray","Temp","PasswordLastChar","PadIndex","crypto_DecryptData_Method1","XorArrayIndex","XorArray","Value","None","Solid","Gray50","Gray75","Gray25","HorzStripe","VertStripe","ReverseDiagStripe","DiagStripe","DiagCross","ThickDiagCross","ThinHorzStripe","ThinVertStripe","ThinReverseDiagStripe","ThinHorzCross","numFmtRegex","cellXfRegex","fillsRegex","bordersRegex","parse_BrtCommentAuthor","parse_BrtCommentText","rcfunc","$4","$5","rcbase","rcregex","fstr","parse_PtgAttrSum","parse_PtgConcat","parse_PtgAdd","parse_PtgDiv","parse_PtgEq","parse_PtgGe","parse_PtgGt","parse_PtgIsect","parse_PtgLe","parse_PtgLt","parse_PtgMissArg","parse_PtgMul","parse_PtgNe","parse_PtgParen","parse_PtgPercent","parse_PtgPower","parse_PtgRange","parse_PtgSub","parse_PtgUminus","parse_PtgUnion","parse_PtgUplus","parse_PtgMemErr","parse_PtgMemNoMem","parse_PtgRefErr3d","parse_PtgTbl",35,57,58,59,60,"PtgDupes",96,65,97,98,67,99,68,100,101,70,102,71,103,72,104,73,74,106,75,107,76,108,109,89,121,122,91,123,92,124,93,125,24,25,50,51,53,54,62,63,78,79,80,83,85,87,88,94,95,110,111,112,113,114,115,116,117,118,119,120,126,127,131,132,133,135,137,138,139,140,142,143,144,145,146,147,148,149,150,151,152,153,155,159,164,166,167,168,169,170,171,172,173,174,175,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,206,207,208,209,210,211,212,214,215,217,219,220,223,224,225,226,227,228,229,240,243,249,250,251,252,253,254,256,259,260,265,266,267,268,269,272,273,274,276,277,278,279,280,281,282,283,284,285,288,289,290,291,292,293,295,296,297,298,302,305,306,307,308,309,310,311,312,313,314,315,316,318,319,320,321,322,323,324,325,328,330,336,338,339,342,343,344,350,352,355,356,370,373,374,375,376,377,378,379,380,381,382,383,384,385,386,388,390,391,392,393,394,395,396,397,398,399,400,412,413,414,415,416,417,421,422,423,424,425,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,480,481,482,485,489,491,493,494,495,509,510,511,517,518,519,520,521,522,523,545,546,547,548,549,620,621,647,653,667,673,753,755,808,141,154,156,157,158,160,165,176,179,180,181,182,183,184,205,221,230,231,232,233,234,235,236,237,239,241,242,244,245,246,247,248,257,258,261,262,263,264,270,271,275,286,287,294,299,300,301,303,304,317,326,327,329,331,332,334,335,337,340,341,345,346,347,348,349,353,357,359,360,361,362,363,364,365,366,367,368,369,371,372,"_xlfn.ACOT","_xlfn.ACOTH","_xlfn.AGGREGATE","_xlfn.ARABIC","_xlfn.AVERAGEIF","_xlfn.AVERAGEIFS","_xlfn.BASE","_xlfn.BETA.DIST","_xlfn.BETA.INV","_xlfn.BINOM.DIST","_xlfn.BINOM.DIST.RANGE","_xlfn.BINOM.INV","_xlfn.BITAND","_xlfn.BITLSHIFT","_xlfn.BITOR","_xlfn.BITRSHIFT","_xlfn.BITXOR","_xlfn.CEILING.MATH","_xlfn.CEILING.PRECISE","_xlfn.CHISQ.DIST","_xlfn.CHISQ.DIST.RT","_xlfn.CHISQ.INV","_xlfn.CHISQ.INV.RT","_xlfn.CHISQ.TEST","_xlfn.COMBINA","_xlfn.CONFIDENCE.NORM","_xlfn.CONFIDENCE.T","_xlfn.COT","_xlfn.COTH","_xlfn.COUNTIFS","_xlfn.COVARIANCE.P","_xlfn.COVARIANCE.S","_xlfn.CSC","_xlfn.CSCH","_xlfn.DAYS","_xlfn.DECIMAL","_xlfn.ECMA.CEILING","_xlfn.ERF.PRECISE","_xlfn.ERFC.PRECISE","_xlfn.EXPON.DIST","_xlfn.F.DIST","_xlfn.F.DIST.RT","_xlfn.F.INV","_xlfn.F.INV.RT","_xlfn.F.TEST","_xlfn.FILTERXML","_xlfn.FLOOR.MATH","_xlfn.FLOOR.PRECISE","_xlfn.FORMULATEXT","_xlfn.GAMMA","_xlfn.GAMMA.DIST","_xlfn.GAMMA.INV","_xlfn.GAMMALN.PRECISE","_xlfn.GAUSS","_xlfn.HYPGEOM.DIST","_xlfn.IFNA","_xlfn.IFERROR","_xlfn.IMCOSH","_xlfn.IMCOT","_xlfn.IMCSC","_xlfn.IMCSCH","_xlfn.IMSEC","_xlfn.IMSECH","_xlfn.IMSINH","_xlfn.IMTAN","_xlfn.ISFORMULA","_xlfn.ISO.CEILING","_xlfn.ISOWEEKNUM","_xlfn.LOGNORM.DIST","_xlfn.LOGNORM.INV","_xlfn.MODE.MULT","_xlfn.MODE.SNGL","_xlfn.MUNIT","_xlfn.NEGBINOM.DIST","_xlfn.NETWORKDAYS.INTL","_xlfn.NIGBINOM","_xlfn.NORM.DIST","_xlfn.NORM.INV","_xlfn.NORM.S.DIST","_xlfn.NORM.S.INV","_xlfn.NUMBERVALUE","_xlfn.PDURATION","_xlfn.PERCENTILE.EXC","_xlfn.PERCENTILE.INC","_xlfn.PERCENTRANK.EXC","_xlfn.PERCENTRANK.INC","_xlfn.PERMUTATIONA","_xlfn.PHI","_xlfn.POISSON.DIST","_xlfn.QUARTILE.EXC","_xlfn.QUARTILE.INC","_xlfn.QUERYSTRING","_xlfn.RANK.AVG","_xlfn.RANK.EQ","_xlfn.RRI","_xlfn.SEC","_xlfn.SECH","_xlfn.SHEET","_xlfn.SHEETS","_xlfn.SKEW.P","_xlfn.STDEV.P","_xlfn.STDEV.S","_xlfn.SUMIFS","_xlfn.T.DIST","_xlfn.T.DIST.2T","_xlfn.T.DIST.RT","_xlfn.T.INV","_xlfn.T.INV.2T","_xlfn.T.TEST","_xlfn.UNICHAR","_xlfn.UNICODE","_xlfn.VAR.P","_xlfn.VAR.S","_xlfn.WEBSERVICE","_xlfn.WEIBULL.DIST","_xlfn.WORKDAY.INTL","_xlfn.XOR","_xlfn.Z.TEST","cellregex","rowregex","isregex","match_v","match_f","sdata","guess","cells","cref","tagr","tagc","do_format","marr","marrlen","xlen","xmlns:r","parse_BrtWsDim","parse_BrtMergeCell",333,387,389,401,403,404,405,406,407,408,409,410,411,418,419,426,427,428,429,457,479,483,484,486,487,488,490,492,496,497,498,499,500,501,502,503,504,505,506,507,508,512,513,514,515,516,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,550,551,552,553,554,555,556,557,558,559,560,561,562,564,565,566,569,570,572,573,574,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,648,649,650,651,652,654,655,656,657,658,659,660,661,662,663,664,665,666,668,669,671,672,674,675,676,677,678,679,680,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1061,1062,1063,1066,1067,1068,1069,1070,1071,1072,1073,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1177,1178,1180,1181,1182,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2060,2067,2068,2069,2070,2071,2072,2073,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,402,1212,2059,2061,2062,2063,2064,2066,2137,2138,2146,2147,2148,2149,2150,2151,2152,2154,2155,2156,2161,2162,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2211,2212,2213,2214,2215,4097,4098,4099,4102,4103,4105,4106,4107,4108,4109,4116,4117,4118,4119,4120,4121,4122,4123,4124,4125,4126,4127,4128,4129,4130,4132,4133,4134,4135,4146,4147,4148,4149,4154,4156,4157,4158,4159,4160,4161,4163,4164,4165,4166,4168,4170,4171,4174,4175,4176,4177,4187,4188,4189,4191,4192,4193,4194,4195,4196,4197,4198,4199,4200,2157,2163,2177,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,"get_formulae","make_csv","make_json","make_formulae","XmlNode","tagName","attributes","children","_attributes","_children","_prefix","createElement","arguments","append","node","prefix","attr","APOS","QUOTE","ESCAPED_QUOTE","escapeAttributeValue","att_value","customNumFmtId","fmt_table","_hashIndex","_listIndex","initialize","$fonts","$fills","$borders","$numFmts","$cellStyleXfs","$xf","$cellXfs","$cellStyles","$dxfs","$tableStyles","$styles","defaultStyle","defaultCellStyle","gray125Style","JSON","stringify","addStyles","hashKey","_addXf","self","_duckTypeStyle","patternFill","_getStyleCSS","css","_addFont","_addFill","_addBorder","_addNumFmt","$alignment","readingOrder","$font","numFmtIdx","$numFmt","$patternFill","$fgColor","$bgColor","$fill","_getSubBorder","direction","spec","$direction","$color","$border","directions","readFile","writeFile","kMaxLength","TYPED_ARRAY_SUPPORT","arg","parent","fromNumber","fromString","fromObject","that","allocate","checked","string","byteLength","object","fromBuffer","fromArray","TypeError","buffer","fromTypedArray","fromArrayBuffer","fromArrayLike","fromJsonObject","copy","array","_augment","_isBuffer","fromPool","poolSize","rootParent","RangeError","SlowBuffer","subject","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","binarySlice","base64Slice","utf16leSlice","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","binaryWrite","base64Write","ucs2Write","utf16leToBytes","fromByteArray","decodeUtf8Char","toHex","checkOffset","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","ieee754","writeDouble","base64clean","stringtrim","INVALID_BASE64_RE","units","codePoint","leadSurrogate","byteArray","hi","lo","toByteArray","src","dst","decodeURIComponent","err","INSPECT_MAX_BYTES","Bar","foo","constructor","subarray","compare","isEncoding","list","item","equals","inspect","byteOffset","arrayIndexOf","foundIndex","get","readUInt8","set","writeUInt8","isFinite","swap","toJSON","_arr","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt16LE","readUInt16BE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt16BE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleBE","targetStart","_set","toArrayBuffer","BP","toLocaleString","lookup","elt","code","PLUS","PLUS_URL_SAFE","SLASH","SLASH_URL_SAFE","NUMBER","UPPER","LOWER","b64ToByteArray","b64","placeHolders","Arr","uint8ToBase64","uint8","tripletToBase64","temp","extraBytes","output","mLen","nBytes","eLen","nBits","LN2","JSZip","clone","newObj","support","compressions","_keyStr","chr2","chr3","enc1","enc2","enc3","enc4","crc32","signature","CompressedObject","nodeBuffer","StringWriter","Uint8ArrayWriter","getRawData","binary","getTypeOf","getBinaryData","result","nodebuffer","dataToString","asUTF8","utf8decode","transformTo","utf8encode","ZipObject","unixPermissions","dosPermissions","_initialMetadata","asText","asUint8Array","asArrayBuffer","decToHex","extend","prepareFileAttrs","compression","fileAdd","dataType","forceTrailingSlash","createFolders","parentFolder","folderAdd","optimizedBinaryString","string2binary","lastSlash","lastIndexOf","generateCompressedObjectFrom","compressionOptions","uncompressedSize","compressedContent","compressionMethod","magic","getCompressedContent","compress","compressInputType","compressedSize","generateUnixExternalFileAttr","isDir","generateDosExternalFileAttr","generateZipParts","compressedObject","platform","dosTime","dosDate","utfEncodedFileName","utfEncodedComment","useUTF8ForFileName","useUTF8ForComment","extraFields","unicodePathExtraField","unicodeCommentExtraField","extFileAttr","versionMadeBy","getHours","getMinutes","getSeconds","fileRecord","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","search","relativePath","fileClone","isRegExp","regexp","test","folder","newFolder","remove","kids","mimeType","checkSupport","writer","zipData","localDirLength","centralDirLength","compressionName","zipPart","dirEnd","CENTRAL_DIRECTORY_END","typeName","arrayBuffer2Blob","arraybuffer","uint8array","Builder","window","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","builder","getBlob","identity","stringToArrayLike","arrayLikeToString","chunk","canUseApply","resultStr","arrayLikeToArrayLike","arrayFrom","arrayTo","applyFromCharCode","transform","outputType","inputType","supported","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","findCompression","method","STORE","uncompress","uncompressInputType","DEFLATE","USE_TYPEDARRAY","Uint16Array","Uint32Array","pako","deflateRaw","level","inflateRaw","assign","deflate","inflate","constants","TYPED_OK","Int32Array","sources","source","shrinkBuf","fnTyped","arraySet","dest","src_offs","dest_offs","flattenChunks","chunks","fnUntyped","setTyped","on","Buf8","Buf16","Buf32","deflator","Deflate","gzip","zlib_deflate","strings","zstream","Z_NO_FLUSH","Z_FINISH","Z_OK","Z_STREAM_END","Z_SYNC_FLUSH","Z_DEFAULT_COMPRESSION","Z_DEFAULT_STRATEGY","Z_DEFLATED","chunkSize","windowBits","memLevel","strategy","opt","ended","strm","avail_out","status","deflateInit2","deflateSetHeader","mode","_mode","string2buf","next_in","avail_in","next_out","onEnd","onData","buf2binstring","deflateEnd","errorCode","rank","zero","flush_pending","pending","pending_buf","pending_out","total_out","flush_block_only","last","trees","_tr_flush_block","block_start","strstart","put_byte","putShortMSB","read_buf","wrap","adler","adler32","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","w_size","MIN_LOOKAHEAD","_win","wmask","w_mask","prev","strend","MAX_MATCH","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","hash_size","head","insert","MIN_MATCH","ins_h","hash_shift","hash_mask","deflate_stored","flush","max_block_size","pending_buf_size","BS_NEED_MORE","max_start","BS_FINISH_STARTED","BS_FINISH_DONE","deflate_fast","hash_head","bflush","match_length","_tr_tally","max_lazy_match","last_lit","BS_BLOCK_DONE","deflate_slow","max_insert","prev_match","Z_FILTERED","match_available","deflate_rle","deflate_huff","lm_init","configuration_table","max_lazy","good_length","nice_length","max_chain","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","HEAP_SIZE","dyn_dtree","D_CODES","bl_tree","BL_CODES","l_desc","d_desc","bl_desc","bl_count","MAX_BITS","heap","L_CODES","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","bi_buf","bi_valid","deflateResetKeep","data_type","Z_UNKNOWN","INIT_STATE","BUSY_STATE","_tr_init","Z_STREAM_ERROR","deflateReset","MAX_MEM_LEVEL","Z_FIXED","deflateInit","MAX_WBITS","DEF_MEM_LEVEL","old_flush","beg","Z_BLOCK","FINISH_STATE","Z_BUF_ERROR","hcrc","Z_HUFFMAN_ONLY","EXTRA_STATE","OS_CODE","level_flags","PRESET_DICT","NAME_STATE","COMMENT_STATE","HCRC_STATE","bstate","Z_RLE","Z_PARTIAL_FLUSH","_tr_align","_tr_stored_block","Z_FULL_FLUSH","Z_DATA_ERROR","LENGTH_CODES","LITERALS","Config","deflateInfo","d_code","dist","_dist_code","put_short","send_bits","Buf_size","send_code","tree","bi_reverse","bi_flush","gen_bitlen","desc","xbits","dyn_tree","max_code","stree","stat_desc","static_tree","has_stree","extra_bits","extra_base","max_length","overflow","gen_codes","next_code","tr_static_init","base_length","extra_lbits","_length_code","base_dist","extra_dbits","static_ltree","static_dtree","static_l_desc","StaticTreeDesc","static_d_desc","static_bl_desc","extra_blbits","MAX_BL_BITS","init_block","END_BLOCK","bi_windup","copy_block","smaller","_n2","_m2","pqdownheap","compress_block","ltree","dtree","lc","lx","build_tree","elems","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","build_bl_tree","max_blindex","bl_order","send_all_trees","lcodes","dcodes","blcodes","detect_data_type","black_mask","Z_BINARY","Z_TEXT","static_init_done","TreeDesc","stored_len","STORED_BLOCK","STATIC_TREES","opt_lenb","static_lenb","DYN_TREES","DIST_CODE_LEN","s1","s2","makeTable","crcTable","0","-1","-2","-3","-4","-5","-6","STR_APPLY_UIA_OK","STR_APPLY_OK","__","_utf8len","m_pos","str_len","buf_len","binstring2buf","buf2string","c_len","utf16buf","utf8border","ZStream","inflator","Inflate","zlib_inflate","gzheader","inflateInit2","inflateGetHeader","next_out_utf8","tail","utf8str","inflateEnd","ungzip","ZSWAP32","InflateState","havedict","dmax","check","total","wbits","wsize","whave","wnext","hold","lencode","distcode","lenbits","distbits","ncode","nlen","ndist","have","work","lendyn","distdyn","sane","back","was","inflateResetKeep","HEAD","ENOUGH_LENS","ENOUGH_DISTS","inflateReset","inflateReset2","inflateInit","DEF_WBITS","fixedtables","virgin","sym","lenfix","distfix","inflate_table","LENS","DISTS","updatewindow","put","_in","_out","from","from_source","here_bits","here_op","here_val","last_bits","last_op","last_val","here","hbuf","order","TYPE","TYPEDO","inf_leave","FLAGS","done","BAD","DICTID","TIME","OS","xflags","EXLEN","extra_len","EXTRA","NAME","COMMENT","HCRC","DICT","Z_NEED_DICT","Z_TREES","CHECK","STORED","LEN_","TABLE","COPY_","COPY","LENLENS","CODES","CODELENS","LEN","inflate_fast","LIT","LENEXT","DIST","DISTEXT","MATCH","LENGTH","DONE","MEM","Z_MEM_ERROR","SYNC","inflateInfo","lcode","dcode","lmask","dmask","op","dolen","dodist","MAXBITS","lbase","lext","dbase","dext","lens_index","codes","table_index","incr","low","mask","curr","drop","used","huff","base_index","offs","extra_index","Z_ERRNO","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","GZheader","iTop","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","DATA_DESCRIPTOR","nextBoundary","ZipEntries","zipEntries","fileName","decompressed","fileComment","zipComment","loadOptions","StringReader","NodeBufferReader","Uint8ArrayReader","sig","ZipEntry","jszipProto","checkSignature","expectedSignature","reader","readString","readBlockEndOfCentral","diskNumber","readInt","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","readBlockZip64EndOfCentral","zip64EndOfCentralSize","versionNeeded","zip64ExtensibleData","extraFieldId","extraFieldLength","extraFieldValue","extraDataSize","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","setIndex","localHeaderOffset","readLocalPart","handleUTF8","processAttributes","readCentralDir","zip64","readCentralPart","readEndOfCentral","lastIndexOfSignature","isGarbage","prepareReader","DataReader","byteAt","readData","checkIndex","newIndex","skip","readDate","dostime","sig0","sig1","sig2","sig3","MADE_BY_DOS","MADE_BY_UNIX","isEncrypted","bitFlag","useUTF8","prepareCompressedContent","previousIndex","compressedFileData","prepareContent","uncompressedFileData","localExtraFieldsLength","fileNameLength","checkCRC32","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","readExtraFields","parseZIP64ExtraField","madeBy","extraReader","upath","findExtraFieldUnicodePath","ucomment","findExtraFieldUnicodeComment","upathField","ucommentField","string2Uint8Array","uint8Array2String","string2Blob","each","createHmac","randomBytes","callback","getHashes","pbkdf2","pbkdf2Sync","global","msCrypto","getRandomValues","toConstructor","fn","buffers","rmd160","alg","Alg","Hash","sha1","sha256","sha512","blockSize","finalSize","_block","_finalSize","_blockSize","_len","_s","init","ch","_update","_hash","inherits","Sha1","POOL","_w","_h","sha1_ft","sha1_kt","add","rol","E","_a","_b","_c","_d","_e","_POOL","process","ctx","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","arrayToHash","recurseTimes","isFunction","isString","primitive","formatPrimitive","visibleKeys","getOwnPropertyNames","isError","formatError","isDate","braces","toUTCString","formatArray","formatProperty","reduceToSingleString","simple","isNumber","isNull","getOwnPropertyDescriptor","numLinesEst","reduce","ar","isNullOrUndefined","isSymbol","re","isObject","objectToString","isPrimitive","timestamp","prop","formatRegExp","_","deprecate","deprecated","warned","throwDeprecation","traceDeprecation","trace","noDeprecation","debugEnviron","debugs","debuglog","env","NODE_DEBUG","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","origin","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","fun","noop","nextTick","title","browser","argv","versions","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","create","ctor","superCtor","super_","writable","configurable","TempCtor","Sha256","Ch","Maj","Sigma0256","Sigma1256","Gamma0256","Gamma1256","_f","_g","T1","T2","Sha512","Xl","_al","_bl","_cl","_dl","_el","_fl","_gl","_hl","al","bl","dl","gl","hl","Wi","Wil","xl","gamma0","gamma0l","gamma1","gamma1l","Wi7","Wi7l","Wi16","Wi16l","maj","majl","sigma0h","sigma0l","sigma1h","sigma1l","Ki","Kil","chl","t1l","t1","t2l","t2","writeInt64BE","core_md5","olda","oldb","oldc","oldd","md5_ff","md5_gg","md5_hh","md5_ii","safe_add","md5_cmn","bit_rol","lsw","msw","helpers","toArray","bigEndian","intSize","zeroBuffer","toBuffer","hashSize","chrsz","f4","f5","rotl","ripemd160","message","bytesToWords","nBitsLeft","nBitsTotal","processBlock","H_i","digestbytes","wordsToBytes","zl","zr","sr","offset_i","M_offset_i","br","cr","dr","er","Hmac","_opad","opad","_alg","blocksize","_key","ipad","_ipad","pbkdf2Export","exported","salt","iterations","keylen","hLen","DK","block1","U","destPos","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","ranges","CellStyles","getSheet","getSheetRows","getRange","getColumnProperties","setCell","rowIdx","colIdx","setColWidthChars","colId","cps","setColWidthPixels","getCell","_finalizeSheet","cell_ref","mapArrayBufferViews","ary","BlobBuilderConstructor","bb","BlobConstructor","blobSupported","blobSupportsArrayBufferView","blobBuilderSupported","__WEBPACK_AMD_DEFINE_ARRAY__","navigator","msSaveOrOpenBlob","bind","userAgent","doc","document","get_URL","URL","webkitURL","save_link","createElementNS","can_use_save_link","externalHost","webkit_req_fs","webkitRequestFileSystem","req_fs","requestFileSystem","mozRequestFileSystem","throw_outside","ex","setImmediate","force_saveable_type","fs_min_size","deletion_queue","process_deletion_queue","revokeObjectURL","dispatch","filesaver","event_types","event","listener","FileSaver","object_url","target_view","blob_changed","get_object_url","createObjectURL","dispatch_all","fs_error","FileReader","readAsDataURL","onloadend","frame","appendChild","readyState","savedAs","SAVEDASUNKNOWN","open","SAVEDASBLOB","href","abortable","create_if_not_found","exclusive","INIT","download","createEvent","initMouseEvent","dispatchEvent","chrome","webkitSlice","TEMPORARY","getDirectory","save","getFile","createWriter","onwriteend","toURL","onerror","ABORT_ERR","abort","FAILED","WRITING","NOT_FOUND_ERR","FS_proto","SAVEDASURI","onwritestart","onprogress","onwrite","onabort","addEventListener","unload","removeEventListener","Meteor","webpackPolyfill","paths","__webpack_amd_options__"],"mappings":"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6BACA,2BACA,wBACA,4BACA,8BACA,oBACA,sBACA,uBACA,4BACA,2BACA,gBACA,mCACA,gCACA,qBACA,sBACA,0BACA,sBACA,iBACA,gBACA,kBACA,2BACA,wBACA,qBACA,0BACA,gBACA,uBACA,oBACA,qBACA,oBACA,uBACA,oBACA,kBACA,iBACA,gBACA,0BACA,2BACA,qCACA,mBACA,wBACA,+BACA,SAAA6C,GAAA,EACK,KAGL,8BAAA7C,EAAA,IACA,sBACA,mBACA,kBACA,SAAA6C,GAAA,EACK,KAGL,+BAAA7C,EAAA,IACA,oBACA,oBACA,kBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,sBACA,wBACA,qBACA,2BACA,4BACA,6BACA,6BACA,iCACA,+BACA,2BACA,sBACA,sBACA,uBACA,0BACA,6BACA,8BACA,gCACA,sBACA,2BACA,2BACA,2BACA,0BACA,qBACA,kCACA,4BACA,0BACA,wBACA,0BACA,qBACA,sBACA,2BACA,iBACA,wBACA,sBACA,sBACA,wBACA,4BACA,4BACA,4BACA,4BACA,kCACA,6BACA,0BACA,0BACA,qCACA,0BACA,iCACA,+BACA,wCACA,0BACA,8BACA,6BACA,2BACA,gCACA,0BACA,gCACA,uBACA,0BACA,sBACA,4BACA,SAAA6C,GAAA,EACK,KAGL,0CAAA7C,EAAA,IACA,gCACA,sCACA,6BACA,qBACA,uBACA,wBACA,uBACA,mCACA,6BACA,qBACA,sBACA,qBACA,sBACA,uBACA,wBACA,wBACA,uBACA,6BACA,iBACA,qBACA,qBACA,uBACA,mCACA,qBACA,sBACA,0BACA,uBACA,gCACA,mBACA,qBACA,sBACA,0BACA,qBACA,8BACA,2BACA,wBACA,2BACA,wBACA,wBACA,4BACA,+BACA,8BACA,iCACA,kCACA,wBACA,SAAA6C,GAAA,EACK,KAGL,yBAAA7C,EAAA,IACA,qBACA,qBACA,sBACA,qBACA,qBACA,mBACA,mBACA,SAAA6C,GAAA,EACK,KAGL,yBAAA7C,EAAA,IACA,4BACA,gCACA,0BACA,yBACA,SAAA6C,GAAA,EACK,KAGL,yBAAA7C,EAAA,IACA,cACA,2BACA,8BACA,wBACA,sBACA,+BACA,2BACA,sBACA,uBACA,uBACA,wBACA,wBACA,qBACA,mBACA,uBACA,2BACA,+BACA,+BACA,mBACA,mBACA,oBACA,8BACA,iCACA,2BACA,sBACA,uBACA,gBACA,kBACA,2BACA,4BACA,+BACA,SAAA6C,GAAA,EACK,KAGL,eAEA,4BAEA,4BAAA7C,EAAA,IACA,iBACA,iBACA,gBACA,gBACA,iBACA,uBACA,kBACA,0BACA,kBACA,uBACA,yBACA,uBACA,0BACA,yBACA,uBACA,sBACA,sBACA,sBACA,sBACA,qBACA,mBACA,mBACA,mBACA,SAAA6C,GAAA,EACK,KAGL,8CAAA7C,EAAA,IACA,eACA,kBACA,kBACA,kBACA,kBACA,oBACA,qBACA,sBACA,wBACA,0BAEA,cACA,cACA,kBACA,eACA,UACA,gBACA,mBAEA,gBACA,SAAA6C,GAAA,EACK,KAGL,sBAEA,SAAAA,GAAA,EAEA,GAAAA,EAAA,KAEA,KAAAtW,IAAA5xB,OAAA,gCAAAqlC,EAAA,OAAAzT,EAAApqB,KAAA,IACA,iCAAAoqB,IAAA5xB,OAAA,OACA,UAAAqlC,EAAA,GAAAvhC,OAAA,SACA,OAAAuhC,EAAA,GAAAF,GAAAC,EAAAC,EAAAjxB,EAAA1G,EAAAvJ,MAAAmjC,EAAAjC,EAAAh2B,SACU+E,EAAAixB,EAASiC,EAAAjC,EAAAh2B,MAAAg2B,EAAA,GAAArlC,OACnB,OAEA,GAAAsL,EAAAoG,IAAA,0BAAA2zB,EAAA,OAAAzT,EAAApqB,KAAA,KAEA,GAAA0H,KAMA,OALA5D,GAAA68B,YAAA78B,EAAA88B,YAAAl5B,EAAA2wB,OAAAtvB,GACArB,EAAAkG,WAAA6xB,EACA/3B,EAAA0f,OAAAyZ,YACAn5B,EAAAoH,QACApH,EAAAk2B,YACAl2B,EAGA,QAAAo5B,IAAA1mC,EAAA0J,GAEA,OADAi9B,GAAAj9B,SACAA,EAAAlK,MAAA,UACA,mBAAA0lC,IAAA0B,GAAAC,OAAA7mC,GAAA0J,EACA,4CAAAw7B,IAAAllC,EAAA0J,EACA,mBAAAw7B,IAAAllC,EAAAf,IAAA6nC,IAAAlhC,KAAA,IAAA8D,IAIA,QAAAq9B,IAAA3Y,EAAA1kB,IAGA,QAAAs9B,IAAAlmC,GACA,GAIAjD,GAJA0D,KACAtB,EAAAa,EAAAiX,QAGAzQ,EAAA,EAOA,QANAzJ,EAAA8J,GAAA1H,EAAAqH,GACAA,GAAA,EAAAa,GAAAlI,EAAAqH,GACA/F,EAAA0lC,SAAAppC,EAGAA,EAAAsK,GAAAlI,EAAAqH,GAAyBA,GAAA,EACzBzJ,GACA,YACA,iCAAAyJ,GAAA,CAAyC,MACzC,SACA,GAAAzJ,EAAA,aAAAsF,OAAA,0BAAAtF,EAAA4E,SAAA,IACA6E,IAAAzJ,EAKA,GAFAA,EAAA8J,GAAA1H,EAAAqH,GAAmBA,GAAA,IAAAzJ,EAAAO,OAAA,IAAAP,EAAAO,OAAwCmD,EAAA2lC,UAAArpC,EAE3D,cAAAA,EAAAsK,GAAAlI,EAAAqH,IAAA,MAAA/F,EACA,sCAIA,QAAA4lC,IAAAr9B,EAAAd,EAAA5K,EAAAsL,GACA,GAAApC,GAAAlJ,EACA6L,KACAlE,EAAAiD,EAAAzG,MAAAyG,EAAA1B,EAAA0B,EAAA1B,IACA,IAAAoC,KAAAgT,KAAAhT,EAAAgT,IAAAyL,eAAA,OAAAre,EAAA4N,GACA,0GACA,SACA,OAAA3R,EAAA3H,OAAA,KACAsL,GAAAgT,IAAAyL,eAAApiB,GAEAkE,EAAA5I,KAAA0E,GACAiD,EAAA1B,IAEA,KADA,GAAAgD,GAAA88B,GAAA5/B,GAAAwB,IAAA1B,IACA,MAAAgD,GAAA,aAAAA,EAAAoN,GACApQ,EAAAE,GAAAwB,IAAA1B,EAAA,GACA2C,EAAA5I,KAAA2H,EAAAzG,MAAAyG,EAAA1B,EAAA,EAAA0B,EAAA1B,EAAA,EAAAA,IACA0B,EAAA1B,GAAA,EAAAA,EACAgD,EAAA88B,GAAA5/B,GAAAwB,IAAA1B,GAEA,IAAAuF,GAAAw6B,GAAAp9B,EACAlB,GAAA8D,EAAA,EACA,IAAAy6B,GAAA,CAAYz6B,GAAA9E,OACZ,QAAAjE,GAAA,EAAeA,EAAAmG,EAAA7L,SAAiB0F,EAAO+I,EAAA9E,KAAA1G,KAAAimC,GAAiBA,GAAAr9B,EAAAnG,GAAA1F,MACxD,OAAA0L,GAAAhH,EAAA+J,IAAAzO,OAAAsL,GAGA,QAAA69B,IAAAxpC,EAAA2L,EAAAlI,GACA,GAAAzD,EAAAypC,GACA,IACA,GAAAhzB,GAAAzW,EAAAypC,GAAA/nB,MAAA,CACA,OAAA1hB,EAAAuH,EAAmBvH,EAAAmJ,EAAAnJ,EAAAmJ,GAAAwvB,GAAA34B,EAAAwD,GACnB,IAAAiT,EACA,MAAAzW,EAAAuH,GACA,EAAAvH,EAAAwD,KAAAxD,EAAAwD,EAAAxD,EAAAmJ,EAAA8lB,GAAA6N,aAAA98B,EAAAwD,GACAxD,EAAAmJ,EAAA8lB,GAAA+N,aAAAh9B,EAAAwD,GAEAxD,EAAAmJ,EAAA8lB,GAAAiO,SAAAl9B,EAAAwD,GAEAxD,EAAAmJ,EAAA8lB,GAAAkO,OAAA1mB,EAAAzW,EAAAwD,GAAoCC,aAAA,IACpCkI,EAAAyxB,SAAAp9B,EAAA2F,EAAAspB,GAAAC,OAAAzY,IACE,MAAAlR,GAAW,GAAAoG,EAAAoG,IAAA,KAAAxM,IAGb,QAAAmkC,IAAAl/B,EAAAoS,EAAArV,GACA,OAAS/D,EAAAgH,EAAAoS,OAAArV,KAIT,QAAAoiC,IAAA1+B,EAAA2+B,GACA,GAUAC,GAAAC,EAAA7jC,EAAA8jC,EAAAC,EAAAC,EAGAC,EACAC,EAdA9Z,GAAW1kB,SACXu0B,KACA3wB,KACA66B,KAEA58B,KACA68B,EAAA,KACAh4B,KACAi4B,EAAA,GACAC,KAEAC,KACAC,KAGAC,GAAA,EACAC,KACAC,KACAC,EAAA,SAAAC,GACA,SAAAA,EAAAC,GAAAD,GACA,GAAAA,EAAAF,EAAAE,EAAA,IAAAC,GAAAD,GACAC,GAAAD,IAEAE,EAAA,SAAA99B,EAAA+9B,GACA,GAAAC,GAAAD,EAAAxB,GAAAxnC,IACA,IAAAipC,KAAA7oB,YAAA,CACA4oB,EAAA/qC,KACA+qC,EAAA/qC,EAAAmiB,YAAA6oB,EAAA7oB,WACA,IAAA9a,IACAA,EAAAojB,GAAAkgB,EAAAK,EAAA3oB,aAA2C0oB,EAAA/qC,EAAAqtB,SAAmB3C,IAAArjB,KAC9DA,EAAAojB,GAAAkgB,EAAAK,EAAA1oB,aAA2CyoB,EAAA/qC,EAAA+sB,SAAmBrC,IAAArjB,MAE9D4jC,EAAA,SAAAj+B,EAAA+9B,EAAArB,GACAc,IACAd,EAAA/L,YAAAoN,EAAAxB,IAAAwB,EAAAxB,GAAAxnC,MAAA+oC,EAAA99B,EAAA+9B,GACApB,EAAA38B,EACA48B,EAAA5V,GAAAhnB,GACAM,EAAAtN,IACAgN,EAAAI,EAAAE,EAAAtN,EAAAoN,IAAAE,EAAAtN,EAAAoN,EAAAJ,EAAAI,GACAJ,EAAAnN,EAAAyN,EAAAtN,EAAAH,IAAAyN,EAAAtN,EAAAH,EAAAmN,EAAAnN,IAEAyN,EAAAjI,IACA2H,EAAAI,EAAA,EAAAE,EAAAjI,EAAA+H,IAAAE,EAAAjI,EAAA+H,EAAAJ,EAAAI,EAAA,GACAJ,EAAAnN,EAAA,EAAAyN,EAAAjI,EAAAxF,IAAAyN,EAAAjI,EAAAxF,EAAAmN,EAAAnN,EAAA,IAEA6pC,EAAAlU,WAAAmU,EAAAv8B,GAAAs8B,EAAAlU,UAAAgV,GAAA,EACAn7B,EAAAu6B,GAAAmB,IAEAt/B,GACAgT,KAAA,EACAwE,MAAA,EACAgB,UACAuX,QAAA8O,EACA3O,OAAA4O,EACAW,WACAC,SAAA,GACA1vB,KAAA,EACA2vB,SAAA,EACAC,UAAA,EACAC,KAAA,EAEA5B,GAAA3f,WAAAte,EAAAse,SAAA2f,EAAA3f,SACA,IAAAyT,MACA+N,KACA9Q,OACA+Q,EAAA,EAAAC,EAAA,EAAAC,EAAA,CACAjR,GAAAllB,WAAA9J,EAAAwY,OACAwW,EAAAe,QAAA/vB,EAAA+vB,QACAf,EAAAkB,OAAAlwB,EAAAkwB,MACA,IAAAgQ,GAAA,GACAC,EAAA,CAMA,KAHAngC,EAAA2/B,SAAA,KACAvpC,GAAA,MAEAkJ,EAAA1B,EAAA0B,EAAA5K,OAAA,IACA,GAAAH,GAAA+K,EAAA1B,EACAwiC,EAAA9gC,EAAAE,WAAA,EACA,QAAA4gC,GAAA,QAAAF,EAAA,KACA,IAAAxrC,GAAA4K,EAAA1B,IAAA0B,EAAA5K,OAAA,EAAA4K,EAAAE,WAAA,GACAY,EAAAs9B,GAAA0C,EACA,IAAAhgC,KAAAhH,EAAA,CACA,GAAA6kC,EAAApB,YACA,gBAAAqD,GAAA,gBAAA9/B,EAAA4N,EAAA,KAGA,IADAkyB,EAAA9/B,EAAA4N,EACA,IAAA5N,EAAAuB,GAAA,IAAAvB,EAAAuB,EAAA,CACA,GAAAwP,GAAA7R,EAAAE,WAAA,EACA,IADgC9K,GAAA,GAChCsL,EAAAgT,KAAA7B,IAAAivB,EAAA,kBACA,KAAAhgC,EAAAuB,IAAkBrC,EAAA1B,GAAA,GAAclJ,GAAA,IAGhC,GAAAmK,EACAA,GAAA,QAAAuB,EAAA4N,EAAA5N,EAAAhH,EAAAkG,EAAA5K,EAAAsL,GACAy9B,GAAAr9B,EAAAd,EAAA5K,EAAAsL,EACA,IAAA+5B,GAAA35B,EAAA4N,CAEA,QAAAhO,EAAAgQ,MAAA,IAAAhQ,EAAAgQ,KAAA,OAAA+pB,GACA,UAAAA,EAAA,QAGA,OAAAA,GAEA,eAAArV,EAAA1kB,KAAAqgC,SAAAxhC,CAA4C,MAC5C,oBAAA6lB,EAAA1kB,KAAAsgC,cAAA,CAAqD,MACrD,gBAIA,GAHAtgC,EAAAgT,MAAA1T,EAAA1B,EAAA,GACAoC,EAAAgT,IAAAnU,EACAmB,EAAAoG,KAAAC,QAAAC,MAAAzH,IACAo/B,EAAA3f,SAAA,SAAA7kB,OAAA,6BACA,QAAAoF,EAAAoJ,KAAA,SAAAxO,OAAA,gCACA,KAAAoF,EAAA2f,MAAA,SAAA/kB,OAAA,wBACA,MACA,mBAAAuG,EAAA0/B,SAAA7gC,CAA4C,MAC5C,wBACA,gBAEA,QAAAA,IAAA,KACA,QAAAA,MAAA,MACAmB,EAAA2/B,SAAA9gC,EACAzI,GAAAyI,EACA,MACA,eAAAmB,EAAAy/B,QAAA5gC,CAAuC,MACvC,kBAAAmB,EAAA4/B,UAAA/gC,CAA4C,MAC5C,qBACA,kBAAA6lB,EAAA1kB,KAAAugC,WAAA1hC,CAAgD,MAChD,qBACA,gBAAkE,KAClE,mBACA,GAAAA,EAAA,IAAAA,EAAA,gCAAAA,CACK,MACL,iBAAA6lB,EAAA1kB,KAAAwgC,UAAA3hC,CAA8C,MAC9C,iBAAA6lB,EAAA1kB,KAAAygC,UAAA5hC,CAA8C,MAC9C,gBAAA6lB,EAAA1kB,KAAA0gC,SAAA7hC,CAA4C,MAC5C,gBAAA6lB,EAAA1kB,KAAA2gC,SAAA9hC,CAA4C,MAC5C,qBAAA6lB,EAAA1kB,KAAA4gC,cAAA/hC,CAAsD,MACtD,sBAAA6lB,EAAA1kB,KAAA6gC,eAAAhiC,CAAwD,MACxD,mBAAAmB,EAAA8gC,YAAAjiC,CAA+C,MAC/C,qBACA,4BAAA6lB,EAAA1kB,KAAA+gC,SAAAliC,CAAwD,MACxD,mBACA,UAAAmgC,EAAArnC,KAAAkH,EAA6B,MAC7B,mBACA,oBACA,2BACA,kBAEA,eAAAmwB,IAAA+Q,IAAAlhC,GAA4CmhC,EAAA,CAAU,MACtD,kBAAAhR,EAAA+Q,KAAAC,GAAAnhC,CAAmD,MACnD,kBACA,WAAAmwB,EAAA,KAAAiR,GAAAphC,CAA2C,MAC3C,mBAAAmwB,EAAA+Q,GAAA/Q,EAAA+Q,GAAAj5B,OAAAjI,GAAkEmhC,GAAAnhC,EAAAnK,MAAoB,MAEtF,eAAAkP,EAAA,YAAA/E,CAA0C,MAC1C,oBAAAA,GAAAmB,EAAAoG,KAAAC,QAAAC,MAAA,sBAAAzH,EAA0F,MAC1F,wCAEA,mBACA4/B,EAAA5/B,EAAAU,KAAAV,EACAmB,EAAAwY,OAAA7gB,KAAAkH,EAAAtG,KACK,MACL,WACA,KAAA4nC,EAAA,KACAt+B,GAAAjI,IACAgK,EAAA,UAAA/B,EACAA,EAAAjI,EAAA+H,EAAA,GAAAE,EAAAjI,EAAAxF,EAAA,IACAyN,EAAAjI,EAAA+H,IAAmBE,EAAAjI,EAAAxF,IACnBwP,EAAA,QAAA2lB,GAAA1nB,GACAA,EAAAjI,EAAA+H,IAAmBE,EAAAjI,EAAAxF,KAEnB29B,EAAAr9B,OAAA,IAAAkP,EAAA,WAAAmuB,GACA+N,EAAAprC,OAAA,IAAAkP,EAAA,YAAAk8B,IAEA,KAAAnB,EAAAC,EAAAh7B,EAAyC2wB,EAAAoK,GAAA/6B,EACzCA,IACK,MACL,WAKA,GAJA,IAAA5D,EAAAgQ,OACA,OAAAnR,EAAAgU,QAAA7S,EAAAgQ,KAAA,EACA,IAAAnR,EAAAgU,QAAA7S,EAAAgQ,KAAA,EACA,IAAAnR,EAAAgU,UAAA7S,EAAAgQ,KAAA,IACAmwB,IAAA,KACApB,IAAA,EACAn7B,KACA,IAAA5D,EAAAgQ,MACA,KAAA2uB,MAAA,UACA98B,GAAetN,GAAGoN,EAAA,EAAAvN,EAAA,GAAQwF,GAAI+H,EAAA,EAAAvN,EAAA,KAE9BuqC,GAAAF,EAAAlqC,KAAwCgE,KAAA,KAAQA,KAChDw5B,KACA+N,IACK,MACL,6BACAvB,GAAiBttB,KAAApS,EAAAoS,KAAA6sB,GAAAkB,EAAAngC,EAAAoS,MAAApZ,EAAAgH,MAAAjD,EAAA,KACjB2iC,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,GAAcprC,EAAAyK,EAAAzK,EAAAuN,EAAA9C,EAAA8C,GAAiB48B,EAAAN,EAC1B,MACL,eACAM,GAAiBttB,KAAApS,EAAAoS,KAAA6sB,GAAAkB,EAAAngC,EAAAoS,MAAApZ,EAAAgH,MAAAjD,EAAAiD,EAAAjD,GACjB2iC,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,GAAcprC,EAAAyK,EAAAzK,EAAAuN,EAAA9C,EAAA8C,GAAiB48B,EAAAN,EAC1B,MACL,UACAM,GAAiBttB,KAAApS,EAAAoS,KAAA6sB,GAAAkB,EAAAngC,EAAAoS,MAAApZ,EAAAgH,EAAAwX,MAAAza,EAAA,KACjB2iC,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,GAAcprC,EAAAyK,EAAAzK,EAAAuN,EAAA9C,EAAA8C,GAAiB48B,EAAAN,EAC1B,MACL,aACA,OAAA7jC,GAAAyE,EAAAzK,EAAuBgG,GAAAyE,EAAAqX,IAAY9b,EAAA,CACnC,GAAA6W,GAAApS,EAAAuX,MAAAhc,EAAAyE,EAAAzK,GAAA,EACAmqC,IAAiBttB,OAAA6sB,GAAAkB,EAAA/tB,GAAApZ,EAAAgH,EAAAuX,MAAAhc,EAAAyE,EAAAzK,GAAA,GAAAwH,EAAA,KACjB2iC,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,GAAeprC,EAAAgG,EAAAuH,EAAA9C,EAAA8C,GAAa48B,EAAAN,GAEvB,KACL,eACA,OAAAp/B;AACA,aAAA6/B,EAAA7/B,CAAwC,MACxC,qDACA,SACA0/B,GAAmB1mC,EAAAgH,MAAAoS,KAAApS,EAAA0C,KAAA0P,KAAArV,EAAAiD,EAAAyvB,IACnBiQ,EAAAT,GAAAkB,EAAAT,EAAAttB,MACAgtB,EAAA7I,cAAAmJ,EAAAnlC,EAAA,IAAA21B,GAAAlwB,EAAAuvB,QAAAvsB,EAAAhD,EAAA0C,KAAAytB,EAAAhvB,IACAu+B,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,EAAA3gC,EAAA0C,KAAAg9B,EAAAN,GACAS,EAAA7/B,EAEK,KACL,cACA6/B,IACAA,EAAA7/B,MACA0/B,GAAkB1mC,EAAA6mC,EAAA7/B,IAAAoS,KAAAytB,EAAAn9B,KAAA0P,KAAArV,EAAA,KAClB2iC,EAAAT,GAAAkB,EAAAT,EAAAttB,MACAgtB,EAAA7I,cAAAmJ,EAAAnlC,EAAA,IAAA21B,GAAA2P,EAAAtQ,QAAAvsB,EAAA68B,EAAAn9B,KAAAytB,EAAAhvB,IACAu+B,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,EAAAd,EAAAn9B,KAAAg9B,EAAAN,GACAS,EAAA,KAEK,MACL,aACAI,EAAAnnC,KAAAkH,EACK,MACL,eACA,IAAAkgC,EAAA,KAGAF,GAAAtW,GAAAmW,EAAAn9B,OAAA1C,EAAA,EACK,MACL,gBAEA0/B,EAAAR,GAAAr3B,EAAA7H,EAAA+W,MAAAha,EAAAiD,EAAAoS,KAAA,KACAstB,EAAAT,GAAAkB,EAAAT,EAAAttB,MACAstB,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,GAAcprC,EAAAyK,EAAAzK,EAAAuN,EAAA9C,EAAA8C,GAAiB48B,EAAAN,EAC/B,MACA,4BAEAM,EAAAR,GAAAl/B,QAAAoS,KAAA,KACAstB,EAAAT,GAAAkB,EAAAT,EAAAttB,MACAstB,EAAAT,IAAAD,GAAAU,EAAAN,EAAAvZ,EAAA1kB,KAAAqgC,UACAb,GAAcprC,EAAAyK,EAAAzK,EAAAuN,EAAA9C,EAAA8C,GAAiB48B,EAAAN,EAC/B,MACA,kBACA,IAAAkC,IAAAt+B,EAAAhD,EACK,MACL,WACA6H,EAAA7H,CACK,MACL,cACAykB,GAAAI,KAAA7kB,EAAA,GAAAA,EAAA,GACK,MAEL,kBAAAkzB,IAAAjrB,OAAAjI,EAA2D,MAE3D,WAAAihC,EAAAjhC,EAAAgb,IAAA,IAAA7Z,EAAAga,QAAAnb,CAAyD,MACzD,WAAAmB,EAAAga,QAAAgnB,IAAAniC,CAAuC,MAEvC,aACA,IAAAy/B,EAAAz/B,EAAA,GAAAtK,EAAAoN,EAA2B28B,GAAAz/B,EAAA,GAAAjF,EAAA+H,IAAoB28B,EAC/C,IAAAD,EAAAx/B,EAAA,GAAAtK,EAAAH,EAA4BiqC,GAAAx/B,EAAA,GAAAjF,EAAAxF,IAAoBiqC,EAChDz6B,EAAA2kB,IAA2Bn0B,EAAAiqC,EAAA18B,EAAA28B,OAC3B16B,EAAA2kB,IAAyBn0B,EAAAiqC,EAAA18B,EAAA28B,KAAc1gC,EAAAiB,EAAA,GAClC,MACL,oBACA,IAAAy/B,EAAAz/B,EAAA,GAAAtK,EAAAoN,EAA2B28B,GAAAz/B,EAAA,GAAAjF,EAAA+H,IAAoB28B,EAC/C,IAAAD,EAAAx/B,EAAA,GAAAtK,EAAAH,EAA4BiqC,GAAAx/B,EAAA,GAAAjF,EAAAxF,IAAoBiqC,EAChDz6B,EAAA2kB,IAA2Bn0B,EAAAiqC,EAAA18B,EAAA28B,OAC3B16B,EAAA2kB,IAAyBn0B,EAAAiqC,EAAA18B,EAAA28B,KAAc1gC,EAAA83B,QAAA72B,EAAA,GAClC,MAGL,YACA,GAAAmB,EAAAgQ,MAAA,GAAAhQ,EAAAgQ,MAAA,OACA1V,GAAAsJ,EAAA2kB,GAAA1pB,EAAA,IACA,IAAAoiC,GAAAnB,EAAAjhC,EAAA,GACA,KAAAvE,EAAA,KACAA,GAAAlG,IAAAkG,EAAAlG,MACAgqC,GAAavtB,EAAAhS,EAAA,GAAAjD,EAAAqlC,EAAAD,IAAAplC,GACbtB,EAAAlG,EAAAuD,KAAAymC,EACK,MAEL,gBAAAh+B,EAAA4N,GACA,sBACA,aAAAka,GAAA8W,EAAAngC,EAAAoS,MAAApS,EAAAopB,IAAuD,MAEvD,oBACA,mBACA,mBACA,oBACA,oBACA,gBACA,kBACA,wBACA,gBACA,qBACA,oBACA,gBACA,mBACA,qBACA,oBACA,mBACA,iBACA,iBACA,mBACA,kBACA,iBACA,iBACA,iBACA,qBACA,sBACA,iBACA,oCACA,mDACA,kBACA,eAAAuW,EAAA3/B,CAAkC,MAClC,qBACA,0CACA,0CACA,iBACA,kBACA,kBACA,qBACA,eAAAogC,EAAApgC,CAAkC,MAClC,kBAEA,4BACA,uBAGA,sBAGA,kBACA,wBACA,uBACA,8BAGA,uBACA,iBACA,oBACA,mBACA,oBACA,qBACA,iBACA,qBACA,qBACA,mBACA,mBACA,kBACA,kBAGA,oBAGA,iBAGA,sBAGA,wBACA,sBACA,sBAEA,gBACA,gBAEA,WAEK,KACL,gBAEK,KACL,wBAEK,KAGL,kBAEK,KACL,cAEK,KACL,gBAEK,KACL,mBAEK,KAEL,iBACA,yBAEA,0BAGA,0EAGA,0BAGA,+CAGA,kBACA,yBACA,uBAGA,uBACA,mDAGA,uBACA,kBACA,qFAEA,mEACA,wDACA,gBACA,gBAAAuB,EAAA4N,GAEA,UACA,sBACA,gCACA,uBACA,0CACA,gBACA,4GACA,mCACA,0FACA,sCACA,yDACA,kDACA,kDACA,qBACA,gDACA,+BACA,yCACA,8BACA,yCACA,wCACA,oCACA,oBACA,sCAGA,2BACA,iBAGA,uBACA,gBACA,uBAGA,sBACA,uBACA,2BACA,qBACA,4BAGA,kBACA,mBACA,qBAGA,qDACA,mBAGA,uBACA,4CACA,yBACA,2BACA,iBACA,qBAGA,6BACA,uEACA,mBAEA,+BAGA,sEACA,6CACA,oDAEA,wDAGA,yCAGA,yCAGA,wBACA,oBACA,8GAEA,gBAAA5N,EAAA4N,GAEA,yDACA,6DACA,gBACA,YAAAiwB,EAAA73B,IAAA,4BAAAhG,EAAA4N,UAEG1O,GAAA1B,GAAAlJ,EAEH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AAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACA1B,GAAA,KACA7L,GAAA,KACAwN,GAAA,KACAzB,GAAA,KACA0B,GAAA,KACAvN,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAoN,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,GAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACAC,IAAA,KACA9O,MAAA,MAIAp4B,IACA,KACA,QACA,aACA,WACA,YACA,iBACA,eACA,WACA,SACA,WACA,cACA,kBACA,gBACA,YACA,UACA,YACA,eACA,UACA,YAMAyoB,GAAAx6B,IAEA,EACA,SACA,SACA,MACA,IACA,SACA,SACA,MAGA,EACA,SACA,SACA,MACA,IACA,SACA,SACA,MAEA,QACA,MACA,IACA,QACA,QACA,MACA,SACA,QACA,SACA,SACA,SACA,SACA,QACA,SACA,MACA,SAEA,IACA,SACA,SACA,MACA,QACA,QACA,MACA,IACA,MACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,QACA,QACA,SACA,SACA,SACA,SACA,QACA,QACA,MACA,QACA,MACA,QACA,SACA,SACA,QACA,QAGA,SACA,IAQAsB,IAEA43C,6EAAA,YAGAC,sCAAA,OAGAC,sCAAA,OACAC,6EAAA,OAGAC,uCAAA,OACAC,8EAAA,OAGAC,sCAAA,OACAC,0CAAA,OACAC,0CAAA,OACAC,sCAAA,OAGAC,6DAAA,YACAC,sEAAA,YACAC,wEAAA,WAGAC,wEAAA,OAGAC,oCAAA,WACAC,2EAAA,WAGAC,sCAAA,OACAC,6EAAA,OAGAC,qCAAA,aACAC,4EAAA,aAGAC,8EAAA,OA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ACAilD,GAAAjlD,EAEAklD,GAAAllD,EAEAmlD,GAAAnlD,EAGAolD,GAAA52C,GACA62C,GAAAj0C,GACAk0C,GAAAxhD,GACAyhD,GAAA11C,GACA21C,GAAA31C,GACA41C,GAAA3hD,GACA4hD,GAAAl3C,GACAm3C,GAAA91C,GACA+1C,GAAAp3C,GACAq3C,GAAAp2C,GACAq2C,GAAAt3C,GACAu3C,GAAAl2C,GACAm2C,GAAAx3C,GACAy3C,GAAAz3C,GACA03C,GAAAr2C,GACAs2C,GAAA12C,GACA22C,GAAA32C,GACA42C,GAAA52C,GACA62C,GAAA72C,GACA82C,GAAA92C,GACA+2C,GAAA32C,GACA42C,GAAA9B,GACA+B,GAAA72C,GACA82C,GAAAn4C,GACAo4C,GAAAjC,GACAkC,GAAApC,GACAqC,GAAAr3C,GACAs3C,GAAAjjD,GACAkjD,GAAAv3C,GACAw3C,GAAAz4C,GACA04C,GAAAr3C,GACAs3C,GAAA34C,GACA44C,GAAA54C,GACA64C,GAAAx3C,GACAy3C,GAAA94C,GACA+4C,GAAA13C,GACA23C,GAAAh5C,GACAi5C,GAAAj5C,GACAk5C,GAAA5jD,GACA6jD,GAAA73C,GACA83C,GAAAp5C,GACAq5C,GAAA/3C,GACAg4C,GAAA/2C,GACAg3C,GAAAv5C,GACAw5C,GAAAlkD,GACAmkD,GAAAz5C,GACA05C,GAAA15C,GACA25C,GAAA35C,GACA45C,GAAApoD,EAIAqoD,GAAAroD,EACAsoD,GAAAtoD,EACAuoD,GAAAvoD,EACAwoD,GAAAxoD,EACAyoD,GAAAzoD,EACA0oD,GAAA1oD,EACA2oD,GAAA3oD,EACA4oD,GAAA5oD,EACA6oD,GAAA7oD,EACA8oD,GAAA9oD,EACA+oD,GAAA/oD,EACAgpD,GAAAhpD,EACAipD,GAAAjpD,EACAkpD,GAAAlpD,EACAmpD,GAAAnpD,EACAopD,GAAAppD,EACAqpD,GAAArpD,EACAspD,GAAAtpD,EACAupD,GAAAvpD,EACAwpD,GAAAxpD,EACAypD,GAAAzpD,EACA0pD,GAAA1pD,EACA2pD,GAAA3pD,EACA4pD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,GAAAlzD,EACAmzD,GAAAnzD,EACAozD,GAAApzD,EACAqzD,GAAArzD,EACAszD,GAAAtzD,EACAuzD,GAAAvzD,EACAwzD,GAAAxzD,EACAyzD,GAAAzzD,EACA0zD,GAAA1zD,EACA2zD,GAAA3zD,EACA4zD,GAAA5zD,EACA6zD,GAAA7zD,EACA8zD,GAAA9zD,EACA+zD,GAAA/zD,EACAg0D,GAAAh0D,EACAi0D,GAAAj0D,EACAk0D,GAAAl0D,EACAm0D,GAAAn0D,EACAo0D,GAAAp0D,EACAq0D,GAAAr0D,EACAs0D,GAAAt0D,EACAu0D,GAAAv0D,EACAw0D,GAAAx0D,EACAy0D,GAAAz0D,EACA00D,GAAA10D,EACA20D,GAAA30D,EACA40D,GAAA50D,EACA60D,GAAA70D,EACA80D,GAAA90D,EACA+0D,GAAA/0D,EACAg1D,GAAAh1D,EACAi1D,GAAAj1D,EACAk1D,GAAAl1D,EACAm1D,GAAAn1D,EACAo1D,GAAAp1D,EACAq1D,GAAAr1D,EACAs1D,GAAAt1D,EACAu1D,GAAAv1D,EACAw1D,GAAAx1D,EACAy1D,GAAAz1D,EACA01D,GAAA11D,EACA21D,GAAA31D,EACA41D,GAAA51D,EACA61D,GAAA71D,EACA81D,GAAA91D,EACA+1D,GAAA/1D,EACAg2D,GAAAh2D,EACAi2D,GAAAj2D,EACAk2D,GAAAl2D,EACAm2D,GAAAn2D,EACAo2D,GAAAp2D,EACAq2D,GAAAr2D,EACAs2D,GAAAt2D,EACAu2D,GAAAv2D,EACAw2D,GAAAx2D,EACAy2D,GAAAz2D,EACA02D,GAAA12D,EACA22D,GAAA32D,EACA42D,GAAA52D,EACA62D,GAAA72D,EACA82D,GAAA92D,EACA+2D,GAAA/2D,EACAg3D,GAAAh3D,EACAi3D,GAAAj3D,EACAk3D,GAAAl3D,EACAm3D,GAAAn3D,EACAo3D,GAAAp3D,EACAq3D,GAAAr3D,EACAs3D,GAAAt3D,EACAu3D,GAAAv3D,EACAw3D,GAAAx3D,EACAy3D,GAAAz3D,EACA03D,GAAA13D,EACA23D,GAAA33D,EACA43D,GAAA53D,EACA63D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","file":"xlsx.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"xlsx\"] = factory();\n\telse\n\t\troot[\"xlsx\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"xlsx\"] = factory();\n\telse\n\t\troot[\"xlsx\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar XLSX = __webpack_require__(1);\n\tvar Workbook = __webpack_require__(64);\n\tvar Blob = __webpack_require__(65);\n\tvar saveAs = __webpack_require__(66);\n\t\n\tfunction streamToBuffer(s) {\n\t  var buf = new ArrayBuffer(s.length);\n\t  var view = new Uint8Array(buf);\n\t  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n\t  return buf;\n\t}\n\t\n\tfunction gerar(planilha, linhas, merge) {\n\t\n\t  var workbook = Workbook().addRowsToSheet(planilha, linhas).finalize();\n\t\n\t  (merge || []).map(function(merge) {\n\t    workbook.mergeCells(planilha, merge);\n\t  });\n\t\n\t  workbook.finalize();\n\t\n\t  var stream = XLSX.write(workbook, {bookType: 'xlsx', bookSST: true, type: 'binary'});\n\t  return (new Blob([streamToBuffer(stream)], {type: \"application/octet-stream\"}));\n\t}\n\t\n\tvar xlsx = {gerar: gerar, saveAs: saveAs};\n\tmodule.exports = xlsx;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/* xlsx.js (C) 2013-2015 SheetJS -- http://sheetjs.com */\n\t/* vim: set ts=2: */\n\t/*jshint -W041 */\n\t/*jshint funcscope:true, eqnull:true */\n\tvar XLSX = {};\n\t(function make_xlsx(XLSX){\n\tXLSX.version = '0.8.0';\n\tvar current_codepage = 1200, current_cptable;\n\t\n\tfunction reset_cp() { set_cp(1200); }\n\tvar set_cp = function(cp) { current_codepage = cp; };\n\t\n\tfunction char_codes(data) { var o = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }\n\tvar debom_xml = function(data) { return data; };\n\t\n\tvar _getchar = function _gc1(x) { return String.fromCharCode(x); };\n\tif(typeof cptable !== 'undefined') {\n\t\tset_cp = function(cp) { current_codepage = cp; current_cptable = cptable[cp]; };\n\t\tdebom_xml = function(data) {\n\t\t\tif(data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) { return cptable.utils.decode(1200, char_codes(data.substr(2))); }\n\t\t\treturn data;\n\t\t};\n\t\t_getchar = function _gc2(x) {\n\t\t\tif(current_codepage === 1200) return String.fromCharCode(x);\n\t\t\treturn cptable.utils.decode(current_codepage, [x&255,x>>8])[0];\n\t\t};\n\t}\n\tvar Base64 = (function make_b64(){\n\t\tvar map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t\treturn {\n\t\t\tencode: function(input, utf8) {\n\t\t\t\tvar o = \"\";\n\t\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\n\t\t\t\tfor(var i = 0; i < input.length; ) {\n\t\t\t\t\tc1 = input.charCodeAt(i++);\n\t\t\t\t\tc2 = input.charCodeAt(i++);\n\t\t\t\t\tc3 = input.charCodeAt(i++);\n\t\t\t\t\te1 = c1 >> 2;\n\t\t\t\t\te2 = (c1 & 3) << 4 | c2 >> 4;\n\t\t\t\t\te3 = (c2 & 15) << 2 | c3 >> 6;\n\t\t\t\t\te4 = c3 & 63;\n\t\t\t\t\tif (isNaN(c2)) { e3 = e4 = 64; }\n\t\t\t\t\telse if (isNaN(c3)) { e4 = 64; }\n\t\t\t\t\to += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);\n\t\t\t\t}\n\t\t\t\treturn o;\n\t\t\t},\n\t\t\tdecode: function b64_decode(input, utf8) {\n\t\t\t\tvar o = \"\";\n\t\t\t\tvar c1, c2, c3;\n\t\t\t\tvar e1, e2, e3, e4;\n\t\t\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\t\t\t\tfor(var i = 0; i < input.length;) {\n\t\t\t\t\te1 = map.indexOf(input.charAt(i++));\n\t\t\t\t\te2 = map.indexOf(input.charAt(i++));\n\t\t\t\t\te3 = map.indexOf(input.charAt(i++));\n\t\t\t\t\te4 = map.indexOf(input.charAt(i++));\n\t\t\t\t\tc1 = e1 << 2 | e2 >> 4;\n\t\t\t\t\tc2 = (e2 & 15) << 4 | e3 >> 2;\n\t\t\t\t\tc3 = (e3 & 3) << 6 | e4;\n\t\t\t\t\to += String.fromCharCode(c1);\n\t\t\t\t\tif (e3 != 64) { o += String.fromCharCode(c2); }\n\t\t\t\t\tif (e4 != 64) { o += String.fromCharCode(c3); }\n\t\t\t\t}\n\t\t\t\treturn o;\n\t\t\t}\n\t\t};\n\t})();\n\tvar has_buf = (typeof Buffer !== 'undefined');\n\t\n\tfunction new_raw_buf(len) {\n\t\t/* jshint -W056 */\n\t\treturn new (has_buf ? Buffer : Array)(len);\n\t\t/* jshint +W056 */\n\t}\n\t\n\tfunction s2a(s) {\n\t\tif(has_buf) return new Buffer(s, \"binary\");\n\t\treturn s.split(\"\").map(function(x){ return x.charCodeAt(0) & 0xff; });\n\t}\n\t\n\tvar bconcat = function(bufs) { return [].concat.apply([], bufs); };\n\t\n\tvar chr0 = /\\u0000/g, chr1 = /[\\u0001-\\u0006]/;\n\t/* ssf.js (C) 2013-2014 SheetJS -- http://sheetjs.com */\n\t/*jshint -W041 */\n\tvar SSF = {};\n\tvar make_ssf = function make_ssf(SSF){\n\tSSF.version = '0.8.1';\n\tfunction _strrev(x) { var o = \"\", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }\n\tfunction fill(c,l) { var o = \"\"; while(o.length < l) o+=c; return o; }\n\tfunction pad0(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\n\tfunction pad_(v,d){var t=\"\"+v;return t.length>=d?t:fill(' ',d-t.length)+t;}\n\tfunction rpad_(v,d){var t=\"\"+v; return t.length>=d?t:t+fill(' ',d-t.length);}\n\tfunction pad0r1(v,d){var t=\"\"+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}\n\tfunction pad0r2(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\n\tvar p2_32 = Math.pow(2,32);\n\tfunction pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }\n\tfunction isgeneral(s, i) { return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }\n\t/* Options */\n\tvar opts_fmt = [\n\t\t[\"date1904\", 0],\n\t\t[\"output\", \"\"],\n\t\t[\"WTF\", false]\n\t];\n\tfunction fixopts(o){\n\t\tfor(var y = 0; y != opts_fmt.length; ++y) if(o[opts_fmt[y][0]]===undefined) o[opts_fmt[y][0]]=opts_fmt[y][1];\n\t}\n\tSSF.opts = opts_fmt;\n\tvar table_fmt = {\n\t\t0:  'General',\n\t\t1:  '0',\n\t\t2:  '0.00',\n\t\t3:  '#,##0',\n\t\t4:  '#,##0.00',\n\t\t9:  '0%',\n\t\t10: '0.00%',\n\t\t11: '0.00E+00',\n\t\t12: '# ?/?',\n\t\t13: '# ??/??',\n\t\t14: 'm/d/yy',\n\t\t15: 'd-mmm-yy',\n\t\t16: 'd-mmm',\n\t\t17: 'mmm-yy',\n\t\t18: 'h:mm AM/PM',\n\t\t19: 'h:mm:ss AM/PM',\n\t\t20: 'h:mm',\n\t\t21: 'h:mm:ss',\n\t\t22: 'm/d/yy h:mm',\n\t\t37: '#,##0 ;(#,##0)',\n\t\t38: '#,##0 ;[Red](#,##0)',\n\t\t39: '#,##0.00;(#,##0.00)',\n\t\t40: '#,##0.00;[Red](#,##0.00)',\n\t\t45: 'mm:ss',\n\t\t46: '[h]:mm:ss',\n\t\t47: 'mmss.0',\n\t\t48: '##0.0E+0',\n\t\t49: '@',\n\t\t56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"',\n\t\t65535: 'General'\n\t};\n\tvar days = [\n\t\t['Sun', 'Sunday'],\n\t\t['Mon', 'Monday'],\n\t\t['Tue', 'Tuesday'],\n\t\t['Wed', 'Wednesday'],\n\t\t['Thu', 'Thursday'],\n\t\t['Fri', 'Friday'],\n\t\t['Sat', 'Saturday']\n\t];\n\tvar months = [\n\t\t['J', 'Jan', 'January'],\n\t\t['F', 'Feb', 'February'],\n\t\t['M', 'Mar', 'March'],\n\t\t['A', 'Apr', 'April'],\n\t\t['M', 'May', 'May'],\n\t\t['J', 'Jun', 'June'],\n\t\t['J', 'Jul', 'July'],\n\t\t['A', 'Aug', 'August'],\n\t\t['S', 'Sep', 'September'],\n\t\t['O', 'Oct', 'October'],\n\t\t['N', 'Nov', 'November'],\n\t\t['D', 'Dec', 'December']\n\t];\n\tfunction frac(x, D, mixed) {\n\t\tvar sgn = x < 0 ? -1 : 1;\n\t\tvar B = x * sgn;\n\t\tvar P_2 = 0, P_1 = 1, P = 0;\n\t\tvar Q_2 = 1, Q_1 = 0, Q = 0;\n\t\tvar A = Math.floor(B);\n\t\twhile(Q_1 < D) {\n\t\t\tA = Math.floor(B);\n\t\t\tP = A * P_1 + P_2;\n\t\t\tQ = A * Q_1 + Q_2;\n\t\t\tif((B - A) < 0.0000000005) break;\n\t\t\tB = 1 / (B - A);\n\t\t\tP_2 = P_1; P_1 = P;\n\t\t\tQ_2 = Q_1; Q_1 = Q;\n\t\t}\n\t\tif(Q > D) { Q = Q_1; P = P_1; }\n\t\tif(Q > D) { Q = Q_2; P = P_2; }\n\t\tif(!mixed) return [0, sgn * P, Q];\n\t\tif(Q===0) throw \"Unexpected state: \"+P+\" \"+P_1+\" \"+P_2+\" \"+Q+\" \"+Q_1+\" \"+Q_2;\n\t\tvar q = Math.floor(sgn * P/Q);\n\t\treturn [q, sgn*P - q*Q, Q];\n\t}\n\tfunction general_fmt_int(v, opts) { return \"\"+v; }\n\tSSF._general_int = general_fmt_int;\n\tvar general_fmt_num = (function make_general_fmt_num() {\n\tvar gnr1 = /\\.(\\d*[1-9])0+$/, gnr2 = /\\.0*$/, gnr4 = /\\.(\\d*[1-9])0+/, gnr5 = /\\.0*[Ee]/, gnr6 = /(E[+-])(\\d)$/;\n\tfunction gfn2(v) {\n\t\tvar w = (v<0?12:11);\n\t\tvar o = gfn5(v.toFixed(12)); if(o.length <= w) return o;\n\t\to = v.toPrecision(10); if(o.length <= w) return o;\n\t\treturn v.toExponential(5);\n\t}\n\tfunction gfn3(v) {\n\t\tvar o = v.toFixed(11).replace(gnr1,\".$1\");\n\t\tif(o.length > (v<0?12:11)) o = v.toPrecision(6);\n\t\treturn o;\n\t}\n\tfunction gfn4(o) {\n\t\tfor(var i = 0; i != o.length; ++i) if((o.charCodeAt(i) | 0x20) === 101) return o.replace(gnr4,\".$1\").replace(gnr5,\"E\").replace(\"e\",\"E\").replace(gnr6,\"$10$2\");\n\t\treturn o;\n\t}\n\tfunction gfn5(o) {\n\t\t//for(var i = 0; i != o.length; ++i) if(o.charCodeAt(i) === 46) return o.replace(gnr2,\"\").replace(gnr1,\".$1\");\n\t\t//return o;\n\t\treturn o.indexOf(\".\") > -1 ? o.replace(gnr2,\"\").replace(gnr1,\".$1\") : o;\n\t}\n\treturn function general_fmt_num(v, opts) {\n\t\tvar V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;\n\t\tif(V >= -4 && V <= -1) o = v.toPrecision(10+V);\n\t\telse if(Math.abs(V) <= 9) o = gfn2(v);\n\t\telse if(V === 10) o = v.toFixed(10).substr(0,12);\n\t\telse o = gfn3(v);\n\t\treturn gfn5(gfn4(o));\n\t};})();\n\tSSF._general_num = general_fmt_num;\n\tfunction general_fmt(v, opts) {\n\t\tswitch(typeof v) {\n\t\t\tcase 'string': return v;\n\t\t\tcase 'boolean': return v ? \"TRUE\" : \"FALSE\";\n\t\t\tcase 'number': return (v|0) === v ? general_fmt_int(v, opts) : general_fmt_num(v, opts);\n\t\t}\n\t\tthrow new Error(\"unsupported value in General format: \" + v);\n\t}\n\tSSF._general = general_fmt;\n\tfunction fix_hijri(date, o) { return 0; }\n\tfunction parse_date_code(v,opts,b2) {\n\t\tif(v > 2958465 || v < 0) return null;\n\t\tvar date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;\n\t\tvar dout=[];\n\t\tvar out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};\n\t\tif(Math.abs(out.u) < 1e-6) out.u = 0;\n\t\tfixopts(opts != null ? opts : (opts=[]));\n\t\tif(opts.date1904) date += 1462;\n\t\tif(out.u > 0.999) {\n\t\t\tout.u = 0;\n\t\t\tif(++time == 86400) { time = 0; ++date; }\n\t\t}\n\t\tif(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}\n\t\telse if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}\n\t\telse {\n\t\t\tif(date > 60) --date;\n\t\t\t/* 1 = Jan 1 1900 */\n\t\t\tvar d = new Date(1900,0,1);\n\t\t\td.setDate(d.getDate() + date - 1);\n\t\t\tdout = [d.getFullYear(), d.getMonth()+1,d.getDate()];\n\t\t\tdow = d.getDay();\n\t\t\tif(date < 60) dow = (dow + 6) % 7;\n\t\t\tif(b2) dow = fix_hijri(d, dout);\n\t\t}\n\t\tout.y = dout[0]; out.m = dout[1]; out.d = dout[2];\n\t\tout.S = time % 60; time = Math.floor(time / 60);\n\t\tout.M = time % 60; time = Math.floor(time / 60);\n\t\tout.H = time;\n\t\tout.q = dow;\n\t\treturn out;\n\t}\n\tSSF.parse_date_code = parse_date_code;\n\t/*jshint -W086 */\n\tfunction write_date(type, fmt, val, ss0) {\n\t\tvar o=\"\", ss=0, tt=0, y = val.y, out, outl = 0;\n\t\tswitch(type) {\n\t\t\tcase 98: /* 'b' buddhist year */\n\t\t\t\ty = val.y + 543;\n\t\t\t\t/* falls through */\n\t\t\tcase 121: /* 'y' year */\n\t\t\tswitch(fmt.length) {\n\t\t\t\tcase 1: case 2: out = y % 100; outl = 2; break;\n\t\t\t\tdefault: out = y % 10000; outl = 4; break;\n\t\t\t} break;\n\t\t\tcase 109: /* 'm' month */\n\t\t\tswitch(fmt.length) {\n\t\t\t\tcase 1: case 2: out = val.m; outl = fmt.length; break;\n\t\t\t\tcase 3: return months[val.m-1][1];\n\t\t\t\tcase 5: return months[val.m-1][0];\n\t\t\t\tdefault: return months[val.m-1][2];\n\t\t\t} break;\n\t\t\tcase 100: /* 'd' day */\n\t\t\tswitch(fmt.length) {\n\t\t\t\tcase 1: case 2: out = val.d; outl = fmt.length; break;\n\t\t\t\tcase 3: return days[val.q][0];\n\t\t\t\tdefault: return days[val.q][1];\n\t\t\t} break;\n\t\t\tcase 104: /* 'h' 12-hour */\n\t\t\tswitch(fmt.length) {\n\t\t\t\tcase 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;\n\t\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t\t} break;\n\t\t\tcase 72: /* 'H' 24-hour */\n\t\t\tswitch(fmt.length) {\n\t\t\t\tcase 1: case 2: out = val.H; outl = fmt.length; break;\n\t\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t\t} break;\n\t\t\tcase 77: /* 'M' minutes */\n\t\t\tswitch(fmt.length) {\n\t\t\t\tcase 1: case 2: out = val.M; outl = fmt.length; break;\n\t\t\t\tdefault: throw 'bad minute format: ' + fmt;\n\t\t\t} break;\n\t\t\tcase 115: /* 's' seconds */\n\t\t\tif(val.u === 0) switch(fmt) {\n\t\t\t\tcase 's': case 'ss': return pad0(val.S, fmt.length);\n\t\t\t\tcase '.0': case '.00': case '.000':\n\t\t\t}\n\t\t\tswitch(fmt) {\n\t\t\t\tcase 's': case 'ss': case '.0': case '.00': case '.000':\n\t\t\t\t\tif(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;\n\t\t\t\t\telse tt = ss0 === 1 ? 10 : 1;\n\t\t\t\t\tss = Math.round((tt)*(val.S + val.u));\n\t\t\t\t\tif(ss >= 60*tt) ss = 0;\n\t\t\t\t\tif(fmt === 's') return ss === 0 ? \"0\" : \"\"+ss/tt;\n\t\t\t\t\to = pad0(ss,2 + ss0);\n\t\t\t\t\tif(fmt === 'ss') return o.substr(0,2);\n\t\t\t\t\treturn \".\" + o.substr(2,fmt.length-1);\n\t\t\t\tdefault: throw 'bad second format: ' + fmt;\n\t\t\t}\n\t\t\tcase 90: /* 'Z' absolute time */\n\t\t\tswitch(fmt) {\n\t\t\t\tcase '[h]': case '[hh]': out = val.D*24+val.H; break;\n\t\t\t\tcase '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;\n\t\t\t\tcase '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;\n\t\t\t\tdefault: throw 'bad abstime format: ' + fmt;\n\t\t\t} outl = fmt.length === 3 ? 1 : 2; break;\n\t\t\tcase 101: /* 'e' era */\n\t\t\t\tout = y; outl = 1;\n\t\t}\n\t\tif(outl > 0) return pad0(out, outl); else return \"\";\n\t}\n\t/*jshint +W086 */\n\tfunction commaify(s) {\n\t\tif(s.length <= 3) return s;\n\t\tvar j = (s.length % 3), o = s.substr(0,j);\n\t\tfor(; j!=s.length; j+=3) o+=(o.length > 0 ? \",\" : \"\") + s.substr(j,3);\n\t\treturn o;\n\t}\n\tvar write_num = (function make_write_num(){\n\tvar pct1 = /%/g;\n\tfunction write_num_pct(type, fmt, val){\n\t\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\t\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n\t}\n\tfunction write_num_cm(type, fmt, val){\n\t\tvar idx = fmt.length - 1;\n\t\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\t\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n\t}\n\tfunction write_num_exp(fmt, val){\n\t\tvar o;\n\t\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\t\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\t\tvar ee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E)%period;\n\t\t\tif(ee < 0) ee += period;\n\t\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\t\tif(o.indexOf(\"e\") === -1) {\n\t\t\t\tvar fakee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E);\n\t\t\t\tif(o.indexOf(\".\") === -1) o = o[0] + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\t\twhile(o.substr(0,2) === \"0.\") {\n\t\t\t\t\to = o[0] + o.substr(2,period) + \".\" + o.substr(2+period);\n\t\t\t\t\to = o.replace(/^0+([1-9])/,\"$1\").replace(/^0+\\./,\"0.\");\n\t\t\t\t}\n\t\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t\t}\n\t\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t\t} else o = val.toExponential(idx);\n\t\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o[o.length-1];\n\t\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\t\treturn o.replace(\"e\",\"E\");\n\t}\n\tvar frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\n\tfunction write_num_f1(r, aval, sign) {\n\t\tvar den = parseInt(r[4]), rr = Math.round(aval * den), base = Math.floor(rr/den);\n\t\tvar myn = (rr - base*den), myd = den;\n\t\treturn sign + (base === 0 ? \"\" : \"\"+base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + \"/\" + r[3] + pad0(myd,r[4].length));\n\t}\n\tfunction write_num_f2(r, aval, sign) {\n\t\treturn sign + (aval === 0 ? \"\" : \"\"+aval) + fill(\" \", r[1].length + 2 + r[4].length);\n\t}\n\tvar dec1 = /^#*0*\\.(0+)/;\n\tvar closeparen = /\\).*[0#]/;\n\tvar phone = /\\(###\\) ###\\\\?-####/;\n\tfunction hashq(str) {\n\t\tvar o = \"\", cc;\n\t\tfor(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {\n\t\t\tcase 35: break;\n\t\t\tcase 63: o+= \" \"; break;\n\t\t\tcase 48: o+= \"0\"; break;\n\t\t\tdefault: o+= String.fromCharCode(cc);\n\t\t}\n\t\treturn o;\n\t}\n\tfunction rnd(val, d) { var dd = Math.pow(10,d); return \"\"+(Math.round(val * dd)/dd); }\n\tfunction dec(val, d) { return Math.round((val-Math.floor(val))*Math.pow(10,d)); }\n\tfunction flr(val) { if(val < 2147483647 && val > -2147483648) return \"\"+(val >= 0 ? (val|0) : (val-1|0)); return \"\"+Math.floor(val); }\n\tfunction write_num_flt(type, fmt, val) {\n\t\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\t\tif(val >= 0) return write_num_flt('n', ffmt, val);\n\t\t\treturn '(' + write_num_flt('n', ffmt, -val) + ')';\n\t\t}\n\t\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n\t\tif(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);\n\t\tif(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);\n\t\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_flt(type,fmt.substr(fmt[1]==' '?2:1),val);\n\t\tvar o, oo;\n\t\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\t\tif(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);\n\t\tif(fmt.match(/^[#?]+$/)) {\n\t\t\to = pad0r(val,0); if(o === \"0\") o = \"\";\n\t\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t\t}\n\t\tif((r = fmt.match(frac1)) !== null) return write_num_f1(r, aval, sign);\n\t\tif(fmt.match(/^#+0+$/) !== null) return sign + pad0r(aval,fmt.length - fmt.indexOf(\"0\"));\n\t\tif((r = fmt.match(dec1)) !== null) {\n\t\t\to = rnd(val, r[1].length).replace(/^([^\\.]+)$/,\"$1.\"+r[1]).replace(/\\.$/,\".\"+r[1]).replace(/\\.(\\d*)$/,function($$, $1) { return \".\" + $1 + fill(\"0\", r[1].length-$1.length); });\n\t\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t\t}\n\t\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\t\tif((r = fmt.match(/^(0*)\\.(#*)$/)) !== null) {\n\t\t\treturn sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t\t}\n\t\tif((r = fmt.match(/^#,##0(\\.?)$/)) !== null) return sign + commaify(pad0r(aval,0));\n\t\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/)) !== null) {\n\t\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\"+(Math.floor(val))) + \".\" + pad0(dec(val, r[1].length),r[1].length);\n\t\t}\n\t\tif((r = fmt.match(/^#,#*,#0/)) !== null) return write_num_flt(type,fmt.replace(/^#,#*,/,\"\"),val);\n\t\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) !== null) {\n\t\t\to = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\t\tri = 0;\n\t\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o[ri++]:x==='0'?'0':\"\";}));\n\t\t}\n\t\tif(fmt.match(phone) !== null) {\n\t\t\to = write_num_flt(type, \"##########\", val);\n\t\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t\t}\n\t\tvar oa = \"\";\n\t\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\t\tri = Math.min(r[4].length,7);\n\t\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\t\to = \"\" + sign;\n\t\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\t\tif(oa[oa.length-1] == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\t\to += oa + r[2] + \"/\" + r[3];\n\t\t\toa = rpad_(ff[2],ri);\n\t\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\t\to += oa;\n\t\t\treturn o;\n\t\t}\n\t\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t\t}\n\t\tif((r = fmt.match(/^[#0?]+$/)) !== null) {\n\t\t\to = pad0r(val, 0);\n\t\t\tif(fmt.length <= o.length) return o;\n\t\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t\t}\n\t  if((r = fmt.match(/^([#0?]+)\\.([#0]+)$/)) !== null) {\n\t\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\t\tri = o.indexOf(\".\");\n\t\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t\t}\n\t\tif((r = fmt.match(/^00,000\\.([#0]*0)$/)) !== null) {\n\t\t\tri = dec(val, r[1].length);\n\t\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(ri,r[1].length);\n\t\t}\n\t\tswitch(fmt) {\n\t\t\tcase \"#,###\": var x = commaify(pad0r(aval,0)); return x !== \"0\" ? sign + x : \"\";\n\t\t\tdefault:\n\t\t}\n\t\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n\t}\n\tfunction write_num_cm2(type, fmt, val){\n\t\tvar idx = fmt.length - 1;\n\t\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\t\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n\t}\n\tfunction write_num_pct2(type, fmt, val){\n\t\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\t\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n\t}\n\tfunction write_num_exp2(fmt, val){\n\t\tvar o;\n\t\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\t\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\t\tvar ee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E)%period;\n\t\t\tif(ee < 0) ee += period;\n\t\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\t\tif(!o.match(/[Ee]/)) {\n\t\t\t\tvar fakee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E);\n\t\t\t\tif(o.indexOf(\".\") === -1) o = o[0] + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t\t}\n\t\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t\t} else o = val.toExponential(idx);\n\t\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o[o.length-1];\n\t\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\t\treturn o.replace(\"e\",\"E\");\n\t}\n\tfunction write_num_int(type, fmt, val) {\n\t\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\t\tif(val >= 0) return write_num_int('n', ffmt, val);\n\t\t\treturn '(' + write_num_int('n', ffmt, -val) + ')';\n\t\t}\n\t\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n\t\tif(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);\n\t\tif(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);\n\t\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_int(type,fmt.substr(fmt[1]==' '?2:1),val);\n\t\tvar o;\n\t\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\t\tif(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);\n\t\tif(fmt.match(/^[#?]+$/)) {\n\t\t\to = (\"\"+val); if(val === 0) o = \"\";\n\t\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t\t}\n\t\tif((r = fmt.match(frac1)) !== null) return write_num_f2(r, aval, sign);\n\t\tif(fmt.match(/^#+0+$/) !== null) return sign + pad0(aval,fmt.length - fmt.indexOf(\"0\"));\n\t\tif((r = fmt.match(dec1)) !== null) {\n\t\t\to = (\"\"+val).replace(/^([^\\.]+)$/,\"$1.\"+r[1]).replace(/\\.$/,\".\"+r[1]).replace(/\\.(\\d*)$/,function($$, $1) { return \".\" + $1 + fill(\"0\", r[1].length-$1.length); });\n\t\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t\t}\n\t\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\t\tif((r = fmt.match(/^(0*)\\.(#*)$/)) !== null) {\n\t\t\treturn sign + (\"\"+aval).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t\t}\n\t\tif((r = fmt.match(/^#,##0(\\.?)$/)) !== null) return sign + commaify((\"\"+aval));\n\t\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/)) !== null) {\n\t\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify((\"\"+val)) + \".\" + fill('0',r[1].length);\n\t\t}\n\t\tif((r = fmt.match(/^#,#*,#0/)) !== null) return write_num_int(type,fmt.replace(/^#,#*,/,\"\"),val);\n\t\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) !== null) {\n\t\t\to = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\t\tri = 0;\n\t\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o[ri++]:x==='0'?'0':\"\";}));\n\t\t}\n\t\tif(fmt.match(phone) !== null) {\n\t\t\to = write_num_int(type, \"##########\", val);\n\t\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t\t}\n\t\tvar oa = \"\";\n\t\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\t\tri = Math.min(r[4].length,7);\n\t\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\t\to = \"\" + sign;\n\t\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\t\tif(oa[oa.length-1] == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\t\to += oa + r[2] + \"/\" + r[3];\n\t\t\toa = rpad_(ff[2],ri);\n\t\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\t\to += oa;\n\t\t\treturn o;\n\t\t}\n\t\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t\t}\n\t\tif((r = fmt.match(/^[#0?]+$/)) !== null) {\n\t\t\to = \"\" + val;\n\t\t\tif(fmt.length <= o.length) return o;\n\t\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t\t}\n\t\tif((r = fmt.match(/^([#0]+)\\.([#0]+)$/)) !== null) {\n\t\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\t\tri = o.indexOf(\".\");\n\t\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t\t}\n\t\tif((r = fmt.match(/^00,000\\.([#0]*0)$/)) !== null) {\n\t\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\"+val).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(0,r[1].length);\n\t\t}\n\t\tswitch(fmt) {\n\t\t\tcase \"#,###\": var x = commaify(\"\"+aval); return x !== \"0\" ? sign + x : \"\";\n\t\t\tdefault:\n\t\t}\n\t\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n\t}\n\treturn function write_num(type, fmt, val) {\n\t\treturn (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n\t};})();\n\tfunction split_fmt(fmt) {\n\t\tvar out = [];\n\t\tvar in_str = false, cc;\n\t\tfor(var i = 0, j = 0; i < fmt.length; ++i) switch((cc=fmt.charCodeAt(i))) {\n\t\t\tcase 34: /* '\"' */\n\t\t\t\tin_str = !in_str; break;\n\t\t\tcase 95: case 42: case 92: /* '_' '*' '\\\\' */\n\t\t\t\t++i; break;\n\t\t\tcase 59: /* ';' */\n\t\t\t\tout[out.length] = fmt.substr(j,i-j);\n\t\t\t\tj = i+1;\n\t\t}\n\t\tout[out.length] = fmt.substr(j);\n\t\tif(in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n\t\treturn out;\n\t}\n\tSSF._split = split_fmt;\n\tvar abstime = /\\[[HhMmSs]*\\]/;\n\tfunction eval_fmt(fmt, v, opts, flen) {\n\t\tvar out = [], o = \"\", i = 0, c = \"\", lst='t', q, dt, j, cc;\n\t\tvar hr='H';\n\t\t/* Tokenize */\n\t\twhile(i < fmt.length) {\n\t\t\tswitch((c = fmt[i])) {\n\t\t\t\tcase 'G': /* General */\n\t\t\t\t\tif(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);\n\t\t\t\t\tout[out.length] = {t:'G', v:'General'}; i+=7; break;\n\t\t\t\tcase '\"': /* Literal text */\n\t\t\t\t\tfor(o=\"\";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);\n\t\t\t\t\tout[out.length] = {t:'t', v:o}; ++i; break;\n\t\t\t\tcase '\\\\': var w = fmt[++i], t = (w === \"(\" || w === \")\") ? w : 't';\n\t\t\t\t\tout[out.length] = {t:t, v:w}; ++i; break;\n\t\t\t\tcase '_': out[out.length] = {t:'t', v:\" \"}; i+=2; break;\n\t\t\t\tcase '@': /* Text Placeholder */\n\t\t\t\t\tout[out.length] = {t:'T', v:v}; ++i; break;\n\t\t\t\tcase 'B': case 'b':\n\t\t\t\t\tif(fmt[i+1] === \"1\" || fmt[i+1] === \"2\") {\n\t          if(dt==null) { dt=parse_date_code(v, opts, fmt[i+1] === \"2\"); if(dt==null) return \"\"; }\n\t\t\t\t\t\tout[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;\n\t\t\t\t\t}\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':\n\t\t\t\t\tc = c.toLowerCase();\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':\n\t\t\t\t\tif(v < 0) return \"\";\n\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\t\to = c; while(++i<fmt.length && fmt[i].toLowerCase() === c) o+=c;\n\t\t\t\t\tif(c === 'm' && lst.toLowerCase() === 'h') c = 'M'; /* m = minute */\n\t\t\t\t\tif(c === 'h') c = hr;\n\t\t\t\t\tout[out.length] = {t:c, v:o}; lst = c; break;\n\t\t\t\tcase 'A':\n\t\t\t\t\tq={t:c, v:\"A\"};\n\t\t\t\t\tif(dt==null) dt=parse_date_code(v, opts);\n\t        if(fmt.substr(i, 3) === \"A/P\") { if(dt!=null) q.v = dt.H >= 12 ? \"P\" : \"A\"; q.t = 'T'; hr='h';i+=3;}\n\t        else if(fmt.substr(i,5) === \"AM/PM\") { if(dt!=null) q.v = dt.H >= 12 ? \"PM\" : \"AM\"; q.t = 'T'; i+=5; hr='h'; }\n\t\t\t\t\telse { q.t = \"t\"; ++i; }\n\t\t\t\t\tif(dt==null && q.t === 'T') return \"\";\n\t\t\t\t\tout[out.length] = q; lst = c; break;\n\t\t\t\tcase '[':\n\t\t\t\t\to = c;\n\t\t\t\t\twhile(fmt[i++] !== ']' && i < fmt.length) o += fmt[i];\n\t\t\t\t\tif(o.substr(-1) !== ']') throw 'unterminated \"[\" block: |' + o + '|';\n\t\t\t\t\tif(o.match(abstime)) {\n\t\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\t\t\tout[out.length] = {t:'Z', v:o.toLowerCase()};\n\t\t\t\t\t} else { o=\"\"; }\n\t\t\t\t\tbreak;\n\t\t\t\t/* Numbers */\n\t\t\t\tcase '.':\n\t\t\t\t\tif(dt != null) {\n\t\t\t\t\t\to = c; while((c=fmt[++i]) === \"0\") o += c;\n\t\t\t\t\t\tout[out.length] = {t:'s', v:o}; break;\n\t\t\t\t\t}\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '0': case '#':\n\t\t\t\t\to = c; while(\"0#?.,E+-%\".indexOf(c=fmt[++i]) > -1 || c=='\\\\' && fmt[i+1] == \"-\" && \"0#\".indexOf(fmt[i+2])>-1) o += c;\n\t\t\t\t\tout[out.length] = {t:'n', v:o}; break;\n\t\t\t\tcase '?':\n\t\t\t\t\to = c; while(fmt[++i] === c) o+=c;\n\t\t\t\t\tq={t:c, v:o}; out[out.length] = q; lst = c; break;\n\t\t\t\tcase '*': ++i; if(fmt[i] == ' ' || fmt[i] == '*') ++i; break; // **\n\t\t\t\tcase '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;\n\t\t\t\tcase '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n\t\t\t\t\to = c; while(\"0123456789\".indexOf(fmt[++i]) > -1) o+=fmt[i];\n\t\t\t\t\tout[out.length] = {t:'D', v:o}; break;\n\t\t\t\tcase ' ': out[out.length] = {t:c, v:c}; ++i; break;\n\t\t\t\tdefault:\n\t\t\t\t\tif(\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxz\".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n\t\t\t\t\tout[out.length] = {t:'t', v:c}; ++i; break;\n\t\t\t}\n\t\t}\n\t\tvar bt = 0, ss0 = 0, ssm;\n\t\tfor(i=out.length-1, lst='t'; i >= 0; --i) {\n\t\t\tswitch(out[i].t) {\n\t\t\t\tcase 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;\n\t\t\t\tcase 's':\n\t\t\t\t\tif((ssm=out[i].v.match(/\\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);\n\t\t\t\t\tif(bt < 3) bt = 3;\n\t\t\t\t/* falls through */\n\t\t\t\tcase 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;\n\t\t\t\tcase 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;\n\t\t\t\tcase 'X': if(out[i].v === \"B2\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Z':\n\t\t\t\t\tif(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n\t\t\t\t\tif(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n\t\t\t\t\tif(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n\t\t\t}\n\t\t}\n\t\tswitch(bt) {\n\t\t\tcase 0: break;\n\t\t\tcase 1:\n\t\t\t\tif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\t\tif(dt.M >=  60) { dt.M = 0; ++dt.H; }\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\t\tbreak;\n\t\t}\n\t\t/* replace fields */\n\t\tvar nstr = \"\", jj;\n\t\tfor(i=0; i < out.length; ++i) {\n\t\t\tswitch(out[i].t) {\n\t\t\t\tcase 't': case 'T': case ' ': case 'D': break;\n\t\t\t\tcase 'X': out[i] = undefined; break;\n\t\t\t\tcase 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':\n\t\t\t\t\tout[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n\t\t\t\t\tout[i].t = 't'; break;\n\t\t\t\tcase 'n': case '(': case '?':\n\t\t\t\t\tjj = i+1;\n\t\t\t\t\twhile(out[jj] != null && (\n\t\t\t\t\t\t(c=out[jj].t) === \"?\" || c === \"D\" ||\n\t\t\t\t\t\t(c === \" \" || c === \"t\") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === \"t\" && out[jj+1].v === '/') ||\n\t\t\t\t\t\tout[i].t === '(' && (c === ' ' || c === 'n' || c === ')') ||\n\t\t\t\t\t\tc === 't' && (out[jj].v === '/' || '$€'.indexOf(out[jj].v) > -1 || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?')\n\t\t\t\t\t)) {\n\t\t\t\t\t\tout[i].v += out[jj].v;\n\t\t\t\t\t\tout[jj] = undefined; ++jj;\n\t\t\t\t\t}\n\t\t\t\t\tnstr += out[i].v;\n\t\t\t\t\ti = jj-1; break;\n\t\t\t\tcase 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;\n\t\t\t}\n\t\t}\n\t\tvar vv = \"\", myv, ostr;\n\t\tif(nstr.length > 0) {\n\t\t\tmyv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v); /* '-' */\n\t\t\tostr = write_num(nstr.charCodeAt(0) === 40 ? '(' : 'n', nstr, myv); /* '(' */\n\t\t\tjj=ostr.length-1;\n\t\t\tvar decpt = out.length;\n\t\t\tfor(i=0; i < out.length; ++i) if(out[i] != null && out[i].v.indexOf(\".\") > -1) { decpt = i; break; }\n\t\t\tvar lasti=out.length;\n\t\t\tif(decpt === out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\t\tfor(i=out.length-1; i>= 0;--i) {\n\t\t\t\t\tif(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;\n\t\t\t\t\tif(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }\n\t\t\t\t\telse if(jj < 0) out[i].v = \"\";\n\t\t\t\t\telse { out[i].v = ostr.substr(0, jj+1); jj = -1; }\n\t\t\t\t\tout[i].t = 't';\n\t\t\t\t\tlasti = i;\n\t\t\t\t}\n\t\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t\t}\n\t\t\telse if(decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\t\tjj = ostr.indexOf(\".\")-1;\n\t\t\t\tfor(i=decpt; i>= 0; --i) {\n\t\t\t\t\tif(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;\n\t\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")-1:out[i].v.length-1;\n\t\t\t\t\tvv = out[i].v.substr(j+1);\n\t\t\t\t\tfor(; j>=0; --j) {\n\t\t\t\t\t\tif(jj>=0 && (out[i].v[j] === \"0\" || out[i].v[j] === \"#\")) vv = ostr[jj--] + vv;\n\t\t\t\t\t}\n\t\t\t\t\tout[i].v = vv;\n\t\t\t\t\tout[i].t = 't';\n\t\t\t\t\tlasti = i;\n\t\t\t\t}\n\t\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t\t\tjj = ostr.indexOf(\".\")+1;\n\t\t\t\tfor(i=decpt; i<out.length; ++i) {\n\t\t\t\t\tif(out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt ) continue;\n\t\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")+1:0;\n\t\t\t\t\tvv = out[i].v.substr(0,j);\n\t\t\t\t\tfor(; j<out[i].v.length; ++j) {\n\t\t\t\t\t\tif(jj<ostr.length) vv += ostr[jj++];\n\t\t\t\t\t}\n\t\t\t\t\tout[i].v = vv;\n\t\t\t\t\tout[i].t = 't';\n\t\t\t\t\tlasti = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(i=0; i<out.length; ++i) if(out[i] != null && 'n(?'.indexOf(out[i].t)>-1) {\n\t\t\tmyv = (flen >1 && v < 0 && i>0 && out[i-1].v === \"-\" ? -v:v);\n\t\t\tout[i].v = write_num(out[i].t, out[i].v, myv);\n\t\t\tout[i].t = 't';\n\t\t}\n\t\tvar retval = \"\";\n\t\tfor(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;\n\t\treturn retval;\n\t}\n\tSSF._eval = eval_fmt;\n\tvar cfregex = /\\[[=<>]/;\n\tvar cfregex2 = /\\[([=<>]*)(-?\\d+\\.?\\d*)\\]/;\n\tfunction chkcond(v, rr) {\n\t\tif(rr == null) return false;\n\t\tvar thresh = parseFloat(rr[2]);\n\t\tswitch(rr[1]) {\n\t\t\tcase \"=\":  if(v == thresh) return true; break;\n\t\t\tcase \">\":  if(v >  thresh) return true; break;\n\t\t\tcase \"<\":  if(v <  thresh) return true; break;\n\t\t\tcase \"<>\": if(v != thresh) return true; break;\n\t\t\tcase \">=\": if(v >= thresh) return true; break;\n\t\t\tcase \"<=\": if(v <= thresh) return true; break;\n\t\t}\n\t\treturn false;\n\t}\n\tfunction choose_fmt(f, v) {\n\t\tvar fmt = split_fmt(f);\n\t\tvar l = fmt.length, lat = fmt[l-1].indexOf(\"@\");\n\t\tif(l<4 && lat>-1) --l;\n\t\tif(fmt.length > 4) throw \"cannot find right format for |\" + fmt + \"|\";\n\t\tif(typeof v !== \"number\") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:\"@\"];\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: fmt = lat>-1 ? [\"General\", \"General\", \"General\", fmt[0]] : [fmt[0], fmt[0], fmt[0], \"@\"]; break;\n\t\t\tcase 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], \"@\"]; break;\n\t\t\tcase 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], \"@\"]; break;\n\t\t\tcase 4: break;\n\t\t}\n\t\tvar ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n\t\tif(fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [l, ff];\n\t\tif(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {\n\t\t\tvar m1 = fmt[0].match(cfregex2);\n\t\t\tvar m2 = fmt[1].match(cfregex2);\n\t\t\treturn chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];\n\t\t}\n\t\treturn [l, ff];\n\t}\n\tfunction format(fmt,v,o) {\n\t\tfixopts(o != null ? o : (o=[]));\n\t\tvar sfmt = \"\";\n\t\tswitch(typeof fmt) {\n\t\t\tcase \"string\": sfmt = fmt; break;\n\t\t\tcase \"number\": sfmt = (o.table != null ? o.table : table_fmt)[fmt]; break;\n\t\t}\n\t\tif(isgeneral(sfmt,0)) return general_fmt(v, o);\n\t\tvar f = choose_fmt(sfmt, v);\n\t\tif(isgeneral(f[1])) return general_fmt(v, o);\n\t\tif(v === true) v = \"TRUE\"; else if(v === false) v = \"FALSE\";\n\t\telse if(v === \"\" || v == null) return \"\";\n\t\treturn eval_fmt(f[1], v, o, f[0]);\n\t}\n\tSSF._table = table_fmt;\n\tSSF.load = function load_entry(fmt, idx) { table_fmt[idx] = fmt; };\n\tSSF.format = format;\n\tSSF.get_table = function get_table() { return table_fmt; };\n\tSSF.load_table = function load_table(tbl) { for(var i=0; i!=0x0188; ++i) if(tbl[i] !== undefined) SSF.load(tbl[i], i); };\n\t};\n\tmake_ssf(SSF);\n\t/* map from xlml named formats to SSF TODO: localize */\n\tvar XLMLFormatMap = {\n\t\t\"General Number\": \"General\",\n\t\t\"General Date\": SSF._table[22],\n\t\t\"Long Date\": \"dddd, mmmm dd, yyyy\",\n\t\t\"Medium Date\": SSF._table[15],\n\t\t\"Short Date\": SSF._table[14],\n\t\t\"Long Time\": SSF._table[19],\n\t\t\"Medium Time\": SSF._table[18],\n\t\t\"Short Time\": SSF._table[20],\n\t\t\"Currency\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n\t\t\"Fixed\": SSF._table[2],\n\t\t\"Standard\": SSF._table[4],\n\t\t\"Percent\": SSF._table[10],\n\t\t\"Scientific\": SSF._table[11],\n\t\t\"Yes/No\": '\"Yes\";\"Yes\";\"No\";@',\n\t\t\"True/False\": '\"True\";\"True\";\"False\";@',\n\t\t\"On/Off\": '\"Yes\";\"Yes\";\"No\";@'\n\t};\n\t\n\tvar DO_NOT_EXPORT_CFB = true;\n\t/* cfb.js (C) 2013-2014 SheetJS -- http://sheetjs.com */\n\t/* vim: set ts=2: */\n\t/*jshint eqnull:true */\n\t\n\t/* [MS-CFB] v20130118 */\n\tvar CFB = (function _CFB(){\n\tvar exports = {};\n\texports.version = '0.10.2';\n\tfunction parse(file) {\n\tvar mver = 3; // major version\n\tvar ssz = 512; // sector size\n\tvar nmfs = 0; // number of mini FAT sectors\n\tvar ndfs = 0; // number of DIFAT sectors\n\tvar dir_start = 0; // first directory sector location\n\tvar minifat_start = 0; // first mini FAT sector location\n\tvar difat_start = 0; // first mini FAT sector location\n\t\n\tvar fat_addrs = []; // locations of FAT sectors\n\t\n\t/* [MS-CFB] 2.2 Compound File Header */\n\tvar blob = file.slice(0,512);\n\tprep_blob(blob, 0);\n\t\n\t/* major version */\n\tvar mv = check_get_mver(blob);\n\tmver = mv[0];\n\tswitch(mver) {\n\t\tcase 3: ssz = 512; break; case 4: ssz = 4096; break;\n\t\tdefault: throw \"Major Version: Expected 3 or 4 saw \" + mver;\n\t}\n\t\n\t/* reprocess header */\n\tif(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }\n\t/* Save header for final object */\n\tvar header = file.slice(0,ssz);\n\t\n\tcheck_shifts(blob, mver);\n\t\n\t// Number of Directory Sectors\n\tvar nds = blob.read_shift(4, 'i');\n\tif(mver === 3 && nds !== 0) throw '# Directory Sectors: Expected 0 saw ' + nds;\n\t\n\t// Number of FAT Sectors\n\t//var nfs = blob.read_shift(4, 'i');\n\tblob.l += 4;\n\t\n\t// First Directory Sector Location\n\tdir_start = blob.read_shift(4, 'i');\n\t\n\t// Transaction Signature\n\tblob.l += 4;\n\t\n\t// Mini Stream Cutoff Size\n\tblob.chk('00100000', 'Mini Stream Cutoff Size: ');\n\t\n\t// First Mini FAT Sector Location\n\tminifat_start = blob.read_shift(4, 'i');\n\t\n\t// Number of Mini FAT Sectors\n\tnmfs = blob.read_shift(4, 'i');\n\t\n\t// First DIFAT sector location\n\tdifat_start = blob.read_shift(4, 'i');\n\t\n\t// Number of DIFAT Sectors\n\tndfs = blob.read_shift(4, 'i');\n\t\n\t// Grab FAT Sector Locations\n\tfor(var q, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */\n\t\tq = blob.read_shift(4, 'i');\n\t\tif(q<0) break;\n\t\tfat_addrs[j] = q;\n\t}\n\t\n\t/** Break the file up into sectors */\n\tvar sectors = sectorify(file, ssz);\n\t\n\tsleuth_fat(difat_start, ndfs, sectors, ssz, fat_addrs);\n\t\n\t/** Chains */\n\tvar sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n\t\n\tsector_list[dir_start].name = \"!Directory\";\n\tif(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\n\tsector_list[fat_addrs[0]].name = \"!FAT\";\n\tsector_list.fat_addrs = fat_addrs;\n\tsector_list.ssz = ssz;\n\t\n\t/* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\tvar files = {}, Paths = [], FileIndex = [], FullPaths = [], FullPathDir = {};\n\tread_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex);\n\t\n\tbuild_full_paths(FileIndex, FullPathDir, FullPaths, Paths);\n\t\n\tvar root_name = Paths.shift();\n\tPaths.root = root_name;\n\t\n\t/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\n\tvar find_path = make_find_path(FullPaths, Paths, FileIndex, files, root_name);\n\t\n\treturn {\n\t\traw: {header: header, sectors: sectors},\n\t\tFileIndex: FileIndex,\n\t\tFullPaths: FullPaths,\n\t\tFullPathDir: FullPathDir,\n\t\tfind: find_path\n\t};\n\t} // parse\n\t\n\t/* [MS-CFB] 2.2 Compound File Header -- read up to major version */\n\tfunction check_get_mver(blob) {\n\t\t// header signature 8\n\t\tblob.chk(HEADER_SIGNATURE, 'Header Signature: ');\n\t\n\t\t// clsid 16\n\t\tblob.chk(HEADER_CLSID, 'CLSID: ');\n\t\n\t\t// minor version 2\n\t\tvar mver = blob.read_shift(2, 'u');\n\t\n\t\treturn [blob.read_shift(2,'u'), mver];\n\t}\n\tfunction check_shifts(blob, mver) {\n\t\tvar shift = 0x09;\n\t\n\t\t// Byte Order\n\t\tblob.chk('feff', 'Byte Order: ');\n\t\n\t\t// Sector Shift\n\t\tswitch((shift = blob.read_shift(2))) {\n\t\t\tcase 0x09: if(mver !== 3) throw 'MajorVersion/SectorShift Mismatch'; break;\n\t\t\tcase 0x0c: if(mver !== 4) throw 'MajorVersion/SectorShift Mismatch'; break;\n\t\t\tdefault: throw 'Sector Shift: Expected 9 or 12 saw ' + shift;\n\t\t}\n\t\n\t\t// Mini Sector Shift\n\t\tblob.chk('0600', 'Mini Sector Shift: ');\n\t\n\t\t// Reserved\n\t\tblob.chk('000000000000', 'Reserved: ');\n\t}\n\t\n\t/** Break the file up into sectors */\n\tfunction sectorify(file, ssz) {\n\t\tvar nsectors = Math.ceil(file.length/ssz)-1;\n\t\tvar sectors = new Array(nsectors);\n\t\tfor(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);\n\t\tsectors[nsectors-1] = file.slice(nsectors*ssz);\n\t\treturn sectors;\n\t}\n\t\n\t/* [MS-CFB] 2.6.4 Red-Black Tree */\n\tfunction build_full_paths(FI, FPD, FP, Paths) {\n\t\tvar i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;\n\t\tvar dad = new Array(pl), q = new Array(pl);\n\t\n\t\tfor(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }\n\t\n\t\tfor(; j < q.length; ++j) {\n\t\t\ti = q[j];\n\t\t\tL = FI[i].L; R = FI[i].R; C = FI[i].C;\n\t\t\tif(dad[i] === i) {\n\t\t\t\tif(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];\n\t\t\t\tif(R !== -1 && dad[R] !== R) dad[i] = dad[R];\n\t\t\t}\n\t\t\tif(C !== -1 /*NOSTREAM*/) dad[C] = i;\n\t\t\tif(L !== -1) { dad[L] = dad[i]; q.push(L); }\n\t\t\tif(R !== -1) { dad[R] = dad[i]; q.push(R); }\n\t\t}\n\t\tfor(i=1; i !== pl; ++i) if(dad[i] === i) {\n\t\t\tif(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];\n\t\t\telse if(L !== -1 && dad[L] !== L) dad[i] = dad[L];\n\t\t}\n\t\n\t\tfor(i=1; i < pl; ++i) {\n\t\t\tif(FI[i].type === 0 /* unknown */) continue;\n\t\t\tj = dad[i];\n\t\t\tif(j === 0) FP[i] = FP[0] + \"/\" + FP[i];\n\t\t\telse while(j !== 0) {\n\t\t\t\tFP[i] = FP[j] + \"/\" + FP[i];\n\t\t\t\tj = dad[j];\n\t\t\t}\n\t\t\tdad[i] = 0;\n\t\t}\n\t\n\t\tFP[0] += \"/\";\n\t\tfor(i=1; i < pl; ++i) {\n\t\t\tif(FI[i].type !== 2 /* stream */) FP[i] += \"/\";\n\t\t\tFPD[FP[i]] = FI[i];\n\t\t}\n\t}\n\t\n\t/* [MS-CFB] 2.6.4 */\n\tfunction make_find_path(FullPaths, Paths, FileIndex, files, root_name) {\n\t\tvar UCFullPaths = new Array(FullPaths.length);\n\t\tvar UCPaths = new Array(Paths.length), i;\n\t\tfor(i = 0; i < FullPaths.length; ++i) UCFullPaths[i] = FullPaths[i].toUpperCase().replace(chr0,'').replace(chr1,'!');\n\t\tfor(i = 0; i < Paths.length; ++i) UCPaths[i] = Paths[i].toUpperCase().replace(chr0,'').replace(chr1,'!');\n\t\treturn function find_path(path) {\n\t\t\tvar k;\n\t\t\tif(path.charCodeAt(0) === 47 /* \"/\" */) { k=true; path = root_name + path; }\n\t\t\telse k = path.indexOf(\"/\") !== -1;\n\t\t\tvar UCPath = path.toUpperCase().replace(chr0,'').replace(chr1,'!');\n\t\t\tvar w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n\t\t\tif(w === -1) return null;\n\t\t\treturn k === true ? FileIndex[w] : files[Paths[w]];\n\t\t};\n\t}\n\t\n\t/** Chase down the rest of the DIFAT chain to build a comprehensive list\n\t    DIFAT chains by storing the next sector number as the last 32 bytes */\n\tfunction sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n\t\tvar q;\n\t\tif(idx === ENDOFCHAIN) {\n\t\t\tif(cnt !== 0) throw \"DIFAT chain shorter than expected\";\n\t\t} else if(idx !== -1 /*FREESECT*/) {\n\t\t\tvar sector = sectors[idx], m = (ssz>>>2)-1;\n\t\t\tfor(var i = 0; i < m; ++i) {\n\t\t\t\tif((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;\n\t\t\t\tfat_addrs.push(q);\n\t\t\t}\n\t\t\tsleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);\n\t\t}\n\t}\n\t\n\t/** Follow the linked list of sectors for a given starting point */\n\tfunction get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n\t\tvar sl = sectors.length;\n\t\tvar buf, buf_chain;\n\t\tif(!chkd) chkd = new Array(sl);\n\t\tvar modulus = ssz - 1, j, jj;\n\t\tbuf = [];\n\t\tbuf_chain = [];\n\t\tfor(j=start; j>=0;) {\n\t\t\tchkd[j] = true;\n\t\t\tbuf[buf.length] = j;\n\t\t\tbuf_chain.push(sectors[j]);\n\t\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\t\tjj = ((j*4) & modulus);\n\t\t\tif(ssz < 4 + jj) throw \"FAT boundary crossed: \" + j + \" 4 \"+ssz;\n\t\t\tj = __readInt32LE(sectors[addr], jj);\n\t\t}\n\t\treturn {nodes: buf, data:__toBuffer([buf_chain])};\n\t}\n\t\n\t/** Chase down the sector linked lists */\n\tfunction make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n\t\tvar sl = sectors.length, sector_list = new Array(sl);\n\t\tvar chkd = new Array(sl), buf, buf_chain;\n\t\tvar modulus = ssz - 1, i, j, k, jj;\n\t\tfor(i=0; i < sl; ++i) {\n\t\t\tbuf = [];\n\t\t\tk = (i + dir_start); if(k >= sl) k-=sl;\n\t\t\tif(chkd[k] === true) continue;\n\t\t\tbuf_chain = [];\n\t\t\tfor(j=k; j>=0;) {\n\t\t\t\tchkd[j] = true;\n\t\t\t\tbuf[buf.length] = j;\n\t\t\t\tbuf_chain.push(sectors[j]);\n\t\t\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\t\t\tjj = ((j*4) & modulus);\n\t\t\t\tif(ssz < 4 + jj) throw \"FAT boundary crossed: \" + j + \" 4 \"+ssz;\n\t\t\t\tj = __readInt32LE(sectors[addr], jj);\n\t\t\t}\n\t\t\tsector_list[k] = {nodes: buf, data:__toBuffer([buf_chain])};\n\t\t}\n\t\treturn sector_list;\n\t}\n\t\n\t/* [MS-CFB] 2.6.1 Compound File Directory Entry */\n\tfunction read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex) {\n\t\tvar blob;\n\t\tvar minifat_store = 0, pl = (Paths.length?2:0);\n\t\tvar sector = sector_list[dir_start].data;\n\t\tvar i = 0, namelen = 0, name, o, ctime, mtime;\n\t\tfor(; i < sector.length; i+= 128) {\n\t\t\tblob = sector.slice(i, i+128);\n\t\t\tprep_blob(blob, 64);\n\t\t\tnamelen = blob.read_shift(2);\n\t\t\tif(namelen === 0) continue;\n\t\t\tname = __utf16le(blob,0,namelen-pl);\n\t\t\tPaths.push(name);\n\t\t\to = {\n\t\t\t\tname:  name,\n\t\t\t\ttype:  blob.read_shift(1),\n\t\t\t\tcolor: blob.read_shift(1),\n\t\t\t\tL:     blob.read_shift(4, 'i'),\n\t\t\t\tR:     blob.read_shift(4, 'i'),\n\t\t\t\tC:     blob.read_shift(4, 'i'),\n\t\t\t\tclsid: blob.read_shift(16),\n\t\t\t\tstate: blob.read_shift(4, 'i')\n\t\t\t};\n\t\t\tctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\t\tif(ctime !== 0) {\n\t\t\t\to.ctime = ctime; o.ct = read_date(blob, blob.l-8);\n\t\t\t}\n\t\t\tmtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\t\tif(mtime !== 0) {\n\t\t\t\to.mtime = mtime; o.mt = read_date(blob, blob.l-8);\n\t\t\t}\n\t\t\to.start = blob.read_shift(4, 'i');\n\t\t\to.size = blob.read_shift(4, 'i');\n\t\t\tif(o.type === 5) { /* root */\n\t\t\t\tminifat_store = o.start;\n\t\t\t\tif(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n\t\t\t\t/*minifat_size = o.size;*/\n\t\t\t} else if(o.size >= 4096 /* MSCSZ */) {\n\t\t\t\to.storage = 'fat';\n\t\t\t\tif(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n\t\t\t\tsector_list[o.start].name = o.name;\n\t\t\t\to.content = sector_list[o.start].data.slice(0,o.size);\n\t\t\t\tprep_blob(o.content, 0);\n\t\t\t} else {\n\t\t\t\to.storage = 'minifat';\n\t\t\t\tif(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN) {\n\t\t\t\t\to.content = sector_list[minifat_store].data.slice(o.start*MSSZ,o.start*MSSZ+o.size);\n\t\t\t\t\tprep_blob(o.content, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfiles[name] = o;\n\t\t\tFileIndex.push(o);\n\t\t}\n\t}\n\t\n\tfunction read_date(blob, offset) {\n\t\treturn new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);\n\t}\n\t\n\tvar fs;\n\tfunction readFileSync(filename, options) {\n\t\t//if(fs === undefined) fs = require('fs');\n\t\treturn parse(fs.readFileSync(filename), options);\n\t}\n\t\n\tfunction readSync(blob, options) {\n\t\tswitch(options !== undefined && options.type !== undefined ? options.type : \"base64\") {\n\t\t\tcase \"file\": return readFileSync(blob, options);\n\t\t\tcase \"base64\": return parse(s2a(Base64.decode(blob)), options);\n\t\t\tcase \"binary\": return parse(s2a(blob), options);\n\t\t}\n\t\treturn parse(blob);\n\t}\n\t\n\t/** CFB Constants */\n\tvar MSSZ = 64; /* Mini Sector Size = 1<<6 */\n\t//var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n\t/* 2.1 Compound File Sector Numbers and Types */\n\tvar ENDOFCHAIN = -2;\n\t/* 2.2 Compound File Header */\n\tvar HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\n\tvar HEADER_CLSID = '00000000000000000000000000000000';\n\tvar consts = {\n\t\t/* 2.1 Compund File Sector Numbers and Types */\n\t\tMAXREGSECT: -6,\n\t\tDIFSECT: -4,\n\t\tFATSECT: -3,\n\t\tENDOFCHAIN: ENDOFCHAIN,\n\t\tFREESECT: -1,\n\t\t/* 2.2 Compound File Header */\n\t\tHEADER_SIGNATURE: HEADER_SIGNATURE,\n\t\tHEADER_MINOR_VERSION: '3e00',\n\t\tMAXREGSID: -6,\n\t\tNOSTREAM: -1,\n\t\tHEADER_CLSID: HEADER_CLSID,\n\t\t/* 2.6.1 Compound File Directory Entry */\n\t\tEntryTypes: ['unknown','storage','stream','lockbytes','property','root']\n\t};\n\t\n\texports.read = readSync;\n\texports.parse = parse;\n\texports.utils = {\n\t\tReadShift: ReadShift,\n\t\tCheckField: CheckField,\n\t\tprep_blob: prep_blob,\n\t\tbconcat: bconcat,\n\t\tconsts: consts\n\t};\n\t\n\treturn exports;\n\t})();\n\t\n\tif(\"function\" !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }\n\tfunction isval(x) { return x !== undefined && x !== null; }\n\t\n\tfunction keys(o) { return Object.keys(o); }\n\t\n\tfunction evert_key(obj, key) {\n\t\tvar o = [], K = keys(obj);\n\t\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]][key]] = K[i];\n\t\treturn o;\n\t}\n\t\n\tfunction evert(obj) {\n\t\tvar o = [], K = keys(obj);\n\t\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];\n\t\treturn o;\n\t}\n\t\n\tfunction evert_num(obj) {\n\t\tvar o = [], K = keys(obj);\n\t\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i],10);\n\t\treturn o;\n\t}\n\t\n\tfunction evert_arr(obj) {\n\t\tvar o = [], K = keys(obj);\n\t\tfor(var i = 0; i !== K.length; ++i) {\n\t\t\tif(o[obj[K[i]]] == null) o[obj[K[i]]] = [];\n\t\t\to[obj[K[i]]].push(K[i]);\n\t\t}\n\t\treturn o;\n\t}\n\t\n\t/* TODO: date1904 logic */\n\tfunction datenum(v, date1904) {\n\t\tif(date1904) v+=1462;\n\t\tvar epoch = Date.parse(v);\n\t\treturn (epoch + 2209161600000) / (24 * 60 * 60 * 1000);\n\t}\n\t\n\tfunction cc2str(arr) {\n\t\tvar o = \"\";\n\t\tfor(var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);\n\t\treturn o;\n\t}\n\t\n\tfunction getdata(data) {\n\t\tif(!data) return null;\n\t\tif(data.name.substr(-4) === \".bin\") {\n\t\t\tif(data.data) return char_codes(data.data);\n\t\t\tif(data.asNodeBuffer && has_buf) return data.asNodeBuffer();\n\t\t\tif(data._data && data._data.getContent) return Array.prototype.slice.call(data._data.getContent());\n\t\t} else {\n\t\t\tif(data.data) return data.name.substr(-4) !== \".bin\" ? debom_xml(data.data) : char_codes(data.data);\n\t\t\tif(data.asNodeBuffer && has_buf) return debom_xml(data.asNodeBuffer().toString('binary'));\n\t\t\tif(data.asBinary) return debom_xml(data.asBinary());\n\t\t\tif(data._data && data._data.getContent) return debom_xml(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));\n\t\t}\n\t\treturn null;\n\t}\n\t\n\tfunction safegetzipfile(zip, file) {\n\t\tvar f = file; if(zip.files[f]) return zip.files[f];\n\t\tf = file.toLowerCase(); if(zip.files[f]) return zip.files[f];\n\t\tf = f.replace(/\\//g,'\\\\'); if(zip.files[f]) return zip.files[f];\n\t\treturn null;\n\t}\n\t\n\tfunction getzipfile(zip, file) {\n\t\tvar o = safegetzipfile(zip, file);\n\t\tif(o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n\t\treturn o;\n\t}\n\t\n\tfunction getzipdata(zip, file, safe) {\n\t\tif(!safe) return getdata(getzipfile(zip, file));\n\t\tif(!file) return null;\n\t\ttry { return getzipdata(zip, file); } catch(e) { return null; }\n\t}\n\t\n\tvar _fs, jszip = __webpack_require__(6);\n\t\n\tvar attregexg=/([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\n\tvar tagregex=/<[^>]*>/g;\n\tvar nsregex=/<\\w*:/, nsregex2 = /<(\\/?)\\w+:/;\n\tfunction parsexmltag(tag, skip_root) {\n\t\tvar z = [];\n\t\tvar eq = 0, c = 0;\n\t\tfor(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n\t\tif(!skip_root) z[0] = tag.substr(0, eq);\n\t\tif(eq === tag.length) return z;\n\t\tvar m = tag.match(attregexg), j=0, w=\"\", v=\"\", i=0, q=\"\", cc=\"\";\n\t\tif(m) for(i = 0; i != m.length; ++i) {\n\t\t\tcc = m[i];\n\t\t\tfor(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;\n\t\t\tq = cc.substr(0,c); v = cc.substring(c+2, cc.length-1);\n\t\t\tfor(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;\n\t\t\tif(j===q.length) z[q] = v;\n\t\t\telse z[(j===5 && q.substr(0,5)===\"xmlns\"?\"xmlns\":\"\")+q.substr(j+1)] = v;\n\t\t}\n\t\treturn z;\n\t}\n\tfunction strip_ns(x) { return x.replace(nsregex2, \"<$1\"); }\n\t\n\tvar encodings = {\n\t\t'&quot;': '\"',\n\t\t'&apos;': \"'\",\n\t\t'&gt;': '>',\n\t\t'&lt;': '<',\n\t\t'&amp;': '&'\n\t};\n\tvar rencoding = evert(encodings);\n\tvar rencstr = \"&<>'\\\"\".split(\"\");\n\t\n\t// TODO: CP remap (need to read file version to determine OS)\n\tvar unescapexml = (function() {\n\t\tvar encregex = /&[a-z]*;/g, coderegex = /_x([\\da-fA-F]+)_/g;\n\t\treturn function unescapexml(text){\n\t\t\tvar s = text + '';\n\t\t\treturn s.replace(encregex, function($$) { return encodings[$$]; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});\n\t\t};\n\t})();\n\t\n\tvar decregex=/[&<>'\"]/g, charegex = /[\\u0000-\\u0008\\u000b-\\u001f]/g;\n\tfunction escapexml(text){\n\t\tvar s = text + '';\n\t\treturn s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return \"_x\" + (\"000\"+s.charCodeAt(0).toString(16)).substr(-4) + \"_\";});\n\t}\n\t\n\t/* TODO: handle codepages */\n\tvar xlml_fixstr = (function() {\n\t\tvar entregex = /&#(\\d+);/g;\n\t\tfunction entrepl($$,$1) { return String.fromCharCode(parseInt($1,10)); }\n\t\treturn function xlml_fixstr(str) { return str.replace(entregex,entrepl); };\n\t})();\n\t\n\tfunction parsexmlbool(value, tag) {\n\t\tswitch(value) {\n\t\t\tcase '1': case 'true': case 'TRUE': return true;\n\t\t\t/* case '0': case 'false': case 'FALSE':*/\n\t\t\tdefault: return false;\n\t\t}\n\t}\n\t\n\tvar utf8read = function utf8reada(orig) {\n\t\tvar out = \"\", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;\n\t\twhile (i < orig.length) {\n\t\t\tc = orig.charCodeAt(i++);\n\t\t\tif (c < 128) { out += String.fromCharCode(c); continue; }\n\t\t\td = orig.charCodeAt(i++);\n\t\t\tif (c>191 && c<224) { out += String.fromCharCode(((c & 31) << 6) | (d & 63)); continue; }\n\t\t\te = orig.charCodeAt(i++);\n\t\t\tif (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }\n\t\t\tf = orig.charCodeAt(i++);\n\t\t\tw = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;\n\t\t\tout += String.fromCharCode(0xD800 + ((w>>>10)&1023));\n\t\t\tout += String.fromCharCode(0xDC00 + (w&1023));\n\t\t}\n\t\treturn out;\n\t};\n\t\n\t\n\tif(has_buf) {\n\t\tvar utf8readb = function utf8readb(data) {\n\t\t\tvar out = new Buffer(2*data.length), w, i, j = 1, k = 0, ww=0, c;\n\t\t\tfor(i = 0; i < data.length; i+=j) {\n\t\t\t\tj = 1;\n\t\t\t\tif((c=data.charCodeAt(i)) < 128) w = c;\n\t\t\t\telse if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }\n\t\t\t\telse if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }\n\t\t\t\telse { j = 4;\n\t\t\t\t\tw = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);\n\t\t\t\t\tw -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);\n\t\t\t\t}\n\t\t\t\tif(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }\n\t\t\t\tout[k++] = w%256; out[k++] = w>>>8;\n\t\t\t}\n\t\t\tout.length = k;\n\t\t\treturn out.toString('ucs2');\n\t\t};\n\t\tvar corpus = \"foo bar baz\\u00e2\\u0098\\u0083\\u00f0\\u009f\\u008d\\u00a3\";\n\t\tif(utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;\n\t\tvar utf8readc = function utf8readc(data) { return Buffer(data, 'binary').toString('utf8'); };\n\t\tif(utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;\n\t}\n\t\n\t// matches <foo>...</foo> extracts content\n\tvar matchtag = (function() {\n\t\tvar mtcache = {};\n\t\treturn function matchtag(f,g) {\n\t\t\tvar t = f+\"|\"+g;\n\t\t\tif(mtcache[t] !== undefined) return mtcache[t];\n\t\t\treturn (mtcache[t] = new RegExp('<(?:\\\\w+:)?'+f+'(?: xml:space=\"preserve\")?(?:[^>]*)>([^\\u2603]*)</(?:\\\\w+:)?'+f+'>',(g||\"\")));\n\t\t};\n\t})();\n\t\n\tvar vtregex = (function(){ var vt_cache = {};\n\t\treturn function vt_regex(bt) {\n\t\t\tif(vt_cache[bt] !== undefined) return vt_cache[bt];\n\t\t\treturn (vt_cache[bt] = new RegExp(\"<vt:\" + bt + \">(.*?)</vt:\" + bt + \">\", 'g') );\n\t};})();\n\tvar vtvregex = /<\\/?vt:variant>/g, vtmregex = /<vt:([^>]*)>(.*)</;\n\tfunction parseVector(data) {\n\t\tvar h = parsexmltag(data);\n\t\n\t\tvar matches = data.match(vtregex(h.baseType))||[];\n\t\tif(matches.length != h.size) throw \"unexpected vector length \" + matches.length + \" != \" + h.size;\n\t\tvar res = [];\n\t\tmatches.forEach(function(x) {\n\t\t\tvar v = x.replace(vtvregex,\"\").match(vtmregex);\n\t\t\tres.push({v:v[2], t:v[1]});\n\t\t});\n\t\treturn res;\n\t}\n\t\n\tvar wtregex = /(^\\s|\\s$|\\n)/;\n\tfunction writetag(f,g) {return '<' + f + (g.match(wtregex)?' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f + '>';}\n\t\n\tfunction wxt_helper(h) { return keys(h).map(function(k) { return \" \" + k + '=\"' + h[k] + '\"';}).join(\"\"); }\n\tfunction writextag(f,g,h) { return '<' + f + (isval(h) ? wxt_helper(h) : \"\") + (isval(g) ? (g.match(wtregex)?' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f : \"/\") + '>';}\n\t\n\tfunction write_w3cdtf(d, t) { try { return d.toISOString().replace(/\\.\\d*/,\"\"); } catch(e) { if(t) throw e; } }\n\t\n\tfunction write_vt(s) {\n\t\tswitch(typeof s) {\n\t\t\tcase 'string': return writextag('vt:lpwstr', s);\n\t\t\tcase 'number': return writextag((s|0)==s?'vt:i4':'vt:r8', String(s));\n\t\t\tcase 'boolean': return writextag('vt:bool',s?'true':'false');\n\t\t}\n\t\tif(s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));\n\t\tthrow new Error(\"Unable to serialize \" + s);\n\t}\n\t\n\tvar XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r\\n';\n\tvar XMLNS = {\n\t\t'dc': 'http://purl.org/dc/elements/1.1/',\n\t\t'dcterms': 'http://purl.org/dc/terms/',\n\t\t'dcmitype': 'http://purl.org/dc/dcmitype/',\n\t\t'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',\n\t\t'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n\t\t'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',\n\t\t'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\n\t\t'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n\t\t'xsd': 'http://www.w3.org/2001/XMLSchema'\n\t};\n\t\n\tXMLNS.main = [\n\t\t'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n\t\t'http://purl.oclc.org/ooxml/spreadsheetml/main',\n\t\t'http://schemas.microsoft.com/office/excel/2006/main',\n\t\t'http://schemas.microsoft.com/office/excel/2006/2'\n\t];\n\t\n\tfunction readIEEE754(buf, idx, isLE, nl, ml) {\n\t\tif(isLE === undefined) isLE = true;\n\t\tif(!nl) nl = 8;\n\t\tif(!ml && nl === 8) ml = 52;\n\t\tvar e, m, el = nl * 8 - ml - 1, eMax = (1 << el) - 1, eBias = eMax >> 1;\n\t\tvar bits = -7, d = isLE ? -1 : 1, i = isLE ? (nl - 1) : 0, s = buf[idx + i];\n\t\n\t\ti += d;\n\t\te = s & ((1 << (-bits)) - 1); s >>>= (-bits); bits += el;\n\t\tfor (; bits > 0; e = e * 256 + buf[idx + i], i += d, bits -= 8);\n\t\tm = e & ((1 << (-bits)) - 1); e >>>= (-bits); bits += ml;\n\t\tfor (; bits > 0; m = m * 256 + buf[idx + i], i += d, bits -= 8);\n\t\tif (e === eMax) return m ? NaN : ((s ? -1 : 1) * Infinity);\n\t\telse if (e === 0) e = 1 - eBias;\n\t\telse { m = m + Math.pow(2, ml); e = e - eBias; }\n\t\treturn (s ? -1 : 1) * m * Math.pow(2, e - ml);\n\t}\n\t\n\tvar __toBuffer, ___toBuffer;\n\t__toBuffer = ___toBuffer = function toBuffer_(bufs) { var x = []; for(var i = 0; i < bufs[0].length; ++i) { x.push.apply(x, bufs[0][i]); } return x; };\n\tvar __utf16le, ___utf16le;\n\t__utf16le = ___utf16le = function utf16le_(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join(\"\"); };\n\tvar __hexlify, ___hexlify;\n\t__hexlify = ___hexlify = function hexlify_(b,s,l) { return b.slice(s,(s+l)).map(function(x){return (x<16?\"0\":\"\") + x.toString(16);}).join(\"\"); };\n\tvar __utf8, ___utf8;\n\t__utf8 = ___utf8 = function(b,s,e) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(\"\"); };\n\tvar __lpstr, ___lpstr;\n\t__lpstr = ___lpstr = function lpstr_(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\n\tvar __lpwstr, ___lpwstr;\n\t__lpwstr = ___lpwstr = function lpwstr_(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\n\tvar __double, ___double;\n\t__double = ___double = function(b, idx) { return readIEEE754(b, idx);};\n\t\n\tvar is_buf = function is_buf_a(a) { return Array.isArray(a); };\n\tif(has_buf) {\n\t\t__utf16le = function utf16le_b(b,s,e) { if(!Buffer.isBuffer(b)) return ___utf16le(b,s,e); return b.toString('utf16le',s,e); };\n\t\t__hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };\n\t\t__lpstr = function lpstr_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : \"\";};\n\t\t__lpwstr = function lpwstr_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};\n\t\t__utf8 = function utf8_b(s,e) { return this.toString('utf8',s,e); };\n\t\t__toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);};\n\t\tbconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs); };\n\t\t__double = function double_(b,i) { if(Buffer.isBuffer(b)) return b.readDoubleLE(i); return ___double(b,i); };\n\t\tis_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a); };\n\t}\n\t\n\t/* from js-xls */\n\tif(typeof cptable !== 'undefined') {\n\t\t__utf16le = function(b,s,e) { return cptable.utils.decode(1200, b.slice(s,e)); };\n\t\t__utf8 = function(b,s,e) { return cptable.utils.decode(65001, b.slice(s,e)); };\n\t\t__lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i+4, i+4+len-1)) : \"\";};\n\t\t__lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len-1)) : \"\";};\n\t}\n\t\n\tvar __readUInt8 = function(b, idx) { return b[idx]; };\n\tvar __readUInt16LE = function(b, idx) { return b[idx+1]*(1<<8)+b[idx]; };\n\tvar __readInt16LE = function(b, idx) { var u = b[idx+1]*(1<<8)+b[idx]; return (u < 0x8000) ? u : (0xffff - u + 1) * -1; };\n\tvar __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\n\tvar __readInt32LE = function(b, idx) { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };\n\t\n\tvar ___unhexlify = function(s) { return s.match(/../g).map(function(x) { return parseInt(x,16);}); };\n\tvar __unhexlify = typeof Buffer !== \"undefined\" ? function(s) { return Buffer.isBuffer(s) ? new Buffer(s, 'hex') : ___unhexlify(s); } : ___unhexlify;\n\t\n\tfunction ReadShift(size, t) {\n\t\tvar o=\"\", oI, oR, oo=[], w, vv, i, loc;\n\t\tswitch(t) {\n\t\t\tcase 'dbcs':\n\t\t\t\tloc = this.l;\n\t\t\t\tif(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString(\"utf16le\");\n\t\t\t\telse for(i = 0; i != size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }\n\t\t\t\tsize *= 2;\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'utf8': o = __utf8(this, this.l, this.l + size); break;\n\t\t\tcase 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;\n\t\n\t\t\t/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */\n\t\t\tcase 'lpstr': o = __lpstr(this, this.l); size = 5 + o.length; break;\n\t\t\t/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */\n\t\t\tcase 'lpwstr': o = __lpwstr(this, this.l); size = 5 + o.length; if(o[o.length-1] == '\\u0000') size += 2; break;\n\t\n\t\t\tcase 'cstr': size = 0; o = \"\";\n\t\t\t\twhile((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));\n\t\t\t\to = oo.join(\"\"); break;\n\t\t\tcase 'wstr': size = 0; o = \"\";\n\t\t\t\twhile((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}\n\t\t\t\tsize+=2; o = oo.join(\"\"); break;\n\t\n\t\t\t/* sbcs and dbcs support continue records in the SST way TODO codepages */\n\t\t\tcase 'dbcs-cont': o = \"\"; loc = this.l;\n\t\t\t\tfor(i = 0; i != size; ++i) {\n\t\t\t\t\tif(this.lens && this.lens.indexOf(loc) !== -1) {\n\t\t\t\t\t\tw = __readUInt8(this, loc);\n\t\t\t\t\t\tthis.l = loc + 1;\n\t\t\t\t\t\tvv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');\n\t\t\t\t\t\treturn oo.join(\"\") + vv;\n\t\t\t\t\t}\n\t\t\t\t\too.push(_getchar(__readUInt16LE(this, loc)));\n\t\t\t\t\tloc+=2;\n\t\t\t\t} o = oo.join(\"\"); size *= 2; break;\n\t\n\t\t\tcase 'sbcs-cont': o = \"\"; loc = this.l;\n\t\t\t\tfor(i = 0; i != size; ++i) {\n\t\t\t\t\tif(this.lens && this.lens.indexOf(loc) !== -1) {\n\t\t\t\t\t\tw = __readUInt8(this, loc);\n\t\t\t\t\t\tthis.l = loc + 1;\n\t\t\t\t\t\tvv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');\n\t\t\t\t\t\treturn oo.join(\"\") + vv;\n\t\t\t\t\t}\n\t\t\t\t\too.push(_getchar(__readUInt8(this, loc)));\n\t\t\t\t\tloc+=1;\n\t\t\t\t} o = oo.join(\"\"); break;\n\t\n\t\t\tdefault:\n\t\tswitch(size) {\n\t\t\tcase 1: oI = __readUInt8(this, this.l); this.l++; return oI;\n\t\t\tcase 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;\n\t\t\tcase 4:\n\t\t\t\tif(t === 'i' || (this[this.l+3] & 0x80)===0) { oI = __readInt32LE(this, this.l); this.l += 4; return oI; }\n\t\t\t\telse { oR = __readUInt32LE(this, this.l); this.l += 4; return oR; } break;\n\t\t\tcase 8: if(t === 'f') { oR = __double(this, this.l); this.l += 8; return oR; }\n\t\t\t/* falls through */\n\t\t\tcase 16: o = __hexlify(this, this.l, size); break;\n\t\t}}\n\t\tthis.l+=size; return o;\n\t}\n\t\n\tfunction WriteShift(t, val, f) {\n\t\tvar size, i;\n\t\tif(f === 'dbcs') {\n\t\t\tfor(i = 0; i != val.length; ++i) this.writeUInt16LE(val.charCodeAt(i), this.l + 2 * i);\n\t\t\tsize = 2 * val.length;\n\t\t} else switch(t) {\n\t\t\tcase  1: size = 1; this[this.l] = val&255; break;\n\t\t\tcase  3: size = 3; this[this.l+2] = val & 255; val >>>= 8; this[this.l+1] = val&255; val >>>= 8; this[this.l] = val&255; break;\n\t\t\tcase  4: size = 4; this.writeUInt32LE(val, this.l); break;\n\t\t\tcase  8: size = 8; if(f === 'f') { this.writeDoubleLE(val, this.l); break; }\n\t\t\t/* falls through */\n\t\t\tcase 16: break;\n\t\t\tcase -4: size = 4; this.writeInt32LE(val, this.l); break;\n\t\t}\n\t\tthis.l += size; return this;\n\t}\n\t\n\tfunction CheckField(hexstr, fld) {\n\t\tvar m = __hexlify(this,this.l,hexstr.length>>1);\n\t\tif(m !== hexstr) throw fld + 'Expected ' + hexstr + ' saw ' + m;\n\t\tthis.l += hexstr.length>>1;\n\t}\n\t\n\tfunction prep_blob(blob, pos) {\n\t\tblob.l = pos;\n\t\tblob.read_shift = ReadShift;\n\t\tblob.chk = CheckField;\n\t\tblob.write_shift = WriteShift;\n\t}\n\t\n\tfunction parsenoop(blob, length) { blob.l += length; }\n\t\n\tfunction writenoop(blob, length) { blob.l += length; }\n\t\n\tfunction new_buf(sz) {\n\t\tvar o = new_raw_buf(sz);\n\t\tprep_blob(o, 0);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.1.4 Record */\n\tfunction recordhopper(data, cb, opts) {\n\t\tvar tmpbyte, cntbyte, length;\n\t\tprep_blob(data, data.l || 0);\n\t\twhile(data.l < data.length) {\n\t\t\tvar RT = data.read_shift(1);\n\t\t\tif(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);\n\t\t\tvar R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];\n\t\t\ttmpbyte = data.read_shift(1);\n\t\t\tlength = tmpbyte & 0x7F;\n\t\t\tfor(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);\n\t\t\tvar d = R.f(data, length, opts);\n\t\t\tif(cb(d, R, RT)) return;\n\t\t}\n\t}\n\t\n\t/* control buffer usage for fixed-length buffers */\n\tfunction buf_array() {\n\t\tvar bufs = [], blksz = 2048;\n\t\tvar newblk = function ba_newblk(sz) {\n\t\t\tvar o = new_buf(sz);\n\t\t\tprep_blob(o, 0);\n\t\t\treturn o;\n\t\t};\n\t\n\t\tvar curbuf = newblk(blksz);\n\t\n\t\tvar endbuf = function ba_endbuf() {\n\t\t\tcurbuf.length = curbuf.l;\n\t\t\tif(curbuf.length > 0) bufs.push(curbuf);\n\t\t\tcurbuf = null;\n\t\t};\n\t\n\t\tvar next = function ba_next(sz) {\n\t\t\tif(sz < curbuf.length - curbuf.l) return curbuf;\n\t\t\tendbuf();\n\t\t\treturn (curbuf = newblk(Math.max(sz+1, blksz)));\n\t\t};\n\t\n\t\tvar end = function ba_end() {\n\t\t\tendbuf();\n\t\t\treturn __toBuffer([bufs]);\n\t\t};\n\t\n\t\tvar push = function ba_push(buf) { endbuf(); curbuf = buf; next(blksz); };\n\t\n\t\treturn { next:next, push:push, end:end, _bufs:bufs };\n\t}\n\t\n\tfunction write_record(ba, type, payload, length) {\n\t\tvar t = evert_RE[type], l;\n\t\tif(!length) length = XLSBRecordEnum[t].p || (payload||[]).length || 0;\n\t\tl = 1 + (t >= 0x80 ? 1 : 0) + 1 + length;\n\t\tif(length >= 0x80) ++l; if(length >= 0x4000) ++l; if(length >= 0x200000) ++l;\n\t\tvar o = ba.next(l);\n\t\tif(t <= 0x7F) o.write_shift(1, t);\n\t\telse {\n\t\t\to.write_shift(1, (t & 0x7F) + 0x80);\n\t\t\to.write_shift(1, (t >> 7));\n\t\t}\n\t\tfor(var i = 0; i != 4; ++i) {\n\t\t\tif(length >= 0x80) { o.write_shift(1, (length & 0x7F)+0x80); length >>= 7; }\n\t\t\telse { o.write_shift(1, length); break; }\n\t\t}\n\t\tif(length > 0 && is_buf(payload)) ba.push(payload);\n\t}\n\t/* XLS ranges enforced */\n\tfunction shift_cell_xls(cell, tgt) {\n\t\tif(tgt.s) {\n\t\t\tif(cell.cRel) cell.c += tgt.s.c;\n\t\t\tif(cell.rRel) cell.r += tgt.s.r;\n\t\t} else {\n\t\t\tcell.c += tgt.c;\n\t\t\tcell.r += tgt.r;\n\t\t}\n\t\tcell.cRel = cell.rRel = 0;\n\t\twhile(cell.c >= 0x100) cell.c -= 0x100;\n\t\twhile(cell.r >= 0x10000) cell.r -= 0x10000;\n\t\treturn cell;\n\t}\n\t\n\tfunction shift_range_xls(cell, range) {\n\t\tcell.s = shift_cell_xls(cell.s, range.s);\n\t\tcell.e = shift_cell_xls(cell.e, range.s);\n\t\treturn cell;\n\t}\n\t\n\tvar OFFCRYPTO = {};\n\tvar make_offcrypto = function(O, _crypto) {\n\t\tvar crypto;\n\t\tif(typeof _crypto !== 'undefined') crypto = _crypto;\n\t\telse if(true) {\n\t\t\ttry { crypto = __webpack_require__(45); }\n\t\t\tcatch(e) { crypto = null; }\n\t\t}\n\t\n\t\tO.rc4 = function(key, data) {\n\t\t\tvar S = new Array(256);\n\t\t\tvar c = 0, i = 0, j = 0, t = 0;\n\t\t\tfor(i = 0; i != 256; ++i) S[i] = i;\n\t\t\tfor(i = 0; i != 256; ++i) {\n\t\t\t\tj = (j + S[i] + (key[i%key.length]).charCodeAt(0))&255;\n\t\t\t\tt = S[i]; S[i] = S[j]; S[j] = t;\n\t\t\t}\n\t\t\ti = j = 0; out = Buffer(data.length);\n\t\t\tfor(c = 0; c != data.length; ++c) {\n\t\t\t\ti = (i + 1)&255;\n\t\t\t\tj = (j + S[i])%256;\n\t\t\t\tt = S[i]; S[i] = S[j]; S[j] = t;\n\t\t\t\tout[c] = (data[c] ^ S[(S[i]+S[j])&255]);\n\t\t\t}\n\t\t\treturn out;\n\t\t};\n\t\n\t\tif(crypto) {\n\t\t\tO.md5 = function(hex) { return crypto.createHash('md5').update(hex).digest('hex'); };\n\t\t} else {\n\t\t\tO.md5 = function(hex) { throw \"unimplemented\"; };\n\t\t}\n\t};\n\tmake_offcrypto(OFFCRYPTO, typeof crypto !== \"undefined\" ? crypto : undefined);\n\t\n\t\n\t/* [MS-XLSB] 2.5.143 */\n\tfunction parse_StrRun(data, length) {\n\t\treturn { ich: data.read_shift(2), ifnt: data.read_shift(2) };\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.121 */\n\tfunction parse_RichStr(data, length) {\n\t\tvar start = data.l;\n\t\tvar flags = data.read_shift(1);\n\t\tvar str = parse_XLWideString(data);\n\t\tvar rgsStrRun = [];\n\t\tvar z = { t: str, h: str };\n\t\tif((flags & 1) !== 0) { /* fRichStr */\n\t\t\t/* TODO: formatted string */\n\t\t\tvar dwSizeStrRun = data.read_shift(4);\n\t\t\tfor(var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));\n\t\t\tz.r = rgsStrRun;\n\t\t}\n\t\telse z.r = \"<t>\" + escapexml(str) + \"</t>\";\n\t\tif((flags & 2) !== 0) { /* fExtStr */\n\t\t\t/* TODO: phonetic string */\n\t\t}\n\t\tdata.l = start + length;\n\t\treturn z;\n\t}\n\tfunction write_RichStr(str, o) {\n\t\t/* TODO: formatted string */\n\t\tif(o == null) o = new_buf(5+2*str.t.length);\n\t\to.write_shift(1,0);\n\t\twrite_XLWideString(str.t, o);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.5.9 */\n\tfunction parse_XLSBCell(data) {\n\t\tvar col = data.read_shift(4);\n\t\tvar iStyleRef = data.read_shift(2);\n\t\tiStyleRef += data.read_shift(1) <<16;\n\t\tvar fPhShow = data.read_shift(1);\n\t\treturn { c:col, iStyleRef: iStyleRef };\n\t}\n\tfunction write_XLSBCell(cell, o) {\n\t\tif(o == null) o = new_buf(8);\n\t\to.write_shift(-4, cell.c);\n\t\to.write_shift(3, cell.iStyleRef === undefined ? cell.iStyleRef : cell.s);\n\t\to.write_shift(1, 0); /* fPhShow */\n\t\treturn o;\n\t}\n\t\n\t\n\t/* [MS-XLSB] 2.5.21 */\n\tfunction parse_XLSBCodeName (data, length) { return parse_XLWideString(data, length); }\n\t\n\t/* [MS-XLSB] 2.5.166 */\n\tfunction parse_XLNullableWideString(data) {\n\t\tvar cchCharacters = data.read_shift(4);\n\t\treturn cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n\t}\n\tfunction write_XLNullableWideString(data, o) {\n\t\tif(!o) o = new_buf(127);\n\t\to.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);\n\t\tif(data.length > 0) o.write_shift(0, data, 'dbcs');\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.5.168 */\n\tfunction parse_XLWideString(data) {\n\t\tvar cchCharacters = data.read_shift(4);\n\t\treturn cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n\t}\n\tfunction write_XLWideString(data, o) {\n\t\tif(o == null) o = new_buf(4+2*data.length);\n\t\to.write_shift(4, data.length);\n\t\tif(data.length > 0) o.write_shift(0, data, 'dbcs');\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.5.114 */\n\tvar parse_RelID = parse_XLNullableWideString;\n\tvar write_RelID = write_XLNullableWideString;\n\t\n\t\n\t/* [MS-XLSB] 2.5.122 */\n\t/* [MS-XLS] 2.5.217 */\n\tfunction parse_RkNumber(data) {\n\t\tvar b = data.slice(data.l, data.l+4);\n\t\tvar fX100 = b[0] & 1, fInt = b[0] & 2;\n\t\tdata.l+=4;\n\t\tb[0] &= 0xFC; // b[0] &= ~3;\n\t\tvar RK = fInt === 0 ? __double([0,0,0,0,b[0],b[1],b[2],b[3]],0) : __readInt32LE(b,0)>>2;\n\t\treturn fX100 ? RK/100 : RK;\n\t}\n\t\n\t/* [MS-XLSB] 2.5.153 */\n\tfunction parse_UncheckedRfX(data) {\n\t\tvar cell = {s: {}, e: {}};\n\t\tcell.s.r = data.read_shift(4);\n\t\tcell.e.r = data.read_shift(4);\n\t\tcell.s.c = data.read_shift(4);\n\t\tcell.e.c = data.read_shift(4);\n\t\treturn cell;\n\t}\n\t\n\tfunction write_UncheckedRfX(r, o) {\n\t\tif(!o) o = new_buf(16);\n\t\to.write_shift(4, r.s.r);\n\t\to.write_shift(4, r.e.r);\n\t\to.write_shift(4, r.s.c);\n\t\to.write_shift(4, r.e.c);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.5.171 */\n\t/* [MS-XLS] 2.5.342 */\n\tfunction parse_Xnum(data, length) { return data.read_shift(8, 'f'); }\n\tfunction write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, 'f', data); }\n\t\n\t/* [MS-XLSB] 2.5.198.2 */\n\tvar BErr = {\n\t\t0x00: \"#NULL!\",\n\t\t0x07: \"#DIV/0!\",\n\t\t0x0F: \"#VALUE!\",\n\t\t0x17: \"#REF!\",\n\t\t0x1D: \"#NAME?\",\n\t\t0x24: \"#NUM!\",\n\t\t0x2A: \"#N/A\",\n\t\t0x2B: \"#GETTING_DATA\",\n\t\t0xFF: \"#WTF?\"\n\t};\n\tvar RBErr = evert_num(BErr);\n\t\n\t/* [MS-XLSB] 2.4.321 BrtColor */\n\tfunction parse_BrtColor(data, length) {\n\t\tvar out = {};\n\t\tvar d = data.read_shift(1);\n\t\tout.fValidRGB = d & 1;\n\t\tout.xColorType = d >>> 1;\n\t\tout.index = data.read_shift(1);\n\t\tout.nTintAndShade = data.read_shift(2, 'i');\n\t\tout.bRed   = data.read_shift(1);\n\t\tout.bGreen = data.read_shift(1);\n\t\tout.bBlue  = data.read_shift(1);\n\t\tout.bAlpha = data.read_shift(1);\n\t}\n\t\n\t/* [MS-XLSB] 2.5.52 */\n\tfunction parse_FontFlags(data, length) {\n\t\tvar d = data.read_shift(1);\n\t\tdata.l++;\n\t\tvar out = {\n\t\t\tfItalic: d & 0x2,\n\t\t\tfStrikeout: d & 0x8,\n\t\t\tfOutline: d & 0x10,\n\t\t\tfShadow: d & 0x20,\n\t\t\tfCondense: d & 0x40,\n\t\t\tfExtend: d & 0x80\n\t\t};\n\t\treturn out;\n\t}\n\t/* [MS-OLEPS] 2.2 PropertyType */\n\t{\n\t\tvar VT_EMPTY    = 0x0000;\n\t\tvar VT_NULL     = 0x0001;\n\t\tvar VT_I2       = 0x0002;\n\t\tvar VT_I4       = 0x0003;\n\t\tvar VT_R4       = 0x0004;\n\t\tvar VT_R8       = 0x0005;\n\t\tvar VT_CY       = 0x0006;\n\t\tvar VT_DATE     = 0x0007;\n\t\tvar VT_BSTR     = 0x0008;\n\t\tvar VT_ERROR    = 0x000A;\n\t\tvar VT_BOOL     = 0x000B;\n\t\tvar VT_VARIANT  = 0x000C;\n\t\tvar VT_DECIMAL  = 0x000E;\n\t\tvar VT_I1       = 0x0010;\n\t\tvar VT_UI1      = 0x0011;\n\t\tvar VT_UI2      = 0x0012;\n\t\tvar VT_UI4      = 0x0013;\n\t\tvar VT_I8       = 0x0014;\n\t\tvar VT_UI8      = 0x0015;\n\t\tvar VT_INT      = 0x0016;\n\t\tvar VT_UINT     = 0x0017;\n\t\tvar VT_LPSTR    = 0x001E;\n\t\tvar VT_LPWSTR   = 0x001F;\n\t\tvar VT_FILETIME = 0x0040;\n\t\tvar VT_BLOB     = 0x0041;\n\t\tvar VT_STREAM   = 0x0042;\n\t\tvar VT_STORAGE  = 0x0043;\n\t\tvar VT_STREAMED_Object  = 0x0044;\n\t\tvar VT_STORED_Object    = 0x0045;\n\t\tvar VT_BLOB_Object      = 0x0046;\n\t\tvar VT_CF       = 0x0047;\n\t\tvar VT_CLSID    = 0x0048;\n\t\tvar VT_VERSIONED_STREAM = 0x0049;\n\t\tvar VT_VECTOR   = 0x1000;\n\t\tvar VT_ARRAY    = 0x2000;\n\t\n\t\tvar VT_STRING   = 0x0050; // 2.3.3.1.11 VtString\n\t\tvar VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString\n\t\tvar VT_CUSTOM   = [VT_STRING, VT_USTR];\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */\n\tvar DocSummaryPIDDSI = {\n\t\t0x01: { n: 'CodePage', t: VT_I2 },\n\t\t0x02: { n: 'Category', t: VT_STRING },\n\t\t0x03: { n: 'PresentationFormat', t: VT_STRING },\n\t\t0x04: { n: 'ByteCount', t: VT_I4 },\n\t\t0x05: { n: 'LineCount', t: VT_I4 },\n\t\t0x06: { n: 'ParagraphCount', t: VT_I4 },\n\t\t0x07: { n: 'SlideCount', t: VT_I4 },\n\t\t0x08: { n: 'NoteCount', t: VT_I4 },\n\t\t0x09: { n: 'HiddenCount', t: VT_I4 },\n\t\t0x0a: { n: 'MultimediaClipCount', t: VT_I4 },\n\t\t0x0b: { n: 'Scale', t: VT_BOOL },\n\t\t0x0c: { n: 'HeadingPair', t: VT_VECTOR | VT_VARIANT },\n\t\t0x0d: { n: 'DocParts', t: VT_VECTOR | VT_LPSTR },\n\t\t0x0e: { n: 'Manager', t: VT_STRING },\n\t\t0x0f: { n: 'Company', t: VT_STRING },\n\t\t0x10: { n: 'LinksDirty', t: VT_BOOL },\n\t\t0x11: { n: 'CharacterCount', t: VT_I4 },\n\t\t0x13: { n: 'SharedDoc', t: VT_BOOL },\n\t\t0x16: { n: 'HLinksChanged', t: VT_BOOL },\n\t\t0x17: { n: 'AppVersion', t: VT_I4, p: 'version' },\n\t\t0x1A: { n: 'ContentType', t: VT_STRING },\n\t\t0x1B: { n: 'ContentStatus', t: VT_STRING },\n\t\t0x1C: { n: 'Language', t: VT_STRING },\n\t\t0x1D: { n: 'Version', t: VT_STRING },\n\t\t0xFF: {}\n\t};\n\t\n\t/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */\n\tvar SummaryPIDSI = {\n\t\t0x01: { n: 'CodePage', t: VT_I2 },\n\t\t0x02: { n: 'Title', t: VT_STRING },\n\t\t0x03: { n: 'Subject', t: VT_STRING },\n\t\t0x04: { n: 'Author', t: VT_STRING },\n\t\t0x05: { n: 'Keywords', t: VT_STRING },\n\t\t0x06: { n: 'Comments', t: VT_STRING },\n\t\t0x07: { n: 'Template', t: VT_STRING },\n\t\t0x08: { n: 'LastAuthor', t: VT_STRING },\n\t\t0x09: { n: 'RevNumber', t: VT_STRING },\n\t\t0x0A: { n: 'EditTime', t: VT_FILETIME },\n\t\t0x0B: { n: 'LastPrinted', t: VT_FILETIME },\n\t\t0x0C: { n: 'CreatedDate', t: VT_FILETIME },\n\t\t0x0D: { n: 'ModifiedDate', t: VT_FILETIME },\n\t\t0x0E: { n: 'PageCount', t: VT_I4 },\n\t\t0x0F: { n: 'WordCount', t: VT_I4 },\n\t\t0x10: { n: 'CharCount', t: VT_I4 },\n\t\t0x11: { n: 'Thumbnail', t: VT_CF },\n\t\t0x12: { n: 'ApplicationName', t: VT_LPSTR },\n\t\t0x13: { n: 'DocumentSecurity', t: VT_I4 },\n\t\t0xFF: {}\n\t};\n\t\n\t/* [MS-OLEPS] 2.18 */\n\tvar SpecialProperties = {\n\t\t0x80000000: { n: 'Locale', t: VT_UI4 },\n\t\t0x80000003: { n: 'Behavior', t: VT_UI4 },\n\t\t0x72627262: {}\n\t};\n\t\n\t(function() {\n\t\tfor(var y in SpecialProperties) if(SpecialProperties.hasOwnProperty(y))\n\t\tDocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];\n\t})();\n\t\n\t/* [MS-XLS] 2.4.63 Country/Region codes */\n\tvar CountryEnum = {\n\t\t0x0001: \"US\", // United States\n\t\t0x0002: \"CA\", // Canada\n\t\t0x0003: \"\", // Latin America (except Brazil)\n\t\t0x0007: \"RU\", // Russia\n\t\t0x0014: \"EG\", // Egypt\n\t\t0x001E: \"GR\", // Greece\n\t\t0x001F: \"NL\", // Netherlands\n\t\t0x0020: \"BE\", // Belgium\n\t\t0x0021: \"FR\", // France\n\t\t0x0022: \"ES\", // Spain\n\t\t0x0024: \"HU\", // Hungary\n\t\t0x0027: \"IT\", // Italy\n\t\t0x0029: \"CH\", // Switzerland\n\t\t0x002B: \"AT\", // Austria\n\t\t0x002C: \"GB\", // United Kingdom\n\t\t0x002D: \"DK\", // Denmark\n\t\t0x002E: \"SE\", // Sweden\n\t\t0x002F: \"NO\", // Norway\n\t\t0x0030: \"PL\", // Poland\n\t\t0x0031: \"DE\", // Germany\n\t\t0x0034: \"MX\", // Mexico\n\t\t0x0037: \"BR\", // Brazil\n\t\t0x003d: \"AU\", // Australia\n\t\t0x0040: \"NZ\", // New Zealand\n\t\t0x0042: \"TH\", // Thailand\n\t\t0x0051: \"JP\", // Japan\n\t\t0x0052: \"KR\", // Korea\n\t\t0x0054: \"VN\", // Viet Nam\n\t\t0x0056: \"CN\", // China\n\t\t0x005A: \"TR\", // Turkey\n\t\t0x0069: \"JS\", // Ramastan\n\t\t0x00D5: \"DZ\", // Algeria\n\t\t0x00D8: \"MA\", // Morocco\n\t\t0x00DA: \"LY\", // Libya\n\t\t0x015F: \"PT\", // Portugal\n\t\t0x0162: \"IS\", // Iceland\n\t\t0x0166: \"FI\", // Finland\n\t\t0x01A4: \"CZ\", // Czech Republic\n\t\t0x0376: \"TW\", // Taiwan\n\t\t0x03C1: \"LB\", // Lebanon\n\t\t0x03C2: \"JO\", // Jordan\n\t\t0x03C3: \"SY\", // Syria\n\t\t0x03C4: \"IQ\", // Iraq\n\t\t0x03C5: \"KW\", // Kuwait\n\t\t0x03C6: \"SA\", // Saudi Arabia\n\t\t0x03CB: \"AE\", // United Arab Emirates\n\t\t0x03CC: \"IL\", // Israel\n\t\t0x03CE: \"QA\", // Qatar\n\t\t0x03D5: \"IR\", // Iran\n\t\t0xFFFF: \"US\"  // United States\n\t};\n\t\n\t/* [MS-XLS] 2.5.127 */\n\tvar XLSFillPattern = [\n\t\tnull,\n\t\t'solid',\n\t\t'mediumGray',\n\t\t'darkGray',\n\t\t'lightGray',\n\t\t'darkHorizontal',\n\t\t'darkVertical',\n\t\t'darkDown',\n\t\t'darkUp',\n\t\t'darkGrid',\n\t\t'darkTrellis',\n\t\t'lightHorizontal',\n\t\t'lightVertical',\n\t\t'lightDown',\n\t\t'lightUp',\n\t\t'lightGrid',\n\t\t'lightTrellis',\n\t\t'gray125',\n\t\t'gray0625'\n\t];\n\t\n\tfunction rgbify(arr) { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }\n\t\n\t/* [MS-XLS] 2.5.161 */\n\tvar XLSIcv = rgbify([\n\t\t/* Color Constants */\n\t\t0x000000,\n\t\t0xFFFFFF,\n\t\t0xFF0000,\n\t\t0x00FF00,\n\t\t0x0000FF,\n\t\t0xFFFF00,\n\t\t0xFF00FF,\n\t\t0x00FFFF,\n\t\n\t\t/* Defaults */\n\t\t0x000000,\n\t\t0xFFFFFF,\n\t\t0xFF0000,\n\t\t0x00FF00,\n\t\t0x0000FF,\n\t\t0xFFFF00,\n\t\t0xFF00FF,\n\t\t0x00FFFF,\n\t\n\t\t0x800000,\n\t\t0x008000,\n\t\t0x000080,\n\t\t0x808000,\n\t\t0x800080,\n\t\t0x008080,\n\t\t0xC0C0C0,\n\t\t0x808080,\n\t\t0x9999FF,\n\t\t0x993366,\n\t\t0xFFFFCC,\n\t\t0xCCFFFF,\n\t\t0x660066,\n\t\t0xFF8080,\n\t\t0x0066CC,\n\t\t0xCCCCFF,\n\t\n\t\t0x000080,\n\t\t0xFF00FF,\n\t\t0xFFFF00,\n\t\t0x00FFFF,\n\t\t0x800080,\n\t\t0x800000,\n\t\t0x008080,\n\t\t0x0000FF,\n\t\t0x00CCFF,\n\t\t0xCCFFFF,\n\t\t0xCCFFCC,\n\t\t0xFFFF99,\n\t\t0x99CCFF,\n\t\t0xFF99CC,\n\t\t0xCC99FF,\n\t\t0xFFCC99,\n\t\n\t\t0x3366FF,\n\t\t0x33CCCC,\n\t\t0x99CC00,\n\t\t0xFFCC00,\n\t\t0xFF9900,\n\t\t0xFF6600,\n\t\t0x666699,\n\t\t0x969696,\n\t\t0x003366,\n\t\t0x339966,\n\t\t0x003300,\n\t\t0x333300,\n\t\t0x993300,\n\t\t0x993366,\n\t\t0x333399,\n\t\t0x333333,\n\t\n\t\t/* Sheet */\n\t\t0xFFFFFF,\n\t\t0x000000\n\t]);\n\t\n\t/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */\n\t/* 12.3 Part Summary <SpreadsheetML> */\n\t/* 14.2 Part Summary <DrawingML> */\n\t/* [MS-XLSX] 2.1 Part Enumerations */\n\t/* [MS-XLSB] 2.1.7 Part Enumeration */\n\tvar ct2type = {\n\t\t/* Workbook */\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": \"workbooks\",\n\t\n\t\t/* Worksheet */\n\t\t\"application/vnd.ms-excel.binIndexWs\": \"TODO\", /* Binary Index */\n\t\n\t\t/* Chartsheet */\n\t\t\"application/vnd.ms-excel.chartsheet\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": \"TODO\",\n\t\n\t\t/* Dialogsheet */\n\t\t\"application/vnd.ms-excel.dialogsheet\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": \"TODO\",\n\t\n\t\t/* Macrosheet */\n\t\t\"application/vnd.ms-excel.macrosheet\": \"TODO\",\n\t\t\"application/vnd.ms-excel.macrosheet+xml\": \"TODO\",\n\t\t\"application/vnd.ms-excel.intlmacrosheet\": \"TODO\",\n\t\t\"application/vnd.ms-excel.binIndexMs\": \"TODO\", /* Binary Index */\n\t\n\t\t/* File Properties */\n\t\t\"application/vnd.openxmlformats-package.core-properties+xml\": \"coreprops\",\n\t\t\"application/vnd.openxmlformats-officedocument.custom-properties+xml\": \"custprops\",\n\t\t\"application/vnd.openxmlformats-officedocument.extended-properties+xml\": \"extprops\",\n\t\n\t\t/* Custom Data Properties */\n\t\t\"application/vnd.openxmlformats-officedocument.customXmlProperties+xml\": \"TODO\",\n\t\n\t\t/* Comments */\n\t\t\"application/vnd.ms-excel.comments\": \"comments\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": \"comments\",\n\t\n\t\t/* PivotTable */\n\t\t\"application/vnd.ms-excel.pivotTable\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml\": \"TODO\",\n\t\n\t\t/* Calculation Chain */\n\t\t\"application/vnd.ms-excel.calcChain\": \"calcchains\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\": \"calcchains\",\n\t\n\t\t/* Printer Settings */\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\": \"TODO\",\n\t\n\t\t/* ActiveX */\n\t\t\"application/vnd.ms-office.activeX\": \"TODO\",\n\t\t\"application/vnd.ms-office.activeX+xml\": \"TODO\",\n\t\n\t\t/* Custom Toolbars */\n\t\t\"application/vnd.ms-excel.attachedToolbars\": \"TODO\",\n\t\n\t\t/* External Data Connections */\n\t\t\"application/vnd.ms-excel.connections\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": \"TODO\",\n\t\n\t\t/* External Links */\n\t\t\"application/vnd.ms-excel.externalLink\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml\": \"TODO\",\n\t\n\t\t/* Metadata */\n\t\t\"application/vnd.ms-excel.sheetMetadata\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\": \"TODO\",\n\t\n\t\t/* PivotCache */\n\t\t\"application/vnd.ms-excel.pivotCacheDefinition\": \"TODO\",\n\t\t\"application/vnd.ms-excel.pivotCacheRecords\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml\": \"TODO\",\n\t\n\t\t/* Query Table */\n\t\t\"application/vnd.ms-excel.queryTable\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml\": \"TODO\",\n\t\n\t\t/* Shared Workbook */\n\t\t\"application/vnd.ms-excel.userNames\": \"TODO\",\n\t\t\"application/vnd.ms-excel.revisionHeaders\": \"TODO\",\n\t\t\"application/vnd.ms-excel.revisionLog\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml\": \"TODO\",\n\t\n\t\t/* Single Cell Table */\n\t\t\"application/vnd.ms-excel.tableSingleCells\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml\": \"TODO\",\n\t\n\t\t/* Slicer */\n\t\t\"application/vnd.ms-excel.slicer\": \"TODO\",\n\t\t\"application/vnd.ms-excel.slicerCache\": \"TODO\",\n\t\t\"application/vnd.ms-excel.slicer+xml\": \"TODO\",\n\t\t\"application/vnd.ms-excel.slicerCache+xml\": \"TODO\",\n\t\n\t\t/* Sort Map */\n\t\t\"application/vnd.ms-excel.wsSortMap\": \"TODO\",\n\t\n\t\t/* Table */\n\t\t\"application/vnd.ms-excel.table\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": \"TODO\",\n\t\n\t\t/* Themes */\n\t\t\"application/vnd.openxmlformats-officedocument.theme+xml\": \"themes\",\n\t\n\t\t/* Timeline */\n\t\t\"application/vnd.ms-excel.Timeline+xml\": \"TODO\", /* verify */\n\t\t\"application/vnd.ms-excel.TimelineCache+xml\": \"TODO\", /* verify */\n\t\n\t\t/* VBA */\n\t\t\"application/vnd.ms-office.vbaProject\": \"vba\",\n\t\t\"application/vnd.ms-office.vbaProjectSignature\": \"vba\",\n\t\n\t\t/* Volatile Dependencies */\n\t\t\"application/vnd.ms-office.volatileDependencies\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml\": \"TODO\",\n\t\n\t\t/* Control Properties */\n\t\t\"application/vnd.ms-excel.controlproperties+xml\": \"TODO\",\n\t\n\t\t/* Data Model */\n\t\t\"application/vnd.openxmlformats-officedocument.model+data\": \"TODO\",\n\t\n\t\t/* Survey */\n\t\t\"application/vnd.ms-excel.Survey+xml\": \"TODO\",\n\t\n\t\t/* Drawing */\n\t\t\"application/vnd.openxmlformats-officedocument.drawing+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml\": \"TODO\",\n\t\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml\": \"TODO\",\n\t\n\t\t/* VML */\n\t\t\"application/vnd.openxmlformats-officedocument.vmlDrawing\": \"TODO\",\n\t\n\t\t\"application/vnd.openxmlformats-package.relationships+xml\": \"rels\",\n\t\t\"application/vnd.openxmlformats-officedocument.oleObject\": \"TODO\",\n\t\n\t\t\"sheet\": \"js\"\n\t};\n\t\n\tvar CT_LIST = (function(){\n\t\tvar o = {\n\t\t\tworkbooks: {\n\t\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\",\n\t\t\t\txlsm: \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\",\n\t\t\t\txlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\",\n\t\t\t\txltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\"\n\t\t\t},\n\t\t\tstrs: { /* Shared Strings */\n\t\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\",\n\t\t\t\txlsb: \"application/vnd.ms-excel.sharedStrings\"\n\t\t\t},\n\t\t\tsheets: {\n\t\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\",\n\t\t\t\txlsb: \"application/vnd.ms-excel.worksheet\"\n\t\t\t},\n\t\t\tstyles: {/* Styles */\n\t\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\",\n\t\t\t\txlsb: \"application/vnd.ms-excel.styles\"\n\t\t\t}\n\t\t};\n\t\tkeys(o).forEach(function(k) { if(!o[k].xlsm) o[k].xlsm = o[k].xlsx; });\n\t\tkeys(o).forEach(function(k){ keys(o[k]).forEach(function(v) { ct2type[o[k][v]] = k; }); });\n\t\treturn o;\n\t})();\n\t\n\tvar type2ct = evert_arr(ct2type);\n\t\n\tXMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';\n\t\n\tfunction parse_ct(data, opts) {\n\t\tvar ctext = {};\n\t\tif(!data || !data.match) return data;\n\t\tvar ct = { workbooks: [], sheets: [], calcchains: [], themes: [], styles: [],\n\t\t\tcoreprops: [], extprops: [], custprops: [], strs:[], comments: [], vba: [],\n\t\t\tTODO:[], rels:[], xmlns: \"\" };\n\t\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\t\tvar y = parsexmltag(x);\n\t\t\tswitch(y[0].replace(nsregex,\"<\")) {\n\t\t\t\tcase '<?xml': break;\n\t\t\t\tcase '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\\w+):/)||[\"\",\"\"])[1] ]; break;\n\t\t\t\tcase '<Default': ctext[y.Extension] = y.ContentType; break;\n\t\t\t\tcase '<Override':\n\t\t\t\t\tif(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);\n\t\t\t\t\telse if(opts.WTF) console.error(y);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\tif(ct.xmlns !== XMLNS.CT) throw new Error(\"Unknown Namespace: \" + ct.xmlns);\n\t\tct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : \"\";\n\t\tct.sst = ct.strs.length > 0 ? ct.strs[0] : \"\";\n\t\tct.style = ct.styles.length > 0 ? ct.styles[0] : \"\";\n\t\tct.defaults = ctext;\n\t\tdelete ct.calcchains;\n\t\treturn ct;\n\t}\n\t\n\tvar CTYPE_XML_ROOT = writextag('Types', null, {\n\t\t'xmlns': XMLNS.CT,\n\t\t'xmlns:xsd': XMLNS.xsd,\n\t\t'xmlns:xsi': XMLNS.xsi\n\t});\n\t\n\tvar CTYPE_DEFAULTS = [\n\t\t['xml', 'application/xml'],\n\t\t['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],\n\t\t['rels', type2ct.rels[0]]\n\t].map(function(x) {\n\t\treturn writextag('Default', null, {'Extension':x[0], 'ContentType': x[1]});\n\t});\n\t\n\tfunction write_ct(ct, opts) {\n\t\tvar o = [], v;\n\t\to[o.length] = (XML_HEADER);\n\t\to[o.length] = (CTYPE_XML_ROOT);\n\t\to = o.concat(CTYPE_DEFAULTS);\n\t\tvar f1 = function(w) {\n\t\t\tif(ct[w] && ct[w].length > 0) {\n\t\t\t\tv = ct[w][0];\n\t\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t\t'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n\t\t\t\t}));\n\t\t\t}\n\t\t};\n\t\tvar f2 = function(w) {\n\t\t\tct[w].forEach(function(v) {\n\t\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t\t'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n\t\t\t\t}));\n\t\t\t});\n\t\t};\n\t\tvar f3 = function(t) {\n\t\t\t(ct[t]||[]).forEach(function(v) {\n\t\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t\t'ContentType': type2ct[t][0]\n\t\t\t\t}));\n\t\t\t});\n\t\t};\n\t\tf1('workbooks');\n\t\tf2('sheets');\n\t\tf3('themes');\n\t\t['strs', 'styles'].forEach(f1);\n\t\t['coreprops', 'extprops', 'custprops'].forEach(f3);\n\t\tif(o.length>2){ o[o.length] = ('</Types>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t/* 9.3.2 OPC Relationships Markup */\n\tvar RELS = {\n\t\tWB: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n\t\tSHEET: \"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"\n\t};\n\t\n\tfunction parse_rels(data, currentFilePath) {\n\t\tif (!data) return data;\n\t\tif (currentFilePath.charAt(0) !== '/') {\n\t\t\tcurrentFilePath = '/'+currentFilePath;\n\t\t}\n\t\tvar rels = {};\n\t\tvar hash = {};\n\t\tvar resolveRelativePathIntoAbsolute = function (to) {\n\t\t\tvar toksFrom = currentFilePath.split('/');\n\t\t\ttoksFrom.pop(); // folder path\n\t\t\tvar toksTo = to.split('/');\n\t\t\tvar reversed = [];\n\t\t\twhile (toksTo.length !== 0) {\n\t\t\t\tvar tokTo = toksTo.shift();\n\t\t\t\tif (tokTo === '..') {\n\t\t\t\t\ttoksFrom.pop();\n\t\t\t\t} else if (tokTo !== '.') {\n\t\t\t\t\ttoksFrom.push(tokTo);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn toksFrom.join('/');\n\t\t};\n\t\n\t\tdata.match(tagregex).forEach(function(x) {\n\t\t\tvar y = parsexmltag(x);\n\t\t\t/* 9.3.2.2 OPC_Relationships */\n\t\t\tif (y[0] === '<Relationship') {\n\t\t\t\tvar rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; rel.TargetMode = y.TargetMode;\n\t\t\t\tvar canonictarget = y.TargetMode === 'External' ? y.Target : resolveRelativePathIntoAbsolute(y.Target);\n\t\t\t\trels[canonictarget] = rel;\n\t\t\t\thash[y.Id] = rel;\n\t\t\t}\n\t\t});\n\t\trels[\"!id\"] = hash;\n\t\treturn rels;\n\t}\n\t\n\tXMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';\n\t\n\tvar RELS_ROOT = writextag('Relationships', null, {\n\t\t//'xmlns:ns0': XMLNS.RELS,\n\t\t'xmlns': XMLNS.RELS\n\t});\n\t\n\t/* TODO */\n\tfunction write_rels(rels) {\n\t\tvar o = [];\n\t\to[o.length] = (XML_HEADER);\n\t\to[o.length] = (RELS_ROOT);\n\t\tkeys(rels['!id']).forEach(function(rid) { var rel = rels['!id'][rid];\n\t\t\to[o.length] = (writextag('Relationship', null, rel));\n\t\t});\n\t\tif(o.length>2){ o[o.length] = ('</Relationships>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t/* ECMA-376 Part II 11.1 Core Properties Part */\n\t/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\n\tvar CORE_PROPS = [\n\t\t[\"cp:category\", \"Category\"],\n\t\t[\"cp:contentStatus\", \"ContentStatus\"],\n\t\t[\"cp:keywords\", \"Keywords\"],\n\t\t[\"cp:lastModifiedBy\", \"LastAuthor\"],\n\t\t[\"cp:lastPrinted\", \"LastPrinted\"],\n\t\t[\"cp:revision\", \"RevNumber\"],\n\t\t[\"cp:version\", \"Version\"],\n\t\t[\"dc:creator\", \"Author\"],\n\t\t[\"dc:description\", \"Comments\"],\n\t\t[\"dc:identifier\", \"Identifier\"],\n\t\t[\"dc:language\", \"Language\"],\n\t\t[\"dc:subject\", \"Subject\"],\n\t\t[\"dc:title\", \"Title\"],\n\t\t[\"dcterms:created\", \"CreatedDate\", 'date'],\n\t\t[\"dcterms:modified\", \"ModifiedDate\", 'date']\n\t];\n\t\n\tXMLNS.CORE_PROPS = \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\";\n\tRELS.CORE_PROPS  = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';\n\t\n\tvar CORE_PROPS_REGEX = (function() {\n\t\tvar r = new Array(CORE_PROPS.length);\n\t\tfor(var i = 0; i < CORE_PROPS.length; ++i) {\n\t\t\tvar f = CORE_PROPS[i];\n\t\t\tvar g = \"(?:\"+ f[0].substr(0,f[0].indexOf(\":\")) +\":)\"+ f[0].substr(f[0].indexOf(\":\")+1);\n\t\t\tr[i] = new RegExp(\"<\" + g + \"[^>]*>(.*)<\\/\" + g + \">\");\n\t\t}\n\t\treturn r;\n\t})();\n\t\n\tfunction parse_core_props(data) {\n\t\tvar p = {};\n\t\n\t\tfor(var i = 0; i < CORE_PROPS.length; ++i) {\n\t\t\tvar f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);\n\t\t\tif(cur != null && cur.length > 0) p[f[1]] = cur[1];\n\t\t\tif(f[2] === 'date' && p[f[1]]) p[f[1]] = new Date(p[f[1]]);\n\t\t}\n\t\n\t\treturn p;\n\t}\n\t\n\tvar CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {\n\t\t//'xmlns': XMLNS.CORE_PROPS,\n\t\t'xmlns:cp': XMLNS.CORE_PROPS,\n\t\t'xmlns:dc': XMLNS.dc,\n\t\t'xmlns:dcterms': XMLNS.dcterms,\n\t\t'xmlns:dcmitype': XMLNS.dcmitype,\n\t\t'xmlns:xsi': XMLNS.xsi\n\t});\n\t\n\tfunction cp_doit(f, g, h, o, p) {\n\t\tif(p[f] != null || g == null || g === \"\") return;\n\t\tp[f] = g;\n\t\to[o.length] = (h ? writextag(f,g,h) : writetag(f,g));\n\t}\n\t\n\tfunction write_core_props(cp, opts) {\n\t\tvar o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {};\n\t\tif(!cp) return o.join(\"\");\n\t\n\t\n\t\tif(cp.CreatedDate != null) cp_doit(\"dcterms:created\", typeof cp.CreatedDate === \"string\" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {\"xsi:type\":\"dcterms:W3CDTF\"}, o, p);\n\t\tif(cp.ModifiedDate != null) cp_doit(\"dcterms:modified\", typeof cp.ModifiedDate === \"string\" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {\"xsi:type\":\"dcterms:W3CDTF\"}, o, p);\n\t\n\t\tfor(var i = 0; i != CORE_PROPS.length; ++i) { var f = CORE_PROPS[i]; cp_doit(f[0], cp[f[1]], null, o, p); }\n\t\tif(o.length>2){ o[o.length] = ('</cp:coreProperties>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t/* 15.2.12.3 Extended File Properties Part */\n\t/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\n\tvar EXT_PROPS = [\n\t\t[\"Application\", \"Application\", \"string\"],\n\t\t[\"AppVersion\", \"AppVersion\", \"string\"],\n\t\t[\"Company\", \"Company\", \"string\"],\n\t\t[\"DocSecurity\", \"DocSecurity\", \"string\"],\n\t\t[\"Manager\", \"Manager\", \"string\"],\n\t\t[\"HyperlinksChanged\", \"HyperlinksChanged\", \"bool\"],\n\t\t[\"SharedDoc\", \"SharedDoc\", \"bool\"],\n\t\t[\"LinksUpToDate\", \"LinksUpToDate\", \"bool\"],\n\t\t[\"ScaleCrop\", \"ScaleCrop\", \"bool\"],\n\t\t[\"HeadingPairs\", \"HeadingPairs\", \"raw\"],\n\t\t[\"TitlesOfParts\", \"TitlesOfParts\", \"raw\"]\n\t];\n\t\n\tXMLNS.EXT_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\";\n\tRELS.EXT_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';\n\t\n\tfunction parse_ext_props(data, p) {\n\t\tvar q = {}; if(!p) p = {};\n\t\n\t\tEXT_PROPS.forEach(function(f) {\n\t\t\tswitch(f[2]) {\n\t\t\t\tcase \"string\": p[f[1]] = (data.match(matchtag(f[0]))||[])[1]; break;\n\t\t\t\tcase \"bool\": p[f[1]] = (data.match(matchtag(f[0]))||[])[1] === \"true\"; break;\n\t\t\t\tcase \"raw\":\n\t\t\t\t\tvar cur = data.match(new RegExp(\"<\" + f[0] + \"[^>]*>(.*)<\\/\" + f[0] + \">\"));\n\t\t\t\t\tif(cur && cur.length > 0) q[f[1]] = cur[1];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\n\t\tif(q.HeadingPairs && q.TitlesOfParts) {\n\t\t\tvar v = parseVector(q.HeadingPairs);\n\t\t\tvar j = 0, widx = 0;\n\t\t\tfor(var i = 0; i !== v.length; ++i) {\n\t\t\t\tswitch(v[i].v) {\n\t\t\t\t\tcase \"Worksheets\": widx = j; p.Worksheets = +(v[++i].v); break;\n\t\t\t\t\tcase \"Named Ranges\": ++i; break; // TODO: Handle Named Ranges\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar parts = parseVector(q.TitlesOfParts).map(function(x) { return utf8read(x.v); });\n\t\t\tp.SheetNames = parts.slice(widx, widx + p.Worksheets);\n\t\t}\n\t\treturn p;\n\t}\n\t\n\tvar EXT_PROPS_XML_ROOT = writextag('Properties', null, {\n\t\t'xmlns': XMLNS.EXT_PROPS,\n\t\t'xmlns:vt': XMLNS.vt\n\t});\n\t\n\tfunction write_ext_props(cp, opts) {\n\t\tvar o = [], p = {}, W = writextag;\n\t\tif(!cp) cp = {};\n\t\tcp.Application = \"SheetJS\";\n\t\to[o.length] = (XML_HEADER);\n\t\to[o.length] = (EXT_PROPS_XML_ROOT);\n\t\n\t\tEXT_PROPS.forEach(function(f) {\n\t\t\tif(cp[f[1]] === undefined) return;\n\t\t\tvar v;\n\t\t\tswitch(f[2]) {\n\t\t\t\tcase 'string': v = cp[f[1]]; break;\n\t\t\t\tcase 'bool': v = cp[f[1]] ? 'true' : 'false'; break;\n\t\t\t}\n\t\t\tif(v !== undefined) o[o.length] = (W(f[0], v));\n\t\t});\n\t\n\t\t/* TODO: HeadingPairs, TitlesOfParts */\n\t\to[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>')+W('vt:variant', W('vt:i4', String(cp.Worksheets))), {size:2, baseType:\"variant\"})));\n\t\to[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) { return \"<vt:lpstr>\" + s + \"</vt:lpstr>\"; }).join(\"\"), {size: cp.Worksheets, baseType:\"lpstr\"})));\n\t\tif(o.length>2){ o[o.length] = ('</Properties>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t/* 15.2.12.2 Custom File Properties Part */\n\tXMLNS.CUST_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\";\n\tRELS.CUST_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';\n\t\n\tvar custregex = /<[^>]+>[^<]*/g;\n\tfunction parse_cust_props(data, opts) {\n\t\tvar p = {}, name;\n\t\tvar m = data.match(custregex);\n\t\tif(m) for(var i = 0; i != m.length; ++i) {\n\t\t\tvar x = m[i], y = parsexmltag(x);\n\t\t\tswitch(y[0]) {\n\t\t\t\tcase '<?xml': break;\n\t\t\t\tcase '<Properties':\n\t\t\t\t\tif(y.xmlns !== XMLNS.CUST_PROPS) throw \"unrecognized xmlns \" + y.xmlns;\n\t\t\t\t\tif(y.xmlnsvt && y.xmlnsvt !== XMLNS.vt) throw \"unrecognized vt \" + y.xmlnsvt;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '<property': name = y.name; break;\n\t\t\t\tcase '</property>': name = null; break;\n\t\t\t\tdefault: if (x.indexOf('<vt:') === 0) {\n\t\t\t\t\tvar toks = x.split('>');\n\t\t\t\t\tvar type = toks[0].substring(4), text = toks[1];\n\t\t\t\t\t/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */\n\t\t\t\t\tswitch(type) {\n\t\t\t\t\t\tcase 'lpstr': case 'lpwstr': case 'bstr': case 'lpwstr':\n\t\t\t\t\t\t\tp[name] = unescapexml(text);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\t\tp[name] = parsexmlbool(text, '<vt:bool>');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':\n\t\t\t\t\t\t\tp[name] = parseInt(text, 10);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'r4': case 'r8': case 'decimal':\n\t\t\t\t\t\t\tp[name] = parseFloat(text);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'filetime': case 'date':\n\t\t\t\t\t\t\tp[name] = new Date(text);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cy': case 'error':\n\t\t\t\t\t\t\tp[name] = unescapexml(text);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif(typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);\n\t\t\t\t\t}\n\t\t\t\t} else if(x.substr(0,2) === \"</\") {\n\t\t\t\t} else if(opts.WTF) throw new Error(x);\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n\t\n\tvar CUST_PROPS_XML_ROOT = writextag('Properties', null, {\n\t\t'xmlns': XMLNS.CUST_PROPS,\n\t\t'xmlns:vt': XMLNS.vt\n\t});\n\t\n\tfunction write_cust_props(cp, opts) {\n\t\tvar o = [XML_HEADER, CUST_PROPS_XML_ROOT];\n\t\tif(!cp) return o.join(\"\");\n\t\tvar pid = 1;\n\t\tkeys(cp).forEach(function custprop(k) { ++pid;\n\t\t\to[o.length] = (writextag('property', write_vt(cp[k]), {\n\t\t\t\t'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',\n\t\t\t\t'pid': pid,\n\t\t\t\t'name': k\n\t\t\t}));\n\t\t});\n\t\tif(o.length>2){ o[o.length] = '</Properties>'; o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\tfunction xlml_set_prop(Props, tag, val) {\n\t\t/* TODO: Normalize the properties */\n\t\tswitch(tag) {\n\t\t\tcase 'Description': tag = 'Comments'; break;\n\t\t}\n\t\tProps[tag] = val;\n\t}\n\t\n\t/* [MS-DTYP] 2.3.3 FILETIME */\n\t/* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */\n\t/* [MS-OLEPS] 2.8 FILETIME (Packet Version) */\n\tfunction parse_FILETIME(blob) {\n\t\tvar dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);\n\t\treturn new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\\.000/,\"\");\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.1.4 Lpstr */\n\tfunction parse_lpstr(blob, type, pad) {\n\t\tvar str = blob.read_shift(0, 'lpstr');\n\t\tif(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;\n\t\treturn str;\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */\n\tfunction parse_lpwstr(blob, type, pad) {\n\t\tvar str = blob.read_shift(0, 'lpwstr');\n\t\tif(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;\n\t\treturn str;\n\t}\n\t\n\t\n\t/* [MS-OSHARED] 2.3.3.1.11 VtString */\n\t/* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */\n\tfunction parse_VtStringBase(blob, stringType, pad) {\n\t\tif(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);\n\t\treturn parse_lpstr(blob, stringType, pad);\n\t}\n\t\n\tfunction parse_VtString(blob, t, pad) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }\n\tfunction parse_VtUnalignedString(blob, t) { if(!t) throw new Error(\"dafuq?\"); return parse_VtStringBase(blob, t, 0); }\n\t\n\t/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */\n\tfunction parse_VtVecUnalignedLpstrValue(blob) {\n\t\tvar length = blob.read_shift(4);\n\t\tvar ret = [];\n\t\tfor(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr');\n\t\treturn ret;\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */\n\tfunction parse_VtVecUnalignedLpstr(blob) {\n\t\treturn parse_VtVecUnalignedLpstrValue(blob);\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */\n\tfunction parse_VtHeadingPair(blob) {\n\t\tvar headingString = parse_TypedPropertyValue(blob, VT_USTR);\n\t\tvar headerParts = parse_TypedPropertyValue(blob, VT_I4);\n\t\treturn [headingString, headerParts];\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */\n\tfunction parse_VtVecHeadingPairValue(blob) {\n\t\tvar cElements = blob.read_shift(4);\n\t\tvar out = [];\n\t\tfor(var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));\n\t\treturn out;\n\t}\n\t\n\t/* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */\n\tfunction parse_VtVecHeadingPair(blob) {\n\t\t// NOTE: When invoked, wType & padding were already consumed\n\t\treturn parse_VtVecHeadingPairValue(blob);\n\t}\n\t\n\t/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */\n\tfunction parse_dictionary(blob,CodePage) {\n\t\tvar cnt = blob.read_shift(4);\n\t\tvar dict = {};\n\t\tfor(var j = 0; j != cnt; ++j) {\n\t\t\tvar pid = blob.read_shift(4);\n\t\t\tvar len = blob.read_shift(4);\n\t\t\tdict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');\n\t\t}\n\t\tif(blob.l & 3) blob.l = (blob.l>>2+1)<<2;\n\t\treturn dict;\n\t}\n\t\n\t/* [MS-OLEPS] 2.9 BLOB */\n\tfunction parse_BLOB(blob) {\n\t\tvar size = blob.read_shift(4);\n\t\tvar bytes = blob.slice(blob.l,blob.l+size);\n\t\tif(size & 3 > 0) blob.l += (4 - (size & 3)) & 3;\n\t\treturn bytes;\n\t}\n\t\n\t/* [MS-OLEPS] 2.11 ClipboardData */\n\tfunction parse_ClipboardData(blob) {\n\t\t// TODO\n\t\tvar o = {};\n\t\to.Size = blob.read_shift(4);\n\t\t//o.Format = blob.read_shift(4);\n\t\tblob.l += o.Size;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-OLEPS] 2.14 Vector and Array Property Types */\n\tfunction parse_VtVector(blob, cb) {\n\t\t/* [MS-OLEPS] 2.14.2 VectorHeader */\n\t/*\tvar Length = blob.read_shift(4);\n\t\tvar o = [];\n\t\tfor(var i = 0; i != Length; ++i) {\n\t\t\to.push(cb(blob));\n\t\t}\n\t\treturn o;*/\n\t}\n\t\n\t/* [MS-OLEPS] 2.15 TypedPropertyValue */\n\tfunction parse_TypedPropertyValue(blob, type, _opts) {\n\t\tvar t = blob.read_shift(2), ret, opts = _opts||{};\n\t\tblob.l += 2;\n\t\tif(type !== VT_VARIANT)\n\t\tif(t !== type && VT_CUSTOM.indexOf(type)===-1) throw new Error('Expected type ' + type + ' saw ' + t);\n\t\tswitch(type === VT_VARIANT ? t : type) {\n\t\t\tcase 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;\n\t\t\tcase 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;\n\t\t\tcase 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;\n\t\t\tcase 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;\n\t\t\tcase 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');\n\t\t\tcase 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);\n\t\t\tcase 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);\n\t\t\tcase 0x41 /*VT_BLOB*/: return parse_BLOB(blob);\n\t\t\tcase 0x47 /*VT_CF*/: return parse_ClipboardData(blob);\n\t\t\tcase 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw && 4).replace(chr0,'');\n\t\t\tcase 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t, 4).replace(chr0,'');\n\t\t\tcase 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPair(blob);\n\t\t\tcase 0x101E /*VT_LPSTR*/: return parse_VtVecUnalignedLpstr(blob);\n\t\t\tdefault: throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + t);\n\t\t}\n\t}\n\t/* [MS-OLEPS] 2.14.2 VectorHeader */\n\t/*function parse_VTVectorVariant(blob) {\n\t\tvar Length = blob.read_shift(4);\n\t\n\t\tif(Length & 1 !== 0) throw new Error(\"VectorHeader Length=\" + Length + \" must be even\");\n\t\tvar o = [];\n\t\tfor(var i = 0; i != Length; ++i) {\n\t\t\to.push(parse_TypedPropertyValue(blob, VT_VARIANT));\n\t\t}\n\t\treturn o;\n\t}*/\n\t\n\t/* [MS-OLEPS] 2.20 PropertySet */\n\tfunction parse_PropertySet(blob, PIDSI) {\n\t\tvar start_addr = blob.l;\n\t\tvar size = blob.read_shift(4);\n\t\tvar NumProps = blob.read_shift(4);\n\t\tvar Props = [], i = 0;\n\t\tvar CodePage = 0;\n\t\tvar Dictionary = -1, DictObj;\n\t\tfor(i = 0; i != NumProps; ++i) {\n\t\t\tvar PropID = blob.read_shift(4);\n\t\t\tvar Offset = blob.read_shift(4);\n\t\t\tProps[i] = [PropID, Offset + start_addr];\n\t\t}\n\t\tvar PropH = {};\n\t\tfor(i = 0; i != NumProps; ++i) {\n\t\t\tif(blob.l !== Props[i][1]) {\n\t\t\t\tvar fail = true;\n\t\t\t\tif(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {\n\t\t\t\t\tcase 0x02 /*VT_I2*/: if(blob.l +2 === Props[i][1]) { blob.l+=2; fail = false; } break;\n\t\t\t\t\tcase 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;\n\t\t\t\t\tcase 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;\n\t\t\t\t}\n\t\t\t\tif(!PIDSI && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }\n\t\t\t\tif(fail) throw new Error(\"Read Error: Expected address \" + Props[i][1] + ' at ' + blob.l + ' :' + i);\n\t\t\t}\n\t\t\tif(PIDSI) {\n\t\t\t\tvar piddsi = PIDSI[Props[i][0]];\n\t\t\t\tPropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});\n\t\t\t\tif(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + \".\" + String(PropH[piddsi.n] & 0xFFFF);\n\t\t\t\tif(piddsi.n == \"CodePage\") switch(PropH[piddsi.n]) {\n\t\t\t\t\tcase 0: PropH[piddsi.n] = 1252;\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase 10000: // OSX Roman\n\t\t\t\t\tcase 1252: // Windows Latin\n\t\n\t\t\t\t\tcase 874: // SB Windows Thai\n\t\t\t\t\tcase 1250: // SB Windows Central Europe\n\t\t\t\t\tcase 1251: // SB Windows Cyrillic\n\t\t\t\t\tcase 1253: // SB Windows Greek\n\t\t\t\t\tcase 1254: // SB Windows Turkish\n\t\t\t\t\tcase 1255: // SB Windows Hebrew\n\t\t\t\t\tcase 1256: // SB Windows Arabic\n\t\t\t\t\tcase 1257: // SB Windows Baltic\n\t\t\t\t\tcase 1258: // SB Windows Vietnam\n\t\n\t\t\t\t\tcase 932: // DB Windows Japanese Shift-JIS\n\t\t\t\t\tcase 936: // DB Windows Simplified Chinese GBK\n\t\t\t\t\tcase 949: // DB Windows Korean\n\t\t\t\t\tcase 950: // DB Windows Traditional Chinese Big5\n\t\n\t\t\t\t\tcase 1200: // UTF16LE\n\t\t\t\t\tcase 1201: // UTF16BE\n\t\t\t\t\tcase 65000: case -536: // UTF-7\n\t\t\t\t\tcase 65001: case -535: // UTF-8\n\t\t\t\t\t\tset_cp(CodePage = PropH[piddsi.n]); break;\n\t\t\t\t\tdefault: throw new Error(\"Unsupported CodePage: \" + PropH[piddsi.n]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif(Props[i][0] === 0x1) {\n\t\t\t\t\tCodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);\n\t\t\t\t\tset_cp(CodePage);\n\t\t\t\t\tif(Dictionary !== -1) {\n\t\t\t\t\t\tvar oldpos = blob.l;\n\t\t\t\t\t\tblob.l = Props[Dictionary][1];\n\t\t\t\t\t\tDictObj = parse_dictionary(blob,CodePage);\n\t\t\t\t\t\tblob.l = oldpos;\n\t\t\t\t\t}\n\t\t\t\t} else if(Props[i][0] === 0) {\n\t\t\t\t\tif(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }\n\t\t\t\t\tDictObj = parse_dictionary(blob,CodePage);\n\t\t\t\t} else {\n\t\t\t\t\tvar name = DictObj[Props[i][0]];\n\t\t\t\t\tvar val;\n\t\t\t\t\t/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */\n\t\t\t\t\tswitch(blob[blob.l]) {\n\t\t\t\t\t\tcase 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;\n\t\t\t\t\t\tcase 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;\n\t\t\t\t\t\tcase 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;\n\t\t\t\t\t\tcase 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;\n\t\t\t\t\t\tcase 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;\n\t\t\t\t\t\tcase 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;\n\t\t\t\t\t\tcase 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;\n\t\t\t\t\t\tcase 0x40 /*VT_FILETIME*/: blob.l += 4; val = new Date(parse_FILETIME(blob)); break;\n\t\t\t\t\t\tdefault: throw new Error(\"unparsed value: \" + blob[blob.l]);\n\t\t\t\t\t}\n\t\t\t\t\tPropH[name] = val;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tblob.l = start_addr + size; /* step ahead to skip padding */\n\t\treturn PropH;\n\t}\n\t\n\t/* [MS-OLEPS] 2.21 PropertySetStream */\n\tfunction parse_PropertySetStream(file, PIDSI) {\n\t\tvar blob = file.content;\n\t\tprep_blob(blob, 0);\n\t\n\t\tvar NumSets, FMTID0, FMTID1, Offset0, Offset1;\n\t\tblob.chk('feff', 'Byte Order: ');\n\t\n\t\tvar vers = blob.read_shift(2); // TODO: check version\n\t\tvar SystemIdentifier = blob.read_shift(4);\n\t\tblob.chk(CFB.utils.consts.HEADER_CLSID, 'CLSID: ');\n\t\tNumSets = blob.read_shift(4);\n\t\tif(NumSets !== 1 && NumSets !== 2) throw \"Unrecognized #Sets: \" + NumSets;\n\t\tFMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);\n\t\n\t\tif(NumSets === 1 && Offset0 !== blob.l) throw \"Length mismatch\";\n\t\telse if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }\n\t\tvar PSet0 = parse_PropertySet(blob, PIDSI);\n\t\n\t\tvar rval = { SystemIdentifier: SystemIdentifier };\n\t\tfor(var y in PSet0) rval[y] = PSet0[y];\n\t\t//rval.blob = blob;\n\t\trval.FMTID = FMTID0;\n\t\t//rval.PSet0 = PSet0;\n\t\tif(NumSets === 1) return rval;\n\t\tif(blob.l !== Offset1) throw \"Length mismatch 2: \" + blob.l + \" !== \" + Offset1;\n\t\tvar PSet1;\n\t\ttry { PSet1 = parse_PropertySet(blob, null); } catch(e) { }\n\t\tfor(y in PSet1) rval[y] = PSet1[y];\n\t\trval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1\n\t\treturn rval;\n\t}\n\t\n\t\n\tfunction parsenoop2(blob, length) { blob.read_shift(length); return null; }\n\t\n\tfunction parslurp(blob, length, cb) {\n\t\tvar arr = [], target = blob.l + length;\n\t\twhile(blob.l < target) arr.push(cb(blob, target - blob.l));\n\t\tif(target !== blob.l) throw new Error(\"Slurp error\");\n\t\treturn arr;\n\t}\n\t\n\tfunction parslurp2(blob, length, cb) {\n\t\tvar arr = [], target = blob.l + length, len = blob.read_shift(2);\n\t\twhile(len-- !== 0) arr.push(cb(blob, target - blob.l));\n\t\tif(target !== blob.l) throw new Error(\"Slurp error\");\n\t\treturn arr;\n\t}\n\t\n\tfunction parsebool(blob, length) { return blob.read_shift(length) === 0x1; }\n\t\n\tfunction parseuint16(blob) { return blob.read_shift(2, 'u'); }\n\tfunction parseuint16a(blob, length) { return parslurp(blob,length,parseuint16);}\n\t\n\t/* --- 2.5 Structures --- */\n\t\n\t/* [MS-XLS] 2.5.14 Boolean */\n\tvar parse_Boolean = parsebool;\n\t\n\t/* [MS-XLS] 2.5.10 Bes (boolean or error) */\n\tfunction parse_Bes(blob) {\n\t\tvar v = blob.read_shift(1), t = blob.read_shift(1);\n\t\treturn t === 0x01 ? v : v === 0x01;\n\t}\n\t\n\t/* [MS-XLS] 2.5.240 ShortXLUnicodeString */\n\tfunction parse_ShortXLUnicodeString(blob, length, opts) {\n\t\tvar cch = blob.read_shift(1);\n\t\tvar width = 1, encoding = 'sbcs-cont';\n\t\tvar cp = current_codepage;\n\t\tif(opts && opts.biff >= 8) current_codepage = 1200;\n\t\tif(opts === undefined || opts.biff !== 5) {\n\t\t\tvar fHighByte = blob.read_shift(1);\n\t\t\tif(fHighByte) { width = 2; encoding = 'dbcs-cont'; }\n\t\t}\n\t\tvar o = cch ? blob.read_shift(cch, encoding) : \"\";\n\t\tcurrent_codepage = cp;\n\t\treturn o;\n\t}\n\t\n\t/* 2.5.293 XLUnicodeRichExtendedString */\n\tfunction parse_XLUnicodeRichExtendedString(blob) {\n\t\tvar cp = current_codepage;\n\t\tcurrent_codepage = 1200;\n\t\tvar cch = blob.read_shift(2), flags = blob.read_shift(1);\n\t\tvar fHighByte = flags & 0x1, fExtSt = flags & 0x4, fRichSt = flags & 0x8;\n\t\tvar width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs\n\t\tvar cRun, cbExtRst;\n\t\tvar z = {};\n\t\tif(fRichSt) cRun = blob.read_shift(2);\n\t\tif(fExtSt) cbExtRst = blob.read_shift(4);\n\t\tvar encoding = (flags & 0x1) ? 'dbcs-cont' : 'sbcs-cont';\n\t\tvar msg = cch === 0 ? \"\" : blob.read_shift(cch, encoding);\n\t\tif(fRichSt) blob.l += 4 * cRun; //TODO: parse this\n\t\tif(fExtSt) blob.l += cbExtRst; //TODO: parse this\n\t\tz.t = msg;\n\t\tif(!fRichSt) { z.raw = \"<t>\" + z.t + \"</t>\"; z.r = z.t; }\n\t\tcurrent_codepage = cp;\n\t\treturn z;\n\t}\n\t\n\t/* 2.5.296 XLUnicodeStringNoCch */\n\tfunction parse_XLUnicodeStringNoCch(blob, cch, opts) {\n\t\tvar retval;\n\t\tvar fHighByte = blob.read_shift(1);\n\t\tif(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }\n\t\telse { retval = blob.read_shift(cch, 'dbcs-cont'); }\n\t\treturn retval;\n\t}\n\t\n\t/* 2.5.294 XLUnicodeString */\n\tfunction parse_XLUnicodeString(blob, length, opts) {\n\t\tvar cch = blob.read_shift(opts !== undefined && opts.biff > 0 && opts.biff < 8 ? 1 : 2);\n\t\tif(cch === 0) { blob.l++; return \"\"; }\n\t\treturn parse_XLUnicodeStringNoCch(blob, cch, opts);\n\t}\n\t/* BIFF5 override */\n\tfunction parse_XLUnicodeString2(blob, length, opts) {\n\t\tif(opts.biff !== 5 && opts.biff !== 2) return parse_XLUnicodeString(blob, length, opts);\n\t\tvar cch = blob.read_shift(1);\n\t\tif(cch === 0) { blob.l++; return \"\"; }\n\t\treturn blob.read_shift(cch, 'sbcs-cont');\n\t}\n\t\n\t/* [MS-XLS] 2.5.61 ControlInfo */\n\tvar parse_ControlInfo = parsenoop;\n\t\n\t/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */\n\tvar parse_URLMoniker = function(blob, length) {\n\t\tvar len = blob.read_shift(4), start = blob.l;\n\t\tvar extra = false;\n\t\tif(len > 24) {\n\t\t\t/* look ahead */\n\t\t\tblob.l += len - 24;\n\t\t\tif(blob.read_shift(16) === \"795881f43b1d7f48af2c825dc4852763\") extra = true;\n\t\t\tblob.l = start;\n\t\t}\n\t\tvar url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,\"\");\n\t\tif(extra) blob.l += 24;\n\t\treturn url;\n\t};\n\t\n\t/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */\n\tvar parse_FileMoniker = function(blob, length) {\n\t\tvar cAnti = blob.read_shift(2);\n\t\tvar ansiLength = blob.read_shift(4);\n\t\tvar ansiPath = blob.read_shift(ansiLength, 'cstr');\n\t\tvar endServer = blob.read_shift(2);\n\t\tvar versionNumber = blob.read_shift(2);\n\t\tvar cbUnicodePathSize = blob.read_shift(4);\n\t\tif(cbUnicodePathSize === 0) return ansiPath.replace(/\\\\/g,\"/\");\n\t\tvar cbUnicodePathBytes = blob.read_shift(4);\n\t\tvar usKeyValue = blob.read_shift(2);\n\t\tvar unicodePath = blob.read_shift(cbUnicodePathBytes>>1, 'utf16le').replace(chr0,\"\");\n\t\treturn unicodePath;\n\t};\n\t\n\t/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */\n\tvar parse_HyperlinkMoniker = function(blob, length) {\n\t\tvar clsid = blob.read_shift(16); length -= 16;\n\t\tswitch(clsid) {\n\t\t\tcase \"e0c9ea79f9bace118c8200aa004ba90b\": return parse_URLMoniker(blob, length);\n\t\t\tcase \"0303000000000000c000000000000046\": return parse_FileMoniker(blob, length);\n\t\t\tdefault: throw \"unsupported moniker \" + clsid;\n\t\t}\n\t};\n\t\n\t/* [MS-OSHARED] 2.3.7.9 HyperlinkString */\n\tvar parse_HyperlinkString = function(blob, length) {\n\t\tvar len = blob.read_shift(4);\n\t\tvar o = blob.read_shift(len, 'utf16le').replace(chr0, \"\");\n\t\treturn o;\n\t};\n\t\n\t/* [MS-OSHARED] 2.3.7.1 Hyperlink Object TODO: unify params with XLSX */\n\tvar parse_Hyperlink = function(blob, length) {\n\t\tvar end = blob.l + length;\n\t\tvar sVer = blob.read_shift(4);\n\t\tif(sVer !== 2) throw new Error(\"Unrecognized streamVersion: \" + sVer);\n\t\tvar flags = blob.read_shift(2);\n\t\tblob.l += 2;\n\t\tvar displayName, targetFrameName, moniker, oleMoniker, location, guid, fileTime;\n\t\tif(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);\n\t\tif(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);\n\t\tif((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);\n\t\tif((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);\n\t\tif(flags & 0x0008) location = parse_HyperlinkString(blob, end - blob.l);\n\t\tif(flags & 0x0020) guid = blob.read_shift(16);\n\t\tif(flags & 0x0040) fileTime = parse_FILETIME(blob, 8);\n\t\tblob.l = end;\n\t\tvar target = (targetFrameName||moniker||oleMoniker);\n\t\tif(location) target+=\"#\"+location;\n\t\treturn {Target: target};\n\t};\n\t\n\t/* 2.5.178 LongRGBA */\n\tfunction parse_LongRGBA(blob, length) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }\n\t\n\t/* 2.5.177 LongRGB */\n\tfunction parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob, length); x[3] = 0; return x; }\n\t\n\t\n\t/* --- MS-XLS --- */\n\t\n\t/* 2.5.19 */\n\tfunction parse_XLSCell(blob, length) {\n\t\tvar rw = blob.read_shift(2); // 0-indexed\n\t\tvar col = blob.read_shift(2);\n\t\tvar ixfe = blob.read_shift(2);\n\t\treturn {r:rw, c:col, ixfe:ixfe};\n\t}\n\t\n\t/* 2.5.134 */\n\tfunction parse_frtHeader(blob) {\n\t\tvar rt = blob.read_shift(2);\n\t\tvar flags = blob.read_shift(2); // TODO: parse these flags\n\t\tblob.l += 8;\n\t\treturn {type: rt, flags: flags};\n\t}\n\t\n\t\n\t\n\tfunction parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? \"\" : parse_XLUnicodeString2(blob, length, opts); }\n\t\n\t/* 2.5.158 */\n\tvar HIDEOBJENUM = ['SHOWALL', 'SHOWPLACEHOLDER', 'HIDEALL'];\n\tvar parse_HideObjEnum = parseuint16;\n\t\n\t/* 2.5.344 */\n\tfunction parse_XTI(blob, length) {\n\t\tvar iSupBook = blob.read_shift(2), itabFirst = blob.read_shift(2,'i'), itabLast = blob.read_shift(2,'i');\n\t\treturn [iSupBook, itabFirst, itabLast];\n\t}\n\t\n\t/* 2.5.218 */\n\tfunction parse_RkRec(blob, length) {\n\t\tvar ixfe = blob.read_shift(2);\n\t\tvar RK = parse_RkNumber(blob);\n\t\t//console.log(\"::\", ixfe, RK,\";;\");\n\t\treturn [ixfe, RK];\n\t}\n\t\n\t/* 2.5.1 */\n\tfunction parse_AddinUdf(blob, length) {\n\t\tblob.l += 4; length -= 4;\n\t\tvar l = blob.l + length;\n\t\tvar udfName = parse_ShortXLUnicodeString(blob, length);\n\t\tvar cb = blob.read_shift(2);\n\t\tl -= blob.l;\n\t\tif(cb !== l) throw \"Malformed AddinUdf: padding = \" + l + \" != \" + cb;\n\t\tblob.l += cb;\n\t\treturn udfName;\n\t}\n\t\n\t/* 2.5.209 TODO: Check sizes */\n\tfunction parse_Ref8U(blob, length) {\n\t\tvar rwFirst = blob.read_shift(2);\n\t\tvar rwLast = blob.read_shift(2);\n\t\tvar colFirst = blob.read_shift(2);\n\t\tvar colLast = blob.read_shift(2);\n\t\treturn {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};\n\t}\n\t\n\t/* 2.5.211 */\n\tfunction parse_RefU(blob, length) {\n\t\tvar rwFirst = blob.read_shift(2);\n\t\tvar rwLast = blob.read_shift(2);\n\t\tvar colFirst = blob.read_shift(1);\n\t\tvar colLast = blob.read_shift(1);\n\t\treturn {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};\n\t}\n\t\n\t/* 2.5.207 */\n\tvar parse_Ref = parse_RefU;\n\t\n\t/* 2.5.143 */\n\tfunction parse_FtCmo(blob, length) {\n\t\tblob.l += 4;\n\t\tvar ot = blob.read_shift(2);\n\t\tvar id = blob.read_shift(2);\n\t\tvar flags = blob.read_shift(2);\n\t\tblob.l+=12;\n\t\treturn [id, ot, flags];\n\t}\n\t\n\t/* 2.5.149 */\n\tfunction parse_FtNts(blob, length) {\n\t\tvar out = {};\n\t\tblob.l += 4;\n\t\tblob.l += 16; // GUID TODO\n\t\tout.fSharedNote = blob.read_shift(2);\n\t\tblob.l += 4;\n\t\treturn out;\n\t}\n\t\n\t/* 2.5.142 */\n\tfunction parse_FtCf(blob, length) {\n\t\tvar out = {};\n\t\tblob.l += 4;\n\t\tblob.cf = blob.read_shift(2);\n\t\treturn out;\n\t}\n\t\n\t/* 2.5.140 - 2.5.154 and friends */\n\tvar FtTab = {\n\t\t0x15: parse_FtCmo,\n\t\t0x13: parsenoop,                                /* FtLbsData */\n\t\t0x12: function(blob, length) { blob.l += 12; }, /* FtCblsData */\n\t\t0x11: function(blob, length) { blob.l += 8; },  /* FtRboData */\n\t\t0x10: parsenoop,                                /* FtEdoData */\n\t\t0x0F: parsenoop,                                /* FtGboData */\n\t\t0x0D: parse_FtNts,                              /* FtNts */\n\t\t0x0C: function(blob, length) { blob.l += 24; }, /* FtSbs */\n\t\t0x0B: function(blob, length) { blob.l += 10; }, /* FtRbo */\n\t\t0x0A: function(blob, length) { blob.l += 16; }, /* FtCbls */\n\t\t0x09: parsenoop,                                /* FtPictFmla */\n\t\t0x08: function(blob, length) { blob.l += 6; },  /* FtPioGrbit */\n\t\t0x07: parse_FtCf,                               /* FtCf */\n\t\t0x06: function(blob, length) { blob.l += 6; },  /* FtGmo */\n\t\t0x04: parsenoop,                                /* FtMacro */\n\t\t0x00: function(blob, length) { blob.l += 4; }   /* FtEnding */\n\t};\n\tfunction parse_FtArray(blob, length, ot) {\n\t\tvar s = blob.l;\n\t\tvar fts = [];\n\t\twhile(blob.l < s + length) {\n\t\t\tvar ft = blob.read_shift(2);\n\t\t\tblob.l-=2;\n\t\t\ttry {\n\t\t\t\tfts.push(FtTab[ft](blob, s + length - blob.l));\n\t\t\t} catch(e) { blob.l = s + length; return fts; }\n\t\t}\n\t\tif(blob.l != s + length) blob.l = s + length; //throw \"bad Object Ft-sequence\";\n\t\treturn fts;\n\t}\n\t\n\t/* 2.5.129 */\n\tvar parse_FontIndex = parseuint16;\n\t\n\t/* --- 2.4 Records --- */\n\t\n\t/* 2.4.21 */\n\tfunction parse_BOF(blob, length) {\n\t\tvar o = {};\n\t\to.BIFFVer = blob.read_shift(2); length -= 2;\n\t\tswitch(o.BIFFVer) {\n\t\t\tcase 0x0600: /* BIFF8 */\n\t\t\tcase 0x0500: /* BIFF5 */\n\t\t\tcase 0x0002: case 0x0007: /* BIFF2 */\n\t\t\t\tbreak;\n\t\t\tdefault: throw \"Unexpected BIFF Ver \" + o.BIFFVer;\n\t\t}\n\t\tblob.read_shift(length);\n\t\treturn o;\n\t}\n\t\n\t\n\t/* 2.4.146 */\n\tfunction parse_InterfaceHdr(blob, length) {\n\t\tif(length === 0) return 0x04b0;\n\t\tvar q;\n\t\tif((q=blob.read_shift(2))!==0x04b0) throw 'InterfaceHdr codePage ' + q;\n\t\treturn 0x04b0;\n\t}\n\t\n\t\n\t/* 2.4.349 */\n\tfunction parse_WriteAccess(blob, length, opts) {\n\t\tif(opts.enc) { blob.l += length; return \"\"; }\n\t\tvar l = blob.l;\n\t\t// TODO: make sure XLUnicodeString doesnt overrun\n\t\tvar UserName = parse_XLUnicodeString(blob, 0, opts);\n\t\tblob.read_shift(length + l - blob.l);\n\t\treturn UserName;\n\t}\n\t\n\t/* 2.4.28 */\n\tfunction parse_BoundSheet8(blob, length, opts) {\n\t\tvar pos = blob.read_shift(4);\n\t\tvar hidden = blob.read_shift(1) >> 6;\n\t\tvar dt = blob.read_shift(1);\n\t\tswitch(dt) {\n\t\t\tcase 0: dt = 'Worksheet'; break;\n\t\t\tcase 1: dt = 'Macrosheet'; break;\n\t\t\tcase 2: dt = 'Chartsheet'; break;\n\t\t\tcase 6: dt = 'VBAModule'; break;\n\t\t}\n\t\tvar name = parse_ShortXLUnicodeString(blob, 0, opts);\n\t\tif(name.length === 0) name = \"Sheet1\";\n\t\treturn { pos:pos, hs:hidden, dt:dt, name:name };\n\t}\n\t\n\t/* 2.4.265 TODO */\n\tfunction parse_SST(blob, length) {\n\t\tvar cnt = blob.read_shift(4);\n\t\tvar ucnt = blob.read_shift(4);\n\t\tvar strs = [];\n\t\tfor(var i = 0; i != ucnt; ++i) {\n\t\t\tstrs.push(parse_XLUnicodeRichExtendedString(blob));\n\t\t}\n\t\tstrs.Count = cnt; strs.Unique = ucnt;\n\t\treturn strs;\n\t}\n\t\n\t/* 2.4.107 */\n\tfunction parse_ExtSST(blob, length) {\n\t\tvar extsst = {};\n\t\textsst.dsst = blob.read_shift(2);\n\t\tblob.l += length-2;\n\t\treturn extsst;\n\t}\n\t\n\t\n\t/* 2.4.221 TODO*/\n\tfunction parse_Row(blob, length) {\n\t\tvar rw = blob.read_shift(2), col = blob.read_shift(2), Col = blob.read_shift(2), rht = blob.read_shift(2);\n\t\tblob.read_shift(4); // reserved(2), unused(2)\n\t\tvar flags = blob.read_shift(1); // various flags\n\t\tblob.read_shift(1); // reserved\n\t\tblob.read_shift(2); //ixfe, other flags\n\t\treturn {r:rw, c:col, cnt:Col-col};\n\t}\n\t\n\t\n\t/* 2.4.125 */\n\tfunction parse_ForceFullCalculation(blob, length) {\n\t\tvar header = parse_frtHeader(blob);\n\t\tif(header.type != 0x08A3) throw \"Invalid Future Record \" + header.type;\n\t\tvar fullcalc = blob.read_shift(4);\n\t\treturn fullcalc !== 0x0;\n\t}\n\t\n\t\n\tvar parse_CompressPictures = parsenoop2; /* 2.4.55 Not interesting */\n\t\n\t\n\t\n\t/* 2.4.215 rt */\n\tfunction parse_RecalcId(blob, length) {\n\t\tblob.read_shift(2);\n\t\treturn blob.read_shift(4);\n\t}\n\t\n\t/* 2.4.87 */\n\tfunction parse_DefaultRowHeight (blob, length) {\n\t\tvar f = blob.read_shift(2), miyRw;\n\t\tmiyRw = blob.read_shift(2); // flags & 0x02 -> hidden, else empty\n\t\tvar fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};\n\t\treturn [fl, miyRw];\n\t}\n\t\n\t/* 2.4.345 TODO */\n\tfunction parse_Window1(blob, length) {\n\t\tvar xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);\n\t\tvar flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);\n\t\tvar ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);\n\t\treturn { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,\n\t\t\tFirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };\n\t}\n\t\n\t/* 2.4.122 TODO */\n\tfunction parse_Font(blob, length, opts) {\n\t\tblob.l += 14;\n\t\tvar name = parse_ShortXLUnicodeString(blob, 0, opts);\n\t\treturn name;\n\t}\n\t\n\t/* 2.4.149 */\n\tfunction parse_LabelSst(blob, length) {\n\t\tvar cell = parse_XLSCell(blob);\n\t\tcell.isst = blob.read_shift(4);\n\t\treturn cell;\n\t}\n\t\n\t/* 2.4.148 */\n\tfunction parse_Label(blob, length, opts) {\n\t\tvar cell = parse_XLSCell(blob, 6);\n\t\tvar str = parse_XLUnicodeString(blob, length-6, opts);\n\t\tcell.val = str;\n\t\treturn cell;\n\t}\n\t\n\t/* 2.4.126 Number Formats */\n\tfunction parse_Format(blob, length, opts) {\n\t\tvar ifmt = blob.read_shift(2);\n\t\tvar fmtstr = parse_XLUnicodeString2(blob, 0, opts);\n\t\treturn [ifmt, fmtstr];\n\t}\n\t\n\t/* 2.4.90 */\n\tfunction parse_Dimensions(blob, length) {\n\t\tvar w = length === 10 ? 2 : 4;\n\t\tvar r = blob.read_shift(w), R = blob.read_shift(w),\n\t\t    c = blob.read_shift(2), C = blob.read_shift(2);\n\t\tblob.l += 2;\n\t\treturn {s: {r:r, c:c}, e: {r:R, c:C}};\n\t}\n\t\n\t/* 2.4.220 */\n\tfunction parse_RK(blob, length) {\n\t\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\t\tvar rkrec = parse_RkRec(blob);\n\t\treturn {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};\n\t}\n\t\n\t/* 2.4.175 */\n\tfunction parse_MulRk(blob, length) {\n\t\tvar target = blob.l + length - 2;\n\t\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\t\tvar rkrecs = [];\n\t\twhile(blob.l < target) rkrecs.push(parse_RkRec(blob));\n\t\tif(blob.l !== target) throw \"MulRK read error\";\n\t\tvar lastcol = blob.read_shift(2);\n\t\tif(rkrecs.length != lastcol - col + 1) throw \"MulRK length mismatch\";\n\t\treturn {r:rw, c:col, C:lastcol, rkrec:rkrecs};\n\t}\n\t\n\t/* 2.5.20 2.5.249 TODO */\n\tfunction parse_CellStyleXF(blob, length, style) {\n\t\tvar o = {};\n\t\tvar a = blob.read_shift(4), b = blob.read_shift(4);\n\t\tvar c = blob.read_shift(4), d = blob.read_shift(2);\n\t\to.patternType = XLSFillPattern[c >> 26];\n\t\to.icvFore = d & 0x7F;\n\t\to.icvBack = (d >> 7) & 0x7F;\n\t\treturn o;\n\t}\n\tfunction parse_CellXF(blob, length) {return parse_CellStyleXF(blob,length,0);}\n\tfunction parse_StyleXF(blob, length) {return parse_CellStyleXF(blob,length,1);}\n\t\n\t/* 2.4.353 TODO: actually do this right */\n\tfunction parse_XF(blob, length) {\n\t\tvar o = {};\n\t\to.ifnt = blob.read_shift(2); o.ifmt = blob.read_shift(2); o.flags = blob.read_shift(2);\n\t\to.fStyle = (o.flags >> 2) & 0x01;\n\t\tlength -= 6;\n\t\to.data = parse_CellStyleXF(blob, length, o.fStyle);\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.134 */\n\tfunction parse_Guts(blob, length) {\n\t\tblob.l += 4;\n\t\tvar out = [blob.read_shift(2), blob.read_shift(2)];\n\t\tif(out[0] !== 0) out[0]--;\n\t\tif(out[1] !== 0) out[1]--;\n\t\tif(out[0] > 7 || out[1] > 7) throw \"Bad Gutters: \" + out;\n\t\treturn out;\n\t}\n\t\n\t/* 2.4.24 */\n\tfunction parse_BoolErr(blob, length) {\n\t\tvar cell = parse_XLSCell(blob, 6);\n\t\tvar val = parse_Bes(blob, 2);\n\t\tcell.val = val;\n\t\tcell.t = (val === true || val === false) ? 'b' : 'e';\n\t\treturn cell;\n\t}\n\t\n\t/* 2.4.180 Number */\n\tfunction parse_Number(blob, length) {\n\t\tvar cell = parse_XLSCell(blob, 6);\n\t\tvar xnum = parse_Xnum(blob, 8);\n\t\tcell.val = xnum;\n\t\treturn cell;\n\t}\n\t\n\tvar parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136\n\t\n\t/* 2.4.271 */\n\tfunction parse_SupBook(blob, length, opts) {\n\t\tvar end = blob.l + length;\n\t\tvar ctab = blob.read_shift(2);\n\t\tvar cch = blob.read_shift(2);\n\t\tvar virtPath;\n\t\tif(cch >=0x01 && cch <=0xff) virtPath = parse_XLUnicodeStringNoCch(blob, cch);\n\t\tvar rgst = blob.read_shift(end - blob.l);\n\t\topts.sbcch = cch;\n\t\treturn [cch, ctab, virtPath, rgst];\n\t}\n\t\n\t/* 2.4.105 TODO */\n\tfunction parse_ExternName(blob, length, opts) {\n\t\tvar flags = blob.read_shift(2);\n\t\tvar body;\n\t\tvar o = {\n\t\t\tfBuiltIn: flags & 0x01,\n\t\t\tfWantAdvise: (flags >>> 1) & 0x01,\n\t\t\tfWantPict: (flags >>> 2) & 0x01,\n\t\t\tfOle: (flags >>> 3) & 0x01,\n\t\t\tfOleLink: (flags >>> 4) & 0x01,\n\t\t\tcf: (flags >>> 5) & 0x3FF,\n\t\t\tfIcon: flags >>> 15 & 0x01\n\t\t};\n\t\tif(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2);\n\t\t//else throw new Error(\"unsupported SupBook cch: \" + opts.sbcch);\n\t\to.body = body || blob.read_shift(length-2);\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.150 TODO */\n\tfunction parse_Lbl(blob, length, opts) {\n\t\tif(opts.biff < 8) return parse_Label(blob, length, opts);\n\t\tvar target = blob.l + length;\n\t\tvar flags = blob.read_shift(2);\n\t\tvar chKey = blob.read_shift(1);\n\t\tvar cch = blob.read_shift(1);\n\t\tvar cce = blob.read_shift(2);\n\t\tblob.l += 2;\n\t\tvar itab = blob.read_shift(2);\n\t\tblob.l += 4;\n\t\tvar name = parse_XLUnicodeStringNoCch(blob, cch, opts);\n\t\tvar rgce = parse_NameParsedFormula(blob, target - blob.l, opts, cce);\n\t\treturn {\n\t\t\tchKey: chKey,\n\t\t\tName: name,\n\t\t\trgce: rgce\n\t\t};\n\t}\n\t\n\t/* 2.4.106 TODO: verify supbook manipulation */\n\tfunction parse_ExternSheet(blob, length, opts) {\n\t\tif(opts.biff < 8) return parse_ShortXLUnicodeString(blob, length, opts);\n\t\tvar o = parslurp2(blob,length,parse_XTI);\n\t\tvar oo = [];\n\t\tif(opts.sbcch === 0x0401) {\n\t\t\tfor(var i = 0; i != o.length; ++i) oo.push(opts.snames[o[i][1]]);\n\t\t\treturn oo;\n\t\t}\n\t\telse return o;\n\t}\n\t\n\t/* 2.4.260 */\n\tfunction parse_ShrFmla(blob, length, opts) {\n\t\tvar ref = parse_RefU(blob, 6);\n\t\tblob.l++;\n\t\tvar cUse = blob.read_shift(1);\n\t\tlength -= 8;\n\t\treturn [parse_SharedParsedFormula(blob, length, opts), cUse];\n\t}\n\t\n\t/* 2.4.4 TODO */\n\tfunction parse_Array(blob, length, opts) {\n\t\tvar ref = parse_Ref(blob, 6);\n\t\tblob.l += 6; length -= 12; /* TODO: fAlwaysCalc */\n\t\treturn [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n\t}\n\t\n\t/* 2.4.173 */\n\tfunction parse_MTRSettings(blob, length) {\n\t\tvar fMTREnabled = blob.read_shift(4) !== 0x00;\n\t\tvar fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n\t\tvar cUserThreadCount = blob.read_shift(4);\n\t\treturn [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n\t}\n\t\n\t/* 2.5.186 TODO: BIFF5 */\n\tfunction parse_NoteSh(blob, length, opts) {\n\t\tif(opts.biff < 8) return;\n\t\tvar row = blob.read_shift(2), col = blob.read_shift(2);\n\t\tvar flags = blob.read_shift(2), idObj = blob.read_shift(2);\n\t\tvar stAuthor = parse_XLUnicodeString2(blob, 0, opts);\n\t\tif(opts.biff < 8) blob.read_shift(1);\n\t\treturn [{r:row,c:col}, stAuthor, idObj, flags];\n\t}\n\t\n\t/* 2.4.179 */\n\tfunction parse_Note(blob, length, opts) {\n\t\t/* TODO: Support revisions */\n\t\treturn parse_NoteSh(blob, length, opts);\n\t}\n\t\n\t/* 2.4.168 */\n\tfunction parse_MergeCells(blob, length) {\n\t\tvar merges = [];\n\t\tvar cmcs = blob.read_shift(2);\n\t\twhile (cmcs--) merges.push(parse_Ref8U(blob,length));\n\t\treturn merges;\n\t}\n\t\n\t/* 2.4.181 TODO: parse all the things! */\n\tfunction parse_Obj(blob, length) {\n\t\tvar cmo = parse_FtCmo(blob, 22); // id, ot, flags\n\t\tvar fts = parse_FtArray(blob, length-22, cmo[1]);\n\t\treturn { cmo: cmo, ft:fts };\n\t}\n\t\n\t/* 2.4.329 TODO: parse properly */\n\tfunction parse_TxO(blob, length, opts) {\n\t\tvar s = blob.l;\n\ttry {\n\t\tblob.l += 4;\n\t\tvar ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];\n\t\tvar controlInfo;\n\t\tif([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;\n\t\telse controlInfo = parse_ControlInfo(blob, 6, opts);\n\t\tvar cchText = blob.read_shift(2);\n\t\tvar cbRuns = blob.read_shift(2);\n\t\tvar ifntEmpty = parse_FontIndex(blob, 2);\n\t\tvar len = blob.read_shift(2);\n\t\tblob.l += len;\n\t\t//var fmla = parse_ObjFmla(blob, s + length - blob.l);\n\t\n\t\tvar texts = \"\";\n\t\tfor(var i = 1; i < blob.lens.length-1; ++i) {\n\t\t\tif(blob.l-s != blob.lens[i]) throw \"TxO: bad continue record\";\n\t\t\tvar hdr = blob[blob.l];\n\t\t\tvar t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);\n\t\t\ttexts += t;\n\t\t\tif(texts.length >= (hdr ? cchText : 2*cchText)) break;\n\t\t}\n\t\tif(texts.length !== cchText && texts.length !== cchText*2) {\n\t\t\tthrow \"cchText: \" + cchText + \" != \" + texts.length;\n\t\t}\n\t\n\t\tblob.l = s + length;\n\t\t/* 2.5.272 TxORuns */\n\t//\tvar rgTxoRuns = [];\n\t//\tfor(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;\n\t//\tvar cchText2 = blob.read_shift(2);\n\t//\tif(cchText2 !== cchText) throw \"TxOLastRun mismatch: \" + cchText2 + \" \" + cchText;\n\t//\tblob.l += 6;\n\t//\tif(s + length != blob.l) throw \"TxO \" + (s + length) + \", at \" + blob.l;\n\t\treturn { t: texts };\n\t} catch(e) { blob.l = s + length; return { t: texts||\"\" }; }\n\t}\n\t\n\t/* 2.4.140 */\n\tvar parse_HLink = function(blob, length) {\n\t\tvar ref = parse_Ref8U(blob, 8);\n\t\tblob.l += 16; /* CLSID */\n\t\tvar hlink = parse_Hyperlink(blob, length-24);\n\t\treturn [ref, hlink];\n\t};\n\t\n\t/* 2.4.141 */\n\tvar parse_HLinkTooltip = function(blob, length) {\n\t\tvar end = blob.l + length;\n\t\tblob.read_shift(2);\n\t\tvar ref = parse_Ref8U(blob, 8);\n\t\tvar wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');\n\t\twzTooltip = wzTooltip.replace(chr0,\"\");\n\t\treturn [ref, wzTooltip];\n\t};\n\t\n\t/* 2.4.63 */\n\tfunction parse_Country(blob, length) {\n\t\tvar o = [], d;\n\t\td = blob.read_shift(2); o[0] = CountryEnum[d] || d;\n\t\td = blob.read_shift(2); o[1] = CountryEnum[d] || d;\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.50 ClrtClient */\n\tfunction parse_ClrtClient(blob, length) {\n\t\tvar ccv = blob.read_shift(2);\n\t\tvar o = [];\n\t\twhile(ccv-->0) o.push(parse_LongRGB(blob, 8));\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.188 */\n\tfunction parse_Palette(blob, length) {\n\t\tvar ccv = blob.read_shift(2);\n\t\tvar o = [];\n\t\twhile(ccv-->0) o.push(parse_LongRGB(blob, 8));\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.354 */\n\tfunction parse_XFCRC(blob, length) {\n\t\tblob.l += 2;\n\t\tvar o = {cxfs:0, crc:0};\n\t\to.cxfs = blob.read_shift(2);\n\t\to.crc = blob.read_shift(4);\n\t\treturn o;\n\t}\n\t\n\t\n\tvar parse_Style = parsenoop;\n\tvar parse_StyleExt = parsenoop;\n\t\n\tvar parse_ColInfo = parsenoop;\n\t\n\tvar parse_Window2 = parsenoop;\n\t\n\t\n\tvar parse_Backup = parsebool; /* 2.4.14 */\n\tvar parse_Blank = parse_XLSCell; /* 2.4.20 Just the cell */\n\tvar parse_BottomMargin = parse_Xnum; /* 2.4.27 */\n\tvar parse_BuiltInFnGroupCount = parseuint16; /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */\n\tvar parse_CalcCount = parseuint16; /* 2.4.31 #Iterations */\n\tvar parse_CalcDelta = parse_Xnum; /* 2.4.32 */\n\tvar parse_CalcIter = parsebool;  /* 2.4.33 1=iterative calc */\n\tvar parse_CalcMode = parseuint16; /* 2.4.34 0=manual, 1=auto (def), 2=table */\n\tvar parse_CalcPrecision = parsebool; /* 2.4.35 */\n\tvar parse_CalcRefMode = parsenoop2; /* 2.4.36 */\n\tvar parse_CalcSaveRecalc = parsebool; /* 2.4.37 */\n\tvar parse_CodePage = parseuint16; /* 2.4.52 */\n\tvar parse_Compat12 = parsebool; /* 2.4.54 true = no compatibility check */\n\tvar parse_Date1904 = parsebool; /* 2.4.77 - 1=1904,0=1900 */\n\tvar parse_DefColWidth = parseuint16; /* 2.4.89 */\n\tvar parse_DSF = parsenoop2; /* 2.4.94 -- MUST be ignored */\n\tvar parse_EntExU2 = parsenoop2; /* 2.4.102 -- Explicitly says to ignore */\n\tvar parse_EOF = parsenoop2; /* 2.4.103 */\n\tvar parse_Excel9File = parsenoop2; /* 2.4.104 -- Optional and unused */\n\tvar parse_FeatHdr = parsenoop2; /* 2.4.112 */\n\tvar parse_FontX = parseuint16; /* 2.4.123 */\n\tvar parse_Footer = parse_XLHeaderFooter; /* 2.4.124 */\n\tvar parse_GridSet = parseuint16; /* 2.4.132, =1 */\n\tvar parse_HCenter = parsebool; /* 2.4.135 sheet centered horizontal on print */\n\tvar parse_Header = parse_XLHeaderFooter; /* 2.4.136 */\n\tvar parse_HideObj = parse_HideObjEnum; /* 2.4.139 */\n\tvar parse_InterfaceEnd = parsenoop2; /* 2.4.145 -- noop */\n\tvar parse_LeftMargin = parse_Xnum; /* 2.4.151 */\n\tvar parse_Mms = parsenoop2; /* 2.4.169 -- Explicitly says to ignore */\n\tvar parse_ObjProtect = parsebool; /* 2.4.183 -- must be 1 if present */\n\tvar parse_Password = parseuint16; /* 2.4.191 */\n\tvar parse_PrintGrid = parsebool; /* 2.4.202 */\n\tvar parse_PrintRowCol = parsebool; /* 2.4.203 */\n\tvar parse_PrintSize = parseuint16; /* 2.4.204 0:3 */\n\tvar parse_Prot4Rev = parsebool; /* 2.4.205 */\n\tvar parse_Prot4RevPass = parseuint16; /* 2.4.206 */\n\tvar parse_Protect = parsebool; /* 2.4.207 */\n\tvar parse_RefreshAll = parsebool; /* 2.4.217 -- must be 0 if not template */\n\tvar parse_RightMargin = parse_Xnum; /* 2.4.219 */\n\tvar parse_RRTabId = parseuint16a; /* 2.4.241 */\n\tvar parse_ScenarioProtect = parsebool; /* 2.4.245 */\n\tvar parse_Scl = parseuint16a; /* 2.4.247 num, den */\n\tvar parse_String = parse_XLUnicodeString; /* 2.4.268 */\n\tvar parse_SxBool = parsebool; /* 2.4.274 */\n\tvar parse_TopMargin = parse_Xnum; /* 2.4.328 */\n\tvar parse_UsesELFs = parsebool; /* 2.4.337 -- should be 0 */\n\tvar parse_VCenter = parsebool; /* 2.4.342 */\n\tvar parse_WinProtect = parsebool; /* 2.4.347 */\n\tvar parse_WriteProtect = parsenoop; /* 2.4.350 empty record */\n\t\n\t\n\t/* ---- */\n\tvar parse_VerticalPageBreaks = parsenoop;\n\tvar parse_HorizontalPageBreaks = parsenoop;\n\tvar parse_Selection = parsenoop;\n\tvar parse_Continue = parsenoop;\n\tvar parse_Pane = parsenoop;\n\tvar parse_Pls = parsenoop;\n\tvar parse_DCon = parsenoop;\n\tvar parse_DConRef = parsenoop;\n\tvar parse_DConName = parsenoop;\n\tvar parse_XCT = parsenoop;\n\tvar parse_CRN = parsenoop;\n\tvar parse_FileSharing = parsenoop;\n\tvar parse_Uncalced = parsenoop;\n\tvar parse_Template = parsenoop;\n\tvar parse_Intl = parsenoop;\n\tvar parse_WsBool = parsenoop;\n\tvar parse_Sort = parsenoop;\n\tvar parse_Sync = parsenoop;\n\tvar parse_LPr = parsenoop;\n\tvar parse_DxGCol = parsenoop;\n\tvar parse_FnGroupName = parsenoop;\n\tvar parse_FilterMode = parsenoop;\n\tvar parse_AutoFilterInfo = parsenoop;\n\tvar parse_AutoFilter = parsenoop;\n\tvar parse_Setup = parsenoop;\n\tvar parse_ScenMan = parsenoop;\n\tvar parse_SCENARIO = parsenoop;\n\tvar parse_SxView = parsenoop;\n\tvar parse_Sxvd = parsenoop;\n\tvar parse_SXVI = parsenoop;\n\tvar parse_SxIvd = parsenoop;\n\tvar parse_SXLI = parsenoop;\n\tvar parse_SXPI = parsenoop;\n\tvar parse_DocRoute = parsenoop;\n\tvar parse_RecipName = parsenoop;\n\tvar parse_MulBlank = parsenoop;\n\tvar parse_SXDI = parsenoop;\n\tvar parse_SXDB = parsenoop;\n\tvar parse_SXFDB = parsenoop;\n\tvar parse_SXDBB = parsenoop;\n\tvar parse_SXNum = parsenoop;\n\tvar parse_SxErr = parsenoop;\n\tvar parse_SXInt = parsenoop;\n\tvar parse_SXString = parsenoop;\n\tvar parse_SXDtr = parsenoop;\n\tvar parse_SxNil = parsenoop;\n\tvar parse_SXTbl = parsenoop;\n\tvar parse_SXTBRGIITM = parsenoop;\n\tvar parse_SxTbpg = parsenoop;\n\tvar parse_ObProj = parsenoop;\n\tvar parse_SXStreamID = parsenoop;\n\tvar parse_DBCell = parsenoop;\n\tvar parse_SXRng = parsenoop;\n\tvar parse_SxIsxoper = parsenoop;\n\tvar parse_BookBool = parsenoop;\n\tvar parse_DbOrParamQry = parsenoop;\n\tvar parse_OleObjectSize = parsenoop;\n\tvar parse_SXVS = parsenoop;\n\tvar parse_BkHim = parsenoop;\n\tvar parse_MsoDrawingGroup = parsenoop;\n\tvar parse_MsoDrawing = parsenoop;\n\tvar parse_MsoDrawingSelection = parsenoop;\n\tvar parse_PhoneticInfo = parsenoop;\n\tvar parse_SxRule = parsenoop;\n\tvar parse_SXEx = parsenoop;\n\tvar parse_SxFilt = parsenoop;\n\tvar parse_SxDXF = parsenoop;\n\tvar parse_SxItm = parsenoop;\n\tvar parse_SxName = parsenoop;\n\tvar parse_SxSelect = parsenoop;\n\tvar parse_SXPair = parsenoop;\n\tvar parse_SxFmla = parsenoop;\n\tvar parse_SxFormat = parsenoop;\n\tvar parse_SXVDEx = parsenoop;\n\tvar parse_SXFormula = parsenoop;\n\tvar parse_SXDBEx = parsenoop;\n\tvar parse_RRDInsDel = parsenoop;\n\tvar parse_RRDHead = parsenoop;\n\tvar parse_RRDChgCell = parsenoop;\n\tvar parse_RRDRenSheet = parsenoop;\n\tvar parse_RRSort = parsenoop;\n\tvar parse_RRDMove = parsenoop;\n\tvar parse_RRFormat = parsenoop;\n\tvar parse_RRAutoFmt = parsenoop;\n\tvar parse_RRInsertSh = parsenoop;\n\tvar parse_RRDMoveBegin = parsenoop;\n\tvar parse_RRDMoveEnd = parsenoop;\n\tvar parse_RRDInsDelBegin = parsenoop;\n\tvar parse_RRDInsDelEnd = parsenoop;\n\tvar parse_RRDConflict = parsenoop;\n\tvar parse_RRDDefName = parsenoop;\n\tvar parse_RRDRstEtxp = parsenoop;\n\tvar parse_LRng = parsenoop;\n\tvar parse_CUsr = parsenoop;\n\tvar parse_CbUsr = parsenoop;\n\tvar parse_UsrInfo = parsenoop;\n\tvar parse_UsrExcl = parsenoop;\n\tvar parse_FileLock = parsenoop;\n\tvar parse_RRDInfo = parsenoop;\n\tvar parse_BCUsrs = parsenoop;\n\tvar parse_UsrChk = parsenoop;\n\tvar parse_UserBView = parsenoop;\n\tvar parse_UserSViewBegin = parsenoop; // overloaded\n\tvar parse_UserSViewEnd = parsenoop;\n\tvar parse_RRDUserView = parsenoop;\n\tvar parse_Qsi = parsenoop;\n\tvar parse_CondFmt = parsenoop;\n\tvar parse_CF = parsenoop;\n\tvar parse_DVal = parsenoop;\n\tvar parse_DConBin = parsenoop;\n\tvar parse_Lel = parsenoop;\n\tvar parse_XLSCodeName = parse_XLUnicodeString;\n\tvar parse_SXFDBType = parsenoop;\n\tvar parse_ObNoMacros = parsenoop;\n\tvar parse_Dv = parsenoop;\n\tvar parse_Index = parsenoop;\n\tvar parse_Table = parsenoop;\n\tvar parse_BigName = parsenoop;\n\tvar parse_ContinueBigName = parsenoop;\n\tvar parse_WebPub = parsenoop;\n\tvar parse_QsiSXTag = parsenoop;\n\tvar parse_DBQueryExt = parsenoop;\n\tvar parse_ExtString = parsenoop;\n\tvar parse_TxtQry = parsenoop;\n\tvar parse_Qsir = parsenoop;\n\tvar parse_Qsif = parsenoop;\n\tvar parse_RRDTQSIF = parsenoop;\n\tvar parse_OleDbConn = parsenoop;\n\tvar parse_WOpt = parsenoop;\n\tvar parse_SXViewEx = parsenoop;\n\tvar parse_SXTH = parsenoop;\n\tvar parse_SXPIEx = parsenoop;\n\tvar parse_SXVDTEx = parsenoop;\n\tvar parse_SXViewEx9 = parsenoop;\n\tvar parse_ContinueFrt = parsenoop;\n\tvar parse_RealTimeData = parsenoop;\n\tvar parse_ChartFrtInfo = parsenoop;\n\tvar parse_FrtWrapper = parsenoop;\n\tvar parse_StartBlock = parsenoop;\n\tvar parse_EndBlock = parsenoop;\n\tvar parse_StartObject = parsenoop;\n\tvar parse_EndObject = parsenoop;\n\tvar parse_CatLab = parsenoop;\n\tvar parse_YMult = parsenoop;\n\tvar parse_SXViewLink = parsenoop;\n\tvar parse_PivotChartBits = parsenoop;\n\tvar parse_FrtFontList = parsenoop;\n\tvar parse_SheetExt = parsenoop;\n\tvar parse_BookExt = parsenoop;\n\tvar parse_SXAddl = parsenoop;\n\tvar parse_CrErr = parsenoop;\n\tvar parse_HFPicture = parsenoop;\n\tvar parse_Feat = parsenoop;\n\tvar parse_DataLabExt = parsenoop;\n\tvar parse_DataLabExtContents = parsenoop;\n\tvar parse_CellWatch = parsenoop;\n\tvar parse_FeatHdr11 = parsenoop;\n\tvar parse_Feature11 = parsenoop;\n\tvar parse_DropDownObjIds = parsenoop;\n\tvar parse_ContinueFrt11 = parsenoop;\n\tvar parse_DConn = parsenoop;\n\tvar parse_List12 = parsenoop;\n\tvar parse_Feature12 = parsenoop;\n\tvar parse_CondFmt12 = parsenoop;\n\tvar parse_CF12 = parsenoop;\n\tvar parse_CFEx = parsenoop;\n\tvar parse_AutoFilter12 = parsenoop;\n\tvar parse_ContinueFrt12 = parsenoop;\n\tvar parse_MDTInfo = parsenoop;\n\tvar parse_MDXStr = parsenoop;\n\tvar parse_MDXTuple = parsenoop;\n\tvar parse_MDXSet = parsenoop;\n\tvar parse_MDXProp = parsenoop;\n\tvar parse_MDXKPI = parsenoop;\n\tvar parse_MDB = parsenoop;\n\tvar parse_PLV = parsenoop;\n\tvar parse_DXF = parsenoop;\n\tvar parse_TableStyles = parsenoop;\n\tvar parse_TableStyle = parsenoop;\n\tvar parse_TableStyleElement = parsenoop;\n\tvar parse_NamePublish = parsenoop;\n\tvar parse_NameCmt = parsenoop;\n\tvar parse_SortData = parsenoop;\n\tvar parse_GUIDTypeLib = parsenoop;\n\tvar parse_FnGrp12 = parsenoop;\n\tvar parse_NameFnGrp12 = parsenoop;\n\tvar parse_HeaderFooter = parsenoop;\n\tvar parse_CrtLayout12 = parsenoop;\n\tvar parse_CrtMlFrt = parsenoop;\n\tvar parse_CrtMlFrtContinue = parsenoop;\n\tvar parse_ShapePropsStream = parsenoop;\n\tvar parse_TextPropsStream = parsenoop;\n\tvar parse_RichTextStream = parsenoop;\n\tvar parse_CrtLayout12A = parsenoop;\n\tvar parse_Units = parsenoop;\n\tvar parse_Chart = parsenoop;\n\tvar parse_Series = parsenoop;\n\tvar parse_DataFormat = parsenoop;\n\tvar parse_LineFormat = parsenoop;\n\tvar parse_MarkerFormat = parsenoop;\n\tvar parse_AreaFormat = parsenoop;\n\tvar parse_PieFormat = parsenoop;\n\tvar parse_AttachedLabel = parsenoop;\n\tvar parse_SeriesText = parsenoop;\n\tvar parse_ChartFormat = parsenoop;\n\tvar parse_Legend = parsenoop;\n\tvar parse_SeriesList = parsenoop;\n\tvar parse_Bar = parsenoop;\n\tvar parse_Line = parsenoop;\n\tvar parse_Pie = parsenoop;\n\tvar parse_Area = parsenoop;\n\tvar parse_Scatter = parsenoop;\n\tvar parse_CrtLine = parsenoop;\n\tvar parse_Axis = parsenoop;\n\tvar parse_Tick = parsenoop;\n\tvar parse_ValueRange = parsenoop;\n\tvar parse_CatSerRange = parsenoop;\n\tvar parse_AxisLine = parsenoop;\n\tvar parse_CrtLink = parsenoop;\n\tvar parse_DefaultText = parsenoop;\n\tvar parse_Text = parsenoop;\n\tvar parse_ObjectLink = parsenoop;\n\tvar parse_Frame = parsenoop;\n\tvar parse_Begin = parsenoop;\n\tvar parse_End = parsenoop;\n\tvar parse_PlotArea = parsenoop;\n\tvar parse_Chart3d = parsenoop;\n\tvar parse_PicF = parsenoop;\n\tvar parse_DropBar = parsenoop;\n\tvar parse_Radar = parsenoop;\n\tvar parse_Surf = parsenoop;\n\tvar parse_RadarArea = parsenoop;\n\tvar parse_AxisParent = parsenoop;\n\tvar parse_LegendException = parsenoop;\n\tvar parse_ShtProps = parsenoop;\n\tvar parse_SerToCrt = parsenoop;\n\tvar parse_AxesUsed = parsenoop;\n\tvar parse_SBaseRef = parsenoop;\n\tvar parse_SerParent = parsenoop;\n\tvar parse_SerAuxTrend = parsenoop;\n\tvar parse_IFmtRecord = parsenoop;\n\tvar parse_Pos = parsenoop;\n\tvar parse_AlRuns = parsenoop;\n\tvar parse_BRAI = parsenoop;\n\tvar parse_SerAuxErrBar = parsenoop;\n\tvar parse_SerFmt = parsenoop;\n\tvar parse_Chart3DBarShape = parsenoop;\n\tvar parse_Fbi = parsenoop;\n\tvar parse_BopPop = parsenoop;\n\tvar parse_AxcExt = parsenoop;\n\tvar parse_Dat = parsenoop;\n\tvar parse_PlotGrowth = parsenoop;\n\tvar parse_SIIndex = parsenoop;\n\tvar parse_GelFrame = parsenoop;\n\tvar parse_BopPopCustom = parsenoop;\n\tvar parse_Fbi2 = parsenoop;\n\t\n\t/* --- Specific to versions before BIFF8 --- */\n\tfunction parse_BIFF5String(blob) {\n\t\tvar len = blob.read_shift(1);\n\t\treturn blob.read_shift(len, 'sbcs-cont');\n\t}\n\t\n\t/* BIFF2_??? where ??? is the name from [XLS] */\n\tfunction parse_BIFF2STR(blob, length, opts) {\n\t\tvar cell = parse_XLSCell(blob, 6);\n\t\t++blob.l;\n\t\tvar str = parse_XLUnicodeString2(blob, length-7, opts);\n\t\tcell.val = str;\n\t\treturn cell;\n\t}\n\t\n\tfunction parse_BIFF2NUM(blob, length, opts) {\n\t\tvar cell = parse_XLSCell(blob, 6);\n\t\t++blob.l;\n\t\tvar num = parse_Xnum(blob, 8);\n\t\tcell.val = num;\n\t\treturn cell;\n\t}\n\t\n\t/* 18.4.1 charset to codepage mapping */\n\tvar CS2CP = {\n\t\t0:    1252, /* ANSI */\n\t\t1:   65001, /* DEFAULT */\n\t\t2:   65001, /* SYMBOL */\n\t\t77:  10000, /* MAC */\n\t\t128:   932, /* SHIFTJIS */\n\t\t129:   949, /* HANGUL */\n\t\t130:  1361, /* JOHAB */\n\t\t134:   936, /* GB2312 */\n\t\t136:   950, /* CHINESEBIG5 */\n\t\t161:  1253, /* GREEK */\n\t\t162:  1254, /* TURKISH */\n\t\t163:  1258, /* VIETNAMESE */\n\t\t177:  1255, /* HEBREW */\n\t\t178:  1256, /* ARABIC */\n\t\t186:  1257, /* BALTIC */\n\t\t204:  1251, /* RUSSIAN */\n\t\t222:   874, /* THAI */\n\t\t238:  1250, /* EASTEUROPE */\n\t\t255:  1252, /* OEM */\n\t\t69:   6969  /* MISC */\n\t};\n\t\n\t/* Parse a list of <r> tags */\n\tvar parse_rs = (function parse_rs_factory() {\n\t\tvar tregex = matchtag(\"t\"), rpregex = matchtag(\"rPr\"), rregex = /<r>/g, rend = /<\\/r>/, nlregex = /\\r\\n/g;\n\t\t/* 18.4.7 rPr CT_RPrElt */\n\t\tvar parse_rpr = function parse_rpr(rpr, intro, outro) {\n\t\t\tvar font = {}, cp = 65001;\n\t\t\tvar m = rpr.match(tagregex), i = 0;\n\t\t\tif(m) for(;i!=m.length; ++i) {\n\t\t\t\tvar y = parsexmltag(m[i]);\n\t\t\t\tswitch(y[0]) {\n\t\t\t\t\t/* 18.8.12 condense CT_BooleanProperty */\n\t\t\t\t\t/* ** not required . */\n\t\t\t\t\tcase '<condense': break;\n\t\t\t\t\t/* 18.8.17 extend CT_BooleanProperty */\n\t\t\t\t\t/* ** not required . */\n\t\t\t\t\tcase '<extend': break;\n\t\t\t\t\t/* 18.8.36 shadow CT_BooleanProperty */\n\t\t\t\t\t/* ** not required . */\n\t\t\t\t\tcase '<shadow':\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase '<shadow/>': break;\n\t\n\t\t\t\t\t/* 18.4.1 charset CT_IntProperty TODO */\n\t\t\t\t\tcase '<charset':\n\t\t\t\t\t\tif(y.val == '1') break;\n\t\t\t\t\t\tcp = CS2CP[parseInt(y.val, 10)];\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t/* 18.4.2 outline CT_BooleanProperty TODO */\n\t\t\t\t\tcase '<outline':\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase '<outline/>': break;\n\t\n\t\t\t\t\t/* 18.4.5 rFont CT_FontName */\n\t\t\t\t\tcase '<rFont': font.name = y.val; break;\n\t\n\t\t\t\t\t/* 18.4.11 sz CT_FontSize */\n\t\t\t\t\tcase '<sz': font.sz = y.val; break;\n\t\n\t\t\t\t\t/* 18.4.10 strike CT_BooleanProperty */\n\t\t\t\t\tcase '<strike':\n\t\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase '<strike/>': font.strike = 1; break;\n\t\t\t\t\tcase '</strike>': break;\n\t\n\t\t\t\t\t/* 18.4.13 u CT_UnderlineProperty */\n\t\t\t\t\tcase '<u':\n\t\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase '<u/>': font.u = 1; break;\n\t\t\t\t\tcase '</u>': break;\n\t\n\t\t\t\t\t/* 18.8.2 b */\n\t\t\t\t\tcase '<b':\n\t\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase '<b/>': font.b = 1; break;\n\t\t\t\t\tcase '</b>': break;\n\t\n\t\t\t\t\t/* 18.8.26 i */\n\t\t\t\t\tcase '<i':\n\t\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t\t/* falls through */\n\t\t\t\t\tcase '<i/>': font.i = 1; break;\n\t\t\t\t\tcase '</i>': break;\n\t\n\t\t\t\t\t/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */\n\t\t\t\t\tcase '<color':\n\t\t\t\t\t\tif(y.rgb) font.color = y.rgb.substr(2,6);\n\t\t\t\t\t\tbreak;\n\t\n\t\t\t\t\t/* 18.8.18 family ST_FontFamily */\n\t\t\t\t\tcase '<family': font.family = y.val; break;\n\t\n\t\t\t\t\t/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */\n\t\t\t\t\tcase '<vertAlign': break;\n\t\n\t\t\t\t\t/* 18.8.35 scheme CT_FontScheme TODO */\n\t\t\t\t\tcase '<scheme': break;\n\t\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif(y[0].charCodeAt(1) !== 47) throw 'Unrecognized rich format ' + y[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* TODO: These should be generated styles, not inline */\n\t\t\tvar style = [];\n\t\t\tif(font.b) style.push(\"font-weight: bold;\");\n\t\t\tif(font.i) style.push(\"font-style: italic;\");\n\t\t\tintro.push('<span style=\"' + style.join(\"\") + '\">');\n\t\t\toutro.push(\"</span>\");\n\t\t\treturn cp;\n\t\t};\n\t\n\t\t/* 18.4.4 r CT_RElt */\n\t\tfunction parse_r(r) {\n\t\t\tvar terms = [[],\"\",[]];\n\t\t\t/* 18.4.12 t ST_Xstring */\n\t\t\tvar t = r.match(tregex), cp = 65001;\n\t\t\tif(!isval(t)) return \"\";\n\t\t\tterms[1] = t[1];\n\t\n\t\t\tvar rpr = r.match(rpregex);\n\t\t\tif(isval(rpr)) cp = parse_rpr(rpr[1], terms[0], terms[2]);\n\t\n\t\t\treturn terms[0].join(\"\") + terms[1].replace(nlregex,'<br/>') + terms[2].join(\"\");\n\t\t}\n\t\treturn function parse_rs(rs) {\n\t\t\treturn rs.replace(rregex,\"\").split(rend).map(parse_r).join(\"\");\n\t\t};\n\t})();\n\t\n\t/* 18.4.8 si CT_Rst */\n\tvar sitregex = /<t[^>]*>([^<]*)<\\/t>/g, sirregex = /<r>/;\n\tfunction parse_si(x, opts) {\n\t\tvar html = opts ? opts.cellHTML : true;\n\t\tvar z = {};\n\t\tif(!x) return null;\n\t\tvar y;\n\t\t/* 18.4.12 t ST_Xstring (Plaintext String) */\n\t\tif(x.charCodeAt(1) === 116) {\n\t\t\tz.t = utf8read(unescapexml(x.substr(x.indexOf(\">\")+1).split(/<\\/t>/)[0]));\n\t\t\tz.r = x;\n\t\t\tif(html) z.h = z.t;\n\t\t}\n\t\t/* 18.4.4 r CT_RElt (Rich Text Run) */\n\t\telse if((y = x.match(sirregex))) {\n\t\t\tz.r = x;\n\t\t\tz.t = utf8read(unescapexml(x.match(sitregex).join(\"\").replace(tagregex,\"\")));\n\t\t\tif(html) z.h = parse_rs(x);\n\t\t}\n\t\t/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */\n\t\t/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */\n\t\treturn z;\n\t}\n\t\n\t/* 18.4 Shared String Table */\n\tvar sstr0 = /<sst([^>]*)>([\\s\\S]*)<\\/sst>/;\n\tvar sstr1 = /<(?:si|sstItem)>/g;\n\tvar sstr2 = /<\\/(?:si|sstItem)>/;\n\tfunction parse_sst_xml(data, opts) {\n\t\tvar s = [], ss;\n\t\t/* 18.4.9 sst CT_Sst */\n\t\tvar sst = data.match(sstr0);\n\t\tif(isval(sst)) {\n\t\t\tss = sst[2].replace(sstr1,\"\").split(sstr2);\n\t\t\tfor(var i = 0; i != ss.length; ++i) {\n\t\t\t\tvar o = parse_si(ss[i], opts);\n\t\t\t\tif(o != null) s[s.length] = o;\n\t\t\t}\n\t\t\tsst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;\n\t\t}\n\t\treturn s;\n\t}\n\t\n\tRELS.SST = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\";\n\tvar straywsregex = /^\\s|\\s$|[\\t\\n\\r]/;\n\tfunction write_sst_xml(sst, opts) {\n\t\tif(!opts.bookSST) return \"\";\n\t\tvar o = [XML_HEADER];\n\t\to[o.length] = (writextag('sst', null, {\n\t\t\txmlns: XMLNS.main[0],\n\t\t\tcount: sst.Count,\n\t\t\tuniqueCount: sst.Unique\n\t\t}));\n\t\tfor(var i = 0; i != sst.length; ++i) { if(sst[i] == null) continue;\n\t\t\tvar s = sst[i];\n\t\t\tvar sitag = \"<si>\";\n\t\t\tif(s.r) sitag += s.r;\n\t\t\telse {\n\t\t\t\tsitag += \"<t\";\n\t\t\t\tif(s.t.match(straywsregex)) sitag += ' xml:space=\"preserve\"';\n\t\t\t\tsitag += \">\" + escapexml(s.t) + \"</t>\";\n\t\t\t}\n\t\t\tsitag += \"</si>\";\n\t\t\to[o.length] = (sitag);\n\t\t}\n\t\tif(o.length>2){ o[o.length] = ('</sst>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t/* [MS-XLSB] 2.4.219 BrtBeginSst */\n\tfunction parse_BrtBeginSst(data, length) {\n\t\treturn [data.read_shift(4), data.read_shift(4)];\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.45 Shared Strings */\n\tfunction parse_sst_bin(data, opts) {\n\t\tvar s = [];\n\t\tvar pass = false;\n\t\trecordhopper(data, function hopper_sst(val, R, RT) {\n\t\t\tswitch(R.n) {\n\t\t\t\tcase 'BrtBeginSst': s.Count = val[0]; s.Unique = val[1]; break;\n\t\t\t\tcase 'BrtSSTItem': s.push(val); break;\n\t\t\t\tcase 'BrtEndSst': return true;\n\t\t\t\t/* TODO: produce a test case with a future record */\n\t\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t\t}\n\t\t});\n\t\treturn s;\n\t}\n\t\n\tfunction write_BrtBeginSst(sst, o) {\n\t\tif(!o) o = new_buf(8);\n\t\to.write_shift(4, sst.Count);\n\t\to.write_shift(4, sst.Unique);\n\t\treturn o;\n\t}\n\t\n\tvar write_BrtSSTItem = write_RichStr;\n\t\n\tfunction write_sst_bin(sst, opts) {\n\t\tvar ba = buf_array();\n\t\twrite_record(ba, \"BrtBeginSst\", write_BrtBeginSst(sst));\n\t\tfor(var i = 0; i < sst.length; ++i) write_record(ba, \"BrtSSTItem\", write_BrtSSTItem(sst[i]));\n\t\twrite_record(ba, \"BrtEndSst\");\n\t\treturn ba.end();\n\t}\n\tfunction _JS2ANSI(str) { if(typeof cptable !== 'undefined') return cptable.utils.encode(1252, str); return str.split(\"\").map(function(x) { return x.charCodeAt(0); }); }\n\t\n\t/* [MS-OFFCRYPTO] 2.1.4 Version */\n\tfunction parse_Version(blob, length) {\n\t\tvar o = {};\n\t\to.Major = blob.read_shift(2);\n\t\to.Minor = blob.read_shift(2);\n\t\treturn o;\n\t}\n\t/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */\n\tfunction parse_EncryptionHeader(blob, length) {\n\t\tvar o = {};\n\t\to.Flags = blob.read_shift(4);\n\t\n\t\t// Check if SizeExtra is 0x00000000\n\t\tvar tmp = blob.read_shift(4);\n\t\tif(tmp !== 0) throw 'Unrecognized SizeExtra: ' + tmp;\n\t\n\t\to.AlgID = blob.read_shift(4);\n\t\tswitch(o.AlgID) {\n\t\t\tcase 0: case 0x6801: case 0x660E: case 0x660F: case 0x6610: break;\n\t\t\tdefault: throw 'Unrecognized encryption algorithm: ' + o.AlgID;\n\t\t}\n\t\tparsenoop(blob, length-12);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */\n\tfunction parse_EncryptionVerifier(blob, length) {\n\t\treturn parsenoop(blob, length);\n\t}\n\t/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */\n\tfunction parse_RC4CryptoHeader(blob, length) {\n\t\tvar o = {};\n\t\tvar vers = o.EncryptionVersionInfo = parse_Version(blob, 4); length -= 4;\n\t\tif(vers.Minor != 2) throw 'unrecognized minor version code: ' + vers.Minor;\n\t\tif(vers.Major > 4 || vers.Major < 2) throw 'unrecognized major version code: ' + vers.Major;\n\t\to.Flags = blob.read_shift(4); length -= 4;\n\t\tvar sz = blob.read_shift(4); length -= 4;\n\t\to.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;\n\t\to.EncryptionVerifier = parse_EncryptionVerifier(blob, length);\n\t\treturn o;\n\t}\n\t/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */\n\tfunction parse_RC4Header(blob, length) {\n\t\tvar o = {};\n\t\tvar vers = o.EncryptionVersionInfo = parse_Version(blob, 4); length -= 4;\n\t\tif(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;\n\t\to.Salt = blob.read_shift(16);\n\t\to.EncryptedVerifier = blob.read_shift(16);\n\t\to.EncryptedVerifierHash = blob.read_shift(16);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */\n\tfunction crypto_CreatePasswordVerifier_Method1(Password) {\n\t\tvar Verifier = 0x0000, PasswordArray;\n\t\tvar PasswordDecoded = _JS2ANSI(Password);\n\t\tvar len = PasswordDecoded.length + 1, i, PasswordByte;\n\t\tvar Intermediate1, Intermediate2, Intermediate3;\n\t\tPasswordArray = new_raw_buf(len);\n\t\tPasswordArray[0] = PasswordDecoded.length;\n\t\tfor(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];\n\t\tfor(i = len-1; i >= 0; --i) {\n\t\t\tPasswordByte = PasswordArray[i];\n\t\t\tIntermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;\n\t\t\tIntermediate2 = (Verifier << 1) & 0x7FFF;\n\t\t\tIntermediate3 = Intermediate1 | Intermediate2;\n\t\t\tVerifier = Intermediate3 ^ PasswordByte;\n\t\t}\n\t\treturn Verifier ^ 0xCE4B;\n\t}\n\t\n\t/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */\n\tvar crypto_CreateXorArray_Method1 = (function() {\n\t\tvar PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];\n\t\tvar InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];\n\t\tvar XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];\n\t\tvar Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };\n\t\tvar XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };\n\t\tvar CreateXorKey_Method1 = function(Password) {\n\t\t\tvar XorKey = InitialCode[Password.length - 1];\n\t\t\tvar CurrentElement = 0x68;\n\t\t\tfor(var i = Password.length-1; i >= 0; --i) {\n\t\t\t\tvar Char = Password[i];\n\t\t\t\tfor(var j = 0; j != 7; ++j) {\n\t\t\t\t\tif(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];\n\t\t\t\t\tChar *= 2; --CurrentElement;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn XorKey;\n\t\t};\n\t\treturn function(password) {\n\t\t\tvar Password = _JS2ANSI(password);\n\t\t\tvar XorKey = CreateXorKey_Method1(Password);\n\t\t\tvar Index = Password.length;\n\t\t\tvar ObfuscationArray = new_raw_buf(16);\n\t\t\tfor(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;\n\t\t\tvar Temp, PasswordLastChar, PadIndex;\n\t\t\tif((Index & 1) === 1) {\n\t\t\t\tTemp = XorKey >> 8;\n\t\t\t\tObfuscationArray[Index] = XorRor(PadArray[0], Temp);\n\t\t\t\t--Index;\n\t\t\t\tTemp = XorKey & 0xFF;\n\t\t\t\tPasswordLastChar = Password[Password.length - 1];\n\t\t\t\tObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);\n\t\t\t}\n\t\t\twhile(Index > 0) {\n\t\t\t\t--Index;\n\t\t\t\tTemp = XorKey >> 8;\n\t\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t\t--Index;\n\t\t\t\tTemp = XorKey & 0xFF;\n\t\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t}\n\t\t\tIndex = 15;\n\t\t\tPadIndex = 15 - Password.length;\n\t\t\twhile(PadIndex > 0) {\n\t\t\t\tTemp = XorKey >> 8;\n\t\t\t\tObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);\n\t\t\t\t--Index;\n\t\t\t\t--PadIndex;\n\t\t\t\tTemp = XorKey & 0xFF;\n\t\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t\t--Index;\n\t\t\t\t--PadIndex;\n\t\t\t}\n\t\t\treturn ObfuscationArray;\n\t\t};\n\t})();\n\t\n\t/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */\n\tvar crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {\n\t\t/* If XorArray is set, use it; if O is not set, make changes in-place */\n\t\tif(!O) O = Data;\n\t\tif(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);\n\t\tvar Index, Value;\n\t\tfor(Index = 0; Index != Data.length; ++Index) {\n\t\t\tValue = Data[Index];\n\t\t\tValue ^= XorArray[XorArrayIndex];\n\t\t\tValue = ((Value>>5) | (Value<<3)) & 0xFF;\n\t\t\tO[Index] = Value;\n\t\t\t++XorArrayIndex;\n\t\t}\n\t\treturn [O, XorArrayIndex, XorArray];\n\t};\n\t\n\tvar crypto_MakeXorDecryptor = function(password) {\n\t\tvar XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);\n\t\treturn function(Data) {\n\t\t\tvar O = crypto_DecryptData_Method1(null, Data, XorArrayIndex, XorArray);\n\t\t\tXorArrayIndex = O[1];\n\t\t\treturn O[0];\n\t\t};\n\t};\n\t\n\t/* 2.5.343 */\n\tfunction parse_XORObfuscation(blob, length, opts, out) {\n\t\tvar o = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };\n\t\tif(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);\n\t\tout.valid = o.verificationBytes === o.verifier;\n\t\tif(out.valid) out.insitu_decrypt = crypto_MakeXorDecryptor(opts.password);\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.117 */\n\tfunction parse_FilePassHeader(blob, length, oo) {\n\t\tvar o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;\n\t\tif(o.Info === 1) o.Data = parse_RC4Header(blob, length);\n\t\telse o.Data = parse_RC4CryptoHeader(blob, length);\n\t\treturn o;\n\t}\n\tfunction parse_FilePass(blob, length, opts) {\n\t\tvar o = { Type: blob.read_shift(2) }; /* wEncryptionType */\n\t\tif(o.Type) parse_FilePassHeader(blob, length-2, o);\n\t\telse parse_XORObfuscation(blob, length-2, opts, o);\n\t\treturn o;\n\t}\n\t\n\t\n\tfunction hex2RGB(h) {\n\t\tvar o = h.substr(h[0]===\"#\"?1:0,6);\n\t\treturn [parseInt(o.substr(0,2),16),parseInt(o.substr(2,2),16),parseInt(o.substr(4,2),16)];\n\t}\n\tfunction rgb2Hex(rgb) {\n\t\tfor(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);\n\t\treturn o.toString(16).toUpperCase().substr(1);\n\t}\n\t\n\tfunction rgb2HSL(rgb) {\n\t\tvar R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;\n\t\tvar M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;\n\t\tif(C === 0) return [0, 0, R];\n\t\n\t\tvar H6 = 0, S = 0, L2 = (M + m);\n\t\tS = C / (L2 > 1 ? 2 - L2 : L2);\n\t\tswitch(M){\n\t\t\tcase R: H6 = ((G - B) / C + 6)%6; break;\n\t\t\tcase G: H6 = ((B - R) / C + 2); break;\n\t\t\tcase B: H6 = ((R - G) / C + 4); break;\n\t\t}\n\t\treturn [H6 / 6, S, L2 / 2];\n\t}\n\t\n\tfunction hsl2RGB(hsl){\n\t\tvar H = hsl[0], S = hsl[1], L = hsl[2];\n\t\tvar C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;\n\t\tvar rgb = [m,m,m], h6 = 6*H;\n\t\n\t\tvar X;\n\t\tif(S !== 0) switch(h6|0) {\n\t\t\tcase 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;\n\t\t\tcase 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;\n\t\t\tcase 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;\n\t\t\tcase 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;\n\t\t\tcase 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;\n\t\t\tcase 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;\n\t\t}\n\t\tfor(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);\n\t\treturn rgb;\n\t}\n\t\n\t/* 18.8.3 bgColor tint algorithm */\n\tfunction rgb_tint(hex, tint) {\n\t\tif(tint == 0) return hex;\n\t\tvar hsl = rgb2HSL(hex2RGB(hex));\n\t\tif (tint < 0) hsl[2] = hsl[2] * (1 + tint);\n\t\telse hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);\n\t  var rev =rgb2Hex(hsl2RGB(hsl))\n\t\treturn rev;\n\t}\n\t\n\t/* 18.3.1.13 width calculations */\n\tvar DEF_MDW = 7, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;\n\tfunction width2px(width) { return (( width + ((128/MDW)|0)/256 )* MDW )|0; }\n\tfunction px2char(px) { return (((px - 5)/MDW * 100 + 0.5)|0)/100; }\n\tfunction char2width(chr) { return (((chr * MDW + 5)/MDW*256)|0)/256; }\n\tfunction cycle_width(collw) { return char2width(px2char(width2px(collw))); }\n\tfunction find_mdw(collw, coll) {\n\t\tif(cycle_width(collw) != collw) {\n\t\t\tfor(MDW=DEF_MDW; MDW>MIN_MDW; --MDW) if(cycle_width(collw) === collw) break;\n\t\t\tif(MDW === MIN_MDW) for(MDW=DEF_MDW+1; MDW<MAX_MDW; ++MDW) if(cycle_width(collw) === collw) break;\n\t\t\tif(MDW === MAX_MDW) MDW = DEF_MDW;\n\t\t}\n\t}\n\t\n\t/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */\n\tvar XLMLPatternTypeMap = {\n\t\t\"None\": \"none\",\n\t\t\"Solid\": \"solid\",\n\t\t\"Gray50\": \"mediumGray\",\n\t\t\"Gray75\": \"darkGray\",\n\t\t\"Gray25\": \"lightGray\",\n\t\t\"HorzStripe\": \"darkHorizontal\",\n\t\t\"VertStripe\": \"darkVertical\",\n\t\t\"ReverseDiagStripe\": \"darkDown\",\n\t\t\"DiagStripe\": \"darkUp\",\n\t\t\"DiagCross\": \"darkGrid\",\n\t\t\"ThickDiagCross\": \"darkTrellis\",\n\t\t\"ThinHorzStripe\": \"lightHorizontal\",\n\t\t\"ThinVertStripe\": \"lightVertical\",\n\t\t\"ThinReverseDiagStripe\": \"lightDown\",\n\t\t\"ThinHorzCross\": \"lightGrid\"\n\t};\n\t\n\tvar styles = {}; // shared styles\n\t\n\tvar themes = {}; // shared themes\n\t\n\t/* 18.8.21 fills CT_Fills */\n\tfunction parse_fills(t, opts) {\n\t  styles.Fills = [];\n\t  var fill = {};\n\t  t[0].match(tagregex).forEach(function (x) {\n\t    var y = parsexmltag(x);\n\t    switch (y[0]) {\n\t      case '<fills':\n\t      case '<fills>':\n\t      case '</fills>':\n\t        break;\n\t\n\t      /* 18.8.20 fill CT_Fill */\n\t      case '<fill>':\n\t        break;\n\t      case '</fill>':\n\t        styles.Fills.push(fill);\n\t        fill = {};\n\t        break;\n\t\n\t      /* 18.8.32 patternFill CT_PatternFill */\n\t      case '<patternFill':\n\t        if (y.patternType) fill.patternType = y.patternType;\n\t        break;\n\t      case '<patternFill/>':\n\t      case '</patternFill>':\n\t        break;\n\t\n\t      /* 18.8.3 bgColor CT_Color */\n\t      case '<bgColor':\n\t        if (!fill.bgColor) fill.bgColor = {};\n\t        if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);\n\t        if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);\n\t        if (y.tint) fill.bgColor.tint = parseFloat(y.tint);\n\t\n\t\n\t        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n\t          fill.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[fill.bgColor.theme].rgb, fill.bgColor.tint || 0);\n\t          if (opts.WTF) fill.bgColor.raw_rgb = rgb_tint(themes.themeElements.clrScheme[fill.bgColor.theme].rgb,0);\n\t        }\n\t        /* Excel uses ARGB strings */\n\t        if (y.rgb) fill.bgColor.rgb = y.rgb;//.substring(y.rgb.length - 6);\n\t        break;\n\t      case '<bgColor/>':\n\t      case '</bgColor>':\n\t        break;\n\t\n\t      /* 18.8.19 fgColor CT_Color */\n\t      case '<fgColor':\n\t        if (!fill.fgColor) fill.fgColor = {};\n\t        if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);\n\t        if (y.tint) fill.fgColor.tint = parseFloat(y.tint);\n\t\n\t        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n\t          fill.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[fill.fgColor.theme].rgb, fill.fgColor.tint || 0);\n\t          if (opts.WTF) fill.fgColor.raw_rgb = rgb_tint(themes.themeElements.clrScheme[fill.fgColor.theme].rgb,0);\n\t        }\n\t\n\t        /* Excel uses ARGB strings */\n\t        if (y.rgb) fill.fgColor.rgb = y.rgb;//.substring(y.rgb.length - 6);\n\t        break;\n\t      case '<fgColor/>':\n\t      case '</fgColor>':\n\t        break;\n\t\n\t      default:\n\t        if (opts.WTF) throw 'unrecognized ' + y[0] + ' in fills';\n\t    }\n\t  });\n\t}\n\t\n\tfunction parse_fonts(t, opts) {\n\t  styles.Fonts = [];\n\t  var font = {};\n\t  t[0].match(tagregex).forEach(function (x) {\n\t    var y = parsexmltag(x);\n\t    switch (y[0]) {\n\t\n\t      case '<fonts':\n\t      case  '<fonts>':\n\t      case '</fonts>':\n\t        break;\n\t      case '<font':\n\t        break;\n\t      case '</font>':\n\t        styles.Fonts.push(font);\n\t        ;\n\t        font = {};\n\t        break;\n\t\n\t      case '<name':\n\t        if (y.val) font.name = y.val;\n\t        break;\n\t      case '<name/>':\n\t      case '</name>':\n\t        break;\n\t\n\t\n\t      case '<b/>':\n\t        font.bold = true;\n\t        break;\n\t      case '<u/>':\n\t        font.underline = true;\n\t        break;\n\t      case '<i/>':\n\t        font.italic = true;\n\t        break;\n\t      case '<strike/>':\n\t        font.strike = true;\n\t        break;\n\t      case '<outline/>':\n\t        font.outline = true;\n\t        break;\n\t      case '<shadow/>':\n\t        font.shadow = true;\n\t        break;\n\t\n\t\n\t      case '<sz':\n\t        if (y.val) font.sz = y.val;\n\t        break;\n\t      case '<sz/>':\n\t      case '</sz>':\n\t        break;\n\t\n\t      case '<vertAlign':\n\t        if (y.val) font.vertAlign = y.val;\n\t        break;\n\t      case '<vertAlign/>':\n\t      case '</vertAlign>':\n\t        break;\n\t\n\t\n\t      case '<color':\n\t        if (!font.color) font.color = {};\n\t        if (y.theme) font.color.theme = y.theme;\n\t        if (y.tint) font.color.tint = y.tint;\n\t        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n\t          font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);\n\t        }\n\t        if (y.rgb) font.color.rgb = y.rgb;\n\t        break;\n\t      case '<color/>':\n\t      case '</color>':\n\t        break;\n\t    }\n\t  });\n\t}\n\t\n\tfunction parse_borders(t, opts) {\n\t  styles.Borders = [];\n\t  var border = {}, sub_border = {};\n\t  t[0].match(tagregex).forEach(function (x) {\n\t    var y = parsexmltag(x);\n\t    switch (y[0]) {\n\t      case '<borders':\n\t      case  '<borders>':\n\t      case '</borders>':\n\t        break;\n\t      case '<border':\n\t      case '<border>':\n\t        border = {};\n\t        if (y.diagonalUp) { border.diagonalUp = y.diagonalUp; }\n\t        if (y.diagonalDown) { border.diagonalDown = y.diagonalDown; }\n\t        styles.Borders.push(border);\n\t\n\t        break;\n\t        break;\n\t      case '</border>':\n\t        break;\n\t\n\t      case '<left':\n\t        sub_border = border.left = {};\n\t        if (y.style) {\n\t          sub_border.style = y.style;\n\t        }\n\t        break;\n\t      case '<right':\n\t        sub_border = border.right = {};\n\t        if (y.style) {\n\t          sub_border.style = y.style;\n\t        }\n\t        break;\n\t      case '<top':\n\t        sub_border = border.top = {};\n\t        if (y.style) {\n\t          sub_border.style = y.style;\n\t        }\n\t        break;\n\t      case '<bottom':\n\t        sub_border = border.bottom = {};\n\t        if (y.style) {\n\t          sub_border.style = y.style;\n\t        }\n\t        break;\n\t      case '<diagonal':\n\t        sub_border = border.diagonal = {};\n\t        if (y.style) {\n\t          sub_border.style = y.style;\n\t        }\n\t        break;\n\t\n\t      case '<color':\n\t        sub_border.color = {};\n\t        if (y.theme) sub_border.color.theme = y.theme;\n\t        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n\t          sub_border.color.rgb = rgb_tint(themes.themeElements.clrScheme[sub_border.color.theme].rgb, sub_border.color.tint || 0);\n\t        }\n\t\n\t        if (y.tint) sub_border.color.tint = y.tint;\n\t        if (y.rgb) sub_border.color.rgb = y.rgb;\n\t        if (y.auto) sub_border.color.auto = y.auto;\n\t        break;\n\t      case '<name/>':\n\t      case '</name>':\n\t        break;\n\t      default:\n\t        break;\n\t    }\n\t  });\n\t\n\t}\n\t\n\t/* 18.8.31 numFmts CT_NumFmts */\n\tfunction parse_numFmts(t, opts) {\n\t  styles.NumberFmt = [];\n\t  var k = keys(SSF._table);\n\t  for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];\n\t  var m = t[0].match(tagregex);\n\t  for (i = 0; i < m.length; ++i) {\n\t    var y = parsexmltag(m[i]);\n\t    switch (y[0]) {\n\t      case '<numFmts':\n\t      case '</numFmts>':\n\t      case '<numFmts/>':\n\t      case '<numFmts>':\n\t        break;\n\t      case '<numFmt':\n\t      {\n\t        var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);\n\t        styles.NumberFmt[j] = f;\n\t        if (j > 0) SSF.load(f, j);\n\t      }\n\t        break;\n\t      default:\n\t        if (opts.WTF) throw 'unrecognized ' + y[0] + ' in numFmts';\n\t    }\n\t  }\n\t}\n\t\n\tfunction write_numFmts(NF, opts) {\n\t  var o = [\"<numFmts>\"];\n\t  [\n\t    [5, 8],\n\t    [23, 26],\n\t    [41, 44],\n\t    [63, 66],\n\t    [164, 392]\n\t  ].forEach(function (r) {\n\t    for (var i = r[0]; i <= r[1]; ++i) if (NF[i] !== undefined) o[o.length] = (writextag('numFmt', null, {numFmtId: i, formatCode: escapexml(NF[i])}));\n\t  });\n\t  if (o.length === 1) return \"\";\n\t  o[o.length] = (\"</numFmts>\");\n\t  o[0] = writextag('numFmts', null, { count: o.length - 2 }).replace(\"/>\", \">\");\n\t  return o.join(\"\");\n\t}\n\t\n\t/* 18.8.10 cellXfs CT_CellXfs */\n\tfunction parse_cellXfs(t, opts) {\n\t  styles.CellXf = [];\n\t  var xf;\n\t  t[0].match(tagregex).forEach(function (x) {\n\t    var y = parsexmltag(x);\n\t    switch (y[0]) {\n\t      case '<cellXfs':\n\t      case '<cellXfs>':\n\t      case '<cellXfs/>':\n\t      case '</cellXfs>':\n\t        break;\n\t\n\t      /* 18.8.45 xf CT_Xf */\n\t      case '<xf':\n\t          xf = y;\n\t          delete xf[0];\n\t        delete y[0];\n\t        if (xf.numFmtId) xf.numFmtId = parseInt(xf.numFmtId, 10);\n\t        if (xf.fillId) xf.fillId = parseInt(xf.fillId, 10);\n\t        styles.CellXf.push(xf);\n\t        break;\n\t      case '</xf>':\n\t        break;\n\t\n\t      /* 18.8.1 alignment CT_CellAlignment */\n\t      case '<alignment':\n\t      case '<alignment/>':\n\t        var alignment = {}\n\t          if (y.vertical) { alignment.vertical = y.vertical;}\n\t          if (y.horizontal) { alignment.horizontal = y.horizontal;}\n\t          if (y.textRotation != undefined) { alignment.textRotation = y.textRotation; }\n\t          if (y.indent) { alignment.indent = y.indent; }\n\t          if (y.wrapText) { alignment.wrapText = y.wrapText; }\n\t          xf.alignment = alignment;\n\t\n\t        break;\n\t\n\t      /* 18.8.33 protection CT_CellProtection */\n\t      case '<protection':\n\t      case '</protection>':\n\t      case '<protection/>':\n\t        break;\n\t\n\t      case '<extLst':\n\t      case '</extLst>':\n\t        break;\n\t      case '<ext':\n\t        break;\n\t      default:\n\t        if (opts.WTF) throw 'unrecognized ' + y[0] + ' in cellXfs';\n\t    }\n\t  });\n\t}\n\t\n\tfunction write_cellXfs(cellXfs) {\n\t  var o = [];\n\t  o[o.length] = (writextag('cellXfs', null));\n\t  cellXfs.forEach(function (c) {\n\t    o[o.length] = (writextag('xf', null, c));\n\t  });\n\t  o[o.length] = (\"</cellXfs>\");\n\t  if (o.length === 2) return \"\";\n\t  o[0] = writextag('cellXfs', null, {count: o.length - 2}).replace(\"/>\", \">\");\n\t  return o.join(\"\");\n\t}\n\t\n\t/* 18.8 Styles CT_Stylesheet*/\n\tvar parse_sty_xml = (function make_pstyx() {\n\t  var numFmtRegex = /<numFmts([^>]*)>.*<\\/numFmts>/;\n\t  var cellXfRegex = /<cellXfs([^>]*)>.*<\\/cellXfs>/;\n\t  var fillsRegex = /<fills([^>]*)>.*<\\/fills>/;\n\t  var bordersRegex = /<borders([^>]*)>.*<\\/borders>/;\n\t\n\t  return function parse_sty_xml(data, opts) {\n\t    /* 18.8.39 styleSheet CT_Stylesheet */\n\t    var t;\n\t\n\t    /* numFmts CT_NumFmts ? */\n\t    if ((t = data.match(numFmtRegex))) parse_numFmts(t, opts);\n\t\n\t    /* fonts CT_Fonts ? */\n\t    if ((t = data.match(/<fonts([^>]*)>.*<\\/fonts>/))) parse_fonts(t, opts)\n\t\n\t    /* fills CT_Fills */\n\t    if ((t = data.match(fillsRegex))) parse_fills(t, opts);\n\t\n\t    /* borders CT_Borders ? */\n\t    if ((t = data.match(bordersRegex))) parse_borders(t, opts);\n\t    /* cellStyleXfs CT_CellStyleXfs ? */\n\t\n\t    /* cellXfs CT_CellXfs ? */\n\t    if ((t = data.match(cellXfRegex))) parse_cellXfs(t, opts);\n\t\n\t    /* dxfs CT_Dxfs ? */\n\t    /* tableStyles CT_TableStyles ? */\n\t    /* colors CT_Colors ? */\n\t    /* extLst CT_ExtensionList ? */\n\t\n\t    return styles;\n\t  };\n\t})();\n\t\n\tvar STYLES_XML_ROOT = writextag('styleSheet', null, {\n\t  'xmlns': XMLNS.main[0],\n\t  'xmlns:vt': XMLNS.vt\n\t});\n\t\n\tRELS.STY = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\";\n\t\n\tfunction write_sty_xml(wb, opts) {\n\t\n\t  if (typeof style_builder != 'undefined' && typeof 'require' != 'undefined') {\n\t    return style_builder.toXml();\n\t  }\n\t\n\t  var o = [XML_HEADER, STYLES_XML_ROOT], w;\n\t  if ((w = write_numFmts(wb.SSF)) != null) o[o.length] = w;\n\t  o[o.length] = ('<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>');\n\t  o[o.length] = ('<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>');\n\t  o[o.length] = ('<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');\n\t  o[o.length] = ('<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>');\n\t  if ((w = write_cellXfs(opts.cellXfs))) o[o.length] = (w);\n\t  o[o.length] = ('<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>');\n\t  o[o.length] = ('<dxfs count=\"0\"/>');\n\t  o[o.length] = ('<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>');\n\t\n\t  if (o.length > 2) {\n\t    o[o.length] = ('</styleSheet>');\n\t    o[1] = o[1].replace(\"/>\", \">\");\n\t  }\n\t  return o.join(\"\");\n\t}\n\t/* [MS-XLSB] 2.4.651 BrtFmt */\n\tfunction parse_BrtFmt(data, length) {\n\t\tvar ifmt = data.read_shift(2);\n\t\tvar stFmtCode = parse_XLWideString(data,length-2);\n\t\treturn [ifmt, stFmtCode];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.653 BrtFont TODO */\n\tfunction parse_BrtFont(data, length) {\n\t\tvar out = {flags:{}};\n\t\tout.dyHeight = data.read_shift(2);\n\t\tout.grbit = parse_FontFlags(data, 2);\n\t\tout.bls = data.read_shift(2);\n\t\tout.sss = data.read_shift(2);\n\t\tout.uls = data.read_shift(1);\n\t\tout.bFamily = data.read_shift(1);\n\t\tout.bCharSet = data.read_shift(1);\n\t\tdata.l++;\n\t\tout.brtColor = parse_BrtColor(data, 8);\n\t\tout.bFontScheme = data.read_shift(1);\n\t\tout.name = parse_XLWideString(data, length - 21);\n\t\n\t\tout.flags.Bold = out.bls === 0x02BC;\n\t\tout.flags.Italic = out.grbit.fItalic;\n\t\tout.flags.Strikeout = out.grbit.fStrikeout;\n\t\tout.flags.Outline = out.grbit.fOutline;\n\t\tout.flags.Shadow = out.grbit.fShadow;\n\t\tout.flags.Condense = out.grbit.fCondense;\n\t\tout.flags.Extend = out.grbit.fExtend;\n\t\tout.flags.Sub = out.sss & 0x2;\n\t\tout.flags.Sup = out.sss & 0x1;\n\t\treturn out;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.816 BrtXF */\n\tfunction parse_BrtXF(data, length) {\n\t\tvar ixfeParent = data.read_shift(2);\n\t\tvar ifmt = data.read_shift(2);\n\t\tparsenoop(data, length-4);\n\t\treturn {ixfe:ixfeParent, ifmt:ifmt };\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.50 Styles */\n\tfunction parse_sty_bin(data, opts) {\n\t\tstyles.NumberFmt = [];\n\t\tfor(var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];\n\t\n\t\tstyles.CellXf = [];\n\t\tvar state = \"\"; /* TODO: this should be a stack */\n\t\tvar pass = false;\n\t\trecordhopper(data, function hopper_sty(val, R, RT) {\n\t\t\tswitch(R.n) {\n\t\t\t\tcase 'BrtFmt':\n\t\t\t\t\tstyles.NumberFmt[val[0]] = val[1]; SSF.load(val[1], val[0]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'BrtFont': break; /* TODO */\n\t\t\t\tcase 'BrtKnownFonts': break; /* TODO */\n\t\t\t\tcase 'BrtFill': break; /* TODO */\n\t\t\t\tcase 'BrtBorder': break; /* TODO */\n\t\t\t\tcase 'BrtXF':\n\t\t\t\t\tif(state === \"CELLXFS\") {\n\t\t\t\t\t\tstyles.CellXf.push(val);\n\t\t\t\t\t}\n\t\t\t\t\tbreak; /* TODO */\n\t\t\t\tcase 'BrtStyle': break; /* TODO */\n\t\t\t\tcase 'BrtDXF': break; /* TODO */\n\t\t\t\tcase 'BrtMRUColor': break; /* TODO */\n\t\t\t\tcase 'BrtIndexedColor': break; /* TODO */\n\t\t\t\tcase 'BrtBeginStyleSheet': break;\n\t\t\t\tcase 'BrtEndStyleSheet': break;\n\t\t\t\tcase 'BrtBeginTableStyle': break;\n\t\t\t\tcase 'BrtTableStyleElement': break;\n\t\t\t\tcase 'BrtEndTableStyle': break;\n\t\t\t\tcase 'BrtBeginFmts': state = \"FMTS\"; break;\n\t\t\t\tcase 'BrtEndFmts': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginFonts': state = \"FONTS\"; break;\n\t\t\t\tcase 'BrtEndFonts': state = \"\"; break;\n\t\t\t\tcase 'BrtACBegin': state = \"ACFONTS\"; break;\n\t\t\t\tcase 'BrtACEnd': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginFills': state = \"FILLS\"; break;\n\t\t\t\tcase 'BrtEndFills': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginBorders': state = \"BORDERS\"; break;\n\t\t\t\tcase 'BrtEndBorders': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginCellStyleXFs': state = \"CELLSTYLEXFS\"; break;\n\t\t\t\tcase 'BrtEndCellStyleXFs': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginCellXFs': state = \"CELLXFS\"; break;\n\t\t\t\tcase 'BrtEndCellXFs': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginStyles': state = \"STYLES\"; break;\n\t\t\t\tcase 'BrtEndStyles': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginDXFs': state = \"DXFS\"; break;\n\t\t\t\tcase 'BrtEndDXFs': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginTableStyles': state = \"TABLESTYLES\"; break;\n\t\t\t\tcase 'BrtEndTableStyles': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginColorPalette': state = \"COLORPALETTE\"; break;\n\t\t\t\tcase 'BrtEndColorPalette': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginIndexedColors': state = \"INDEXEDCOLORS\"; break;\n\t\t\t\tcase 'BrtEndIndexedColors': state = \"\"; break;\n\t\t\t\tcase 'BrtBeginMRUColors': state = \"MRUCOLORS\"; break;\n\t\t\t\tcase 'BrtEndMRUColors': state = \"\"; break;\n\t\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\t\tcase 'BrtBeginStyleSheetExt14': break;\n\t\t\t\tcase 'BrtBeginSlicerStyles': break;\n\t\t\t\tcase 'BrtEndSlicerStyles': break;\n\t\t\t\tcase 'BrtBeginTimelineStylesheetExt15': break;\n\t\t\t\tcase 'BrtEndTimelineStylesheetExt15': break;\n\t\t\t\tcase 'BrtBeginTimelineStyles': break;\n\t\t\t\tcase 'BrtEndTimelineStyles': break;\n\t\t\t\tcase 'BrtEndStyleSheetExt14': break;\n\t\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t\t}\n\t\t});\n\t\treturn styles;\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.50 Styles */\n\tfunction write_sty_bin(data, opts) {\n\t\tvar ba = buf_array();\n\t\twrite_record(ba, \"BrtBeginStyleSheet\");\n\t\t/* [FMTS] */\n\t\t/* [FONTS] */\n\t\t/* [FILLS] */\n\t\t/* [BORDERS] */\n\t\t/* CELLSTYLEXFS */\n\t\t/* CELLXFS*/\n\t\t/* STYLES */\n\t\t/* DXFS */\n\t\t/* TABLESTYLES */\n\t\t/* [COLORPALETTE] */\n\t\t/* FRTSTYLESHEET*/\n\t\twrite_record(ba, \"BrtEndStyleSheet\");\n\t\treturn ba.end();\n\t}\n\tRELS.THEME = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\";\n\t\n\t/* 20.1.6.2 clrScheme CT_ColorScheme */\n\tfunction parse_clrScheme(t, opts) {\n\t\tthemes.themeElements.clrScheme = [];\n\t\tvar color = {};\n\t\tt[0].match(tagregex).forEach(function(x) {\n\t\t\tvar y = parsexmltag(x);\n\t\t\tswitch(y[0]) {\n\t\t\t\tcase '<a:clrScheme': case '</a:clrScheme>': break;\n\t\n\t\t\t\t/* 20.1.2.3.32 srgbClr CT_SRgbColor */\n\t\t\t\tcase '<a:srgbClr': color.rgb = y.val; break;\n\t\n\t\t\t\t/* 20.1.2.3.33 sysClr CT_SystemColor */\n\t\t\t\tcase '<a:sysClr': color.rgb = y.lastClr; break;\n\t\n\t\t\t\t/* 20.1.4.1.9 dk1 (Dark 1) */\n\t\t\t\tcase '<a:dk1>':\n\t\t\t\tcase '</a:dk1>':\n\t\t\t\t/* 20.1.4.1.10 dk2 (Dark 2) */\n\t\t\t\tcase '<a:dk2>':\n\t\t\t\tcase '</a:dk2>':\n\t\t\t\t/* 20.1.4.1.22 lt1 (Light 1) */\n\t\t\t\tcase '<a:lt1>':\n\t\t\t\tcase '</a:lt1>':\n\t\t\t\t/* 20.1.4.1.23 lt2 (Light 2) */\n\t\t\t\tcase '<a:lt2>':\n\t\t\t\tcase '</a:lt2>':\n\t\t\t\t/* 20.1.4.1.1 accent1 (Accent 1) */\n\t\t\t\tcase '<a:accent1>':\n\t\t\t\tcase '</a:accent1>':\n\t\t\t\t/* 20.1.4.1.2 accent2 (Accent 2) */\n\t\t\t\tcase '<a:accent2>':\n\t\t\t\tcase '</a:accent2>':\n\t\t\t\t/* 20.1.4.1.3 accent3 (Accent 3) */\n\t\t\t\tcase '<a:accent3>':\n\t\t\t\tcase '</a:accent3>':\n\t\t\t\t/* 20.1.4.1.4 accent4 (Accent 4) */\n\t\t\t\tcase '<a:accent4>':\n\t\t\t\tcase '</a:accent4>':\n\t\t\t\t/* 20.1.4.1.5 accent5 (Accent 5) */\n\t\t\t\tcase '<a:accent5>':\n\t\t\t\tcase '</a:accent5>':\n\t\t\t\t/* 20.1.4.1.6 accent6 (Accent 6) */\n\t\t\t\tcase '<a:accent6>':\n\t\t\t\tcase '</a:accent6>':\n\t\t\t\t/* 20.1.4.1.19 hlink (Hyperlink) */\n\t\t\t\tcase '<a:hlink>':\n\t\t\t\tcase '</a:hlink>':\n\t\t\t\t/* 20.1.4.1.15 folHlink (Followed Hyperlink) */\n\t\t\t\tcase '<a:folHlink>':\n\t\t\t\tcase '</a:folHlink>':\n\t\t\t\t\tif (y[0][1] === '/') {\n\t\t\t\t\t\tthemes.themeElements.clrScheme.push(color);\n\t\t\t\t\t\tcolor = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcolor.name = y[0].substring(3, y[0].length - 1);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tdefault: if(opts.WTF) throw 'unrecognized ' + y[0] + ' in clrScheme';\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/* 20.1.4.1.18 fontScheme CT_FontScheme */\n\tfunction parse_fontScheme(t, opts) { }\n\t\n\t/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */\n\tfunction parse_fmtScheme(t, opts) { }\n\t\n\tvar clrsregex = /<a:clrScheme([^>]*)>[^\\u2603]*<\\/a:clrScheme>/;\n\tvar fntsregex = /<a:fontScheme([^>]*)>[^\\u2603]*<\\/a:fontScheme>/;\n\tvar fmtsregex = /<a:fmtScheme([^>]*)>[^\\u2603]*<\\/a:fmtScheme>/;\n\t\n\t/* 20.1.6.10 themeElements CT_BaseStyles */\n\tfunction parse_themeElements(data, opts) {\n\t\tthemes.themeElements = {};\n\t\n\t\tvar t;\n\t\n\t\t[\n\t\t\t/* clrScheme CT_ColorScheme */\n\t\t\t['clrScheme', clrsregex, parse_clrScheme],\n\t\t\t/* fontScheme CT_FontScheme */\n\t\t\t['fontScheme', fntsregex, parse_fontScheme],\n\t\t\t/* fmtScheme CT_StyleMatrix */\n\t\t\t['fmtScheme', fmtsregex, parse_fmtScheme]\n\t\t].forEach(function(m) {\n\t\t\tif(!(t=data.match(m[1]))) throw m[0] + ' not found in themeElements';\n\t\t\tm[2](t, opts);\n\t\t});\n\t}\n\t\n\tvar themeltregex = /<a:themeElements([^>]*)>[^\\u2603]*<\\/a:themeElements>/;\n\t\n\t/* 14.2.7 Theme Part */\n\tfunction parse_theme_xml(data, opts) {\n\t\t/* 20.1.6.9 theme CT_OfficeStyleSheet */\n\t\tif(!data || data.length === 0) return themes;\n\t\n\t\tvar t;\n\t\n\t\t/* themeElements CT_BaseStyles */\n\t\tif(!(t=data.match(themeltregex))) throw 'themeElements not found in theme';\n\t\tparse_themeElements(t[0], opts);\n\t\n\t\treturn themes;\n\t}\n\t\n\t//function write_theme() { return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2><a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2><a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1><a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2><a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3><a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4><a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5><a:accent6><a:srgbClr val=\"F79646\"/></a:accent6><a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Cambria\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"1\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>'; }\n\tfunction write_theme(opts) {\n\t  if (opts.themeXml) { return opts.themeXml; }\n\t  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2><a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2><a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1><a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2><a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3><a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4><a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5><a:accent6><a:srgbClr val=\"F79646\"/></a:accent6><a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Cambria\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"1\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>';\n\t}/* [MS-XLS] 2.4.326 TODO: payload is a zip file */\n\tfunction parse_Theme(blob, length) {\n\t\tvar dwThemeVersion = blob.read_shift(4);\n\t\tif(dwThemeVersion === 124226) return;\n\t\tblob.l += length-4;\n\t}\n\t\n\t/* 2.5.49 */\n\tfunction parse_ColorTheme(blob, length) { return blob.read_shift(4); }\n\t\n\t/* 2.5.155 */\n\tfunction parse_FullColorExt(blob, length) {\n\t\tvar o = {};\n\t\to.xclrType = blob.read_shift(2);\n\t\to.nTintShade = blob.read_shift(2);\n\t\tswitch(o.xclrType) {\n\t\t\tcase 0: blob.l += 4; break;\n\t\t\tcase 1: o.xclrValue = parse_IcvXF(blob, 4); break;\n\t\t\tcase 2: o.xclrValue = parse_LongRGBA(blob, 4); break;\n\t\t\tcase 3: o.xclrValue = parse_ColorTheme(blob, 4); break;\n\t\t\tcase 4: blob.l += 4; break;\n\t\t}\n\t\tblob.l += 8;\n\t\treturn o;\n\t}\n\t\n\t/* 2.5.164 TODO: read 7 bits*/\n\tfunction parse_IcvXF(blob, length) {\n\t\treturn parsenoop(blob, length);\n\t}\n\t\n\t/* 2.5.280 */\n\tfunction parse_XFExtGradient(blob, length) {\n\t\treturn parsenoop(blob, length);\n\t}\n\t\n\t/* 2.5.108 */\n\tfunction parse_ExtProp(blob, length) {\n\t\tvar extType = blob.read_shift(2);\n\t\tvar cb = blob.read_shift(2);\n\t\tvar o = [extType];\n\t\tswitch(extType) {\n\t\t\tcase 0x04: case 0x05: case 0x07: case 0x08:\n\t\t\tcase 0x09: case 0x0A: case 0x0B: case 0x0D:\n\t\t\t\to[1] = parse_FullColorExt(blob, cb); break;\n\t\t\tcase 0x06: o[1] = parse_XFExtGradient(blob, cb); break;\n\t\t\tcase 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 5 ? 1 : 2); break;\n\t\t\tdefault: throw new Error(\"Unrecognized ExtProp type: \" + extType + \" \" + cb);\n\t\t}\n\t\treturn o;\n\t}\n\t\n\t/* 2.4.355 */\n\tfunction parse_XFExt(blob, length) {\n\t\tvar end = blob.l + length;\n\t\tblob.l += 2;\n\t\tvar ixfe = blob.read_shift(2);\n\t\tblob.l += 2;\n\t\tvar cexts = blob.read_shift(2);\n\t\tvar ext = [];\n\t\twhile(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));\n\t\treturn {ixfe:ixfe, ext:ext};\n\t}\n\t\n\t/* xf is an XF, see parse_XFExt for xfext */\n\tfunction update_xfext(xf, xfext) {\n\t\txfext.forEach(function(xfe) {\n\t\t\tswitch(xfe[0]) { /* 2.5.108 extPropData */\n\t\t\t\tcase 0x04: break; /* foreground color */\n\t\t\t\tcase 0x05: break; /* background color */\n\t\t\t\tcase 0x07: case 0x08: case 0x09: case 0x0a: break;\n\t\t\t\tcase 0x0d: break; /* text color */\n\t\t\t\tcase 0x0e: break; /* font scheme */\n\t\t\t\tdefault: throw \"bafuq\" + xfe[0].toString(16);\n\t\t\t}\n\t\t});\n\t}\n\t\n\t/* 18.6 Calculation Chain */\n\tfunction parse_cc_xml(data, opts) {\n\t\tvar d = [];\n\t\tvar l = 0, i = 1;\n\t\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\t\tvar y = parsexmltag(x);\n\t\t\tswitch(y[0]) {\n\t\t\t\tcase '<?xml': break;\n\t\t\t\t/* 18.6.2  calcChain CT_CalcChain 1 */\n\t\t\t\tcase '<calcChain': case '<calcChain>': case '</calcChain>': break;\n\t\t\t\t/* 18.6.1  c CT_CalcCell 1 */\n\t\t\t\tcase '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;\n\t\t\t}\n\t\t});\n\t\treturn d;\n\t}\n\t\n\tfunction write_cc_xml(data, opts) { }\n\t/* [MS-XLSB] 2.6.4.1 */\n\tfunction parse_BrtCalcChainItem$(data, length) {\n\t\tvar out = {};\n\t\tout.i = data.read_shift(4);\n\t\tvar cell = {};\n\t\tcell.r = data.read_shift(4);\n\t\tcell.c = data.read_shift(4);\n\t\tout.r = encode_cell(cell);\n\t\tvar flags = data.read_shift(1);\n\t\tif(flags & 0x2) out.l = '1';\n\t\tif(flags & 0x8) out.a = '1';\n\t\treturn out;\n\t}\n\t\n\t/* 18.6 Calculation Chain */\n\tfunction parse_cc_bin(data, opts) {\n\t\tvar out = [];\n\t\tvar pass = false;\n\t\trecordhopper(data, function hopper_cc(val, R, RT) {\n\t\t\tswitch(R.n) {\n\t\t\t\tcase 'BrtCalcChainItem$': out.push(val); break;\n\t\t\t\tcase 'BrtBeginCalcChain$': break;\n\t\t\t\tcase 'BrtEndCalcChain$': break;\n\t\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t\t}\n\t\t});\n\t\treturn out;\n\t}\n\t\n\tfunction write_cc_bin(data, opts) { }\n\t\n\tfunction parse_comments(zip, dirComments, sheets, sheetRels, opts) {\n\t\tfor(var i = 0; i != dirComments.length; ++i) {\n\t\t\tvar canonicalpath=dirComments[i];\n\t\t\tvar comments=parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\\//,''), true), canonicalpath, opts);\n\t\t\tif(!comments || !comments.length) continue;\n\t\t\t// find the sheets targeted by these comments\n\t\t\tvar sheetNames = keys(sheets);\n\t\t\tfor(var j = 0; j != sheetNames.length; ++j) {\n\t\t\t\tvar sheetName = sheetNames[j];\n\t\t\t\tvar rels = sheetRels[sheetName];\n\t\t\t\tif(rels) {\n\t\t\t\t\tvar rel = rels[canonicalpath];\n\t\t\t\t\tif(rel) insertCommentsIntoSheet(sheetName, sheets[sheetName], comments);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction insertCommentsIntoSheet(sheetName, sheet, comments) {\n\t\tcomments.forEach(function(comment) {\n\t\t\tvar cell = sheet[comment.ref];\n\t\t\tif (!cell) {\n\t\t\t\tcell = {};\n\t\t\t\tsheet[comment.ref] = cell;\n\t\t\t\tvar range = safe_decode_range(sheet[\"!ref\"]||\"BDWGO1000001:A1\");\n\t\t\t\tvar thisCell = decode_cell(comment.ref);\n\t\t\t\tif(range.s.r > thisCell.r) range.s.r = thisCell.r;\n\t\t\t\tif(range.e.r < thisCell.r) range.e.r = thisCell.r;\n\t\t\t\tif(range.s.c > thisCell.c) range.s.c = thisCell.c;\n\t\t\t\tif(range.e.c < thisCell.c) range.e.c = thisCell.c;\n\t\t\t\tvar encoded = encode_range(range);\n\t\t\t\tif (encoded !== sheet[\"!ref\"]) sheet[\"!ref\"] = encoded;\n\t\t\t}\n\t\n\t\t\tif (!cell.c) cell.c = [];\n\t\t\tvar o = {a: comment.author, t: comment.t, r: comment.r};\n\t\t\tif(comment.h) o.h = comment.h;\n\t\t\tcell.c.push(o);\n\t\t});\n\t}\n\t\n\t/* 18.7.3 CT_Comment */\n\tfunction parse_comments_xml(data, opts) {\n\t\tif(data.match(/<(?:\\w+:)?comments *\\/>/)) return [];\n\t\tvar authors = [];\n\t\tvar commentList = [];\n\t\tdata.match(/<(?:\\w+:)?authors>([^\\u2603]*)<\\/(?:\\w+:)?authors>/)[1].split(/<\\/\\w*:?author>/).forEach(function(x) {\n\t\t\tif(x === \"\" || x.trim() === \"\") return;\n\t\t\tauthors.push(x.match(/<(?:\\w+:)?author[^>]*>(.*)/)[1]);\n\t\t});\n\t\t(data.match(/<(?:\\w+:)?commentList>([^\\u2603]*)<\\/(?:\\w+:)?commentList>/)||[\"\",\"\"])[1].split(/<\\/\\w*:?comment>/).forEach(function(x, index) {\n\t\t\tif(x === \"\" || x.trim() === \"\") return;\n\t\t\tvar y = parsexmltag(x.match(/<(?:\\w+:)?comment[^>]*>/)[0]);\n\t\t\tvar comment = { author: y.authorId && authors[y.authorId] ? authors[y.authorId] : undefined, ref: y.ref, guid: y.guid };\n\t\t\tvar cell = decode_cell(y.ref);\n\t\t\tif(opts.sheetRows && opts.sheetRows <= cell.r) return;\n\t\t\tvar textMatch = x.match(/<text>([^\\u2603]*)<\\/text>/);\n\t\t\tif (!textMatch || !textMatch[1]) return; // a comment may contain an empty text tag.\n\t\t\tvar rt = parse_si(textMatch[1]);\n\t\t\tcomment.r = rt.r;\n\t\t\tcomment.t = rt.t;\n\t\t\tif(opts.cellHTML) comment.h = rt.h;\n\t\t\tcommentList.push(comment);\n\t\t});\n\t\treturn commentList;\n\t}\n\t\n\tfunction write_comments_xml(data, opts) { }\n\t/* [MS-XLSB] 2.4.28 BrtBeginComment */\n\tfunction parse_BrtBeginComment(data, length) {\n\t\tvar out = {};\n\t\tout.iauthor = data.read_shift(4);\n\t\tvar rfx = parse_UncheckedRfX(data, 16);\n\t\tout.rfx = rfx.s;\n\t\tout.ref = encode_cell(rfx.s);\n\t\tdata.l += 16; /*var guid = parse_GUID(data); */\n\t\treturn out;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.324 BrtCommentAuthor */\n\tvar parse_BrtCommentAuthor = parse_XLWideString;\n\t\n\t/* [MS-XLSB] 2.4.325 BrtCommentText */\n\tvar parse_BrtCommentText = parse_RichStr;\n\t\n\t/* [MS-XLSB] 2.1.7.8 Comments */\n\tfunction parse_comments_bin(data, opts) {\n\t\tvar out = [];\n\t\tvar authors = [];\n\t\tvar c = {};\n\t\tvar pass = false;\n\t\trecordhopper(data, function hopper_cmnt(val, R, RT) {\n\t\t\tswitch(R.n) {\n\t\t\t\tcase 'BrtCommentAuthor': authors.push(val); break;\n\t\t\t\tcase 'BrtBeginComment': c = val; break;\n\t\t\t\tcase 'BrtCommentText': c.t = val.t; c.h = val.h; c.r = val.r; break;\n\t\t\t\tcase 'BrtEndComment':\n\t\t\t\t\tc.author = authors[c.iauthor];\n\t\t\t\t\tdelete c.iauthor;\n\t\t\t\t\tif(opts.sheetRows && opts.sheetRows <= c.rfx.r) break;\n\t\t\t\t\tdelete c.rfx; out.push(c); break;\n\t\t\t\tcase 'BrtBeginComments': break;\n\t\t\t\tcase 'BrtEndComments': break;\n\t\t\t\tcase 'BrtBeginCommentAuthors': break;\n\t\t\t\tcase 'BrtEndCommentAuthors': break;\n\t\t\t\tcase 'BrtBeginCommentList': break;\n\t\t\t\tcase 'BrtEndCommentList': break;\n\t\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t\t}\n\t\t});\n\t\treturn out;\n\t}\n\t\n\tfunction write_comments_bin(data, opts) { }\n\t/* TODO: it will be useful to parse the function str */\n\tvar rc_to_a1 = (function(){\n\t\tvar rcregex = /(^|[^A-Za-z])R(\\[?)(-?\\d+|)\\]?C(\\[?)(-?\\d+|)\\]?/g;\n\t\tvar rcbase;\n\t\tfunction rcfunc($$,$1,$2,$3,$4,$5) {\n\t\t\tvar R = $3.length>0?parseInt($3,10)|0:0, C = $5.length>0?parseInt($5,10)|0:0;\n\t\t\tif(C<0 && $4.length === 0) C=0;\n\t\t\tif($4.length > 0) C += rcbase.c;\n\t\t\tif($2.length > 0) R += rcbase.r;\n\t\t\treturn $1 + encode_col(C) + encode_row(R);\n\t\t}\n\t\treturn function rc_to_a1(fstr, base) {\n\t\t\trcbase = base;\n\t\t\treturn fstr.replace(rcregex, rcfunc);\n\t\t};\n\t})();\n\t\n\t/* --- formula references point to MS-XLS --- */\n\t/* Small helpers */\n\tfunction parseread(l) { return function(blob, length) { blob.l+=l; return; }; }\n\tfunction parseread1(blob, length) { blob.l+=1; return; }\n\t\n\t/* Rgce Helpers */\n\t\n\t/* 2.5.51 */\n\tfunction parse_ColRelU(blob, length) {\n\t\tvar c = blob.read_shift(2);\n\t\treturn [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];\n\t}\n\t\n\t/* 2.5.198.105 */\n\tfunction parse_RgceArea(blob, length) {\n\t\tvar r=blob.read_shift(2), R=blob.read_shift(2);\n\t\tvar c=parse_ColRelU(blob, 2);\n\t\tvar C=parse_ColRelU(blob, 2);\n\t\treturn { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };\n\t}\n\t\n\t/* 2.5.198.105 TODO */\n\tfunction parse_RgceAreaRel(blob, length) {\n\t\tvar r=blob.read_shift(2), R=blob.read_shift(2);\n\t\tvar c=parse_ColRelU(blob, 2);\n\t\tvar C=parse_ColRelU(blob, 2);\n\t\treturn { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };\n\t}\n\t\n\t/* 2.5.198.109 */\n\tfunction parse_RgceLoc(blob, length) {\n\t\tvar r = blob.read_shift(2);\n\t\tvar c = parse_ColRelU(blob, 2);\n\t\treturn {r:r, c:c[0], cRel:c[1], rRel:c[2]};\n\t}\n\t\n\t/* 2.5.198.111 */\n\tfunction parse_RgceLocRel(blob, length) {\n\t\tvar r = blob.read_shift(2);\n\t\tvar cl = blob.read_shift(2);\n\t\tvar cRel = (cl & 0x8000) >> 15, rRel = (cl & 0x4000) >> 14;\n\t\tcl &= 0x3FFF;\n\t\tif(cRel !== 0) while(cl >= 0x100) cl -= 0x100;\n\t\treturn {r:r,c:cl,cRel:cRel,rRel:rRel};\n\t}\n\t\n\t/* Ptg Tokens */\n\t\n\t/* 2.5.198.27 */\n\tfunction parse_PtgArea(blob, length) {\n\t\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\t\tvar area = parse_RgceArea(blob, 8);\n\t\treturn [type, area];\n\t}\n\t\n\t/* 2.5.198.28 */\n\tfunction parse_PtgArea3d(blob, length) {\n\t\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\t\tvar ixti = blob.read_shift(2);\n\t\tvar area = parse_RgceArea(blob, 8);\n\t\treturn [type, ixti, area];\n\t}\n\t\n\t/* 2.5.198.29 */\n\tfunction parse_PtgAreaErr(blob, length) {\n\t\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\t\tblob.l += 8;\n\t\treturn [type];\n\t}\n\t/* 2.5.198.30 */\n\tfunction parse_PtgAreaErr3d(blob, length) {\n\t\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\t\tvar ixti = blob.read_shift(2);\n\t\tblob.l += 8;\n\t\treturn [type, ixti];\n\t}\n\t\n\t/* 2.5.198.31 */\n\tfunction parse_PtgAreaN(blob, length) {\n\t\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\t\tvar area = parse_RgceAreaRel(blob, 8);\n\t\treturn [type, area];\n\t}\n\t\n\t/* 2.5.198.32 -- ignore this and look in PtgExtraArray for shape + values */\n\tfunction parse_PtgArray(blob, length) {\n\t\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\t\tblob.l += 7;\n\t\treturn [type];\n\t}\n\t\n\t/* 2.5.198.33 */\n\tfunction parse_PtgAttrBaxcel(blob, length) {\n\t\tvar bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */\n\t\tvar bitBaxcel = 1;\n\t\tblob.l += 4;\n\t\treturn [bitSemi, bitBaxcel];\n\t}\n\t\n\t/* 2.5.198.34 */\n\tfunction parse_PtgAttrChoose(blob, length) {\n\t\tblob.l +=2;\n\t\tvar offset = blob.read_shift(2);\n\t\tvar o = [];\n\t\t/* offset is 1 less than the number of elements */\n\t\tfor(var i = 0; i <= offset; ++i) o.push(blob.read_shift(2));\n\t\treturn o;\n\t}\n\t\n\t/* 2.5.198.35 */\n\tfunction parse_PtgAttrGoto(blob, length) {\n\t\tvar bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\t\tblob.l += 2;\n\t\treturn [bitGoto, blob.read_shift(2)];\n\t}\n\t\n\t/* 2.5.198.36 */\n\tfunction parse_PtgAttrIf(blob, length) {\n\t\tvar bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\t\tblob.l += 2;\n\t\treturn [bitIf, blob.read_shift(2)];\n\t}\n\t\n\t/* 2.5.198.37 */\n\tfunction parse_PtgAttrSemi(blob, length) {\n\t\tvar bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\t\tblob.l += 4;\n\t\treturn [bitSemi];\n\t}\n\t\n\t/* 2.5.198.40 (used by PtgAttrSpace and PtgAttrSpaceSemi) */\n\tfunction parse_PtgAttrSpaceType(blob, length) {\n\t\tvar type = blob.read_shift(1), cch = blob.read_shift(1);\n\t\treturn [type, cch];\n\t}\n\t\n\t/* 2.5.198.38 */\n\tfunction parse_PtgAttrSpace(blob, length) {\n\t\tblob.read_shift(2);\n\t\treturn parse_PtgAttrSpaceType(blob, 2);\n\t}\n\t\n\t/* 2.5.198.39 */\n\tfunction parse_PtgAttrSpaceSemi(blob, length) {\n\t\tblob.read_shift(2);\n\t\treturn parse_PtgAttrSpaceType(blob, 2);\n\t}\n\t\n\t/* 2.5.198.84 TODO */\n\tfunction parse_PtgRef(blob, length) {\n\t\tvar ptg = blob[blob.l] & 0x1F;\n\t\tvar type = (blob[blob.l] & 0x60)>>5;\n\t\tblob.l += 1;\n\t\tvar loc = parse_RgceLoc(blob,4);\n\t\treturn [type, loc];\n\t}\n\t\n\t/* 2.5.198.88 TODO */\n\tfunction parse_PtgRefN(blob, length) {\n\t\tvar ptg = blob[blob.l] & 0x1F;\n\t\tvar type = (blob[blob.l] & 0x60)>>5;\n\t\tblob.l += 1;\n\t\tvar loc = parse_RgceLocRel(blob,4);\n\t\treturn [type, loc];\n\t}\n\t\n\t/* 2.5.198.85 TODO */\n\tfunction parse_PtgRef3d(blob, length) {\n\t\tvar ptg = blob[blob.l] & 0x1F;\n\t\tvar type = (blob[blob.l] & 0x60)>>5;\n\t\tblob.l += 1;\n\t\tvar ixti = blob.read_shift(2); // XtiIndex\n\t\tvar loc = parse_RgceLoc(blob,4);\n\t\treturn [type, ixti, loc];\n\t}\n\t\n\t\n\t/* 2.5.198.62 TODO */\n\tfunction parse_PtgFunc(blob, length) {\n\t\tvar ptg = blob[blob.l] & 0x1F;\n\t\tvar type = (blob[blob.l] & 0x60)>>5;\n\t\tblob.l += 1;\n\t\tvar iftab = blob.read_shift(2);\n\t\treturn [FtabArgc[iftab], Ftab[iftab]];\n\t}\n\t/* 2.5.198.63 TODO */\n\tfunction parse_PtgFuncVar(blob, length) {\n\t\tblob.l++;\n\t\tvar cparams = blob.read_shift(1), tab = parsetab(blob);\n\t\treturn [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];\n\t}\n\t\n\tfunction parsetab(blob, length) {\n\t\treturn [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];\n\t}\n\t\n\t/* 2.5.198.41 */\n\tvar parse_PtgAttrSum = parseread(4);\n\t/* 2.5.198.43 */\n\tvar parse_PtgConcat = parseread1;\n\t\n\t/* 2.5.198.58 */\n\tfunction parse_PtgExp(blob, length) {\n\t\tblob.l++;\n\t\tvar row = blob.read_shift(2);\n\t\tvar col = blob.read_shift(2);\n\t\treturn [row, col];\n\t}\n\t\n\t/* 2.5.198.57 */\n\tfunction parse_PtgErr(blob, length) { blob.l++; return BErr[blob.read_shift(1)]; }\n\t\n\t/* 2.5.198.66 TODO */\n\tfunction parse_PtgInt(blob, length) { blob.l++; return blob.read_shift(2); }\n\t\n\t/* 2.5.198.42 */\n\tfunction parse_PtgBool(blob, length) { blob.l++; return blob.read_shift(1)!==0;}\n\t\n\t/* 2.5.198.79 */\n\tfunction parse_PtgNum(blob, length) { blob.l++; return parse_Xnum(blob, 8); }\n\t\n\t/* 2.5.198.89 */\n\tfunction parse_PtgStr(blob, length) { blob.l++; return parse_ShortXLUnicodeString(blob); }\n\t\n\t/* 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */\n\tfunction parse_SerAr(blob) {\n\t\tvar val = [];\n\t\tswitch((val[0] = blob.read_shift(1))) {\n\t\t\t/* 2.5.192.113 */\n\t\t\tcase 0x04: /* SerBool -- boolean */\n\t\t\t\tval[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';\n\t\t\t\tblob.l += 7; break;\n\t\t\t/* 2.5.192.114 */\n\t\t\tcase 0x10: /* SerErr -- error */\n\t\t\t\tval[1] = BErr[blob[blob.l]];\n\t\t\t\tblob.l += 8; break;\n\t\t\t/* 2.5.192.115 */\n\t\t\tcase 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */\n\t\t\t\tblob.l += 8; break;\n\t\t\t/* 2.5.192.116 */\n\t\t\tcase 0x01: /* SerNum -- Xnum */\n\t\t\t\tval[1] = parse_Xnum(blob, 8); break;\n\t\t\t/* 2.5.192.117 */\n\t\t\tcase 0x02: /* SerStr -- XLUnicodeString (<256 chars) */\n\t\t\t\tval[1] = parse_XLUnicodeString(blob); break;\n\t\t\t// default: throw \"Bad SerAr: \" + val[0]; /* Unreachable */\n\t\t}\n\t\treturn val;\n\t}\n\t\n\t/* 2.5.198.61 */\n\tfunction parse_PtgExtraMem(blob, cce) {\n\t\tvar count = blob.read_shift(2);\n\t\tvar out = [];\n\t\tfor(var i = 0; i != count; ++i) out.push(parse_Ref8U(blob, 8));\n\t\treturn out;\n\t}\n\t\n\t/* 2.5.198.59 */\n\tfunction parse_PtgExtraArray(blob) {\n\t\tvar cols = 1 + blob.read_shift(1); //DColByteU\n\t\tvar rows = 1 + blob.read_shift(2); //DRw\n\t\tfor(var i = 0, o=[]; i != rows && (o[i] = []); ++i)\n\t\t\tfor(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob);\n\t\treturn o;\n\t}\n\t\n\t/* 2.5.198.76 */\n\tfunction parse_PtgName(blob, length) {\n\t\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\t\tvar nameindex = blob.read_shift(4);\n\t\treturn [type, 0, nameindex];\n\t}\n\t\n\t/* 2.5.198.77 */\n\tfunction parse_PtgNameX(blob, length) {\n\t\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\t\tvar ixti = blob.read_shift(2); // XtiIndex\n\t\tvar nameindex = blob.read_shift(4);\n\t\treturn [type, ixti, nameindex];\n\t}\n\t\n\t/* 2.5.198.70 */\n\tfunction parse_PtgMemArea(blob, length) {\n\t\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\t\tblob.l += 4;\n\t\tvar cce = blob.read_shift(2);\n\t\treturn [type, cce];\n\t}\n\t\n\t/* 2.5.198.72 */\n\tfunction parse_PtgMemFunc(blob, length) {\n\t\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\t\tvar cce = blob.read_shift(2);\n\t\treturn [type, cce];\n\t}\n\t\n\t\n\t/* 2.5.198.86 */\n\tfunction parse_PtgRefErr(blob, length) {\n\t\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\t\tblob.l += 4;\n\t\treturn [type];\n\t}\n\t\n\t/* 2.5.198.26 */\n\tvar parse_PtgAdd = parseread1;\n\t/* 2.5.198.45 */\n\tvar parse_PtgDiv = parseread1;\n\t/* 2.5.198.56 */\n\tvar parse_PtgEq = parseread1;\n\t/* 2.5.198.64 */\n\tvar parse_PtgGe = parseread1;\n\t/* 2.5.198.65 */\n\tvar parse_PtgGt = parseread1;\n\t/* 2.5.198.67 */\n\tvar parse_PtgIsect = parseread1;\n\t/* 2.5.198.68 */\n\tvar parse_PtgLe = parseread1;\n\t/* 2.5.198.69 */\n\tvar parse_PtgLt = parseread1;\n\t/* 2.5.198.74 */\n\tvar parse_PtgMissArg = parseread1;\n\t/* 2.5.198.75 */\n\tvar parse_PtgMul = parseread1;\n\t/* 2.5.198.78 */\n\tvar parse_PtgNe = parseread1;\n\t/* 2.5.198.80 */\n\tvar parse_PtgParen = parseread1;\n\t/* 2.5.198.81 */\n\tvar parse_PtgPercent = parseread1;\n\t/* 2.5.198.82 */\n\tvar parse_PtgPower = parseread1;\n\t/* 2.5.198.83 */\n\tvar parse_PtgRange = parseread1;\n\t/* 2.5.198.90 */\n\tvar parse_PtgSub = parseread1;\n\t/* 2.5.198.93 */\n\tvar parse_PtgUminus = parseread1;\n\t/* 2.5.198.94 */\n\tvar parse_PtgUnion = parseread1;\n\t/* 2.5.198.95 */\n\tvar parse_PtgUplus = parseread1;\n\t\n\t/* 2.5.198.71 */\n\tvar parse_PtgMemErr = parsenoop;\n\t/* 2.5.198.73 */\n\tvar parse_PtgMemNoMem = parsenoop;\n\t/* 2.5.198.87 */\n\tvar parse_PtgRefErr3d = parsenoop;\n\t/* 2.5.198.92 */\n\tvar parse_PtgTbl = parsenoop;\n\t\n\t/* 2.5.198.25 */\n\tvar PtgTypes = {\n\t\t0x01: { n:'PtgExp', f:parse_PtgExp },\n\t\t0x02: { n:'PtgTbl', f:parse_PtgTbl },\n\t\t0x03: { n:'PtgAdd', f:parse_PtgAdd },\n\t\t0x04: { n:'PtgSub', f:parse_PtgSub },\n\t\t0x05: { n:'PtgMul', f:parse_PtgMul },\n\t\t0x06: { n:'PtgDiv', f:parse_PtgDiv },\n\t\t0x07: { n:'PtgPower', f:parse_PtgPower },\n\t\t0x08: { n:'PtgConcat', f:parse_PtgConcat },\n\t\t0x09: { n:'PtgLt', f:parse_PtgLt },\n\t\t0x0A: { n:'PtgLe', f:parse_PtgLe },\n\t\t0x0B: { n:'PtgEq', f:parse_PtgEq },\n\t\t0x0C: { n:'PtgGe', f:parse_PtgGe },\n\t\t0x0D: { n:'PtgGt', f:parse_PtgGt },\n\t\t0x0E: { n:'PtgNe', f:parse_PtgNe },\n\t\t0x0F: { n:'PtgIsect', f:parse_PtgIsect },\n\t\t0x10: { n:'PtgUnion', f:parse_PtgUnion },\n\t\t0x11: { n:'PtgRange', f:parse_PtgRange },\n\t\t0x12: { n:'PtgUplus', f:parse_PtgUplus },\n\t\t0x13: { n:'PtgUminus', f:parse_PtgUminus },\n\t\t0x14: { n:'PtgPercent', f:parse_PtgPercent },\n\t\t0x15: { n:'PtgParen', f:parse_PtgParen },\n\t\t0x16: { n:'PtgMissArg', f:parse_PtgMissArg },\n\t\t0x17: { n:'PtgStr', f:parse_PtgStr },\n\t\t0x1C: { n:'PtgErr', f:parse_PtgErr },\n\t\t0x1D: { n:'PtgBool', f:parse_PtgBool },\n\t\t0x1E: { n:'PtgInt', f:parse_PtgInt },\n\t\t0x1F: { n:'PtgNum', f:parse_PtgNum },\n\t\t0x20: { n:'PtgArray', f:parse_PtgArray },\n\t\t0x21: { n:'PtgFunc', f:parse_PtgFunc },\n\t\t0x22: { n:'PtgFuncVar', f:parse_PtgFuncVar },\n\t\t0x23: { n:'PtgName', f:parse_PtgName },\n\t\t0x24: { n:'PtgRef', f:parse_PtgRef },\n\t\t0x25: { n:'PtgArea', f:parse_PtgArea },\n\t\t0x26: { n:'PtgMemArea', f:parse_PtgMemArea },\n\t\t0x27: { n:'PtgMemErr', f:parse_PtgMemErr },\n\t\t0x28: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },\n\t\t0x29: { n:'PtgMemFunc', f:parse_PtgMemFunc },\n\t\t0x2A: { n:'PtgRefErr', f:parse_PtgRefErr },\n\t\t0x2B: { n:'PtgAreaErr', f:parse_PtgAreaErr },\n\t\t0x2C: { n:'PtgRefN', f:parse_PtgRefN },\n\t\t0x2D: { n:'PtgAreaN', f:parse_PtgAreaN },\n\t\t0x39: { n:'PtgNameX', f:parse_PtgNameX },\n\t\t0x3A: { n:'PtgRef3d', f:parse_PtgRef3d },\n\t\t0x3B: { n:'PtgArea3d', f:parse_PtgArea3d },\n\t\t0x3C: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },\n\t\t0x3D: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },\n\t\t0xFF: {}\n\t};\n\t/* These are duplicated in the PtgTypes table */\n\tvar PtgDupes = {\n\t\t0x40: 0x20, 0x60: 0x20,\n\t\t0x41: 0x21, 0x61: 0x21,\n\t\t0x42: 0x22, 0x62: 0x22,\n\t\t0x43: 0x23, 0x63: 0x23,\n\t\t0x44: 0x24, 0x64: 0x24,\n\t\t0x45: 0x25, 0x65: 0x25,\n\t\t0x46: 0x26, 0x66: 0x26,\n\t\t0x47: 0x27, 0x67: 0x27,\n\t\t0x48: 0x28, 0x68: 0x28,\n\t\t0x49: 0x29, 0x69: 0x29,\n\t\t0x4A: 0x2A, 0x6A: 0x2A,\n\t\t0x4B: 0x2B, 0x6B: 0x2B,\n\t\t0x4C: 0x2C, 0x6C: 0x2C,\n\t\t0x4D: 0x2D, 0x6D: 0x2D,\n\t\t0x59: 0x39, 0x79: 0x39,\n\t\t0x5A: 0x3A, 0x7A: 0x3A,\n\t\t0x5B: 0x3B, 0x7B: 0x3B,\n\t\t0x5C: 0x3C, 0x7C: 0x3C,\n\t\t0x5D: 0x3D, 0x7D: 0x3D\n\t};\n\t(function(){for(var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];})();\n\t\n\tvar Ptg18 = {};\n\tvar Ptg19 = {\n\t\t0x01: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },\n\t\t0x02: { n:'PtgAttrIf', f:parse_PtgAttrIf },\n\t\t0x04: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },\n\t\t0x08: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },\n\t\t0x10: { n:'PtgAttrSum', f:parse_PtgAttrSum },\n\t\t0x20: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },\n\t\t0x40: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },\n\t\t0x41: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },\n\t\t0xFF: {}\n\t};\n\t\n\t/* 2.4.127 TODO */\n\tfunction parse_Formula(blob, length, opts) {\n\t\tvar cell = parse_XLSCell(blob, 6);\n\t\tvar val = parse_FormulaValue(blob,8);\n\t\tvar flags = blob.read_shift(1);\n\t\tblob.read_shift(1);\n\t\tvar chn = blob.read_shift(4);\n\t\tvar cbf = \"\";\n\t\tif(opts.biff === 5) blob.l += length-20;\n\t\telse cbf = parse_XLSCellParsedFormula(blob, length-20, opts);\n\t\treturn {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};\n\t}\n\t\n\t/* 2.5.133 TODO: how to emit empty strings? */\n\tfunction parse_FormulaValue(blob) {\n\t\tvar b;\n\t\tif(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];\n\t\tswitch(blob[blob.l]) {\n\t\t\tcase 0x00: blob.l += 8; return [\"String\", 's'];\n\t\t\tcase 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];\n\t\t\tcase 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];\n\t\t\tcase 0x03: blob.l += 8; return [\"\",'s'];\n\t\t}\n\t}\n\t\n\t/* 2.5.198.103 */\n\tfunction parse_RgbExtra(blob, length, rgce, opts) {\n\t\tif(opts.biff < 8) return parsenoop(blob, length);\n\t\tvar target = blob.l + length;\n\t\tvar o = [];\n\t\tfor(var i = 0; i !== rgce.length; ++i) {\n\t\t\tswitch(rgce[i][0]) {\n\t\t\t\tcase 'PtgArray': /* PtgArray -> PtgExtraArray */\n\t\t\t\t\trgce[i][1] = parse_PtgExtraArray(blob);\n\t\t\t\t\to.push(rgce[i][1]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */\n\t\t\t\t\trgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]);\n\t\t\t\t\to.push(rgce[i][2]);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\t\tlength = target - blob.l;\n\t\tif(length !== 0) o.push(parsenoop(blob, length));\n\t\treturn o;\n\t}\n\t\n\t/* 2.5.198.21 */\n\tfunction parse_NameParsedFormula(blob, length, opts, cce) {\n\t\tvar target = blob.l + length;\n\t\tvar rgce = parse_Rgce(blob, cce);\n\t\tvar rgcb;\n\t\tif(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n\t\treturn [rgce, rgcb];\n\t}\n\t\n\t/* 2.5.198.3 TODO */\n\tfunction parse_XLSCellParsedFormula(blob, length, opts) {\n\t\tvar target = blob.l + length;\n\t\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\t\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\t\tvar rgce = parse_Rgce(blob, cce);\n\t\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, length - cce - 2, rgce, opts);\n\t\treturn [rgce, rgcb];\n\t}\n\t\n\t/* 2.5.198.118 TODO */\n\tfunction parse_SharedParsedFormula(blob, length, opts) {\n\t\tvar target = blob.l + length;\n\t\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\t\tvar rgce = parse_Rgce(blob, cce);\n\t\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\t\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n\t\treturn [rgce, rgcb];\n\t}\n\t\n\t/* 2.5.198.1 TODO */\n\tfunction parse_ArrayParsedFormula(blob, length, opts, ref) {\n\t\tvar target = blob.l + length;\n\t\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\t\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\t\tvar rgce = parse_Rgce(blob, cce);\n\t\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n\t\treturn [rgce, rgcb];\n\t}\n\t\n\t/* 2.5.198.104 */\n\tfunction parse_Rgce(blob, length) {\n\t\tvar target = blob.l + length;\n\t\tvar R, id, ptgs = [];\n\t\twhile(target != blob.l) {\n\t\t\tlength = target - blob.l;\n\t\t\tid = blob[blob.l];\n\t\t\tR = PtgTypes[id];\n\t\t\t//console.log(\"ptg\", id, R)\n\t\t\tif(id === 0x18 || id === 0x19) {\n\t\t\t\tid = blob[blob.l + 1];\n\t\t\t\tR = (id === 0x18 ? Ptg18 : Ptg19)[id];\n\t\t\t}\n\t\t\tif(!R || !R.f) { ptgs.push(parsenoop(blob, length)); }\n\t\t\telse { ptgs.push([R.n, R.f(blob, length)]); }\n\t\t}\n\t\treturn ptgs;\n\t}\n\t\n\tfunction mapper(x) { return x.map(function f2(y) { return y[1];}).join(\",\");}\n\t\n\t/* 2.2.2 + Magic TODO */\n\tfunction stringify_formula(formula, range, cell, supbooks, opts) {\n\t\tif(opts !== undefined && opts.biff === 5) return \"BIFF5??\";\n\t\tvar _range = range !== undefined ? range : {s:{c:0, r:0}};\n\t\tvar stack = [], e1, e2, type, c, ixti, nameidx, r;\n\t\tif(!formula[0] || !formula[0][0]) return \"\";\n\t\t//console.log(\"--\",cell,formula[0])\n\t\tfor(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {\n\t\t\tvar f = formula[0][ff];\n\t\t\t//console.log(\"++\",f, stack)\n\t\t\tswitch(f[0]) {\n\t\t\t/* 2.2.2.1 Unary Operator Tokens */\n\t\t\t\t/* 2.5.198.93 */\n\t\t\t\tcase 'PtgUminus': stack.push(\"-\" + stack.pop()); break;\n\t\t\t\t/* 2.5.198.95 */\n\t\t\t\tcase 'PtgUplus': stack.push(\"+\" + stack.pop()); break;\n\t\t\t\t/* 2.5.198.81 */\n\t\t\t\tcase 'PtgPercent': stack.push(stack.pop() + \"%\"); break;\n\t\n\t\t\t/* 2.2.2.1 Binary Value Operator Token */\n\t\t\t\t/* 2.5.198.26 */\n\t\t\t\tcase 'PtgAdd':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"+\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.90 */\n\t\t\t\tcase 'PtgSub':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"-\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.75 */\n\t\t\t\tcase 'PtgMul':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"*\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.45 */\n\t\t\t\tcase 'PtgDiv':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"/\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.82 */\n\t\t\t\tcase 'PtgPower':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"^\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.43 */\n\t\t\t\tcase 'PtgConcat':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"&\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.69 */\n\t\t\t\tcase 'PtgLt':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"<\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.68 */\n\t\t\t\tcase 'PtgLe':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"<=\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.56 */\n\t\t\t\tcase 'PtgEq':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"=\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.64 */\n\t\t\t\tcase 'PtgGe':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\">=\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.65 */\n\t\t\t\tcase 'PtgGt':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\">\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.78 */\n\t\t\t\tcase 'PtgNe':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\"<>\"+e1);\n\t\t\t\t\tbreak;\n\t\n\t\t\t/* 2.2.2.1 Binary Reference Operator Token */\n\t\t\t\t/* 2.5.198.67 */\n\t\t\t\tcase 'PtgIsect':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\" \"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'PtgUnion':\n\t\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\t\tstack.push(e2+\",\"+e1);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'PtgRange': break;\n\t\n\t\t\t/* 2.2.2.3 Control Tokens \"can be ignored\" */\n\t\t\t\t/* 2.5.198.34 */\n\t\t\t\tcase 'PtgAttrChoose': break;\n\t\t\t\t/* 2.5.198.35 */\n\t\t\t\tcase 'PtgAttrGoto': break;\n\t\t\t\t/* 2.5.198.36 */\n\t\t\t\tcase 'PtgAttrIf': break;\n\t\n\t\n\t\t\t\t/* 2.5.198.84 */\n\t\t\t\tcase 'PtgRef':\n\t\t\t\t\ttype = f[1][0]; c = shift_cell_xls(decode_cell(encode_cell(f[1][1])), _range);\n\t\t\t\t\tstack.push(encode_cell(c));\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.88 */\n\t\t\t\tcase 'PtgRefN':\n\t\t\t\t\ttype = f[1][0]; c = shift_cell_xls(decode_cell(encode_cell(f[1][1])), cell);\n\t\t\t\t\tstack.push(encode_cell(c));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'PtgRef3d': // TODO: lots of stuff\n\t\t\t\t\ttype = f[1][0]; ixti = f[1][1]; c = shift_cell_xls(f[1][2], _range);\n\t\t\t\t\tstack.push(supbooks[1][ixti+1]+\"!\"+encode_cell(c));\n\t\t\t\t\tbreak;\n\t\n\t\t\t/* Function Call */\n\t\t\t\t/* 2.5.198.62 */\n\t\t\t\tcase 'PtgFunc':\n\t\t\t\t/* 2.5.198.63 */\n\t\t\t\tcase 'PtgFuncVar':\n\t\t\t\t\t/* f[1] = [argc, func] */\n\t\t\t\t\tvar argc = f[1][0], func = f[1][1];\n\t\t\t\t\tif(!argc) argc = 0;\n\t\t\t\t\tvar args = stack.slice(-argc);\n\t\t\t\t\tstack.length -= argc;\n\t\t\t\t\tif(func === 'User') func = args.shift();\n\t\t\t\t\tstack.push(func + \"(\" + args.join(\",\") + \")\");\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* 2.5.198.42 */\n\t\t\t\tcase 'PtgBool': stack.push(f[1] ? \"TRUE\" : \"FALSE\"); break;\n\t\t\t\t/* 2.5.198.66 */\n\t\t\t\tcase 'PtgInt': stack.push(f[1]); break;\n\t\t\t\t/* 2.5.198.79 TODO: precision? */\n\t\t\t\tcase 'PtgNum': stack.push(String(f[1])); break;\n\t\t\t\t/* 2.5.198.89 */\n\t\t\t\tcase 'PtgStr': stack.push('\"' + f[1] + '\"'); break;\n\t\t\t\t/* 2.5.198.57 */\n\t\t\t\tcase 'PtgErr': stack.push(f[1]); break;\n\t\t\t\t/* 2.5.198.27 TODO: fixed points */\n\t\t\t\tcase 'PtgArea':\n\t\t\t\t\ttype = f[1][0]; r = shift_range_xls(f[1][1], _range);\n\t\t\t\t\tstack.push(encode_range(r));\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.28 */\n\t\t\t\tcase 'PtgArea3d': // TODO: lots of stuff\n\t\t\t\t\ttype = f[1][0]; ixti = f[1][1]; r = f[1][2];\n\t\t\t\t\tstack.push(supbooks[1][ixti+1]+\"!\"+encode_range(r));\n\t\t\t\t\tbreak;\n\t\t\t\t/* 2.5.198.41 */\n\t\t\t\tcase 'PtgAttrSum':\n\t\t\t\t\tstack.push(\"SUM(\" + stack.pop() + \")\");\n\t\t\t\t\tbreak;\n\t\n\t\t\t/* Expression Prefixes */\n\t\t\t\t/* 2.5.198.37 */\n\t\t\t\tcase 'PtgAttrSemi': break;\n\t\n\t\t\t\t/* 2.5.97.60 TODO: do something different for revisions */\n\t\t\t\tcase 'PtgName':\n\t\t\t\t\t/* f[1] = type, 0, nameindex */\n\t\t\t\t\tnameidx = f[1][2];\n\t\t\t\t\tvar lbl = supbooks[0][nameidx];\n\t\t\t\t\tvar name = lbl.Name;\n\t\t\t\t\tif(name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];\n\t\t\t\t\tstack.push(name);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* 2.5.97.61 TODO: do something different for revisions */\n\t\t\t\tcase 'PtgNameX':\n\t\t\t\t\t/* f[1] = type, ixti, nameindex */\n\t\t\t\t\tvar bookidx = f[1][1]; nameidx = f[1][2]; var externbook;\n\t\t\t\t\t/* TODO: Properly handle missing values */\n\t\t\t\t\tif(supbooks[bookidx+1]) externbook = supbooks[bookidx+1][nameidx];\n\t\t\t\t\telse if(supbooks[bookidx-1]) externbook = supbooks[bookidx-1][nameidx];\n\t\t\t\t\tif(!externbook) externbook = {body: \"??NAMEX??\"};\n\t\t\t\t\tstack.push(externbook.body);\n\t\t\t\t\tbreak;\n\t\n\t\t\t/* 2.2.2.4 Display Tokens */\n\t\t\t\t/* 2.5.198.80 */\n\t\t\t\tcase 'PtgParen': stack.push('(' + stack.pop() + ')'); break;\n\t\n\t\t\t\t/* 2.5.198.86 */\n\t\t\t\tcase 'PtgRefErr': stack.push('#REF!'); break;\n\t\n\t\t\t/* */\n\t\t\t\t/* 2.5.198.58 TODO */\n\t\t\t\tcase 'PtgExp':\n\t\t\t\t\tc = {c:f[1][1],r:f[1][0]};\n\t\t\t\t\tvar q = {c: cell.c, r:cell.r};\n\t\t\t\t\tif(supbooks.sharedf[encode_cell(c)]) {\n\t\t\t\t\t\tvar parsedf = (supbooks.sharedf[encode_cell(c)]);\n\t\t\t\t\t\tstack.push(stringify_formula(parsedf, _range, q, supbooks, opts));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar fnd = false;\n\t\t\t\t\t\tfor(e1=0;e1!=supbooks.arrayf.length; ++e1) {\n\t\t\t\t\t\t\t/* TODO: should be something like range_has */\n\t\t\t\t\t\t\te2 = supbooks.arrayf[e1];\n\t\t\t\t\t\t\tif(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;\n\t\t\t\t\t\t\tif(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;\n\t\t\t\t\t\t\tstack.push(stringify_formula(e2[1], _range, q, supbooks, opts));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(!fnd) stack.push(f[1]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* 2.5.198.32 TODO */\n\t\t\t\tcase 'PtgArray':\n\t\t\t\t\tstack.push(\"{\" + f[1].map(mapper).join(\";\") + \"}\");\n\t\t\t\t\tbreak;\n\t\n\t\t\t/* 2.2.2.5 Mem Tokens */\n\t\t\t\t/* 2.5.198.70 TODO: confirm this is a non-display */\n\t\t\t\tcase 'PtgMemArea':\n\t\t\t\t\t//stack.push(\"(\" + f[2].map(encode_range).join(\",\") + \")\");\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* 2.5.198.38 TODO */\n\t\t\t\tcase 'PtgAttrSpace': break;\n\t\n\t\t\t\t/* 2.5.198.92 TODO */\n\t\t\t\tcase 'PtgTbl': break;\n\t\n\t\t\t\t/* 2.5.198.71 */\n\t\t\t\tcase 'PtgMemErr': break;\n\t\n\t\t\t\t/* 2.5.198.74 */\n\t\t\t\tcase 'PtgMissArg':\n\t\t\t\t\tstack.push(\"\");\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* 2.5.198.29 TODO */\n\t\t\t\tcase 'PtgAreaErr': break;\n\t\n\t\t\t\t/* 2.5.198.31 TODO */\n\t\t\t\tcase 'PtgAreaN': stack.push(\"\"); break;\n\t\n\t\t\t\t/* 2.5.198.87 TODO */\n\t\t\t\tcase 'PtgRefErr3d': break;\n\t\n\t\t\t\t/* 2.5.198.72 TODO */\n\t\t\t\tcase 'PtgMemFunc': break;\n\t\n\t\t\t\tdefault: throw 'Unrecognized Formula Token: ' + f;\n\t\t\t}\n\t\t\t//console.log(\"::\",f, stack)\n\t\t}\n\t\t//console.log(\"--\",stack);\n\t\treturn stack[0];\n\t}\n\t\n\t/* [MS-XLSB] 2.5.97.4 CellParsedFormula TODO: use similar logic to js-xls */\n\tfunction parse_XLSBCellParsedFormula(data, length) {\n\t\tvar cce = data.read_shift(4);\n\t\treturn parsenoop(data, length-4);\n\t}\n\t/* [MS-XLS] 2.5.198.44 */\n\tvar PtgDataType = {\n\t\t0x1: \"REFERENCE\", // reference to range\n\t\t0x2: \"VALUE\", // single value\n\t\t0x3: \"ARRAY\" // array of values\n\t};\n\t\n\t/* [MS-XLS] 2.5.198.4 */\n\tvar Cetab = {\n\t\t0x0000: 'BEEP',\n\t\t0x0001: 'OPEN',\n\t\t0x0002: 'OPEN.LINKS',\n\t\t0x0003: 'CLOSE.ALL',\n\t\t0x0004: 'SAVE',\n\t\t0x0005: 'SAVE.AS',\n\t\t0x0006: 'FILE.DELETE',\n\t\t0x0007: 'PAGE.SETUP',\n\t\t0x0008: 'PRINT',\n\t\t0x0009: 'PRINTER.SETUP',\n\t\t0x000A: 'QUIT',\n\t\t0x000B: 'NEW.WINDOW',\n\t\t0x000C: 'ARRANGE.ALL',\n\t\t0x000D: 'WINDOW.SIZE',\n\t\t0x000E: 'WINDOW.MOVE',\n\t\t0x000F: 'FULL',\n\t\t0x0010: 'CLOSE',\n\t\t0x0011: 'RUN',\n\t\t0x0016: 'SET.PRINT.AREA',\n\t\t0x0017: 'SET.PRINT.TITLES',\n\t\t0x0018: 'SET.PAGE.BREAK',\n\t\t0x0019: 'REMOVE.PAGE.BREAK',\n\t\t0x001A: 'FONT',\n\t\t0x001B: 'DISPLAY',\n\t\t0x001C: 'PROTECT.DOCUMENT',\n\t\t0x001D: 'PRECISION',\n\t\t0x001E: 'A1.R1C1',\n\t\t0x001F: 'CALCULATE.NOW',\n\t\t0x0020: 'CALCULATION',\n\t\t0x0022: 'DATA.FIND',\n\t\t0x0023: 'EXTRACT',\n\t\t0x0024: 'DATA.DELETE',\n\t\t0x0025: 'SET.DATABASE',\n\t\t0x0026: 'SET.CRITERIA',\n\t\t0x0027: 'SORT',\n\t\t0x0028: 'DATA.SERIES',\n\t\t0x0029: 'TABLE',\n\t\t0x002A: 'FORMAT.NUMBER',\n\t\t0x002B: 'ALIGNMENT',\n\t\t0x002C: 'STYLE',\n\t\t0x002D: 'BORDER',\n\t\t0x002E: 'CELL.PROTECTION',\n\t\t0x002F: 'COLUMN.WIDTH',\n\t\t0x0030: 'UNDO',\n\t\t0x0031: 'CUT',\n\t\t0x0032: 'COPY',\n\t\t0x0033: 'PASTE',\n\t\t0x0034: 'CLEAR',\n\t\t0x0035: 'PASTE.SPECIAL',\n\t\t0x0036: 'EDIT.DELETE',\n\t\t0x0037: 'INSERT',\n\t\t0x0038: 'FILL.RIGHT',\n\t\t0x0039: 'FILL.DOWN',\n\t\t0x003D: 'DEFINE.NAME',\n\t\t0x003E: 'CREATE.NAMES',\n\t\t0x003F: 'FORMULA.GOTO',\n\t\t0x0040: 'FORMULA.FIND',\n\t\t0x0041: 'SELECT.LAST.CELL',\n\t\t0x0042: 'SHOW.ACTIVE.CELL',\n\t\t0x0043: 'GALLERY.AREA',\n\t\t0x0044: 'GALLERY.BAR',\n\t\t0x0045: 'GALLERY.COLUMN',\n\t\t0x0046: 'GALLERY.LINE',\n\t\t0x0047: 'GALLERY.PIE',\n\t\t0x0048: 'GALLERY.SCATTER',\n\t\t0x0049: 'COMBINATION',\n\t\t0x004A: 'PREFERRED',\n\t\t0x004B: 'ADD.OVERLAY',\n\t\t0x004C: 'GRIDLINES',\n\t\t0x004D: 'SET.PREFERRED',\n\t\t0x004E: 'AXES',\n\t\t0x004F: 'LEGEND',\n\t\t0x0050: 'ATTACH.TEXT',\n\t\t0x0051: 'ADD.ARROW',\n\t\t0x0052: 'SELECT.CHART',\n\t\t0x0053: 'SELECT.PLOT.AREA',\n\t\t0x0054: 'PATTERNS',\n\t\t0x0055: 'MAIN.CHART',\n\t\t0x0056: 'OVERLAY',\n\t\t0x0057: 'SCALE',\n\t\t0x0058: 'FORMAT.LEGEND',\n\t\t0x0059: 'FORMAT.TEXT',\n\t\t0x005A: 'EDIT.REPEAT',\n\t\t0x005B: 'PARSE',\n\t\t0x005C: 'JUSTIFY',\n\t\t0x005D: 'HIDE',\n\t\t0x005E: 'UNHIDE',\n\t\t0x005F: 'WORKSPACE',\n\t\t0x0060: 'FORMULA',\n\t\t0x0061: 'FORMULA.FILL',\n\t\t0x0062: 'FORMULA.ARRAY',\n\t\t0x0063: 'DATA.FIND.NEXT',\n\t\t0x0064: 'DATA.FIND.PREV',\n\t\t0x0065: 'FORMULA.FIND.NEXT',\n\t\t0x0066: 'FORMULA.FIND.PREV',\n\t\t0x0067: 'ACTIVATE',\n\t\t0x0068: 'ACTIVATE.NEXT',\n\t\t0x0069: 'ACTIVATE.PREV',\n\t\t0x006A: 'UNLOCKED.NEXT',\n\t\t0x006B: 'UNLOCKED.PREV',\n\t\t0x006C: 'COPY.PICTURE',\n\t\t0x006D: 'SELECT',\n\t\t0x006E: 'DELETE.NAME',\n\t\t0x006F: 'DELETE.FORMAT',\n\t\t0x0070: 'VLINE',\n\t\t0x0071: 'HLINE',\n\t\t0x0072: 'VPAGE',\n\t\t0x0073: 'HPAGE',\n\t\t0x0074: 'VSCROLL',\n\t\t0x0075: 'HSCROLL',\n\t\t0x0076: 'ALERT',\n\t\t0x0077: 'NEW',\n\t\t0x0078: 'CANCEL.COPY',\n\t\t0x0079: 'SHOW.CLIPBOARD',\n\t\t0x007A: 'MESSAGE',\n\t\t0x007C: 'PASTE.LINK',\n\t\t0x007D: 'APP.ACTIVATE',\n\t\t0x007E: 'DELETE.ARROW',\n\t\t0x007F: 'ROW.HEIGHT',\n\t\t0x0080: 'FORMAT.MOVE',\n\t\t0x0081: 'FORMAT.SIZE',\n\t\t0x0082: 'FORMULA.REPLACE',\n\t\t0x0083: 'SEND.KEYS',\n\t\t0x0084: 'SELECT.SPECIAL',\n\t\t0x0085: 'APPLY.NAMES',\n\t\t0x0086: 'REPLACE.FONT',\n\t\t0x0087: 'FREEZE.PANES',\n\t\t0x0088: 'SHOW.INFO',\n\t\t0x0089: 'SPLIT',\n\t\t0x008A: 'ON.WINDOW',\n\t\t0x008B: 'ON.DATA',\n\t\t0x008C: 'DISABLE.INPUT',\n\t\t0x008E: 'OUTLINE',\n\t\t0x008F: 'LIST.NAMES',\n\t\t0x0090: 'FILE.CLOSE',\n\t\t0x0091: 'SAVE.WORKBOOK',\n\t\t0x0092: 'DATA.FORM',\n\t\t0x0093: 'COPY.CHART',\n\t\t0x0094: 'ON.TIME',\n\t\t0x0095: 'WAIT',\n\t\t0x0096: 'FORMAT.FONT',\n\t\t0x0097: 'FILL.UP',\n\t\t0x0098: 'FILL.LEFT',\n\t\t0x0099: 'DELETE.OVERLAY',\n\t\t0x009B: 'SHORT.MENUS',\n\t\t0x009F: 'SET.UPDATE.STATUS',\n\t\t0x00A1: 'COLOR.PALETTE',\n\t\t0x00A2: 'DELETE.STYLE',\n\t\t0x00A3: 'WINDOW.RESTORE',\n\t\t0x00A4: 'WINDOW.MAXIMIZE',\n\t\t0x00A6: 'CHANGE.LINK',\n\t\t0x00A7: 'CALCULATE.DOCUMENT',\n\t\t0x00A8: 'ON.KEY',\n\t\t0x00A9: 'APP.RESTORE',\n\t\t0x00AA: 'APP.MOVE',\n\t\t0x00AB: 'APP.SIZE',\n\t\t0x00AC: 'APP.MINIMIZE',\n\t\t0x00AD: 'APP.MAXIMIZE',\n\t\t0x00AE: 'BRING.TO.FRONT',\n\t\t0x00AF: 'SEND.TO.BACK',\n\t\t0x00B9: 'MAIN.CHART.TYPE',\n\t\t0x00BA: 'OVERLAY.CHART.TYPE',\n\t\t0x00BB: 'SELECT.END',\n\t\t0x00BC: 'OPEN.MAIL',\n\t\t0x00BD: 'SEND.MAIL',\n\t\t0x00BE: 'STANDARD.FONT',\n\t\t0x00BF: 'CONSOLIDATE',\n\t\t0x00C0: 'SORT.SPECIAL',\n\t\t0x00C1: 'GALLERY.3D.AREA',\n\t\t0x00C2: 'GALLERY.3D.COLUMN',\n\t\t0x00C3: 'GALLERY.3D.LINE',\n\t\t0x00C4: 'GALLERY.3D.PIE',\n\t\t0x00C5: 'VIEW.3D',\n\t\t0x00C6: 'GOAL.SEEK',\n\t\t0x00C7: 'WORKGROUP',\n\t\t0x00C8: 'FILL.GROUP',\n\t\t0x00C9: 'UPDATE.LINK',\n\t\t0x00CA: 'PROMOTE',\n\t\t0x00CB: 'DEMOTE',\n\t\t0x00CC: 'SHOW.DETAIL',\n\t\t0x00CE: 'UNGROUP',\n\t\t0x00CF: 'OBJECT.PROPERTIES',\n\t\t0x00D0: 'SAVE.NEW.OBJECT',\n\t\t0x00D1: 'SHARE',\n\t\t0x00D2: 'SHARE.NAME',\n\t\t0x00D3: 'DUPLICATE',\n\t\t0x00D4: 'APPLY.STYLE',\n\t\t0x00D5: 'ASSIGN.TO.OBJECT',\n\t\t0x00D6: 'OBJECT.PROTECTION',\n\t\t0x00D7: 'HIDE.OBJECT',\n\t\t0x00D8: 'SET.EXTRACT',\n\t\t0x00D9: 'CREATE.PUBLISHER',\n\t\t0x00DA: 'SUBSCRIBE.TO',\n\t\t0x00DB: 'ATTRIBUTES',\n\t\t0x00DC: 'SHOW.TOOLBAR',\n\t\t0x00DE: 'PRINT.PREVIEW',\n\t\t0x00DF: 'EDIT.COLOR',\n\t\t0x00E0: 'SHOW.LEVELS',\n\t\t0x00E1: 'FORMAT.MAIN',\n\t\t0x00E2: 'FORMAT.OVERLAY',\n\t\t0x00E3: 'ON.RECALC',\n\t\t0x00E4: 'EDIT.SERIES',\n\t\t0x00E5: 'DEFINE.STYLE',\n\t\t0x00F0: 'LINE.PRINT',\n\t\t0x00F3: 'ENTER.DATA',\n\t\t0x00F9: 'GALLERY.RADAR',\n\t\t0x00FA: 'MERGE.STYLES',\n\t\t0x00FB: 'EDITION.OPTIONS',\n\t\t0x00FC: 'PASTE.PICTURE',\n\t\t0x00FD: 'PASTE.PICTURE.LINK',\n\t\t0x00FE: 'SPELLING',\n\t\t0x0100: 'ZOOM',\n\t\t0x0103: 'INSERT.OBJECT',\n\t\t0x0104: 'WINDOW.MINIMIZE',\n\t\t0x0109: 'SOUND.NOTE',\n\t\t0x010A: 'SOUND.PLAY',\n\t\t0x010B: 'FORMAT.SHAPE',\n\t\t0x010C: 'EXTEND.POLYGON',\n\t\t0x010D: 'FORMAT.AUTO',\n\t\t0x0110: 'GALLERY.3D.BAR',\n\t\t0x0111: 'GALLERY.3D.SURFACE',\n\t\t0x0112: 'FILL.AUTO',\n\t\t0x0114: 'CUSTOMIZE.TOOLBAR',\n\t\t0x0115: 'ADD.TOOL',\n\t\t0x0116: 'EDIT.OBJECT',\n\t\t0x0117: 'ON.DOUBLECLICK',\n\t\t0x0118: 'ON.ENTRY',\n\t\t0x0119: 'WORKBOOK.ADD',\n\t\t0x011A: 'WORKBOOK.MOVE',\n\t\t0x011B: 'WORKBOOK.COPY',\n\t\t0x011C: 'WORKBOOK.OPTIONS',\n\t\t0x011D: 'SAVE.WORKSPACE',\n\t\t0x0120: 'CHART.WIZARD',\n\t\t0x0121: 'DELETE.TOOL',\n\t\t0x0122: 'MOVE.TOOL',\n\t\t0x0123: 'WORKBOOK.SELECT',\n\t\t0x0124: 'WORKBOOK.ACTIVATE',\n\t\t0x0125: 'ASSIGN.TO.TOOL',\n\t\t0x0127: 'COPY.TOOL',\n\t\t0x0128: 'RESET.TOOL',\n\t\t0x0129: 'CONSTRAIN.NUMERIC',\n\t\t0x012A: 'PASTE.TOOL',\n\t\t0x012E: 'WORKBOOK.NEW',\n\t\t0x0131: 'SCENARIO.CELLS',\n\t\t0x0132: 'SCENARIO.DELETE',\n\t\t0x0133: 'SCENARIO.ADD',\n\t\t0x0134: 'SCENARIO.EDIT',\n\t\t0x0135: 'SCENARIO.SHOW',\n\t\t0x0136: 'SCENARIO.SHOW.NEXT',\n\t\t0x0137: 'SCENARIO.SUMMARY',\n\t\t0x0138: 'PIVOT.TABLE.WIZARD',\n\t\t0x0139: 'PIVOT.FIELD.PROPERTIES',\n\t\t0x013A: 'PIVOT.FIELD',\n\t\t0x013B: 'PIVOT.ITEM',\n\t\t0x013C: 'PIVOT.ADD.FIELDS',\n\t\t0x013E: 'OPTIONS.CALCULATION',\n\t\t0x013F: 'OPTIONS.EDIT',\n\t\t0x0140: 'OPTIONS.VIEW',\n\t\t0x0141: 'ADDIN.MANAGER',\n\t\t0x0142: 'MENU.EDITOR',\n\t\t0x0143: 'ATTACH.TOOLBARS',\n\t\t0x0144: 'VBAActivate',\n\t\t0x0145: 'OPTIONS.CHART',\n\t\t0x0148: 'VBA.INSERT.FILE',\n\t\t0x014A: 'VBA.PROCEDURE.DEFINITION',\n\t\t0x0150: 'ROUTING.SLIP',\n\t\t0x0152: 'ROUTE.DOCUMENT',\n\t\t0x0153: 'MAIL.LOGON',\n\t\t0x0156: 'INSERT.PICTURE',\n\t\t0x0157: 'EDIT.TOOL',\n\t\t0x0158: 'GALLERY.DOUGHNUT',\n\t\t0x015E: 'CHART.TREND',\n\t\t0x0160: 'PIVOT.ITEM.PROPERTIES',\n\t\t0x0162: 'WORKBOOK.INSERT',\n\t\t0x0163: 'OPTIONS.TRANSITION',\n\t\t0x0164: 'OPTIONS.GENERAL',\n\t\t0x0172: 'FILTER.ADVANCED',\n\t\t0x0175: 'MAIL.ADD.MAILER',\n\t\t0x0176: 'MAIL.DELETE.MAILER',\n\t\t0x0177: 'MAIL.REPLY',\n\t\t0x0178: 'MAIL.REPLY.ALL',\n\t\t0x0179: 'MAIL.FORWARD',\n\t\t0x017A: 'MAIL.NEXT.LETTER',\n\t\t0x017B: 'DATA.LABEL',\n\t\t0x017C: 'INSERT.TITLE',\n\t\t0x017D: 'FONT.PROPERTIES',\n\t\t0x017E: 'MACRO.OPTIONS',\n\t\t0x017F: 'WORKBOOK.HIDE',\n\t\t0x0180: 'WORKBOOK.UNHIDE',\n\t\t0x0181: 'WORKBOOK.DELETE',\n\t\t0x0182: 'WORKBOOK.NAME',\n\t\t0x0184: 'GALLERY.CUSTOM',\n\t\t0x0186: 'ADD.CHART.AUTOFORMAT',\n\t\t0x0187: 'DELETE.CHART.AUTOFORMAT',\n\t\t0x0188: 'CHART.ADD.DATA',\n\t\t0x0189: 'AUTO.OUTLINE',\n\t\t0x018A: 'TAB.ORDER',\n\t\t0x018B: 'SHOW.DIALOG',\n\t\t0x018C: 'SELECT.ALL',\n\t\t0x018D: 'UNGROUP.SHEETS',\n\t\t0x018E: 'SUBTOTAL.CREATE',\n\t\t0x018F: 'SUBTOTAL.REMOVE',\n\t\t0x0190: 'RENAME.OBJECT',\n\t\t0x019C: 'WORKBOOK.SCROLL',\n\t\t0x019D: 'WORKBOOK.NEXT',\n\t\t0x019E: 'WORKBOOK.PREV',\n\t\t0x019F: 'WORKBOOK.TAB.SPLIT',\n\t\t0x01A0: 'FULL.SCREEN',\n\t\t0x01A1: 'WORKBOOK.PROTECT',\n\t\t0x01A4: 'SCROLLBAR.PROPERTIES',\n\t\t0x01A5: 'PIVOT.SHOW.PAGES',\n\t\t0x01A6: 'TEXT.TO.COLUMNS',\n\t\t0x01A7: 'FORMAT.CHARTTYPE',\n\t\t0x01A8: 'LINK.FORMAT',\n\t\t0x01A9: 'TRACER.DISPLAY',\n\t\t0x01AE: 'TRACER.NAVIGATE',\n\t\t0x01AF: 'TRACER.CLEAR',\n\t\t0x01B0: 'TRACER.ERROR',\n\t\t0x01B1: 'PIVOT.FIELD.GROUP',\n\t\t0x01B2: 'PIVOT.FIELD.UNGROUP',\n\t\t0x01B3: 'CHECKBOX.PROPERTIES',\n\t\t0x01B4: 'LABEL.PROPERTIES',\n\t\t0x01B5: 'LISTBOX.PROPERTIES',\n\t\t0x01B6: 'EDITBOX.PROPERTIES',\n\t\t0x01B7: 'PIVOT.REFRESH',\n\t\t0x01B8: 'LINK.COMBO',\n\t\t0x01B9: 'OPEN.TEXT',\n\t\t0x01BA: 'HIDE.DIALOG',\n\t\t0x01BB: 'SET.DIALOG.FOCUS',\n\t\t0x01BC: 'ENABLE.OBJECT',\n\t\t0x01BD: 'PUSHBUTTON.PROPERTIES',\n\t\t0x01BE: 'SET.DIALOG.DEFAULT',\n\t\t0x01BF: 'FILTER',\n\t\t0x01C0: 'FILTER.SHOW.ALL',\n\t\t0x01C1: 'CLEAR.OUTLINE',\n\t\t0x01C2: 'FUNCTION.WIZARD',\n\t\t0x01C3: 'ADD.LIST.ITEM',\n\t\t0x01C4: 'SET.LIST.ITEM',\n\t\t0x01C5: 'REMOVE.LIST.ITEM',\n\t\t0x01C6: 'SELECT.LIST.ITEM',\n\t\t0x01C7: 'SET.CONTROL.VALUE',\n\t\t0x01C8: 'SAVE.COPY.AS',\n\t\t0x01CA: 'OPTIONS.LISTS.ADD',\n\t\t0x01CB: 'OPTIONS.LISTS.DELETE',\n\t\t0x01CC: 'SERIES.AXES',\n\t\t0x01CD: 'SERIES.X',\n\t\t0x01CE: 'SERIES.Y',\n\t\t0x01CF: 'ERRORBAR.X',\n\t\t0x01D0: 'ERRORBAR.Y',\n\t\t0x01D1: 'FORMAT.CHART',\n\t\t0x01D2: 'SERIES.ORDER',\n\t\t0x01D3: 'MAIL.LOGOFF',\n\t\t0x01D4: 'CLEAR.ROUTING.SLIP',\n\t\t0x01D5: 'APP.ACTIVATE.MICROSOFT',\n\t\t0x01D6: 'MAIL.EDIT.MAILER',\n\t\t0x01D7: 'ON.SHEET',\n\t\t0x01D8: 'STANDARD.WIDTH',\n\t\t0x01D9: 'SCENARIO.MERGE',\n\t\t0x01DA: 'SUMMARY.INFO',\n\t\t0x01DB: 'FIND.FILE',\n\t\t0x01DC: 'ACTIVE.CELL.FONT',\n\t\t0x01DD: 'ENABLE.TIPWIZARD',\n\t\t0x01DE: 'VBA.MAKE.ADDIN',\n\t\t0x01E0: 'INSERTDATATABLE',\n\t\t0x01E1: 'WORKGROUP.OPTIONS',\n\t\t0x01E2: 'MAIL.SEND.MAILER',\n\t\t0x01E5: 'AUTOCORRECT',\n\t\t0x01E9: 'POST.DOCUMENT',\n\t\t0x01EB: 'PICKLIST',\n\t\t0x01ED: 'VIEW.SHOW',\n\t\t0x01EE: 'VIEW.DEFINE',\n\t\t0x01EF: 'VIEW.DELETE',\n\t\t0x01FD: 'SHEET.BACKGROUND',\n\t\t0x01FE: 'INSERT.MAP.OBJECT',\n\t\t0x01FF: 'OPTIONS.MENONO',\n\t\t0x0205: 'MSOCHECKS',\n\t\t0x0206: 'NORMAL',\n\t\t0x0207: 'LAYOUT',\n\t\t0x0208: 'RM.PRINT.AREA',\n\t\t0x0209: 'CLEAR.PRINT.AREA',\n\t\t0x020A: 'ADD.PRINT.AREA',\n\t\t0x020B: 'MOVE.BRK',\n\t\t0x0221: 'HIDECURR.NOTE',\n\t\t0x0222: 'HIDEALL.NOTES',\n\t\t0x0223: 'DELETE.NOTE',\n\t\t0x0224: 'TRAVERSE.NOTES',\n\t\t0x0225: 'ACTIVATE.NOTES',\n\t\t0x026C: 'PROTECT.REVISIONS',\n\t\t0x026D: 'UNPROTECT.REVISIONS',\n\t\t0x0287: 'OPTIONS.ME',\n\t\t0x028D: 'WEB.PUBLISH',\n\t\t0x029B: 'NEWWEBQUERY',\n\t\t0x02A1: 'PIVOT.TABLE.CHART',\n\t\t0x02F1: 'OPTIONS.SAVE',\n\t\t0x02F3: 'OPTIONS.SPELL',\n\t\t0x0328: 'HIDEALL.INKANNOTS'\n\t};\n\t\n\t/* [MS-XLS] 2.5.198.17 */\n\tvar Ftab = {\n\t\t0x0000: 'COUNT',\n\t\t0x0001: 'IF',\n\t\t0x0002: 'ISNA',\n\t\t0x0003: 'ISERROR',\n\t\t0x0004: 'SUM',\n\t\t0x0005: 'AVERAGE',\n\t\t0x0006: 'MIN',\n\t\t0x0007: 'MAX',\n\t\t0x0008: 'ROW',\n\t\t0x0009: 'COLUMN',\n\t\t0x000A: 'NA',\n\t\t0x000B: 'NPV',\n\t\t0x000C: 'STDEV',\n\t\t0x000D: 'DOLLAR',\n\t\t0x000E: 'FIXED',\n\t\t0x000F: 'SIN',\n\t\t0x0010: 'COS',\n\t\t0x0011: 'TAN',\n\t\t0x0012: 'ATAN',\n\t\t0x0013: 'PI',\n\t\t0x0014: 'SQRT',\n\t\t0x0015: 'EXP',\n\t\t0x0016: 'LN',\n\t\t0x0017: 'LOG10',\n\t\t0x0018: 'ABS',\n\t\t0x0019: 'INT',\n\t\t0x001A: 'SIGN',\n\t\t0x001B: 'ROUND',\n\t\t0x001C: 'LOOKUP',\n\t\t0x001D: 'INDEX',\n\t\t0x001E: 'REPT',\n\t\t0x001F: 'MID',\n\t\t0x0020: 'LEN',\n\t\t0x0021: 'VALUE',\n\t\t0x0022: 'TRUE',\n\t\t0x0023: 'FALSE',\n\t\t0x0024: 'AND',\n\t\t0x0025: 'OR',\n\t\t0x0026: 'NOT',\n\t\t0x0027: 'MOD',\n\t\t0x0028: 'DCOUNT',\n\t\t0x0029: 'DSUM',\n\t\t0x002A: 'DAVERAGE',\n\t\t0x002B: 'DMIN',\n\t\t0x002C: 'DMAX',\n\t\t0x002D: 'DSTDEV',\n\t\t0x002E: 'VAR',\n\t\t0x002F: 'DVAR',\n\t\t0x0030: 'TEXT',\n\t\t0x0031: 'LINEST',\n\t\t0x0032: 'TREND',\n\t\t0x0033: 'LOGEST',\n\t\t0x0034: 'GROWTH',\n\t\t0x0035: 'GOTO',\n\t\t0x0036: 'HALT',\n\t\t0x0037: 'RETURN',\n\t\t0x0038: 'PV',\n\t\t0x0039: 'FV',\n\t\t0x003A: 'NPER',\n\t\t0x003B: 'PMT',\n\t\t0x003C: 'RATE',\n\t\t0x003D: 'MIRR',\n\t\t0x003E: 'IRR',\n\t\t0x003F: 'RAND',\n\t\t0x0040: 'MATCH',\n\t\t0x0041: 'DATE',\n\t\t0x0042: 'TIME',\n\t\t0x0043: 'DAY',\n\t\t0x0044: 'MONTH',\n\t\t0x0045: 'YEAR',\n\t\t0x0046: 'WEEKDAY',\n\t\t0x0047: 'HOUR',\n\t\t0x0048: 'MINUTE',\n\t\t0x0049: 'SECOND',\n\t\t0x004A: 'NOW',\n\t\t0x004B: 'AREAS',\n\t\t0x004C: 'ROWS',\n\t\t0x004D: 'COLUMNS',\n\t\t0x004E: 'OFFSET',\n\t\t0x004F: 'ABSREF',\n\t\t0x0050: 'RELREF',\n\t\t0x0051: 'ARGUMENT',\n\t\t0x0052: 'SEARCH',\n\t\t0x0053: 'TRANSPOSE',\n\t\t0x0054: 'ERROR',\n\t\t0x0055: 'STEP',\n\t\t0x0056: 'TYPE',\n\t\t0x0057: 'ECHO',\n\t\t0x0058: 'SET.NAME',\n\t\t0x0059: 'CALLER',\n\t\t0x005A: 'DEREF',\n\t\t0x005B: 'WINDOWS',\n\t\t0x005C: 'SERIES',\n\t\t0x005D: 'DOCUMENTS',\n\t\t0x005E: 'ACTIVE.CELL',\n\t\t0x005F: 'SELECTION',\n\t\t0x0060: 'RESULT',\n\t\t0x0061: 'ATAN2',\n\t\t0x0062: 'ASIN',\n\t\t0x0063: 'ACOS',\n\t\t0x0064: 'CHOOSE',\n\t\t0x0065: 'HLOOKUP',\n\t\t0x0066: 'VLOOKUP',\n\t\t0x0067: 'LINKS',\n\t\t0x0068: 'INPUT',\n\t\t0x0069: 'ISREF',\n\t\t0x006A: 'GET.FORMULA',\n\t\t0x006B: 'GET.NAME',\n\t\t0x006C: 'SET.VALUE',\n\t\t0x006D: 'LOG',\n\t\t0x006E: 'EXEC',\n\t\t0x006F: 'CHAR',\n\t\t0x0070: 'LOWER',\n\t\t0x0071: 'UPPER',\n\t\t0x0072: 'PROPER',\n\t\t0x0073: 'LEFT',\n\t\t0x0074: 'RIGHT',\n\t\t0x0075: 'EXACT',\n\t\t0x0076: 'TRIM',\n\t\t0x0077: 'REPLACE',\n\t\t0x0078: 'SUBSTITUTE',\n\t\t0x0079: 'CODE',\n\t\t0x007A: 'NAMES',\n\t\t0x007B: 'DIRECTORY',\n\t\t0x007C: 'FIND',\n\t\t0x007D: 'CELL',\n\t\t0x007E: 'ISERR',\n\t\t0x007F: 'ISTEXT',\n\t\t0x0080: 'ISNUMBER',\n\t\t0x0081: 'ISBLANK',\n\t\t0x0082: 'T',\n\t\t0x0083: 'N',\n\t\t0x0084: 'FOPEN',\n\t\t0x0085: 'FCLOSE',\n\t\t0x0086: 'FSIZE',\n\t\t0x0087: 'FREADLN',\n\t\t0x0088: 'FREAD',\n\t\t0x0089: 'FWRITELN',\n\t\t0x008A: 'FWRITE',\n\t\t0x008B: 'FPOS',\n\t\t0x008C: 'DATEVALUE',\n\t\t0x008D: 'TIMEVALUE',\n\t\t0x008E: 'SLN',\n\t\t0x008F: 'SYD',\n\t\t0x0090: 'DDB',\n\t\t0x0091: 'GET.DEF',\n\t\t0x0092: 'REFTEXT',\n\t\t0x0093: 'TEXTREF',\n\t\t0x0094: 'INDIRECT',\n\t\t0x0095: 'REGISTER',\n\t\t0x0096: 'CALL',\n\t\t0x0097: 'ADD.BAR',\n\t\t0x0098: 'ADD.MENU',\n\t\t0x0099: 'ADD.COMMAND',\n\t\t0x009A: 'ENABLE.COMMAND',\n\t\t0x009B: 'CHECK.COMMAND',\n\t\t0x009C: 'RENAME.COMMAND',\n\t\t0x009D: 'SHOW.BAR',\n\t\t0x009E: 'DELETE.MENU',\n\t\t0x009F: 'DELETE.COMMAND',\n\t\t0x00A0: 'GET.CHART.ITEM',\n\t\t0x00A1: 'DIALOG.BOX',\n\t\t0x00A2: 'CLEAN',\n\t\t0x00A3: 'MDETERM',\n\t\t0x00A4: 'MINVERSE',\n\t\t0x00A5: 'MMULT',\n\t\t0x00A6: 'FILES',\n\t\t0x00A7: 'IPMT',\n\t\t0x00A8: 'PPMT',\n\t\t0x00A9: 'COUNTA',\n\t\t0x00AA: 'CANCEL.KEY',\n\t\t0x00AB: 'FOR',\n\t\t0x00AC: 'WHILE',\n\t\t0x00AD: 'BREAK',\n\t\t0x00AE: 'NEXT',\n\t\t0x00AF: 'INITIATE',\n\t\t0x00B0: 'REQUEST',\n\t\t0x00B1: 'POKE',\n\t\t0x00B2: 'EXECUTE',\n\t\t0x00B3: 'TERMINATE',\n\t\t0x00B4: 'RESTART',\n\t\t0x00B5: 'HELP',\n\t\t0x00B6: 'GET.BAR',\n\t\t0x00B7: 'PRODUCT',\n\t\t0x00B8: 'FACT',\n\t\t0x00B9: 'GET.CELL',\n\t\t0x00BA: 'GET.WORKSPACE',\n\t\t0x00BB: 'GET.WINDOW',\n\t\t0x00BC: 'GET.DOCUMENT',\n\t\t0x00BD: 'DPRODUCT',\n\t\t0x00BE: 'ISNONTEXT',\n\t\t0x00BF: 'GET.NOTE',\n\t\t0x00C0: 'NOTE',\n\t\t0x00C1: 'STDEVP',\n\t\t0x00C2: 'VARP',\n\t\t0x00C3: 'DSTDEVP',\n\t\t0x00C4: 'DVARP',\n\t\t0x00C5: 'TRUNC',\n\t\t0x00C6: 'ISLOGICAL',\n\t\t0x00C7: 'DCOUNTA',\n\t\t0x00C8: 'DELETE.BAR',\n\t\t0x00C9: 'UNREGISTER',\n\t\t0x00CC: 'USDOLLAR',\n\t\t0x00CD: 'FINDB',\n\t\t0x00CE: 'SEARCHB',\n\t\t0x00CF: 'REPLACEB',\n\t\t0x00D0: 'LEFTB',\n\t\t0x00D1: 'RIGHTB',\n\t\t0x00D2: 'MIDB',\n\t\t0x00D3: 'LENB',\n\t\t0x00D4: 'ROUNDUP',\n\t\t0x00D5: 'ROUNDDOWN',\n\t\t0x00D6: 'ASC',\n\t\t0x00D7: 'DBCS',\n\t\t0x00D8: 'RANK',\n\t\t0x00DB: 'ADDRESS',\n\t\t0x00DC: 'DAYS360',\n\t\t0x00DD: 'TODAY',\n\t\t0x00DE: 'VDB',\n\t\t0x00DF: 'ELSE',\n\t\t0x00E0: 'ELSE.IF',\n\t\t0x00E1: 'END.IF',\n\t\t0x00E2: 'FOR.CELL',\n\t\t0x00E3: 'MEDIAN',\n\t\t0x00E4: 'SUMPRODUCT',\n\t\t0x00E5: 'SINH',\n\t\t0x00E6: 'COSH',\n\t\t0x00E7: 'TANH',\n\t\t0x00E8: 'ASINH',\n\t\t0x00E9: 'ACOSH',\n\t\t0x00EA: 'ATANH',\n\t\t0x00EB: 'DGET',\n\t\t0x00EC: 'CREATE.OBJECT',\n\t\t0x00ED: 'VOLATILE',\n\t\t0x00EE: 'LAST.ERROR',\n\t\t0x00EF: 'CUSTOM.UNDO',\n\t\t0x00F0: 'CUSTOM.REPEAT',\n\t\t0x00F1: 'FORMULA.CONVERT',\n\t\t0x00F2: 'GET.LINK.INFO',\n\t\t0x00F3: 'TEXT.BOX',\n\t\t0x00F4: 'INFO',\n\t\t0x00F5: 'GROUP',\n\t\t0x00F6: 'GET.OBJECT',\n\t\t0x00F7: 'DB',\n\t\t0x00F8: 'PAUSE',\n\t\t0x00FB: 'RESUME',\n\t\t0x00FC: 'FREQUENCY',\n\t\t0x00FD: 'ADD.TOOLBAR',\n\t\t0x00FE: 'DELETE.TOOLBAR',\n\t\t0x00FF: 'User',\n\t\t0x0100: 'RESET.TOOLBAR',\n\t\t0x0101: 'EVALUATE',\n\t\t0x0102: 'GET.TOOLBAR',\n\t\t0x0103: 'GET.TOOL',\n\t\t0x0104: 'SPELLING.CHECK',\n\t\t0x0105: 'ERROR.TYPE',\n\t\t0x0106: 'APP.TITLE',\n\t\t0x0107: 'WINDOW.TITLE',\n\t\t0x0108: 'SAVE.TOOLBAR',\n\t\t0x0109: 'ENABLE.TOOL',\n\t\t0x010A: 'PRESS.TOOL',\n\t\t0x010B: 'REGISTER.ID',\n\t\t0x010C: 'GET.WORKBOOK',\n\t\t0x010D: 'AVEDEV',\n\t\t0x010E: 'BETADIST',\n\t\t0x010F: 'GAMMALN',\n\t\t0x0110: 'BETAINV',\n\t\t0x0111: 'BINOMDIST',\n\t\t0x0112: 'CHIDIST',\n\t\t0x0113: 'CHIINV',\n\t\t0x0114: 'COMBIN',\n\t\t0x0115: 'CONFIDENCE',\n\t\t0x0116: 'CRITBINOM',\n\t\t0x0117: 'EVEN',\n\t\t0x0118: 'EXPONDIST',\n\t\t0x0119: 'FDIST',\n\t\t0x011A: 'FINV',\n\t\t0x011B: 'FISHER',\n\t\t0x011C: 'FISHERINV',\n\t\t0x011D: 'FLOOR',\n\t\t0x011E: 'GAMMADIST',\n\t\t0x011F: 'GAMMAINV',\n\t\t0x0120: 'CEILING',\n\t\t0x0121: 'HYPGEOMDIST',\n\t\t0x0122: 'LOGNORMDIST',\n\t\t0x0123: 'LOGINV',\n\t\t0x0124: 'NEGBINOMDIST',\n\t\t0x0125: 'NORMDIST',\n\t\t0x0126: 'NORMSDIST',\n\t\t0x0127: 'NORMINV',\n\t\t0x0128: 'NORMSINV',\n\t\t0x0129: 'STANDARDIZE',\n\t\t0x012A: 'ODD',\n\t\t0x012B: 'PERMUT',\n\t\t0x012C: 'POISSON',\n\t\t0x012D: 'TDIST',\n\t\t0x012E: 'WEIBULL',\n\t\t0x012F: 'SUMXMY2',\n\t\t0x0130: 'SUMX2MY2',\n\t\t0x0131: 'SUMX2PY2',\n\t\t0x0132: 'CHITEST',\n\t\t0x0133: 'CORREL',\n\t\t0x0134: 'COVAR',\n\t\t0x0135: 'FORECAST',\n\t\t0x0136: 'FTEST',\n\t\t0x0137: 'INTERCEPT',\n\t\t0x0138: 'PEARSON',\n\t\t0x0139: 'RSQ',\n\t\t0x013A: 'STEYX',\n\t\t0x013B: 'SLOPE',\n\t\t0x013C: 'TTEST',\n\t\t0x013D: 'PROB',\n\t\t0x013E: 'DEVSQ',\n\t\t0x013F: 'GEOMEAN',\n\t\t0x0140: 'HARMEAN',\n\t\t0x0141: 'SUMSQ',\n\t\t0x0142: 'KURT',\n\t\t0x0143: 'SKEW',\n\t\t0x0144: 'ZTEST',\n\t\t0x0145: 'LARGE',\n\t\t0x0146: 'SMALL',\n\t\t0x0147: 'QUARTILE',\n\t\t0x0148: 'PERCENTILE',\n\t\t0x0149: 'PERCENTRANK',\n\t\t0x014A: 'MODE',\n\t\t0x014B: 'TRIMMEAN',\n\t\t0x014C: 'TINV',\n\t\t0x014E: 'MOVIE.COMMAND',\n\t\t0x014F: 'GET.MOVIE',\n\t\t0x0150: 'CONCATENATE',\n\t\t0x0151: 'POWER',\n\t\t0x0152: 'PIVOT.ADD.DATA',\n\t\t0x0153: 'GET.PIVOT.TABLE',\n\t\t0x0154: 'GET.PIVOT.FIELD',\n\t\t0x0155: 'GET.PIVOT.ITEM',\n\t\t0x0156: 'RADIANS',\n\t\t0x0157: 'DEGREES',\n\t\t0x0158: 'SUBTOTAL',\n\t\t0x0159: 'SUMIF',\n\t\t0x015A: 'COUNTIF',\n\t\t0x015B: 'COUNTBLANK',\n\t\t0x015C: 'SCENARIO.GET',\n\t\t0x015D: 'OPTIONS.LISTS.GET',\n\t\t0x015E: 'ISPMT',\n\t\t0x015F: 'DATEDIF',\n\t\t0x0160: 'DATESTRING',\n\t\t0x0161: 'NUMBERSTRING',\n\t\t0x0162: 'ROMAN',\n\t\t0x0163: 'OPEN.DIALOG',\n\t\t0x0164: 'SAVE.DIALOG',\n\t\t0x0165: 'VIEW.GET',\n\t\t0x0166: 'GETPIVOTDATA',\n\t\t0x0167: 'HYPERLINK',\n\t\t0x0168: 'PHONETIC',\n\t\t0x0169: 'AVERAGEA',\n\t\t0x016A: 'MAXA',\n\t\t0x016B: 'MINA',\n\t\t0x016C: 'STDEVPA',\n\t\t0x016D: 'VARPA',\n\t\t0x016E: 'STDEVA',\n\t\t0x016F: 'VARA',\n\t\t0x0170: 'BAHTTEXT',\n\t\t0x0171: 'THAIDAYOFWEEK',\n\t\t0x0172: 'THAIDIGIT',\n\t\t0x0173: 'THAIMONTHOFYEAR',\n\t\t0x0174: 'THAINUMSOUND',\n\t\t0x0175: 'THAINUMSTRING',\n\t\t0x0176: 'THAISTRINGLENGTH',\n\t\t0x0177: 'ISTHAIDIGIT',\n\t\t0x0178: 'ROUNDBAHTDOWN',\n\t\t0x0179: 'ROUNDBAHTUP',\n\t\t0x017A: 'THAIYEAR',\n\t\t0x017B: 'RTD'\n\t};\n\tvar FtabArgc = {\n\t\t0x0002: 1, /* ISNA */\n\t\t0x0003: 1, /* ISERROR */\n\t\t0x000F: 1, /* SIN */\n\t\t0x0010: 1, /* COS */\n\t\t0x0011: 1, /* TAN */\n\t\t0x0012: 1, /* ATAN */\n\t\t0x0014: 1, /* SQRT */\n\t\t0x0015: 1, /* EXP */\n\t\t0x0016: 1, /* LN */\n\t\t0x0017: 1, /* LOG10 */\n\t\t0x0018: 1, /* ABS */\n\t\t0x0019: 1, /* INT */\n\t\t0x001A: 1, /* SIGN */\n\t\t0x001B: 2, /* ROUND */\n\t\t0x001E: 2, /* REPT */\n\t\t0x001F: 3, /* MID */\n\t\t0x0020: 1, /* LEN */\n\t\t0x0021: 1, /* VALUE */\n\t\t0x0026: 1, /* NOT */\n\t\t0x0027: 2, /* MOD */\n\t\t0x0028: 3, /* DCOUNT */\n\t\t0x0029: 3, /* DSUM */\n\t\t0x002A: 3, /* DAVERAGE */\n\t\t0x002B: 3, /* DMIN */\n\t\t0x002C: 3, /* DMAX */\n\t\t0x002D: 3, /* DSTDEV */\n\t\t0x002F: 3, /* DVAR */\n\t\t0x0030: 2, /* TEXT */\n\t\t0x0035: 1, /* GOTO */\n\t\t0x003D: 3, /* MIRR */\n\t\t0x0041: 3, /* DATE */\n\t\t0x0042: 3, /* TIME */\n\t\t0x0043: 1, /* DAY */\n\t\t0x0044: 1, /* MONTH */\n\t\t0x0045: 1, /* YEAR */\n\t\t0x0047: 1, /* HOUR */\n\t\t0x0048: 1, /* MINUTE */\n\t\t0x0049: 1, /* SECOND */\n\t\t0x004B: 1, /* AREAS */\n\t\t0x004C: 1, /* ROWS */\n\t\t0x004D: 1, /* COLUMNS */\n\t\t0x004F: 2, /* ABSREF */\n\t\t0x0050: 2, /* RELREF */\n\t\t0x0053: 1, /* TRANSPOSE */\n\t\t0x0056: 1, /* TYPE */\n\t\t0x005A: 1, /* DEREF */\n\t\t0x0061: 2, /* ATAN2 */\n\t\t0x0062: 1, /* ASIN */\n\t\t0x0063: 1, /* ACOS */\n\t\t0x0069: 1, /* ISREF */\n\t\t0x006F: 1, /* CHAR */\n\t\t0x0070: 1, /* LOWER */\n\t\t0x0071: 1, /* UPPER */\n\t\t0x0072: 1, /* PROPER */\n\t\t0x0075: 2, /* EXACT */\n\t\t0x0076: 1, /* TRIM */\n\t\t0x0077: 4, /* REPLACE */\n\t\t0x0079: 1, /* CODE */\n\t\t0x007E: 1, /* ISERR */\n\t\t0x007F: 1, /* ISTEXT */\n\t\t0x0080: 1, /* ISNUMBER */\n\t\t0x0081: 1, /* ISBLANK */\n\t\t0x0082: 1, /* T */\n\t\t0x0083: 1, /* N */\n\t\t0x0085: 1, /* FCLOSE */\n\t\t0x0086: 1, /* FSIZE */\n\t\t0x0087: 1, /* FREADLN */\n\t\t0x0088: 2, /* FREAD */\n\t\t0x0089: 2, /* FWRITELN */\n\t\t0x008A: 2, /* FWRITE */\n\t\t0x008C: 1, /* DATEVALUE */\n\t\t0x008D: 1, /* TIMEVALUE */\n\t\t0x008E: 3, /* SLN */\n\t\t0x008F: 4, /* SYD */\n\t\t0x00A2: 1, /* CLEAN */\n\t\t0x00A3: 1, /* MDETERM */\n\t\t0x00A4: 1, /* MINVERSE */\n\t\t0x00A5: 2, /* MMULT */\n\t\t0x00AC: 1, /* WHILE */\n\t\t0x00AF: 2, /* INITIATE */\n\t\t0x00B0: 2, /* REQUEST */\n\t\t0x00B1: 3, /* POKE */\n\t\t0x00B2: 2, /* EXECUTE */\n\t\t0x00B3: 1, /* TERMINATE */\n\t\t0x00B8: 1, /* FACT */\n\t\t0x00BD: 3, /* DPRODUCT */\n\t\t0x00BE: 1, /* ISNONTEXT */\n\t\t0x00C3: 3, /* DSTDEVP */\n\t\t0x00C4: 3, /* DVARP */\n\t\t0x00C6: 1, /* ISLOGICAL */\n\t\t0x00C7: 3, /* DCOUNTA */\n\t\t0x00C9: 1, /* UNREGISTER */\n\t\t0x00CF: 4, /* REPLACEB */\n\t\t0x00D2: 3, /* MIDB */\n\t\t0x00D3: 1, /* LENB */\n\t\t0x00D4: 2, /* ROUNDUP */\n\t\t0x00D5: 2, /* ROUNDDOWN */\n\t\t0x00D6: 1, /* ASC */\n\t\t0x00D7: 1, /* DBCS */\n\t\t0x00E5: 1, /* SINH */\n\t\t0x00E6: 1, /* COSH */\n\t\t0x00E7: 1, /* TANH */\n\t\t0x00E8: 1, /* ASINH */\n\t\t0x00E9: 1, /* ACOSH */\n\t\t0x00EA: 1, /* ATANH */\n\t\t0x00EB: 3, /* DGET */\n\t\t0x00F4: 1, /* INFO */\n\t\t0x00FC: 2, /* FREQUENCY */\n\t\t0x0101: 1, /* EVALUATE */\n\t\t0x0105: 1, /* ERROR.TYPE */\n\t\t0x010F: 1, /* GAMMALN */\n\t\t0x0111: 4, /* BINOMDIST */\n\t\t0x0112: 2, /* CHIDIST */\n\t\t0x0113: 2, /* CHIINV */\n\t\t0x0114: 2, /* COMBIN */\n\t\t0x0115: 3, /* CONFIDENCE */\n\t\t0x0116: 3, /* CRITBINOM */\n\t\t0x0117: 1, /* EVEN */\n\t\t0x0118: 3, /* EXPONDIST */\n\t\t0x0119: 3, /* FDIST */\n\t\t0x011A: 3, /* FINV */\n\t\t0x011B: 1, /* FISHER */\n\t\t0x011C: 1, /* FISHERINV */\n\t\t0x011D: 2, /* FLOOR */\n\t\t0x011E: 4, /* GAMMADIST */\n\t\t0x011F: 3, /* GAMMAINV */\n\t\t0x0120: 2, /* CEILING */\n\t\t0x0121: 4, /* HYPGEOMDIST */\n\t\t0x0122: 3, /* LOGNORMDIST */\n\t\t0x0123: 3, /* LOGINV */\n\t\t0x0124: 3, /* NEGBINOMDIST */\n\t\t0x0125: 4, /* NORMDIST */\n\t\t0x0126: 1, /* NORMSDIST */\n\t\t0x0127: 3, /* NORMINV */\n\t\t0x0128: 1, /* NORMSINV */\n\t\t0x0129: 3, /* STANDARDIZE */\n\t\t0x012A: 1, /* ODD */\n\t\t0x012B: 2, /* PERMUT */\n\t\t0x012C: 3, /* POISSON */\n\t\t0x012D: 3, /* TDIST */\n\t\t0x012E: 4, /* WEIBULL */\n\t\t0x012F: 2, /* SUMXMY2 */\n\t\t0x0130: 2, /* SUMX2MY2 */\n\t\t0x0131: 2, /* SUMX2PY2 */\n\t\t0x0132: 2, /* CHITEST */\n\t\t0x0133: 2, /* CORREL */\n\t\t0x0134: 2, /* COVAR */\n\t\t0x0135: 3, /* FORECAST */\n\t\t0x0136: 2, /* FTEST */\n\t\t0x0137: 2, /* INTERCEPT */\n\t\t0x0138: 2, /* PEARSON */\n\t\t0x0139: 2, /* RSQ */\n\t\t0x013A: 2, /* STEYX */\n\t\t0x013B: 2, /* SLOPE */\n\t\t0x013C: 4, /* TTEST */\n\t\t0x0145: 2, /* LARGE */\n\t\t0x0146: 2, /* SMALL */\n\t\t0x0147: 2, /* QUARTILE */\n\t\t0x0148: 2, /* PERCENTILE */\n\t\t0x014B: 2, /* TRIMMEAN */\n\t\t0x014C: 2, /* TINV */\n\t\t0x0151: 2, /* POWER */\n\t\t0x0156: 1, /* RADIANS */\n\t\t0x0157: 1, /* DEGREES */\n\t\t0x015A: 2, /* COUNTIF */\n\t\t0x015B: 1, /* COUNTBLANK */\n\t\t0x015E: 4, /* ISPMT */\n\t\t0x015F: 3, /* DATEDIF */\n\t\t0x0160: 1, /* DATESTRING */\n\t\t0x0161: 2, /* NUMBERSTRING */\n\t\t0x0168: 1, /* PHONETIC */\n\t\t0x0170: 1, /* BAHTTEXT */\n\t\t0x0171: 1, /* THAIDAYOFWEEK */\n\t\t0x0172: 1, /* THAIDIGIT */\n\t\t0x0173: 1, /* THAIMONTHOFYEAR */\n\t\t0x0174: 1, /* THAINUMSOUND */\n\t\t0x0175: 1, /* THAINUMSTRING */\n\t\t0x0176: 1, /* THAISTRINGLENGTH */\n\t\t0x0177: 1, /* ISTHAIDIGIT */\n\t\t0x0178: 1, /* ROUNDBAHTDOWN */\n\t\t0x0179: 1, /* ROUNDBAHTUP */\n\t\t0x017A: 1, /* THAIYEAR */\n\t\t0xFFFF: 0\n\t};\n\t/* [MS-XLSX] 2.2.3 Functions */\n\tvar XLSXFutureFunctions = {\n\t\t\"_xlfn.ACOT\": \"ACOT\",\n\t\t\"_xlfn.ACOTH\": \"ACOTH\",\n\t\t\"_xlfn.AGGREGATE\": \"AGGREGATE\",\n\t\t\"_xlfn.ARABIC\": \"ARABIC\",\n\t\t\"_xlfn.AVERAGEIF\": \"AVERAGEIF\",\n\t\t\"_xlfn.AVERAGEIFS\": \"AVERAGEIFS\",\n\t\t\"_xlfn.BASE\": \"BASE\",\n\t\t\"_xlfn.BETA.DIST\": \"BETA.DIST\",\n\t\t\"_xlfn.BETA.INV\": \"BETA.INV\",\n\t\t\"_xlfn.BINOM.DIST\": \"BINOM.DIST\",\n\t\t\"_xlfn.BINOM.DIST.RANGE\": \"BINOM.DIST.RANGE\",\n\t\t\"_xlfn.BINOM.INV\": \"BINOM.INV\",\n\t\t\"_xlfn.BITAND\": \"BITAND\",\n\t\t\"_xlfn.BITLSHIFT\": \"BITLSHIFT\",\n\t\t\"_xlfn.BITOR\": \"BITOR\",\n\t\t\"_xlfn.BITRSHIFT\": \"BITRSHIFT\",\n\t\t\"_xlfn.BITXOR\": \"BITXOR\",\n\t\t\"_xlfn.CEILING.MATH\": \"CEILING.MATH\",\n\t\t\"_xlfn.CEILING.PRECISE\": \"CEILING.PRECISE\",\n\t\t\"_xlfn.CHISQ.DIST\": \"CHISQ.DIST\",\n\t\t\"_xlfn.CHISQ.DIST.RT\": \"CHISQ.DIST.RT\",\n\t\t\"_xlfn.CHISQ.INV\": \"CHISQ.INV\",\n\t\t\"_xlfn.CHISQ.INV.RT\": \"CHISQ.INV.RT\",\n\t\t\"_xlfn.CHISQ.TEST\": \"CHISQ.TEST\",\n\t\t\"_xlfn.COMBINA\": \"COMBINA\",\n\t\t\"_xlfn.CONFIDENCE.NORM\": \"CONFIDENCE.NORM\",\n\t\t\"_xlfn.CONFIDENCE.T\": \"CONFIDENCE.T\",\n\t\t\"_xlfn.COT\": \"COT\",\n\t\t\"_xlfn.COTH\": \"COTH\",\n\t\t\"_xlfn.COUNTIFS\": \"COUNTIFS\",\n\t\t\"_xlfn.COVARIANCE.P\": \"COVARIANCE.P\",\n\t\t\"_xlfn.COVARIANCE.S\": \"COVARIANCE.S\",\n\t\t\"_xlfn.CSC\": \"CSC\",\n\t\t\"_xlfn.CSCH\": \"CSCH\",\n\t\t\"_xlfn.DAYS\": \"DAYS\",\n\t\t\"_xlfn.DECIMAL\": \"DECIMAL\",\n\t\t\"_xlfn.ECMA.CEILING\": \"ECMA.CEILING\",\n\t\t\"_xlfn.ERF.PRECISE\": \"ERF.PRECISE\",\n\t\t\"_xlfn.ERFC.PRECISE\": \"ERFC.PRECISE\",\n\t\t\"_xlfn.EXPON.DIST\": \"EXPON.DIST\",\n\t\t\"_xlfn.F.DIST\": \"F.DIST\",\n\t\t\"_xlfn.F.DIST.RT\": \"F.DIST.RT\",\n\t\t\"_xlfn.F.INV\": \"F.INV\",\n\t\t\"_xlfn.F.INV.RT\": \"F.INV.RT\",\n\t\t\"_xlfn.F.TEST\": \"F.TEST\",\n\t\t\"_xlfn.FILTERXML\": \"FILTERXML\",\n\t\t\"_xlfn.FLOOR.MATH\": \"FLOOR.MATH\",\n\t\t\"_xlfn.FLOOR.PRECISE\": \"FLOOR.PRECISE\",\n\t\t\"_xlfn.FORMULATEXT\": \"FORMULATEXT\",\n\t\t\"_xlfn.GAMMA\": \"GAMMA\",\n\t\t\"_xlfn.GAMMA.DIST\": \"GAMMA.DIST\",\n\t\t\"_xlfn.GAMMA.INV\": \"GAMMA.INV\",\n\t\t\"_xlfn.GAMMALN.PRECISE\": \"GAMMALN.PRECISE\",\n\t\t\"_xlfn.GAUSS\": \"GAUSS\",\n\t\t\"_xlfn.HYPGEOM.DIST\": \"HYPGEOM.DIST\",\n\t\t\"_xlfn.IFNA\": \"IFNA\",\n\t\t\"_xlfn.IFERROR\": \"IFERROR\",\n\t\t\"_xlfn.IMCOSH\": \"IMCOSH\",\n\t\t\"_xlfn.IMCOT\": \"IMCOT\",\n\t\t\"_xlfn.IMCSC\": \"IMCSC\",\n\t\t\"_xlfn.IMCSCH\": \"IMCSCH\",\n\t\t\"_xlfn.IMSEC\": \"IMSEC\",\n\t\t\"_xlfn.IMSECH\": \"IMSECH\",\n\t\t\"_xlfn.IMSINH\": \"IMSINH\",\n\t\t\"_xlfn.IMTAN\": \"IMTAN\",\n\t\t\"_xlfn.ISFORMULA\": \"ISFORMULA\",\n\t\t\"_xlfn.ISO.CEILING\": \"ISO.CEILING\",\n\t\t\"_xlfn.ISOWEEKNUM\": \"ISOWEEKNUM\",\n\t\t\"_xlfn.LOGNORM.DIST\": \"LOGNORM.DIST\",\n\t\t\"_xlfn.LOGNORM.INV\": \"LOGNORM.INV\",\n\t\t\"_xlfn.MODE.MULT\": \"MODE.MULT\",\n\t\t\"_xlfn.MODE.SNGL\": \"MODE.SNGL\",\n\t\t\"_xlfn.MUNIT\": \"MUNIT\",\n\t\t\"_xlfn.NEGBINOM.DIST\": \"NEGBINOM.DIST\",\n\t\t\"_xlfn.NETWORKDAYS.INTL\": \"NETWORKDAYS.INTL\",\n\t\t\"_xlfn.NIGBINOM\": \"NIGBINOM\",\n\t\t\"_xlfn.NORM.DIST\": \"NORM.DIST\",\n\t\t\"_xlfn.NORM.INV\": \"NORM.INV\",\n\t\t\"_xlfn.NORM.S.DIST\": \"NORM.S.DIST\",\n\t\t\"_xlfn.NORM.S.INV\": \"NORM.S.INV\",\n\t\t\"_xlfn.NUMBERVALUE\": \"NUMBERVALUE\",\n\t\t\"_xlfn.PDURATION\": \"PDURATION\",\n\t\t\"_xlfn.PERCENTILE.EXC\": \"PERCENTILE.EXC\",\n\t\t\"_xlfn.PERCENTILE.INC\": \"PERCENTILE.INC\",\n\t\t\"_xlfn.PERCENTRANK.EXC\": \"PERCENTRANK.EXC\",\n\t\t\"_xlfn.PERCENTRANK.INC\": \"PERCENTRANK.INC\",\n\t\t\"_xlfn.PERMUTATIONA\": \"PERMUTATIONA\",\n\t\t\"_xlfn.PHI\": \"PHI\",\n\t\t\"_xlfn.POISSON.DIST\": \"POISSON.DIST\",\n\t\t\"_xlfn.QUARTILE.EXC\": \"QUARTILE.EXC\",\n\t\t\"_xlfn.QUARTILE.INC\": \"QUARTILE.INC\",\n\t\t\"_xlfn.QUERYSTRING\": \"QUERYSTRING\",\n\t\t\"_xlfn.RANK.AVG\": \"RANK.AVG\",\n\t\t\"_xlfn.RANK.EQ\": \"RANK.EQ\",\n\t\t\"_xlfn.RRI\": \"RRI\",\n\t\t\"_xlfn.SEC\": \"SEC\",\n\t\t\"_xlfn.SECH\": \"SECH\",\n\t\t\"_xlfn.SHEET\": \"SHEET\",\n\t\t\"_xlfn.SHEETS\": \"SHEETS\",\n\t\t\"_xlfn.SKEW.P\": \"SKEW.P\",\n\t\t\"_xlfn.STDEV.P\": \"STDEV.P\",\n\t\t\"_xlfn.STDEV.S\": \"STDEV.S\",\n\t\t\"_xlfn.SUMIFS\": \"SUMIFS\",\n\t\t\"_xlfn.T.DIST\": \"T.DIST\",\n\t\t\"_xlfn.T.DIST.2T\": \"T.DIST.2T\",\n\t\t\"_xlfn.T.DIST.RT\": \"T.DIST.RT\",\n\t\t\"_xlfn.T.INV\": \"T.INV\",\n\t\t\"_xlfn.T.INV.2T\": \"T.INV.2T\",\n\t\t\"_xlfn.T.TEST\": \"T.TEST\",\n\t\t\"_xlfn.UNICHAR\": \"UNICHAR\",\n\t\t\"_xlfn.UNICODE\": \"UNICODE\",\n\t\t\"_xlfn.VAR.P\": \"VAR.P\",\n\t\t\"_xlfn.VAR.S\": \"VAR.S\",\n\t\t\"_xlfn.WEBSERVICE\": \"WEBSERVICE\",\n\t\t\"_xlfn.WEIBULL.DIST\": \"WEIBULL.DIST\",\n\t\t\"_xlfn.WORKDAY.INTL\": \"WORKDAY.INTL\",\n\t\t\"_xlfn.XOR\": \"XOR\",\n\t\t\"_xlfn.Z.TEST\": \"Z.TEST\"\n\t};\n\t\n\tvar strs = {}; // shared strings\n\tvar _ssfopts = {}; // spreadsheet formatting options\n\t\n\tRELS.WS = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\";\n\t\n\tfunction get_sst_id(sst, str) {\n\t\tfor(var i = 0, len = sst.length; i < len; ++i) if(sst[i].t === str) { sst.Count ++; return i; }\n\t\tsst[len] = {t:str}; sst.Count ++; sst.Unique ++; return len;\n\t}\n\t\n\tfunction get_cell_style(styles, cell, opts) {\n\t  if (typeof style_builder != 'undefined') {\n\t    if (/^\\d+$/.exec(cell.s)) { return cell.s}  // if its already an integer index, let it be\n\t    if (cell.s && (cell.s == +cell.s)) { return cell.s}  // if its already an integer index, let it be\n\t    var s = cell.s || {};\n\t    if (cell.z) s.numFmt = cell.z;\n\t    return style_builder.addStyle(s);\n\t  }\n\t  else {\n\t    var z = opts.revssf[cell.z != null ? cell.z : \"General\"];\n\t    for(var i = 0, len = styles.length; i != len; ++i) if(styles[i].numFmtId === z) return i;\n\t    styles[len] = {\n\t      numFmtId:z,\n\t      fontId:0,\n\t      fillId:0,\n\t      borderId:0,\n\t      xfId:0,\n\t      applyNumberFormat:1\n\t    };\n\t    return len;\n\t  }\n\t}\n\t\n\tfunction get_cell_style_csf(cellXf) {\n\t\n\t  if (cellXf) {\n\t\n\t    var s = {}\n\t\n\t    if (typeof cellXf.numFmtId != undefined)  {\n\t      s.numFmt = SSF._table[cellXf.numFmtId];\n\t    }\n\t\n\t    if(cellXf.fillId)  {\n\t      s.fill =  styles.Fills[cellXf.fillId];\n\t    }\n\t\n\t    if (cellXf.fontId) {\n\t      s.font = styles.Fonts[cellXf.fontId];\n\t    }\n\t    if (cellXf.borderId) {\n\t      s.border = styles.Borders[cellXf.borderId];\n\t    }\n\t    if (cellXf.applyAlignment==1) {\n\t      s.alignment = cellXf.alignment;\n\t    }\n\t\n\t\n\t    return s;\n\t  }\n\t  return null;\n\t}\n\t\n\tfunction safe_format(p, fmtid, fillid, opts) {\n\t\ttry {\n\t\t\tif(p.t === 'e') p.w = p.w || BErr[p.v];\n\t\t\telse if(fmtid === 0) {\n\t\t\t\tif(p.t === 'n') {\n\t\t\t\t\tif((p.v|0) === p.v) p.w = SSF._general_int(p.v,_ssfopts);\n\t\t\t\t\telse p.w = SSF._general_num(p.v,_ssfopts);\n\t\t\t\t}\n\t\t\t\telse if(p.t === 'd') {\n\t\t\t\t\tvar dd = datenum(p.v);\n\t\t\t\t\tif((dd|0) === dd) p.w = SSF._general_int(dd,_ssfopts);\n\t\t\t\t\telse p.w = SSF._general_num(dd,_ssfopts);\n\t\t\t\t}\n\t\t\t\telse if(p.v === undefined) return \"\";\n\t\t\t\telse p.w = SSF._general(p.v,_ssfopts);\n\t\t\t}\n\t\t\telse if(p.t === 'd') p.w = SSF.format(fmtid,datenum(p.v),_ssfopts);\n\t\t\telse p.w = SSF.format(fmtid,p.v,_ssfopts);\n\t\t\tif(opts.cellNF) p.z = SSF._table[fmtid];\n\t\t} catch(e) { if(opts.WTF) throw e; }\n\t}\n\tfunction parse_ws_xml_dim(ws, s) {\n\t\tvar d = safe_decode_range(s);\n\t\tif(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws[\"!ref\"] = encode_range(d);\n\t}\n\tvar mergecregex = /<mergeCell ref=\"[A-Z0-9:]+\"\\s*\\/>/g;\n\tvar sheetdataregex = /<(?:\\w+:)?sheetData>([^\\u2603]*)<\\/(?:\\w+:)?sheetData>/;\n\tvar hlinkregex = /<hyperlink[^>]*\\/>/g;\n\tvar dimregex = /\"(\\w*:\\w*)\"/;\n\tvar colregex = /<col[^>]*\\/>/g;\n\t/* 18.3 Worksheets */\n\tfunction parse_ws_xml(data, opts, rels) {\n\t\tif(!data) return data;\n\t\t/* 18.3.1.99 worksheet CT_Worksheet */\n\t\tvar s = {};\n\t\n\t\t/* 18.3.1.35 dimension CT_SheetDimension ? */\n\t\tvar ridx = data.indexOf(\"<dimension\");\n\t\tif(ridx > 0) {\n\t\t\tvar ref = data.substr(ridx,50).match(dimregex);\n\t\t\tif(ref != null) parse_ws_xml_dim(s, ref[1]);\n\t\t}\n\t\n\t\t/* 18.3.1.55 mergeCells CT_MergeCells */\n\t\tvar mergecells = [];\n\t\tif(data.indexOf(\"</mergeCells>\")!==-1) {\n\t\t\tvar merges = data.match(mergecregex);\n\t\t\tfor(ridx = 0; ridx != merges.length; ++ridx)\n\t\t\t\tmergecells[ridx] = safe_decode_range(merges[ridx].substr(merges[ridx].indexOf(\"\\\"\")+1));\n\t\t}\n\t\n\t\t/* 18.3.1.17 cols CT_Cols */\n\t\tvar columns = [];\n\t\tif(opts.cellStyles && data.indexOf(\"</cols>\")!==-1) {\n\t\t\t/* 18.3.1.13 col CT_Col */\n\t\t\tvar cols = data.match(colregex);\n\t\t\tparse_ws_xml_cols(columns, cols);\n\t\t}\n\t\n\t\tvar refguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\t\n\t\t/* 18.3.1.80 sheetData CT_SheetData ? */\n\t\tvar mtch=data.match(sheetdataregex);\n\t\tif(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess);\n\t\n\t\t/* 18.3.1.48 hyperlinks CT_Hyperlinks */\n\t\tif(data.indexOf(\"</hyperlinks>\")!==-1) parse_ws_xml_hlinks(s, data.match(hlinkregex), rels);\n\t\n\t\tif(!s[\"!ref\"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s[\"!ref\"] = encode_range(refguess);\n\t\tif(opts.sheetRows > 0 && s[\"!ref\"]) {\n\t\t\tvar tmpref = safe_decode_range(s[\"!ref\"]);\n\t\t\tif(opts.sheetRows < +tmpref.e.r) {\n\t\t\t\ttmpref.e.r = opts.sheetRows - 1;\n\t\t\t\tif(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n\t\t\t\tif(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n\t\t\t\tif(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n\t\t\t\tif(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n\t\t\t\ts[\"!fullref\"] = s[\"!ref\"];\n\t\t\t\ts[\"!ref\"] = encode_range(tmpref);\n\t\t\t}\n\t\t}\n\t\tif(mergecells.length > 0) s[\"!merges\"] = mergecells;\n\t\tif(columns.length > 0) s[\"!cols\"] = columns;\n\t\treturn s;\n\t}\n\t\n\tfunction write_ws_xml_merges(merges) {\n\t\tif(merges.length == 0) return \"\";\n\t\tvar o = '<mergeCells count=\"' + merges.length + '\">';\n\t\tfor(var i = 0; i != merges.length; ++i) o += '<mergeCell ref=\"' + encode_range(merges[i]) + '\"/>';\n\t\treturn o + '</mergeCells>';\n\t}\n\t\n\tfunction parse_ws_xml_hlinks(s, data, rels) {\n\t\tfor(var i = 0; i != data.length; ++i) {\n\t\t\tvar val = parsexmltag(data[i], true);\n\t\t\tif(!val.ref) return;\n\t\t\tvar rel = rels ? rels['!id'][val.id] : null;\n\t\t\tif(rel) {\n\t\t\t\tval.Target = rel.Target;\n\t\t\t\tif(val.location) val.Target += \"#\"+val.location;\n\t\t\t\tval.Rel = rel;\n\t\t\t} else {\n\t\t\t\tval.Target = val.location;\n\t\t\t\trel = {Target: val.location, TargetMode: 'Internal'};\n\t\t\t\tval.Rel = rel;\n\t\t\t}\n\t\t\tvar rng = safe_decode_range(val.ref);\n\t\t\tfor(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {\n\t\t\t\tvar addr = encode_cell({c:C,r:R});\n\t\t\t\tif(!s[addr]) s[addr] = {t:\"stub\",v:undefined};\n\t\t\t\ts[addr].l = val;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tfunction parse_ws_xml_cols(columns, cols) {\n\t\tvar seencol = false;\n\t\tfor(var coli = 0; coli != cols.length; ++coli) {\n\t\t\tvar coll = parsexmltag(cols[coli], true);\n\t\t\tvar colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;\n\t\t\tdelete coll.min; delete coll.max;\n\t\t\tif(!seencol && coll.width) { seencol = true; find_mdw(+coll.width, coll); }\n\t\t\tif(coll.width) {\n\t\t\t\tcoll.wpx = width2px(+coll.width);\n\t\t\t\tcoll.wch = px2char(coll.wpx);\n\t\t\t\tcoll.MDW = MDW;\n\t\t\t}\n\t\t\twhile(colm <= colM) columns[colm++] = coll;\n\t\t}\n\t}\n\t\n\tfunction write_ws_xml_cols(ws, cols) {\n\t\tvar o = [\"<cols>\"], col, width;\n\t\tfor(var i = 0; i != cols.length; ++i) {\n\t\t\tif(!(col = cols[i])) continue;\n\t\t\tvar p = {min:i+1,max:i+1};\n\t\t\t/* wch (chars), wpx (pixels) */\n\t\t\twidth = -1;\n\t\t\tif(col.wpx) width = px2char(col.wpx);\n\t\t\telse if(col.wch) width = col.wch;\n\t\t\tif(width > -1) { p.width = char2width(width); p.customWidth= 1; }\n\t\t\to[o.length] = (writextag('col', null, p));\n\t\t}\n\t\to[o.length] = \"</cols>\";\n\t\treturn o.join(\"\");\n\t}\n\t\n\tfunction write_ws_xml_cell(cell, ref, ws, opts, idx, wb) {\n\t\tif(cell.v === undefined) return \"\";\n\t\tvar vv = \"\";\n\t\tvar oldt = cell.t, oldv = cell.v;\n\t\tswitch(cell.t) {\n\t\t\tcase 'b': vv = cell.v ? \"1\" : \"0\"; break;\n\t\t\tcase 'n': vv = ''+cell.v; break;\n\t\t\tcase 'e': vv = BErr[cell.v]; break;\n\t\t\tcase 'd':\n\t\t\t\tif(opts.cellDates) vv = new Date(cell.v).toISOString();\n\t\t\t\telse {\n\t\t\t\t\tcell.t = 'n';\n\t\t\t\t\tvv = ''+(cell.v = datenum(cell.v));\n\t\t\t\t\tif(typeof cell.z === 'undefined') cell.z = SSF._table[14];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault: vv = cell.v; break;\n\t\t}\n\t\tvar v = writetag('v', escapexml(vv)), o = {r:ref};\n\t\t/* TODO: cell style */\n\t\tvar os = get_cell_style(opts.cellXfs, cell, opts);\n\t\tif(os !== 0) o.s = os;\n\t\tswitch(cell.t) {\n\t\t\tcase 'n': break;\n\t\t\tcase 'd': o.t = \"d\"; break;\n\t\t\tcase 'b': o.t = \"b\"; break;\n\t\t\tcase 'e': o.t = \"e\"; break;\n\t\t\tdefault:\n\t\t\t\tif(opts.bookSST) {\n\t\t\t\t\tv = writetag('v', ''+get_sst_id(opts.Strings, cell.v));\n\t\t\t\t\to.t = \"s\"; break;\n\t\t\t\t}\n\t\t\t\to.t = \"str\"; break;\n\t\t}\n\t\tif(cell.t != oldt) { cell.t = oldt; cell.v = oldv; }\n\t\treturn writextag('c', v, o);\n\t}\n\t\n\tvar parse_ws_xml_data = (function parse_ws_xml_data_factory() {\n\t\tvar cellregex = /<(?:\\w+:)?c[ >]/, rowregex = /<\\/(?:\\w+:)?row>/;\n\t\tvar rregex = /r=[\"']([^\"']*)[\"']/, isregex = /<is>([\\S\\s]*?)<\\/is>/;\n\t\tvar match_v = matchtag(\"v\"), match_f = matchtag(\"f\");\n\t\n\treturn function parse_ws_xml_data(sdata, s, opts, guess) {\n\t\tvar ri = 0, x = \"\", cells = [], cref = [], idx = 0, i=0, cc=0, d=\"\", p;\n\t\tvar tag, tagr = 0, tagc = 0;\n\t\tvar sstr;\n\t\tvar fmtid = 0, fillid = 0, do_format = Array.isArray(styles.CellXf), cf;\n\t\tfor(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {\n\t\t\tx = marr[mt].trim();\n\t\t\tvar xlen = x.length;\n\t\t\tif(xlen === 0) continue;\n\t\n\t\t\t/* 18.3.1.73 row CT_Row */\n\t\t\tfor(ri = 0; ri < xlen; ++ri) if(x.charCodeAt(ri) === 62) break; ++ri;\n\t\t\ttag = parsexmltag(x.substr(0,ri), true);\n\t\t\t/* SpreadSheetGear uses implicit r/c */\n\t\t\ttagr = typeof tag.r !== 'undefined' ? parseInt(tag.r, 10) : tagr+1; tagc = -1;\n\t\t\tif(opts.sheetRows && opts.sheetRows < tagr) continue;\n\t\t\tif(guess.s.r > tagr - 1) guess.s.r = tagr - 1;\n\t\t\tif(guess.e.r < tagr - 1) guess.e.r = tagr - 1;\n\t\n\t\t\t/* 18.3.1.4 c CT_Cell */\n\t\t\tcells = x.substr(ri).split(cellregex);\n\t\t\tfor(ri = typeof tag.r === 'undefined' ? 0 : 1; ri != cells.length; ++ri) {\n\t\t\t\tx = cells[ri].trim();\n\t\t\t\tif(x.length === 0) continue;\n\t\t\t\tcref = x.match(rregex); idx = ri; i=0; cc=0;\n\t\t\t\tx = \"<c \" + (x.substr(0,1)==\"<\"?\">\":\"\") + x;\n\t\t\t\tif(cref !== null && cref.length === 2) {\n\t\t\t\t\tidx = 0; d=cref[1];\n\t\t\t\t\tfor(i=0; i != d.length; ++i) {\n\t\t\t\t\t\tif((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\t\t\t\t\tidx = 26*idx + cc;\n\t\t\t\t\t}\n\t\t\t\t\t--idx;\n\t\t\t\t\ttagc = idx;\n\t\t\t\t} else ++tagc;\n\t\t\t\tfor(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;\n\t\t\t\ttag = parsexmltag(x.substr(0,i), true);\n\t\t\t\tif(!tag.r) tag.r = utils.encode_cell({r:tagr-1, c:tagc});\n\t\t\t\td = x.substr(i);\n\t\t\t\tp = {t:\"\"};\n\t\n\t\t\t\tif((cref=d.match(match_v))!== null && cref[1] !== '') p.v=unescapexml(cref[1]);\n\t\t\t\tif(opts.cellFormula && (cref=d.match(match_f))!== null) p.f=unescapexml(cref[1]);\n\t\n\t\t\t\t/* SCHEMA IS ACTUALLY INCORRECT HERE.  IF A CELL HAS NO T, EMIT \"\" */\n\t\t\t\tif(tag.t === undefined && p.v === undefined) {\n\t\t\t\t\tif(!opts.sheetStubs) continue;\n\t\t\t\t\tp.t = \"stub\";\n\t\t\t\t}\n\t\t\t\telse p.t = tag.t || \"n\";\n\t\t\t\tif(guess.s.c > idx) guess.s.c = idx;\n\t\t\t\tif(guess.e.c < idx) guess.e.c = idx;\n\t\t\t\t/* 18.18.11 t ST_CellType */\n\t\t\t\tswitch(p.t) {\n\t\t\t\t\tcase 'n': p.v = parseFloat(p.v); break;\n\t\t\t\t\tcase 's':\n\t\t\t\t\t\tsstr = strs[parseInt(p.v, 10)];\n\t\t\t\t\t\tp.v = sstr.t;\n\t\t\t\t\t\tp.r = sstr.r;\n\t\t\t\t\t\tif(opts.cellHTML) p.h = sstr.h;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'str':\n\t\t\t\t\t\tp.t = \"s\";\n\t\t\t\t\t\tp.v = (p.v!=null) ? utf8read(p.v) : '';\n\t\t\t\t\t\tif(opts.cellHTML) p.h = p.v;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'inlineStr':\n\t\t\t\t\t\tcref = d.match(isregex);\n\t\t\t\t\t\tp.t = 's';\n\t\t\t\t\t\tif(cref !== null) { sstr = parse_si(cref[1]); p.v = sstr.t; } else p.v = \"\";\n\t\t\t\t\t\tbreak; // inline string\n\t\t\t\t\tcase 'b': p.v = parsexmlbool(p.v); break;\n\t\t\t\t\tcase 'd':\n\t\t\t\t\t\tif(!opts.cellDates) { p.v = datenum(p.v); p.t = 'n'; }\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t/* error string in .v, number in .v */\n\t\t\t\t\tcase 'e': p.w = p.v; p.v = RBErr[p.v]; break;\n\t\t\t\t}\n\t            /* formatting */\n\t            fmtid = fillid = 0;\n\t            if(do_format && tag.s !== undefined) {\n\t              cf = styles.CellXf[tag.s];\n\t              if (opts.cellStyles) {\n\t                p.s = get_cell_style_csf(cf)\n\t              }\n\t              if(cf != null) {\n\t                if(cf.numFmtId != null) fmtid = cf.numFmtId;\n\t                if(opts.cellStyles && cf.fillId != null) fillid = cf.fillId;\n\t              }\n\t            }\n\t            safe_format(p, fmtid, fillid, opts);\n\t            s[tag.r] = p;\n\t      }\n\t\t}\n\t}; })();\n\t\n\tfunction write_ws_xml_data(ws, opts, idx, wb) {\n\t\tvar o = [], r = [], range = safe_decode_range(ws['!ref']), cell, ref, rr = \"\", cols = [], R, C;\n\t\tfor(C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);\n\t\tfor(R = range.s.r; R <= range.e.r; ++R) {\n\t\t\tr = [];\n\t\t\trr = encode_row(R);\n\t\t\tfor(C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t\tref = cols[C] + rr;\n\t\t\t\tif(ws[ref] === undefined) continue;\n\t\t\t\tif((cell = write_ws_xml_cell(ws[ref], ref, ws, opts, idx, wb)) != null) r.push(cell);\n\t\t\t}\n\t\t\tif(r.length > 0) o[o.length] = (writextag('row', r.join(\"\"), {r:rr}));\n\t\t}\n\t\treturn o.join(\"\");\n\t}\n\t\n\tvar WS_XML_ROOT = writextag('worksheet', null, {\n\t\t'xmlns': XMLNS.main[0],\n\t\t'xmlns:r': XMLNS.r\n\t});\n\t\n\tfunction write_ws_xml(idx, opts, wb) {\n\t\tvar o = [XML_HEADER, WS_XML_ROOT];\n\t\tvar s = wb.SheetNames[idx], sidx = 0, rdata = \"\";\n\t\tvar ws = wb.Sheets[s];\n\t\tif(ws === undefined) ws = {};\n\t\tvar ref = ws['!ref']; if(ref === undefined) ref = 'A1';\n\t\to[o.length] = (writextag('dimension', null, {'ref': ref}));\n\t\n\t\tif(ws['!cols'] !== undefined && ws['!cols'].length > 0) o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));\n\t\to[sidx = o.length] = '<sheetData/>';\n\t\tif(ws['!ref'] !== undefined) {\n\t\t\trdata = write_ws_xml_data(ws, opts, idx, wb);\n\t\t\tif(rdata.length > 0) o[o.length] = (rdata);\n\t\t}\n\t\tif(o.length>sidx+1) { o[o.length] = ('</sheetData>'); o[sidx]=o[sidx].replace(\"/>\",\">\"); }\n\t\n\t\tif(ws['!merges'] !== undefined && ws['!merges'].length > 0) o[o.length] = (write_ws_xml_merges(ws['!merges']));\n\t\n\t\tif(o.length>2) { o[o.length] = ('</worksheet>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t\n\t/* [MS-XLSB] 2.4.718 BrtRowHdr */\n\tfunction parse_BrtRowHdr(data, length) {\n\t\tvar z = [];\n\t\tz.r = data.read_shift(4);\n\t\tdata.l += length-4;\n\t\treturn z;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.812 BrtWsDim */\n\tvar parse_BrtWsDim = parse_UncheckedRfX;\n\tvar write_BrtWsDim = write_UncheckedRfX;\n\t\n\t/* [MS-XLSB] 2.4.815 BrtWsProp */\n\tfunction parse_BrtWsProp(data, length) {\n\t\tvar z = {};\n\t\t/* TODO: pull flags */\n\t\tdata.l += 19;\n\t\tz.name = parse_XLSBCodeName(data, length - 19);\n\t\treturn z;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.303 BrtCellBlank */\n\tfunction parse_BrtCellBlank(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\treturn [cell];\n\t}\n\tfunction write_BrtCellBlank(cell, val, o) {\n\t\tif(o == null) o = new_buf(8);\n\t\treturn write_XLSBCell(val, o);\n\t}\n\t\n\t\n\t/* [MS-XLSB] 2.4.304 BrtCellBool */\n\tfunction parse_BrtCellBool(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar fBool = data.read_shift(1);\n\t\treturn [cell, fBool, 'b'];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.305 BrtCellError */\n\tfunction parse_BrtCellError(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar fBool = data.read_shift(1);\n\t\treturn [cell, fBool, 'e'];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.308 BrtCellIsst */\n\tfunction parse_BrtCellIsst(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar isst = data.read_shift(4);\n\t\treturn [cell, isst, 's'];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.310 BrtCellReal */\n\tfunction parse_BrtCellReal(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = parse_Xnum(data);\n\t\treturn [cell, value, 'n'];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.311 BrtCellRk */\n\tfunction parse_BrtCellRk(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = parse_RkNumber(data);\n\t\treturn [cell, value, 'n'];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.314 BrtCellSt */\n\tfunction parse_BrtCellSt(data, length) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = parse_XLWideString(data);\n\t\treturn [cell, value, 'str'];\n\t}\n\t\n\t/* [MS-XLSB] 2.4.647 BrtFmlaBool */\n\tfunction parse_BrtFmlaBool(data, length, opts) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = data.read_shift(1);\n\t\tvar o = [cell, value, 'b'];\n\t\tif(opts.cellFormula) {\n\t\t\tvar formula = parse_XLSBCellParsedFormula(data, length-9);\n\t\t\to[3] = \"\"; /* TODO */\n\t\t}\n\t\telse data.l += length-9;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.648 BrtFmlaError */\n\tfunction parse_BrtFmlaError(data, length, opts) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = data.read_shift(1);\n\t\tvar o = [cell, value, 'e'];\n\t\tif(opts.cellFormula) {\n\t\t\tvar formula = parse_XLSBCellParsedFormula(data, length-9);\n\t\t\to[3] = \"\"; /* TODO */\n\t\t}\n\t\telse data.l += length-9;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.649 BrtFmlaNum */\n\tfunction parse_BrtFmlaNum(data, length, opts) {\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = parse_Xnum(data);\n\t\tvar o = [cell, value, 'n'];\n\t\tif(opts.cellFormula) {\n\t\t\tvar formula = parse_XLSBCellParsedFormula(data, length - 16);\n\t\t\to[3] = \"\"; /* TODO */\n\t\t}\n\t\telse data.l += length-16;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.650 BrtFmlaString */\n\tfunction parse_BrtFmlaString(data, length, opts) {\n\t\tvar start = data.l;\n\t\tvar cell = parse_XLSBCell(data);\n\t\tvar value = parse_XLWideString(data);\n\t\tvar o = [cell, value, 'str'];\n\t\tif(opts.cellFormula) {\n\t\t\tvar formula = parse_XLSBCellParsedFormula(data, start + length - data.l);\n\t\t}\n\t\telse data.l = start + length;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.676 BrtMergeCell */\n\tvar parse_BrtMergeCell = parse_UncheckedRfX;\n\t\n\t/* [MS-XLSB] 2.4.656 BrtHLink */\n\tfunction parse_BrtHLink(data, length, opts) {\n\t\tvar end = data.l + length;\n\t\tvar rfx = parse_UncheckedRfX(data, 16);\n\t\tvar relId = parse_XLNullableWideString(data);\n\t\tvar loc = parse_XLWideString(data);\n\t\tvar tooltip = parse_XLWideString(data);\n\t\tvar display = parse_XLWideString(data);\n\t\tdata.l = end;\n\t\treturn {rfx:rfx, relId:relId, loc:loc, tooltip:tooltip, display:display};\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.61 Worksheet */\n\tfunction parse_ws_bin(data, opts, rels) {\n\t\tif(!data) return data;\n\t\tif(!rels) rels = {'!id':{}};\n\t\tvar s = {};\n\t\n\t\tvar ref;\n\t\tvar refguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\t\n\t\tvar pass = false, end = false;\n\t\tvar row, p, cf, R, C, addr, sstr, rr;\n\t\tvar mergecells = [];\n\t\trecordhopper(data, function ws_parse(val, R) {\n\t\t\tif(end) return;\n\t\t\tswitch(R.n) {\n\t\t\t\tcase 'BrtWsDim': ref = val; break;\n\t\t\t\tcase 'BrtRowHdr':\n\t\t\t\t\trow = val;\n\t\t\t\t\tif(opts.sheetRows && opts.sheetRows <= row.r) end=true;\n\t\t\t\t\trr = encode_row(row.r);\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'BrtFmlaBool':\n\t\t\t\tcase 'BrtFmlaError':\n\t\t\t\tcase 'BrtFmlaNum':\n\t\t\t\tcase 'BrtFmlaString':\n\t\t\t\tcase 'BrtCellBool':\n\t\t\t\tcase 'BrtCellError':\n\t\t\t\tcase 'BrtCellIsst':\n\t\t\t\tcase 'BrtCellReal':\n\t\t\t\tcase 'BrtCellRk':\n\t\t\t\tcase 'BrtCellSt':\n\t\t\t\t\tp = {t:val[2]};\n\t\t\t\t\tswitch(val[2]) {\n\t\t\t\t\t\tcase 'n': p.v = val[1]; break;\n\t\t\t\t\t\tcase 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;\n\t\t\t\t\t\tcase 'b': p.v = val[1] ? true : false; break;\n\t\t\t\t\t\tcase 'e': p.v = val[1]; p.w = BErr[p.v]; break;\n\t\t\t\t\t\tcase 'str': p.t = 's'; p.v = utf8read(val[1]); break;\n\t\t\t\t\t}\n\t\t\t\t\tif(opts.cellFormula && val.length > 3) p.f = val[3];\n\t\t\t\t\tif((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.ifmt,null,opts);\n\t\t\t\t\ts[encode_col(C=val[0].c) + rr] = p;\n\t\t\t\t\tif(refguess.s.r > row.r) refguess.s.r = row.r;\n\t\t\t\t\tif(refguess.s.c > C) refguess.s.c = C;\n\t\t\t\t\tif(refguess.e.r < row.r) refguess.e.r = row.r;\n\t\t\t\t\tif(refguess.e.c < C) refguess.e.c = C;\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'BrtCellBlank': if(!opts.sheetStubs) break;\n\t\t\t\t\tp = {t:'s',v:undefined};\n\t\t\t\t\ts[encode_col(C=val[0].c) + rr] = p;\n\t\t\t\t\tif(refguess.s.r > row.r) refguess.s.r = row.r;\n\t\t\t\t\tif(refguess.s.c > C) refguess.s.c = C;\n\t\t\t\t\tif(refguess.e.r < row.r) refguess.e.r = row.r;\n\t\t\t\t\tif(refguess.e.c < C) refguess.e.c = C;\n\t\t\t\t\tbreak;\n\t\n\t\t\t\t/* Merge Cells */\n\t\t\t\tcase 'BrtBeginMergeCells': break;\n\t\t\t\tcase 'BrtEndMergeCells': break;\n\t\t\t\tcase 'BrtMergeCell': mergecells.push(val); break;\n\t\n\t\t\t\tcase 'BrtHLink':\n\t\t\t\t\tvar rel = rels['!id'][val.relId];\n\t\t\t\t\tif(rel) {\n\t\t\t\t\t\tval.Target = rel.Target;\n\t\t\t\t\t\tif(val.loc) val.Target += \"#\"+val.loc;\n\t\t\t\t\t\tval.Rel = rel;\n\t\t\t\t\t}\n\t\t\t\t\tfor(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {\n\t\t\t\t\t\taddr = encode_cell({c:C,r:R});\n\t\t\t\t\t\tif(!s[addr]) s[addr] = {t:'s',v:undefined};\n\t\t\t\t\t\ts[addr].l = val;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\n\t\t\t\tcase 'BrtArrFmla': break; // TODO\n\t\t\t\tcase 'BrtShrFmla': break; // TODO\n\t\t\t\tcase 'BrtBeginSheet': break;\n\t\t\t\tcase 'BrtWsProp': break; // TODO\n\t\t\t\tcase 'BrtSheetCalcProp': break; // TODO\n\t\t\t\tcase 'BrtBeginWsViews': break; // TODO\n\t\t\t\tcase 'BrtBeginWsView': break; // TODO\n\t\t\t\tcase 'BrtPane': break; // TODO\n\t\t\t\tcase 'BrtSel': break; // TODO\n\t\t\t\tcase 'BrtEndWsView': break; // TODO\n\t\t\t\tcase 'BrtEndWsViews': break; // TODO\n\t\t\t\tcase 'BrtACBegin': break; // TODO\n\t\t\t\tcase 'BrtRwDescent': break; // TODO\n\t\t\t\tcase 'BrtACEnd': break; // TODO\n\t\t\t\tcase 'BrtWsFmtInfoEx14': break; // TODO\n\t\t\t\tcase 'BrtWsFmtInfo': break; // TODO\n\t\t\t\tcase 'BrtBeginColInfos': break; // TODO\n\t\t\t\tcase 'BrtColInfo': break; // TODO\n\t\t\t\tcase 'BrtEndColInfos': break; // TODO\n\t\t\t\tcase 'BrtBeginSheetData': break; // TODO\n\t\t\t\tcase 'BrtEndSheetData': break; // TODO\n\t\t\t\tcase 'BrtSheetProtection': break; // TODO\n\t\t\t\tcase 'BrtPrintOptions': break; // TODO\n\t\t\t\tcase 'BrtMargins': break; // TODO\n\t\t\t\tcase 'BrtPageSetup': break; // TODO\n\t\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\t\tcase 'BrtEndSheet': break; // TODO\n\t\t\t\tcase 'BrtDrawing': break; // TODO\n\t\t\t\tcase 'BrtLegacyDrawing': break; // TODO\n\t\t\t\tcase 'BrtLegacyDrawingHF': break; // TODO\n\t\t\t\tcase 'BrtPhoneticInfo': break; // TODO\n\t\t\t\tcase 'BrtBeginHeaderFooter': break; // TODO\n\t\t\t\tcase 'BrtEndHeaderFooter': break; // TODO\n\t\t\t\tcase 'BrtBrk': break; // TODO\n\t\t\t\tcase 'BrtBeginRwBrk': break; // TODO\n\t\t\t\tcase 'BrtEndRwBrk': break; // TODO\n\t\t\t\tcase 'BrtBeginColBrk': break; // TODO\n\t\t\t\tcase 'BrtEndColBrk': break; // TODO\n\t\t\t\tcase 'BrtBeginUserShViews': break; // TODO\n\t\t\t\tcase 'BrtBeginUserShView': break; // TODO\n\t\t\t\tcase 'BrtEndUserShView': break; // TODO\n\t\t\t\tcase 'BrtEndUserShViews': break; // TODO\n\t\t\t\tcase 'BrtBkHim': break; // TODO\n\t\t\t\tcase 'BrtBeginOleObjects': break; // TODO\n\t\t\t\tcase 'BrtOleObject': break; // TODO\n\t\t\t\tcase 'BrtEndOleObjects': break; // TODO\n\t\t\t\tcase 'BrtBeginListParts': break; // TODO\n\t\t\t\tcase 'BrtListPart': break; // TODO\n\t\t\t\tcase 'BrtEndListParts': break; // TODO\n\t\t\t\tcase 'BrtBeginSortState': break; // TODO\n\t\t\t\tcase 'BrtBeginSortCond': break; // TODO\n\t\t\t\tcase 'BrtEndSortCond': break; // TODO\n\t\t\t\tcase 'BrtEndSortState': break; // TODO\n\t\t\t\tcase 'BrtBeginConditionalFormatting': break; // TODO\n\t\t\t\tcase 'BrtEndConditionalFormatting': break; // TODO\n\t\t\t\tcase 'BrtBeginCFRule': break; // TODO\n\t\t\t\tcase 'BrtEndCFRule': break; // TODO\n\t\t\t\tcase 'BrtBeginDVals': break; // TODO\n\t\t\t\tcase 'BrtDVal': break; // TODO\n\t\t\t\tcase 'BrtEndDVals': break; // TODO\n\t\t\t\tcase 'BrtRangeProtection': break; // TODO\n\t\t\t\tcase 'BrtBeginDCon': break; // TODO\n\t\t\t\tcase 'BrtEndDCon': break; // TODO\n\t\t\t\tcase 'BrtBeginDRefs': break;\n\t\t\t\tcase 'BrtDRef': break;\n\t\t\t\tcase 'BrtEndDRefs': break;\n\t\n\t\t\t\t/* ActiveX */\n\t\t\t\tcase 'BrtBeginActiveXControls': break;\n\t\t\t\tcase 'BrtActiveX': break;\n\t\t\t\tcase 'BrtEndActiveXControls': break;\n\t\n\t\t\t\t/* AutoFilter */\n\t\t\t\tcase 'BrtBeginAFilter': break;\n\t\t\t\tcase 'BrtEndAFilter': break;\n\t\t\t\tcase 'BrtBeginFilterColumn': break;\n\t\t\t\tcase 'BrtBeginFilters': break;\n\t\t\t\tcase 'BrtFilter': break;\n\t\t\t\tcase 'BrtEndFilters': break;\n\t\t\t\tcase 'BrtEndFilterColumn': break;\n\t\t\t\tcase 'BrtDynamicFilter': break;\n\t\t\t\tcase 'BrtTop10Filter': break;\n\t\t\t\tcase 'BrtBeginCustomFilters': break;\n\t\t\t\tcase 'BrtCustomFilter': break;\n\t\t\t\tcase 'BrtEndCustomFilters': break;\n\t\n\t\t\t\t/* Smart Tags */\n\t\t\t\tcase 'BrtBeginSmartTags': break;\n\t\t\t\tcase 'BrtBeginCellSmartTags': break;\n\t\t\t\tcase 'BrtBeginCellSmartTag': break;\n\t\t\t\tcase 'BrtCellSmartTagProperty': break;\n\t\t\t\tcase 'BrtEndCellSmartTag': break;\n\t\t\t\tcase 'BrtEndCellSmartTags': break;\n\t\t\t\tcase 'BrtEndSmartTags': break;\n\t\n\t\t\t\t/* Cell Watch */\n\t\t\t\tcase 'BrtBeginCellWatches': break;\n\t\t\t\tcase 'BrtCellWatch': break;\n\t\t\t\tcase 'BrtEndCellWatches': break;\n\t\n\t\t\t\t/* Table */\n\t\t\t\tcase 'BrtTable': break;\n\t\n\t\t\t\t/* Ignore Cell Errors */\n\t\t\t\tcase 'BrtBeginCellIgnoreECs': break;\n\t\t\t\tcase 'BrtCellIgnoreEC': break;\n\t\t\t\tcase 'BrtEndCellIgnoreECs': break;\n\t\n\t\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + R.n);\n\t\t\t}\n\t\t}, opts);\n\t\tif(!s[\"!ref\"] && (refguess.s.r < 1000000 || ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)) s[\"!ref\"] = encode_range(ref);\n\t\tif(opts.sheetRows && s[\"!ref\"]) {\n\t\t\tvar tmpref = safe_decode_range(s[\"!ref\"]);\n\t\t\tif(opts.sheetRows < +tmpref.e.r) {\n\t\t\t\ttmpref.e.r = opts.sheetRows - 1;\n\t\t\t\tif(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n\t\t\t\tif(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n\t\t\t\tif(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n\t\t\t\tif(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n\t\t\t\ts[\"!fullref\"] = s[\"!ref\"];\n\t\t\t\ts[\"!ref\"] = encode_range(tmpref);\n\t\t\t}\n\t\t}\n\t\tif(mergecells.length > 0) s[\"!merges\"] = mergecells;\n\t\treturn s;\n\t}\n\t\n\t/* TODO: something useful -- this is a stub */\n\tfunction write_ws_bin_cell(ba, cell, R, C, opts) {\n\t\tif(cell.v === undefined) return \"\";\n\t\tvar vv = \"\";\n\t\tswitch(cell.t) {\n\t\t\tcase 'b': vv = cell.v ? \"1\" : \"0\"; break;\n\t\t\tcase 'n': case 'e': vv = ''+cell.v; break;\n\t\t\tdefault: vv = cell.v; break;\n\t\t}\n\t\tvar o = {r:R, c:C};\n\t\t/* TODO: cell style */\n\t\to.s = get_cell_style(opts.cellXfs, cell, opts);\n\t\tswitch(cell.t) {\n\t\t\tcase 's': case 'str':\n\t\t\t\tif(opts.bookSST) {\n\t\t\t\t\tvv = get_sst_id(opts.Strings, cell.v);\n\t\t\t\t\to.t = \"s\"; break;\n\t\t\t\t}\n\t\t\t\to.t = \"str\"; break;\n\t\t\tcase 'n': break;\n\t\t\tcase 'b': o.t = \"b\"; break;\n\t\t\tcase 'e': o.t = \"e\"; break;\n\t\t}\n\t\twrite_record(ba, \"BrtCellBlank\", write_BrtCellBlank(cell, o));\n\t}\n\t\n\tfunction write_CELLTABLE(ba, ws, idx, opts, wb) {\n\t\tvar range = safe_decode_range(ws['!ref'] || \"A1\"), ref, rr = \"\", cols = [];\n\t\twrite_record(ba, 'BrtBeginSheetData');\n\t\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\t\trr = encode_row(R);\n\t\t\t/* [ACCELLTABLE] */\n\t\t\t/* BrtRowHdr */\n\t\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t\t/* *16384CELL */\n\t\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\t\tref = cols[C] + rr;\n\t\t\t\tif(!ws[ref]) continue;\n\t\t\t\t/* write cell */\n\t\t\t\twrite_ws_bin_cell(ba, ws[ref], R, C, opts);\n\t\t\t}\n\t\t}\n\t\twrite_record(ba, 'BrtEndSheetData');\n\t}\n\t\n\tfunction write_ws_bin(idx, opts, wb) {\n\t\tvar ba = buf_array();\n\t\tvar s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};\n\t\tvar r = safe_decode_range(ws['!ref'] || \"A1\");\n\t\twrite_record(ba, \"BrtBeginSheet\");\n\t\t/* [BrtWsProp] */\n\t\twrite_record(ba, \"BrtWsDim\", write_BrtWsDim(r));\n\t\t/* [WSVIEWS2] */\n\t\t/* [WSFMTINFO] */\n\t\t/* *COLINFOS */\n\t\twrite_CELLTABLE(ba, ws, idx, opts, wb);\n\t\t/* [BrtSheetCalcProp] */\n\t\t/* [[BrtSheetProtectionIso] BrtSheetProtection] */\n\t\t/* *([BrtRangeProtectionIso] BrtRangeProtection) */\n\t\t/* [SCENMAN] */\n\t\t/* [AUTOFILTER] */\n\t\t/* [SORTSTATE] */\n\t\t/* [DCON] */\n\t\t/* [USERSHVIEWS] */\n\t\t/* [MERGECELLS] */\n\t\t/* [BrtPhoneticInfo] */\n\t\t/* *CONDITIONALFORMATTING */\n\t\t/* [DVALS] */\n\t\t/* *BrtHLink */\n\t\t/* [BrtPrintOptions] */\n\t\t/* [BrtMargins] */\n\t\t/* [BrtPageSetup] */\n\t\t/* [HEADERFOOTER] */\n\t\t/* [RWBRK] */\n\t\t/* [COLBRK] */\n\t\t/* *BrtBigName */\n\t\t/* [CELLWATCHES] */\n\t\t/* [IGNOREECS] */\n\t\t/* [SMARTTAGS] */\n\t\t/* [BrtDrawing] */\n\t\t/* [BrtLegacyDrawing] */\n\t\t/* [BrtLegacyDrawingHF] */\n\t\t/* [BrtBkHim] */\n\t\t/* [OLEOBJECTS] */\n\t\t/* [ACTIVEXCONTROLS] */\n\t\t/* [WEBPUBITEMS] */\n\t\t/* [LISTPARTS] */\n\t\t/* FRTWORKSHEET */\n\t\twrite_record(ba, \"BrtEndSheet\");\n\t\treturn ba.end();\n\t}\n\t/* 18.2.28 (CT_WorkbookProtection) Defaults */\n\tvar WBPropsDef = [\n\t\t['allowRefreshQuery', '0'],\n\t\t['autoCompressPictures', '1'],\n\t\t['backupFile', '0'],\n\t\t['checkCompatibility', '0'],\n\t\t['codeName', ''],\n\t\t['date1904', '0'],\n\t\t['dateCompatibility', '1'],\n\t\t//['defaultThemeVersion', '0'],\n\t\t['filterPrivacy', '0'],\n\t\t['hidePivotFieldList', '0'],\n\t\t['promptedSolutions', '0'],\n\t\t['publishItems', '0'],\n\t\t['refreshAllConnections', false],\n\t\t['saveExternalLinkValues', '1'],\n\t\t['showBorderUnselectedTables', '1'],\n\t\t['showInkAnnotation', '1'],\n\t\t['showObjects', 'all'],\n\t\t['showPivotChartFilter', '0']\n\t\t//['updateLinks', 'userSet']\n\t];\n\t\n\t/* 18.2.30 (CT_BookView) Defaults */\n\tvar WBViewDef = [\n\t\t['activeTab', '0'],\n\t\t['autoFilterDateGrouping', '1'],\n\t\t['firstSheet', '0'],\n\t\t['minimized', '0'],\n\t\t['showHorizontalScroll', '1'],\n\t\t['showSheetTabs', '1'],\n\t\t['showVerticalScroll', '1'],\n\t\t['tabRatio', '600'],\n\t\t['visibility', 'visible']\n\t\t//window{Height,Width}, {x,y}Window\n\t];\n\t\n\t/* 18.2.19 (CT_Sheet) Defaults */\n\tvar SheetDef = [\n\t\t['state', 'visible']\n\t];\n\t\n\t/* 18.2.2  (CT_CalcPr) Defaults */\n\tvar CalcPrDef = [\n\t\t['calcCompleted', 'true'],\n\t\t['calcMode', 'auto'],\n\t\t['calcOnSave', 'true'],\n\t\t['concurrentCalc', 'true'],\n\t\t['fullCalcOnLoad', 'false'],\n\t\t['fullPrecision', 'true'],\n\t\t['iterate', 'false'],\n\t\t['iterateCount', '100'],\n\t\t['iterateDelta', '0.001'],\n\t\t['refMode', 'A1']\n\t];\n\t\n\t/* 18.2.3 (CT_CustomWorkbookView) Defaults */\n\tvar CustomWBViewDef = [\n\t\t['autoUpdate', 'false'],\n\t\t['changesSavedWin', 'false'],\n\t\t['includeHiddenRowCol', 'true'],\n\t\t['includePrintSettings', 'true'],\n\t\t['maximized', 'false'],\n\t\t['minimized', 'false'],\n\t\t['onlySync', 'false'],\n\t\t['personalView', 'false'],\n\t\t['showComments', 'commIndicator'],\n\t\t['showFormulaBar', 'true'],\n\t\t['showHorizontalScroll', 'true'],\n\t\t['showObjects', 'all'],\n\t\t['showSheetTabs', 'true'],\n\t\t['showStatusbar', 'true'],\n\t\t['showVerticalScroll', 'true'],\n\t\t['tabRatio', '600'],\n\t\t['xWindow', '0'],\n\t\t['yWindow', '0']\n\t];\n\t\n\tfunction push_defaults_array(target, defaults) {\n\t\tfor(var j = 0; j != target.length; ++j) { var w = target[j];\n\t\t\tfor(var i=0; i != defaults.length; ++i) { var z = defaults[i];\n\t\t\t\tif(w[z[0]] == null) w[z[0]] = z[1];\n\t\t\t}\n\t\t}\n\t}\n\tfunction push_defaults(target, defaults) {\n\t\tfor(var i = 0; i != defaults.length; ++i) { var z = defaults[i];\n\t\t\tif(target[z[0]] == null) target[z[0]] = z[1];\n\t\t}\n\t}\n\t\n\tfunction parse_wb_defaults(wb) {\n\t\tpush_defaults(wb.WBProps, WBPropsDef);\n\t\tpush_defaults(wb.CalcPr, CalcPrDef);\n\t\n\t\tpush_defaults_array(wb.WBView, WBViewDef);\n\t\tpush_defaults_array(wb.Sheets, SheetDef);\n\t\n\t\t_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, 'date1904');\n\t}\n\t/* 18.2 Workbook */\n\tvar wbnsregex = /<\\w+:workbook/;\n\tfunction parse_wb_xml(data, opts) {\n\t\tvar wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: \"\" };\n\t\tvar pass = false, xmlns = \"xmlns\";\n\t\tdata.match(tagregex).forEach(function xml_wb(x) {\n\t\t\tvar y = parsexmltag(x);\n\t\t\tswitch(strip_ns(y[0])) {\n\t\t\t\tcase '<?xml': break;\n\t\n\t\t\t\t/* 18.2.27 workbook CT_Workbook 1 */\n\t\t\t\tcase '<workbook':\n\t\t\t\t\tif(x.match(wbnsregex)) xmlns = \"xmlns\" + x.match(/<(\\w+):/)[1];\n\t\t\t\t\twb.xmlns = y[xmlns];\n\t\t\t\t\tbreak;\n\t\t\t\tcase '</workbook>': break;\n\t\n\t\t\t\t/* 18.2.13 fileVersion CT_FileVersion ? */\n\t\t\t\tcase '<fileVersion': delete y[0]; wb.AppVersion = y; break;\n\t\t\t\tcase '<fileVersion/>': break;\n\t\n\t\t\t\t/* 18.2.12 fileSharing CT_FileSharing ? */\n\t\t\t\tcase '<fileSharing': case '<fileSharing/>': break;\n\t\n\t\t\t\t/* 18.2.28 workbookPr CT_WorkbookPr ? */\n\t\t\t\tcase '<workbookPr': delete y[0]; wb.WBProps = y; break;\n\t\t\t\tcase '<workbookPr/>': delete y[0]; wb.WBProps = y; break;\n\t\n\t\t\t\t/* 18.2.29 workbookProtection CT_WorkbookProtection ? */\n\t\t\t\tcase '<workbookProtection': break;\n\t\t\t\tcase '<workbookProtection/>': break;\n\t\n\t\t\t\t/* 18.2.1  bookViews CT_BookViews ? */\n\t\t\t\tcase '<bookViews>': case '</bookViews>': break;\n\t\t\t\t/* 18.2.30   workbookView CT_BookView + */\n\t\t\t\tcase '<workbookView': delete y[0]; wb.WBView.push(y); break;\n\t\n\t\t\t\t/* 18.2.20 sheets CT_Sheets 1 */\n\t\t\t\tcase '<sheets>': case '</sheets>': break; // aggregate sheet\n\t\t\t\t/* 18.2.19   sheet CT_Sheet + */\n\t\t\t\tcase '<sheet': delete y[0]; y.name = utf8read(y.name); wb.Sheets.push(y); break;\n\t\n\t\t\t\t/* 18.2.15 functionGroups CT_FunctionGroups ? */\n\t\t\t\tcase '<functionGroups': case '<functionGroups/>': break;\n\t\t\t\t/* 18.2.14   functionGroup CT_FunctionGroup + */\n\t\t\t\tcase '<functionGroup': break;\n\t\n\t\t\t\t/* 18.2.9  externalReferences CT_ExternalReferences ? */\n\t\t\t\tcase '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;\n\t\t\t\t/* 18.2.8    externalReference CT_ExternalReference + */\n\t\t\t\tcase '<externalReference': break;\n\t\n\t\t\t\t/* 18.2.6  definedNames CT_DefinedNames ? */\n\t\t\t\tcase '<definedNames/>': break;\n\t\t\t\tcase '<definedNames>': case '<definedNames': pass=true; break;\n\t\t\t\tcase '</definedNames>': pass=false; break;\n\t\t\t\t/* 18.2.5    definedName CT_DefinedName + */\n\t\t\t\tcase '<definedName': case '<definedName/>': case '</definedName>': break;\n\t\n\t\t\t\t/* 18.2.2  calcPr CT_CalcPr ? */\n\t\t\t\tcase '<calcPr': delete y[0]; wb.CalcPr = y; break;\n\t\t\t\tcase '<calcPr/>': delete y[0]; wb.CalcPr = y; break;\n\t\n\t\t\t\t/* 18.2.16 oleSize CT_OleSize ? (ref required) */\n\t\t\t\tcase '<oleSize': break;\n\t\n\t\t\t\t/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */\n\t\t\t\tcase '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;\n\t\t\t\t/* 18.2.3    customWorkbookView CT_CustomWorkbookView + */\n\t\t\t\tcase '<customWorkbookView': case '</customWorkbookView>': break;\n\t\n\t\t\t\t/* 18.2.18 pivotCaches CT_PivotCaches ? */\n\t\t\t\tcase '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;\n\t\t\t\t/* 18.2.17 pivotCache CT_PivotCache ? */\n\t\t\t\tcase '<pivotCache': break;\n\t\n\t\t\t\t/* 18.2.21 smartTagPr CT_SmartTagPr ? */\n\t\t\t\tcase '<smartTagPr': case '<smartTagPr/>': break;\n\t\n\t\t\t\t/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */\n\t\t\t\tcase '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;\n\t\t\t\t/* 18.2.22   smartTagType CT_SmartTagType ? */\n\t\t\t\tcase '<smartTagType': break;\n\t\n\t\t\t\t/* 18.2.24 webPublishing CT_WebPublishing ? */\n\t\t\t\tcase '<webPublishing': case '<webPublishing/>': break;\n\t\n\t\t\t\t/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */\n\t\t\t\tcase '<fileRecoveryPr': case '<fileRecoveryPr/>': break;\n\t\n\t\t\t\t/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */\n\t\t\t\tcase '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;\n\t\t\t\t/* 18.2.25 webPublishObject CT_WebPublishObject ? */\n\t\t\t\tcase '<webPublishObject': break;\n\t\n\t\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\t\tcase '<extLst>': case '</extLst>': case '<extLst/>': break;\n\t\t\t\t/* 18.2.7    ext CT_Extension + */\n\t\t\t\tcase '<ext': pass=true; break; //TODO: check with versions of excel\n\t\t\t\tcase '</ext>': pass=false; break;\n\t\n\t\t\t\t/* Others */\n\t\t\t\tcase '<ArchID': break;\n\t\t\t\tcase '<AlternateContent': pass=true; break;\n\t\t\t\tcase '</AlternateContent>': pass=false; break;\n\t\n\t\t\t\tdefault: if(!pass && opts.WTF) throw 'unrecognized ' + y[0] + ' in workbook';\n\t\t\t}\n\t\t});\n\t\tif(XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error(\"Unknown Namespace: \" + wb.xmlns);\n\t\n\t\tparse_wb_defaults(wb);\n\t\n\t\treturn wb;\n\t}\n\t\n\tvar WB_XML_ROOT = writextag('workbook', null, {\n\t\t'xmlns': XMLNS.main[0],\n\t\t//'xmlns:mx': XMLNS.mx,\n\t\t//'xmlns:s': XMLNS.main[0],\n\t\t'xmlns:r': XMLNS.r\n\t});\n\t\n\tfunction safe1904(wb) {\n\t\t/* TODO: store date1904 somewhere else */\n\t\ttry { return parsexmlbool(wb.Workbook.WBProps.date1904) ? \"true\" : \"false\"; } catch(e) { return \"false\"; }\n\t}\n\t\n\tfunction write_wb_xml(wb, opts) {\n\t\tvar o = [XML_HEADER];\n\t\to[o.length] = WB_XML_ROOT;\n\t\to[o.length] = (writextag('workbookPr', null, {date1904:safe1904(wb)}));\n\t\to[o.length] = \"<sheets>\";\n\t\tfor(var i = 0; i != wb.SheetNames.length; ++i)\n\t\t\to[o.length] = (writextag('sheet',null,{name:wb.SheetNames[i].substr(0,31), sheetId:\"\"+(i+1), \"r:id\":\"rId\"+(i+1)}));\n\t\to[o.length] = \"</sheets>\";\n\t\tif(o.length>2){ o[o.length] = '</workbook>'; o[1]=o[1].replace(\"/>\",\">\"); }\n\t\treturn o.join(\"\");\n\t}\n\t/* [MS-XLSB] 2.4.301 BrtBundleSh */\n\tfunction parse_BrtBundleSh(data, length) {\n\t\tvar z = {};\n\t\tz.hsState = data.read_shift(4); //ST_SheetState\n\t\tz.iTabID = data.read_shift(4);\n\t\tz.strRelID = parse_RelID(data,length-8);\n\t\tz.name = parse_XLWideString(data);\n\t\treturn z;\n\t}\n\tfunction write_BrtBundleSh(data, o) {\n\t\tif(!o) o = new_buf(127);\n\t\to.write_shift(4, data.hsState);\n\t\to.write_shift(4, data.iTabID);\n\t\twrite_RelID(data.strRelID, o);\n\t\twrite_XLWideString(data.name.substr(0,31), o);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.4.807 BrtWbProp */\n\tfunction parse_BrtWbProp(data, length) {\n\t\tdata.read_shift(4);\n\t\tvar dwThemeVersion = data.read_shift(4);\n\t\tvar strName = (length > 8) ? parse_XLWideString(data) : \"\";\n\t\treturn [dwThemeVersion, strName];\n\t}\n\tfunction write_BrtWbProp(data, o) {\n\t\tif(!o) o = new_buf(8);\n\t\to.write_shift(4, 0);\n\t\to.write_shift(4, 0);\n\t\treturn o;\n\t}\n\t\n\tfunction parse_BrtFRTArchID$(data, length) {\n\t\tvar o = {};\n\t\tdata.read_shift(4);\n\t\to.ArchID = data.read_shift(4);\n\t\tdata.l += length - 8;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.60 Workbook */\n\tfunction parse_wb_bin(data, opts) {\n\t\tvar wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: \"\" };\n\t\tvar pass = false, z;\n\t\n\t\trecordhopper(data, function hopper_wb(val, R) {\n\t\t\tswitch(R.n) {\n\t\t\t\tcase 'BrtBundleSh': wb.Sheets.push(val); break;\n\t\n\t\t\t\tcase 'BrtBeginBook': break;\n\t\t\t\tcase 'BrtFileVersion': break;\n\t\t\t\tcase 'BrtWbProp': break;\n\t\t\t\tcase 'BrtACBegin': break;\n\t\t\t\tcase 'BrtAbsPath15': break;\n\t\t\t\tcase 'BrtACEnd': break;\n\t\t\t\tcase 'BrtWbFactoid': break;\n\t\t\t\t/*case 'BrtBookProtectionIso': break;*/\n\t\t\t\tcase 'BrtBookProtection': break;\n\t\t\t\tcase 'BrtBeginBookViews': break;\n\t\t\t\tcase 'BrtBookView': break;\n\t\t\t\tcase 'BrtEndBookViews': break;\n\t\t\t\tcase 'BrtBeginBundleShs': break;\n\t\t\t\tcase 'BrtEndBundleShs': break;\n\t\t\t\tcase 'BrtBeginFnGroup': break;\n\t\t\t\tcase 'BrtEndFnGroup': break;\n\t\t\t\tcase 'BrtBeginExternals': break;\n\t\t\t\tcase 'BrtSupSelf': break;\n\t\t\t\tcase 'BrtSupBookSrc': break;\n\t\t\t\tcase 'BrtExternSheet': break;\n\t\t\t\tcase 'BrtEndExternals': break;\n\t\t\t\tcase 'BrtName': break;\n\t\t\t\tcase 'BrtCalcProp': break;\n\t\t\t\tcase 'BrtUserBookView': break;\n\t\t\t\tcase 'BrtBeginPivotCacheIDs': break;\n\t\t\t\tcase 'BrtBeginPivotCacheID': break;\n\t\t\t\tcase 'BrtEndPivotCacheID': break;\n\t\t\t\tcase 'BrtEndPivotCacheIDs': break;\n\t\t\t\tcase 'BrtWebOpt': break;\n\t\t\t\tcase 'BrtFileRecover': break;\n\t\t\t\tcase 'BrtFileSharing': break;\n\t\t\t\t/*case 'BrtBeginWebPubItems': break;\n\t\t\t\tcase 'BrtBeginWebPubItem': break;\n\t\t\t\tcase 'BrtEndWebPubItem': break;\n\t\t\t\tcase 'BrtEndWebPubItems': break;*/\n\t\n\t\t\t\t/* Smart Tags */\n\t\t\t\tcase 'BrtBeginSmartTagTypes': break;\n\t\t\t\tcase 'BrtSmartTagType': break;\n\t\t\t\tcase 'BrtEndSmartTagTypes': break;\n\t\n\t\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\t\tcase 'BrtFRTArchID$': break;\n\t\t\t\tcase 'BrtWorkBookPr15': break;\n\t\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\t\tcase 'BrtEndBook': break;\n\t\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + R.n);\n\t\t\t}\n\t\t});\n\t\n\t\tparse_wb_defaults(wb);\n\t\n\t\treturn wb;\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.60 Workbook */\n\tfunction write_BUNDLESHS(ba, wb, opts) {\n\t\twrite_record(ba, \"BrtBeginBundleShs\");\n\t\tfor(var idx = 0; idx != wb.SheetNames.length; ++idx) {\n\t\t\tvar d = { hsState: 0, iTabID: idx+1, strRelID: 'rId' + (idx+1), name: wb.SheetNames[idx] };\n\t\t\twrite_record(ba, \"BrtBundleSh\", write_BrtBundleSh(d));\n\t\t}\n\t\twrite_record(ba, \"BrtEndBundleShs\");\n\t}\n\t\n\t/* [MS-XLSB] 2.4.643 BrtFileVersion */\n\tfunction write_BrtFileVersion(data, o) {\n\t\tif(!o) o = new_buf(127);\n\t\tfor(var i = 0; i != 4; ++i) o.write_shift(4, 0);\n\t\twrite_XLWideString(\"SheetJS\", o);\n\t\twrite_XLWideString(XLSX.version, o);\n\t\twrite_XLWideString(XLSX.version, o);\n\t\twrite_XLWideString(\"7262\", o);\n\t\to.length = o.l;\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.60 Workbook */\n\tfunction write_BOOKVIEWS(ba, wb, opts) {\n\t\twrite_record(ba, \"BrtBeginBookViews\");\n\t\t/* 1*(BrtBookView *FRT) */\n\t\twrite_record(ba, \"BrtEndBookViews\");\n\t}\n\t\n\t/* [MS-XLSB] 2.4.302 BrtCalcProp */\n\tfunction write_BrtCalcProp(data, o) {\n\t\tif(!o) o = new_buf(26);\n\t\to.write_shift(4,0); /* force recalc */\n\t\to.write_shift(4,1);\n\t\to.write_shift(4,0);\n\t\twrite_Xnum(0, o);\n\t\to.write_shift(-4, 1023);\n\t\to.write_shift(1, 0x33);\n\t\to.write_shift(1, 0x00);\n\t\treturn o;\n\t}\n\t\n\tfunction write_BrtFileRecover(data, o) {\n\t\tif(!o) o = new_buf(1);\n\t\to.write_shift(1,0);\n\t\treturn o;\n\t}\n\t\n\t/* [MS-XLSB] 2.1.7.60 Workbook */\n\tfunction write_wb_bin(wb, opts) {\n\t\tvar ba = buf_array();\n\t\twrite_record(ba, \"BrtBeginBook\");\n\t\twrite_record(ba, \"BrtFileVersion\", write_BrtFileVersion());\n\t\t/* [[BrtFileSharingIso] BrtFileSharing] */\n\t\twrite_record(ba, \"BrtWbProp\", write_BrtWbProp());\n\t\t/* [ACABSPATH] */\n\t\t/* [[BrtBookProtectionIso] BrtBookProtection] */\n\t\twrite_BOOKVIEWS(ba, wb, opts);\n\t\twrite_BUNDLESHS(ba, wb, opts);\n\t\t/* [FNGROUP] */\n\t\t/* [EXTERNALS] */\n\t\t/* *BrtName */\n\t\twrite_record(ba, \"BrtCalcProp\", write_BrtCalcProp());\n\t\t/* [BrtOleSize] */\n\t\t/* *(BrtUserBookView *FRT) */\n\t\t/* [PIVOTCACHEIDS] */\n\t\t/* [BrtWbFactoid] */\n\t\t/* [SMARTTAGTYPES] */\n\t\t/* [BrtWebOpt] */\n\t\twrite_record(ba, \"BrtFileRecover\", write_BrtFileRecover());\n\t\t/* [WEBPUBITEMS] */\n\t\t/* [CRERRS] */\n\t\t/* FRTWORKBOOK */\n\t\twrite_record(ba, \"BrtEndBook\");\n\t\n\t\treturn ba.end();\n\t}\n\tfunction parse_wb(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? parse_wb_bin : parse_wb_xml)(data, opts);\n\t}\n\t\n\tfunction parse_ws(data, name, opts, rels) {\n\t\treturn (name.substr(-4)===\".bin\" ? parse_ws_bin : parse_ws_xml)(data, opts, rels);\n\t}\n\t\n\tfunction parse_sty(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? parse_sty_bin : parse_sty_xml)(data, opts);\n\t}\n\t\n\tfunction parse_theme(data, name, opts) {\n\t\treturn parse_theme_xml(data, opts);\n\t}\n\t\n\tfunction parse_sst(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? parse_sst_bin : parse_sst_xml)(data, opts);\n\t}\n\t\n\tfunction parse_cmnt(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? parse_comments_bin : parse_comments_xml)(data, opts);\n\t}\n\t\n\tfunction parse_cc(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? parse_cc_bin : parse_cc_xml)(data, opts);\n\t}\n\t\n\tfunction write_wb(wb, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? write_wb_bin : write_wb_xml)(wb, opts);\n\t}\n\t\n\tfunction write_ws(data, name, opts, wb) {\n\t\treturn (name.substr(-4)===\".bin\" ? write_ws_bin : write_ws_xml)(data, opts, wb);\n\t}\n\t\n\tfunction write_sty(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? write_sty_bin : write_sty_xml)(data, opts);\n\t}\n\t\n\tfunction write_sst(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? write_sst_bin : write_sst_xml)(data, opts);\n\t}\n\t/*\n\tfunction write_cmnt(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? write_comments_bin : write_comments_xml)(data, opts);\n\t}\n\t\n\tfunction write_cc(data, name, opts) {\n\t\treturn (name.substr(-4)===\".bin\" ? write_cc_bin : write_cc_xml)(data, opts);\n\t}\n\t*/\n\tvar attregexg2=/([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\n\tvar attregex2=/([\\w:]+)=((?:\")(?:[^\"]*)(?:\")|(?:')(?:[^']*)(?:'))/;\n\tvar _chr = function(c) { return String.fromCharCode(c); };\n\tfunction xlml_parsexmltag(tag, skip_root) {\n\t\tvar words = tag.split(/\\s+/);\n\t\tvar z = []; if(!skip_root) z[0] = words[0];\n\t\tif(words.length === 1) return z;\n\t\tvar m = tag.match(attregexg2), y, j, w, i;\n\t\tif(m) for(i = 0; i != m.length; ++i) {\n\t\t\ty = m[i].match(attregex2);\n\t\t\tif((j=y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);\n\t\t\telse {\n\t\t\t\tif(y[1].substr(0,6) === \"xmlns:\") w = \"xmlns\"+y[1].substr(6);\n\t\t\t\telse w = y[1].substr(j+1);\n\t\t\t\tz[w] = y[2].substr(1,y[2].length-2);\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n\tfunction xlml_parsexmltagobj(tag) {\n\t\tvar words = tag.split(/\\s+/);\n\t\tvar z = {};\n\t\tif(words.length === 1) return z;\n\t\tvar m = tag.match(attregexg2), y, j, w, i;\n\t\tif(m) for(i = 0; i != m.length; ++i) {\n\t\t\ty = m[i].match(attregex2);\n\t\t\tif((j=y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);\n\t\t\telse {\n\t\t\t\tif(y[1].substr(0,6) === \"xmlns:\") w = \"xmlns\"+y[1].substr(6);\n\t\t\t\telse w = y[1].substr(j+1);\n\t\t\t\tz[w] = y[2].substr(1,y[2].length-2);\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n\t\n\t// ----\n\t\n\tfunction xlml_format(format, value) {\n\t\tvar fmt = XLMLFormatMap[format] || unescapexml(format);\n\t\tif(fmt === \"General\") return SSF._general(value);\n\t\treturn SSF.format(fmt, value);\n\t}\n\t\n\tfunction xlml_set_custprop(Custprops, Rn, cp, val) {\n\t\tswitch((cp[0].match(/dt:dt=\"([\\w.]+)\"/)||[\"\",\"\"])[1]) {\n\t\t\tcase \"boolean\": val = parsexmlbool(val); break;\n\t\t\tcase \"i2\": case \"int\": val = parseInt(val, 10); break;\n\t\t\tcase \"r4\": case \"float\": val = parseFloat(val); break;\n\t\t\tcase \"date\": case \"dateTime.tz\": val = new Date(val); break;\n\t\t\tcase \"i8\": case \"string\": case \"fixed\": case \"uuid\": case \"bin.base64\": break;\n\t\t\tdefault: throw \"bad custprop:\" + cp[0];\n\t\t}\n\t\tCustprops[unescapexml(Rn[3])] = val;\n\t}\n\t\n\tfunction safe_format_xlml(cell, nf, o) {\n\t\ttry {\n\t\t\tif(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }\n\t\t\telse if(nf === \"General\") {\n\t\t\t\tif(cell.t === 'n') {\n\t\t\t\t\tif((cell.v|0) === cell.v) cell.w = SSF._general_int(cell.v);\n\t\t\t\t\telse cell.w = SSF._general_num(cell.v);\n\t\t\t\t}\n\t\t\t\telse cell.w = SSF._general(cell.v);\n\t\t\t}\n\t\t\telse cell.w = xlml_format(nf||\"General\", cell.v);\n\t\t\tif(o.cellNF) cell.z = XLMLFormatMap[nf]||nf||\"General\";\n\t\t} catch(e) { if(o.WTF) throw e; }\n\t}\n\t\n\tfunction process_style_xlml(styles, stag, opts) {\n\t\tif(opts.cellStyles) {\n\t\t\tif(stag.Interior) {\n\t\t\t\tvar I = stag.Interior;\n\t\t\t\tif(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;\n\t\t\t}\n\t\t}\n\t\tstyles[stag.ID] = stag;\n\t}\n\t\n\t/* TODO: there must exist some form of OSP-blessed spec */\n\tfunction parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, o) {\n\t\tvar nf = \"General\", sid = cell.StyleID, S = {}; o = o || {};\n\t\tvar interiors = [];\n\t\tif(sid === undefined && row) sid = row.StyleID;\n\t\tif(sid === undefined && csty) sid = csty.StyleID;\n\t\twhile(styles[sid] !== undefined) {\n\t\t\tif(styles[sid].nf) nf = styles[sid].nf;\n\t\t\tif(styles[sid].Interior) interiors.push(styles[sid].Interior);\n\t\t\tif(!styles[sid].Parent) break;\n\t\t\tsid = styles[sid].Parent;\n\t\t}\n\t\tswitch(data.Type) {\n\t\t\tcase 'Boolean':\n\t\t\t\tcell.t = 'b';\n\t\t\t\tcell.v = parsexmlbool(xml);\n\t\t\t\tbreak;\n\t\t\tcase 'String':\n\t\t\t\tcell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));\n\t\t\t\tcell.v = xml.indexOf(\"<\") > -1 ? ss : cell.r;\n\t\t\t\tbreak;\n\t\t\tcase 'DateTime':\n\t\t\t\tcell.v = (Date.parse(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n\t\t\t\tif(cell.v !== cell.v) cell.v = unescapexml(xml);\n\t\t\t\telse if(cell.v >= 1 && cell.v<60) cell.v = cell.v -1;\n\t\t\t\tif(!nf || nf == \"General\") nf = \"yyyy-mm-dd\";\n\t\t\t\t/* falls through */\n\t\t\tcase 'Number':\n\t\t\t\tif(cell.v === undefined) cell.v=+xml;\n\t\t\t\tif(!cell.t) cell.t = 'n';\n\t\t\t\tbreak;\n\t\t\tcase 'Error': cell.t = 'e'; cell.v = RBErr[xml]; cell.w = xml; break;\n\t\t\tdefault: cell.t = 's'; cell.v = xlml_fixstr(ss); break;\n\t\t}\n\t\tsafe_format_xlml(cell, nf, o);\n\t\tif(o.cellFormula != null && cell.Formula) {\n\t\t\tcell.f = rc_to_a1(unescapexml(cell.Formula), base);\n\t\t\tcell.Formula = undefined;\n\t\t}\n\t\tif(o.cellStyles) {\n\t\t\tinteriors.forEach(function(x) {\n\t\t\t\tif(!S.patternType && x.patternType) S.patternType = x.patternType;\n\t\t\t});\n\t\t\tcell.s = S;\n\t\t}\n\t\tcell.ixfe = cell.StyleID !== undefined ? cell.StyleID : 'Default';\n\t}\n\t\n\tfunction xlml_clean_comment(comment) {\n\t\tcomment.t = comment.v;\n\t\tcomment.v = comment.w = comment.ixfe = undefined;\n\t}\n\t\n\tfunction xlml_normalize(d) {\n\t\tif(has_buf && Buffer.isBuffer(d)) return d.toString('utf8');\n\t\tif(typeof d === 'string') return d;\n\t\tthrow \"badf\";\n\t}\n\t\n\t/* TODO: Everything */\n\tvar xlmlregex = /<(\\/?)([a-z0-9]*:|)(\\w+)[^>]*>/mg;\n\tfunction parse_xlml_xml(d, opts) {\n\t\tvar str = xlml_normalize(d);\n\t\tvar Rn;\n\t\tvar state = [], tmp;\n\t\tvar sheets = {}, sheetnames = [], cursheet = {}, sheetname = \"\";\n\t\tvar table = {}, cell = {}, row = {}, dtag, didx;\n\t\tvar c = 0, r = 0;\n\t\tvar refguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\t\tvar styles = {}, stag = {};\n\t\tvar ss = \"\", fidx = 0;\n\t\tvar mergecells = [];\n\t\tvar Props = {}, Custprops = {}, pidx = 0, cp = {};\n\t\tvar comments = [], comment = {};\n\t\tvar cstys = [], csty;\n\t\txlmlregex.lastIndex = 0;\n\t\twhile((Rn = xlmlregex.exec(str))) switch(Rn[3]) {\n\t\t\tcase 'Data':\n\t\t\t\tif(state[state.length-1][1]) break;\n\t\t\t\tif(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]==\"Comment\"?comment:cell, {c:c,r:r}, styles, cstys[c], row, opts);\n\t\t\t\telse { ss = \"\"; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }\n\t\t\t\tbreak;\n\t\t\tcase 'Cell':\n\t\t\t\tif(Rn[1]==='/'){\n\t\t\t\t\tif(comments.length > 0) cell.c = comments;\n\t\t\t\t\tif((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) cursheet[encode_col(c) + encode_row(r)] = cell;\n\t\t\t\t\tif(cell.HRef) {\n\t\t\t\t\t\tcell.l = {Target:cell.HRef, tooltip:cell.HRefScreenTip};\n\t\t\t\t\t\tcell.HRef = cell.HRefScreenTip = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif(cell.MergeAcross || cell.MergeDown) {\n\t\t\t\t\t\tvar cc = c + (parseInt(cell.MergeAcross,10)|0);\n\t\t\t\t\t\tvar rr = r + (parseInt(cell.MergeDown,10)|0);\n\t\t\t\t\t\tmergecells.push({s:{c:c,r:r},e:{c:cc,r:rr}});\n\t\t\t\t\t}\n\t\t\t\t\t++c;\n\t\t\t\t\tif(cell.MergeAcross) c += +cell.MergeAcross;\n\t\t\t\t} else {\n\t\t\t\t\tcell = xlml_parsexmltagobj(Rn[0]);\n\t\t\t\t\tif(cell.Index) c = +cell.Index - 1;\n\t\t\t\t\tif(c < refguess.s.c) refguess.s.c = c;\n\t\t\t\t\tif(c > refguess.e.c) refguess.e.c = c;\n\t\t\t\t\tif(Rn[0].substr(-2) === \"/>\") ++c;\n\t\t\t\t\tcomments = [];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Row':\n\t\t\t\tif(Rn[1]==='/' || Rn[0].substr(-2) === \"/>\") {\n\t\t\t\t\tif(r < refguess.s.r) refguess.s.r = r;\n\t\t\t\t\tif(r > refguess.e.r) refguess.e.r = r;\n\t\t\t\t\tif(Rn[0].substr(-2) === \"/>\") {\n\t\t\t\t\t\trow = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\t\tif(row.Index) r = +row.Index - 1;\n\t\t\t\t\t}\n\t\t\t\t\tc = 0; ++r;\n\t\t\t\t} else {\n\t\t\t\t\trow = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\tif(row.Index) r = +row.Index - 1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Worksheet': /* TODO: read range from FullRows/FullColumns */\n\t\t\t\tif(Rn[1]==='/'){\n\t\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n\t\t\t\t\tsheetnames.push(sheetname);\n\t\t\t\t\tif(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) cursheet[\"!ref\"] = encode_range(refguess);\n\t\t\t\t\tif(mergecells.length) cursheet[\"!merges\"] = mergecells;\n\t\t\t\t\tsheets[sheetname] = cursheet;\n\t\t\t\t} else {\n\t\t\t\t\trefguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\t\t\t\t\tr = c = 0;\n\t\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\t\ttmp = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\tsheetname = tmp.Name;\n\t\t\t\t\tcursheet = {};\n\t\t\t\t\tmergecells = [];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Table':\n\t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\t\telse if(Rn[0].slice(-2) == \"/>\") break;\n\t\t\t\telse {\n\t\t\t\t\ttable = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\t\tcstys = [];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'Style':\n\t\t\t\tif(Rn[1]==='/') process_style_xlml(styles, stag, opts);\n\t\t\t\telse stag = xlml_parsexmltag(Rn[0]);\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'NumberFormat':\n\t\t\t\tstag.nf = xlml_parsexmltag(Rn[0]).Format || \"General\";\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'Column':\n\t\t\t\tif(state[state.length-1][0] !== 'Table') break;\n\t\t\t\tcsty = xlml_parsexmltag(Rn[0]);\n\t\t\t\tcstys[(csty.Index-1||cstys.length)] = csty;\n\t\t\t\tfor(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = csty;\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'NamedRange': break;\n\t\t\tcase 'NamedCell': break;\n\t\t\tcase 'B': break;\n\t\t\tcase 'I': break;\n\t\t\tcase 'U': break;\n\t\t\tcase 'S': break;\n\t\t\tcase 'Sub': break;\n\t\t\tcase 'Sup': break;\n\t\t\tcase 'Span': break;\n\t\t\tcase 'Border': break;\n\t\t\tcase 'Alignment': break;\n\t\t\tcase 'Borders': break;\n\t\t\tcase 'Font':\n\t\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n\t\t\t\telse if(Rn[1]===\"/\") ss += str.slice(fidx, Rn.index);\n\t\t\t\telse fidx = Rn.index + Rn[0].length;\n\t\t\t\tbreak;\n\t\t\tcase 'Interior':\n\t\t\t\tif(!opts.cellStyles) break;\n\t\t\t\tstag.Interior = xlml_parsexmltag(Rn[0]);\n\t\t\t\tbreak;\n\t\t\tcase 'Protection': break;\n\t\n\t\t\tcase 'Author':\n\t\t\tcase 'Title':\n\t\t\tcase 'Description':\n\t\t\tcase 'Created':\n\t\t\tcase 'Keywords':\n\t\t\tcase 'Subject':\n\t\t\tcase 'Category':\n\t\t\tcase 'Company':\n\t\t\tcase 'LastAuthor':\n\t\t\tcase 'LastSaved':\n\t\t\tcase 'LastPrinted':\n\t\t\tcase 'Version':\n\t\t\tcase 'Revision':\n\t\t\tcase 'TotalTime':\n\t\t\tcase 'HyperlinkBase':\n\t\t\tcase 'Manager':\n\t\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n\t\t\t\telse if(Rn[1]===\"/\") xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index));\n\t\t\t\telse pidx = Rn.index + Rn[0].length;\n\t\t\t\tbreak;\n\t\t\tcase 'Paragraphs': break;\n\t\n\t\t\tcase 'Styles':\n\t\t\tcase 'Workbook':\n\t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\t\telse state.push([Rn[3], false]);\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'Comment':\n\t\t\t\tif(Rn[1]==='/'){\n\t\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n\t\t\t\t\txlml_clean_comment(comment);\n\t\t\t\t\tcomments.push(comment);\n\t\t\t\t} else {\n\t\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\t\ttmp = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\tcomment = {a:tmp.Author};\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\n\t\t\tcase 'Name': break;\n\t\n\t\t\tcase 'ComponentOptions':\n\t\t\tcase 'DocumentProperties':\n\t\t\tcase 'CustomDocumentProperties':\n\t\t\tcase 'OfficeDocumentSettings':\n\t\t\tcase 'PivotTable':\n\t\t\tcase 'PivotCache':\n\t\t\tcase 'Names':\n\t\t\tcase 'MapInfo':\n\t\t\tcase 'PageBreaks':\n\t\t\tcase 'QueryTable':\n\t\t\tcase 'DataValidation':\n\t\t\tcase 'AutoFilter':\n\t\t\tcase 'Sorting':\n\t\t\tcase 'Schema':\n\t\t\tcase 'data':\n\t\t\tcase 'ConditionalFormatting':\n\t\t\tcase 'SmartTagType':\n\t\t\tcase 'SmartTags':\n\t\t\tcase 'ExcelWorkbook':\n\t\t\tcase 'WorkbookOptions':\n\t\t\tcase 'WorksheetOptions':\n\t\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n\t\t\t\tbreak;\n\t\n\t\t\tdefault:\n\t\t\t\tvar seen = true;\n\t\t\t\tswitch(state[state.length-1][0]) {\n\t\t\t\t\t/* OfficeDocumentSettings */\n\t\t\t\t\tcase 'OfficeDocumentSettings': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'AllowPNG': break;\n\t\t\t\t\t\tcase 'RemovePersonalInformation': break;\n\t\t\t\t\t\tcase 'DownloadComponents': break;\n\t\t\t\t\t\tcase 'LocationOfComponents': break;\n\t\t\t\t\t\tcase 'Colors': break;\n\t\t\t\t\t\tcase 'Color': break;\n\t\t\t\t\t\tcase 'Index': break;\n\t\t\t\t\t\tcase 'RGB': break;\n\t\t\t\t\t\tcase 'PixelsPerInch': break;\n\t\t\t\t\t\tcase 'TargetScreenSize': break;\n\t\t\t\t\t\tcase 'ReadOnlyRecommended': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* ComponentOptions */\n\t\t\t\t\tcase 'ComponentOptions': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'Toolbar': break;\n\t\t\t\t\t\tcase 'HideOfficeLogo': break;\n\t\t\t\t\t\tcase 'SpreadsheetAutoFit': break;\n\t\t\t\t\t\tcase 'Label': break;\n\t\t\t\t\t\tcase 'Caption': break;\n\t\t\t\t\t\tcase 'MaxHeight': break;\n\t\t\t\t\t\tcase 'MaxWidth': break;\n\t\t\t\t\t\tcase 'NextSheetNumber': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* ExcelWorkbook */\n\t\t\t\t\tcase 'ExcelWorkbook': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'WindowHeight': break;\n\t\t\t\t\t\tcase 'WindowWidth': break;\n\t\t\t\t\t\tcase 'WindowTopX': break;\n\t\t\t\t\t\tcase 'WindowTopY': break;\n\t\t\t\t\t\tcase 'TabRatio': break;\n\t\t\t\t\t\tcase 'ProtectStructure': break;\n\t\t\t\t\t\tcase 'ProtectWindows': break;\n\t\t\t\t\t\tcase 'ActiveSheet': break;\n\t\t\t\t\t\tcase 'DisplayInkNotes': break;\n\t\t\t\t\t\tcase 'FirstVisibleSheet': break;\n\t\t\t\t\t\tcase 'SupBook': break;\n\t\t\t\t\t\tcase 'SheetName': break;\n\t\t\t\t\t\tcase 'SheetIndex': break;\n\t\t\t\t\t\tcase 'SheetIndexFirst': break;\n\t\t\t\t\t\tcase 'SheetIndexLast': break;\n\t\t\t\t\t\tcase 'Dll': break;\n\t\t\t\t\t\tcase 'AcceptLabelsInFormulas': break;\n\t\t\t\t\t\tcase 'DoNotSaveLinkValues': break;\n\t\t\t\t\t\tcase 'Date1904': break;\n\t\t\t\t\t\tcase 'Iteration': break;\n\t\t\t\t\t\tcase 'MaxIterations': break;\n\t\t\t\t\t\tcase 'MaxChange': break;\n\t\t\t\t\t\tcase 'Path': break;\n\t\t\t\t\t\tcase 'Xct': break;\n\t\t\t\t\t\tcase 'Count': break;\n\t\t\t\t\t\tcase 'SelectedSheets': break;\n\t\t\t\t\t\tcase 'Calculation': break;\n\t\t\t\t\t\tcase 'Uncalced': break;\n\t\t\t\t\t\tcase 'StartupPrompt': break;\n\t\t\t\t\t\tcase 'Crn': break;\n\t\t\t\t\t\tcase 'ExternName': break;\n\t\t\t\t\t\tcase 'Formula': break;\n\t\t\t\t\t\tcase 'ColFirst': break;\n\t\t\t\t\t\tcase 'ColLast': break;\n\t\t\t\t\t\tcase 'WantAdvise': break;\n\t\t\t\t\t\tcase 'Boolean': break;\n\t\t\t\t\t\tcase 'Error': break;\n\t\t\t\t\t\tcase 'Text': break;\n\t\t\t\t\t\tcase 'OLE': break;\n\t\t\t\t\t\tcase 'NoAutoRecover': break;\n\t\t\t\t\t\tcase 'PublishObjects': break;\n\t\t\t\t\t\tcase 'DoNotCalculateBeforeSave': break;\n\t\t\t\t\t\tcase 'Number': break;\n\t\t\t\t\t\tcase 'RefModeR1C1': break;\n\t\t\t\t\t\tcase 'EmbedSaveSmartTags': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* WorkbookOptions */\n\t\t\t\t\tcase 'WorkbookOptions': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'OWCVersion': break;\n\t\t\t\t\t\tcase 'Height': break;\n\t\t\t\t\t\tcase 'Width': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* WorksheetOptions */\n\t\t\t\t\tcase 'WorksheetOptions': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'Unsynced': break;\n\t\t\t\t\t\tcase 'Visible': break;\n\t\t\t\t\t\tcase 'Print': break;\n\t\t\t\t\t\tcase 'Panes': break;\n\t\t\t\t\t\tcase 'Scale': break;\n\t\t\t\t\t\tcase 'Pane': break;\n\t\t\t\t\t\tcase 'Number': break;\n\t\t\t\t\t\tcase 'Layout': break;\n\t\t\t\t\t\tcase 'Header': break;\n\t\t\t\t\t\tcase 'Footer': break;\n\t\t\t\t\t\tcase 'PageSetup': break;\n\t\t\t\t\t\tcase 'PageMargins': break;\n\t\t\t\t\t\tcase 'Selected': break;\n\t\t\t\t\t\tcase 'ProtectObjects': break;\n\t\t\t\t\t\tcase 'EnableSelection': break;\n\t\t\t\t\t\tcase 'ProtectScenarios': break;\n\t\t\t\t\t\tcase 'ValidPrinterInfo': break;\n\t\t\t\t\t\tcase 'HorizontalResolution': break;\n\t\t\t\t\t\tcase 'VerticalResolution': break;\n\t\t\t\t\t\tcase 'NumberofCopies': break;\n\t\t\t\t\t\tcase 'ActiveRow': break;\n\t\t\t\t\t\tcase 'ActiveCol': break;\n\t\t\t\t\t\tcase 'ActivePane': break;\n\t\t\t\t\t\tcase 'TopRowVisible': break;\n\t\t\t\t\t\tcase 'TopRowBottomPane': break;\n\t\t\t\t\t\tcase 'LeftColumnVisible': break;\n\t\t\t\t\t\tcase 'LeftColumnRightPane': break;\n\t\t\t\t\t\tcase 'FitToPage': break;\n\t\t\t\t\t\tcase 'RangeSelection': break;\n\t\t\t\t\t\tcase 'PaperSizeIndex': break;\n\t\t\t\t\t\tcase 'PageLayoutZoom': break;\n\t\t\t\t\t\tcase 'PageBreakZoom': break;\n\t\t\t\t\t\tcase 'FilterOn': break;\n\t\t\t\t\t\tcase 'DoNotDisplayGridlines': break;\n\t\t\t\t\t\tcase 'SplitHorizontal': break;\n\t\t\t\t\t\tcase 'SplitVertical': break;\n\t\t\t\t\t\tcase 'FreezePanes': break;\n\t\t\t\t\t\tcase 'FrozenNoSplit': break;\n\t\t\t\t\t\tcase 'FitWidth': break;\n\t\t\t\t\t\tcase 'FitHeight': break;\n\t\t\t\t\t\tcase 'CommentsLayout': break;\n\t\t\t\t\t\tcase 'Zoom': break;\n\t\t\t\t\t\tcase 'LeftToRight': break;\n\t\t\t\t\t\tcase 'Gridlines': break;\n\t\t\t\t\t\tcase 'AllowSort': break;\n\t\t\t\t\t\tcase 'AllowFilter': break;\n\t\t\t\t\t\tcase 'AllowInsertRows': break;\n\t\t\t\t\t\tcase 'AllowDeleteRows': break;\n\t\t\t\t\t\tcase 'AllowInsertCols': break;\n\t\t\t\t\t\tcase 'AllowDeleteCols': break;\n\t\t\t\t\t\tcase 'AllowInsertHyperlinks': break;\n\t\t\t\t\t\tcase 'AllowFormatCells': break;\n\t\t\t\t\t\tcase 'AllowSizeCols': break;\n\t\t\t\t\t\tcase 'AllowSizeRows': break;\n\t\t\t\t\t\tcase 'NoSummaryRowsBelowDetail': break;\n\t\t\t\t\t\tcase 'TabColorIndex': break;\n\t\t\t\t\t\tcase 'DoNotDisplayHeadings': break;\n\t\t\t\t\t\tcase 'ShowPageLayoutZoom': break;\n\t\t\t\t\t\tcase 'NoSummaryColumnsRightDetail': break;\n\t\t\t\t\t\tcase 'BlackAndWhite': break;\n\t\t\t\t\t\tcase 'DoNotDisplayZeros': break;\n\t\t\t\t\t\tcase 'DisplayPageBreak': break;\n\t\t\t\t\t\tcase 'RowColHeadings': break;\n\t\t\t\t\t\tcase 'DoNotDisplayOutline': break;\n\t\t\t\t\t\tcase 'NoOrientation': break;\n\t\t\t\t\t\tcase 'AllowUsePivotTables': break;\n\t\t\t\t\t\tcase 'ZeroHeight': break;\n\t\t\t\t\t\tcase 'ViewableRange': break;\n\t\t\t\t\t\tcase 'Selection': break;\n\t\t\t\t\t\tcase 'ProtectContents': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* PivotTable */\n\t\t\t\t\tcase 'PivotTable': case 'PivotCache': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'ImmediateItemsOnDrop': break;\n\t\t\t\t\t\tcase 'ShowPageMultipleItemLabel': break;\n\t\t\t\t\t\tcase 'CompactRowIndent': break;\n\t\t\t\t\t\tcase 'Location': break;\n\t\t\t\t\t\tcase 'PivotField': break;\n\t\t\t\t\t\tcase 'Orientation': break;\n\t\t\t\t\t\tcase 'LayoutForm': break;\n\t\t\t\t\t\tcase 'LayoutSubtotalLocation': break;\n\t\t\t\t\t\tcase 'LayoutCompactRow': break;\n\t\t\t\t\t\tcase 'Position': break;\n\t\t\t\t\t\tcase 'PivotItem': break;\n\t\t\t\t\t\tcase 'DataType': break;\n\t\t\t\t\t\tcase 'DataField': break;\n\t\t\t\t\t\tcase 'SourceName': break;\n\t\t\t\t\t\tcase 'ParentField': break;\n\t\t\t\t\t\tcase 'PTLineItems': break;\n\t\t\t\t\t\tcase 'PTLineItem': break;\n\t\t\t\t\t\tcase 'CountOfSameItems': break;\n\t\t\t\t\t\tcase 'Item': break;\n\t\t\t\t\t\tcase 'ItemType': break;\n\t\t\t\t\t\tcase 'PTSource': break;\n\t\t\t\t\t\tcase 'CacheIndex': break;\n\t\t\t\t\t\tcase 'ConsolidationReference': break;\n\t\t\t\t\t\tcase 'FileName': break;\n\t\t\t\t\t\tcase 'Reference': break;\n\t\t\t\t\t\tcase 'NoColumnGrand': break;\n\t\t\t\t\t\tcase 'NoRowGrand': break;\n\t\t\t\t\t\tcase 'BlankLineAfterItems': break;\n\t\t\t\t\t\tcase 'Hidden': break;\n\t\t\t\t\t\tcase 'Subtotal': break;\n\t\t\t\t\t\tcase 'BaseField': break;\n\t\t\t\t\t\tcase 'MapChildItems': break;\n\t\t\t\t\t\tcase 'Function': break;\n\t\t\t\t\t\tcase 'RefreshOnFileOpen': break;\n\t\t\t\t\t\tcase 'PrintSetTitles': break;\n\t\t\t\t\t\tcase 'MergeLabels': break;\n\t\t\t\t\t\tcase 'DefaultVersion': break;\n\t\t\t\t\t\tcase 'RefreshName': break;\n\t\t\t\t\t\tcase 'RefreshDate': break;\n\t\t\t\t\t\tcase 'RefreshDateCopy': break;\n\t\t\t\t\t\tcase 'VersionLastRefresh': break;\n\t\t\t\t\t\tcase 'VersionLastUpdate': break;\n\t\t\t\t\t\tcase 'VersionUpdateableMin': break;\n\t\t\t\t\t\tcase 'VersionRefreshableMin': break;\n\t\t\t\t\t\tcase 'Calculation': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* PageBreaks */\n\t\t\t\t\tcase 'PageBreaks': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'ColBreaks': break;\n\t\t\t\t\t\tcase 'ColBreak': break;\n\t\t\t\t\t\tcase 'RowBreaks': break;\n\t\t\t\t\t\tcase 'RowBreak': break;\n\t\t\t\t\t\tcase 'ColStart': break;\n\t\t\t\t\t\tcase 'ColEnd': break;\n\t\t\t\t\t\tcase 'RowEnd': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* AutoFilter */\n\t\t\t\t\tcase 'AutoFilter': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'AutoFilterColumn': break;\n\t\t\t\t\t\tcase 'AutoFilterCondition': break;\n\t\t\t\t\t\tcase 'AutoFilterAnd': break;\n\t\t\t\t\t\tcase 'AutoFilterOr': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* QueryTable */\n\t\t\t\t\tcase 'QueryTable': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'Id': break;\n\t\t\t\t\t\tcase 'AutoFormatFont': break;\n\t\t\t\t\t\tcase 'AutoFormatPattern': break;\n\t\t\t\t\t\tcase 'QuerySource': break;\n\t\t\t\t\t\tcase 'QueryType': break;\n\t\t\t\t\t\tcase 'EnableRedirections': break;\n\t\t\t\t\t\tcase 'RefreshedInXl9': break;\n\t\t\t\t\t\tcase 'URLString': break;\n\t\t\t\t\t\tcase 'HTMLTables': break;\n\t\t\t\t\t\tcase 'Connection': break;\n\t\t\t\t\t\tcase 'CommandText': break;\n\t\t\t\t\t\tcase 'RefreshInfo': break;\n\t\t\t\t\t\tcase 'NoTitles': break;\n\t\t\t\t\t\tcase 'NextId': break;\n\t\t\t\t\t\tcase 'ColumnInfo': break;\n\t\t\t\t\t\tcase 'OverwriteCells': break;\n\t\t\t\t\t\tcase 'DoNotPromptForFile': break;\n\t\t\t\t\t\tcase 'TextWizardSettings': break;\n\t\t\t\t\t\tcase 'Source': break;\n\t\t\t\t\t\tcase 'Number': break;\n\t\t\t\t\t\tcase 'Decimal': break;\n\t\t\t\t\t\tcase 'ThousandSeparator': break;\n\t\t\t\t\t\tcase 'TrailingMinusNumbers': break;\n\t\t\t\t\t\tcase 'FormatSettings': break;\n\t\t\t\t\t\tcase 'FieldType': break;\n\t\t\t\t\t\tcase 'Delimiters': break;\n\t\t\t\t\t\tcase 'Tab': break;\n\t\t\t\t\t\tcase 'Comma': break;\n\t\t\t\t\t\tcase 'AutoFormatName': break;\n\t\t\t\t\t\tcase 'VersionLastEdit': break;\n\t\t\t\t\t\tcase 'VersionLastRefresh': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* Sorting */\n\t\t\t\t\tcase 'Sorting':\n\t\t\t\t\t/* ConditionalFormatting */\n\t\t\t\t\tcase 'ConditionalFormatting':\n\t\t\t\t\t/* DataValidation */\n\t\t\t\t\tcase 'DataValidation': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'Range': break;\n\t\t\t\t\t\tcase 'Type': break;\n\t\t\t\t\t\tcase 'Min': break;\n\t\t\t\t\t\tcase 'Max': break;\n\t\t\t\t\t\tcase 'Sort': break;\n\t\t\t\t\t\tcase 'Descending': break;\n\t\t\t\t\t\tcase 'Order': break;\n\t\t\t\t\t\tcase 'CaseSensitive': break;\n\t\t\t\t\t\tcase 'Value': break;\n\t\t\t\t\t\tcase 'ErrorStyle': break;\n\t\t\t\t\t\tcase 'ErrorMessage': break;\n\t\t\t\t\t\tcase 'ErrorTitle': break;\n\t\t\t\t\t\tcase 'CellRangeList': break;\n\t\t\t\t\t\tcase 'InputMessage': break;\n\t\t\t\t\t\tcase 'InputTitle': break;\n\t\t\t\t\t\tcase 'ComboHide': break;\n\t\t\t\t\t\tcase 'InputHide': break;\n\t\t\t\t\t\tcase 'Condition': break;\n\t\t\t\t\t\tcase 'Qualifier': break;\n\t\t\t\t\t\tcase 'UseBlank': break;\n\t\t\t\t\t\tcase 'Value1': break;\n\t\t\t\t\t\tcase 'Value2': break;\n\t\t\t\t\t\tcase 'Format': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* MapInfo (schema) */\n\t\t\t\t\tcase 'MapInfo': case 'Schema': case 'data': switch(Rn[3]) {\n\t\t\t\t\t\tcase 'Map': break;\n\t\t\t\t\t\tcase 'Entry': break;\n\t\t\t\t\t\tcase 'Range': break;\n\t\t\t\t\t\tcase 'XPath': break;\n\t\t\t\t\t\tcase 'Field': break;\n\t\t\t\t\t\tcase 'XSDType': break;\n\t\t\t\t\t\tcase 'FilterOn': break;\n\t\t\t\t\t\tcase 'Aggregate': break;\n\t\t\t\t\t\tcase 'ElementType': break;\n\t\t\t\t\t\tcase 'AttributeType': break;\n\t\t\t\t\t/* These are from xsd (XML Schema Definition) */\n\t\t\t\t\t\tcase 'schema':\n\t\t\t\t\t\tcase 'element':\n\t\t\t\t\t\tcase 'complexType':\n\t\t\t\t\t\tcase 'datatype':\n\t\t\t\t\t\tcase 'all':\n\t\t\t\t\t\tcase 'attribute':\n\t\t\t\t\t\tcase 'extends': break;\n\t\n\t\t\t\t\t\tcase 'row': break;\n\t\t\t\t\t\tdefault: seen = false;\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* SmartTags (can be anything) */\n\t\t\t\t\tcase 'SmartTags': break;\n\t\n\t\t\t\t\tdefault: seen = false; break;\n\t\t\t\t}\n\t\t\t\tif(seen) break;\n\t\t\t\t/* CustomDocumentProperties */\n\t\t\t\tif(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\t\t\t\tif(state[state.length-1][0]==='CustomDocumentProperties') {\n\t\t\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n\t\t\t\t\telse if(Rn[1]===\"/\") xlml_set_custprop(Custprops, Rn, cp, str.slice(pidx, Rn.index));\n\t\t\t\t\telse { cp = Rn; pidx = Rn.index + Rn[0].length; }\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\t\t}\n\t\tvar out = {};\n\t\tif(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;\n\t\tout.SheetNames = sheetnames;\n\t\tout.SSF = SSF.get_table();\n\t\tout.Props = Props;\n\t\tout.Custprops = Custprops;\n\t\treturn out;\n\t}\n\t\n\tfunction parse_xlml(data, opts) {\n\t\tfix_read_opts(opts=opts||{});\n\t\tswitch(opts.type||\"base64\") {\n\t\t\tcase \"base64\": return parse_xlml_xml(Base64.decode(data), opts);\n\t\t\tcase \"binary\": case \"buffer\": case \"file\": return parse_xlml_xml(data, opts);\n\t\t\tcase \"array\": return parse_xlml_xml(data.map(_chr).join(\"\"), opts);\n\t\t}\n\t}\n\t\n\tfunction write_xlml(wb, opts) { }\n\t\n\t/* [MS-OLEDS] 2.3.8 CompObjStream */\n\tfunction parse_compobj(obj) {\n\t\tvar v = {};\n\t\tvar o = obj.content;\n\t\n\t\t/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */\n\t\tvar l = 28, m;\n\t\tm = __lpstr(o, l);\n\t\tl += 4 + __readUInt32LE(o,l);\n\t\tv.UserType = m;\n\t\n\t\t/* [MS-OLEDS] 2.3.1 ClipboardFormatOrAnsiString */\n\t\tm = __readUInt32LE(o,l); l+= 4;\n\t\tswitch(m) {\n\t\t\tcase 0x00000000: break;\n\t\t\tcase 0xffffffff: case 0xfffffffe: l+=4; break;\n\t\t\tdefault:\n\t\t\t\tif(m > 0x190) throw new Error(\"Unsupported Clipboard: \" + m.toString(16));\n\t\t\t\tl += m;\n\t\t}\n\t\n\t\tm = __lpstr(o, l); l += m.length === 0 ? 0 : 5 + m.length; v.Reserved1 = m;\n\t\n\t\tif((m = __readUInt32LE(o,l)) !== 0x71b2e9f4) return v;\n\t\tthrow \"Unsupported Unicode Extension\";\n\t}\n\t\n\t/* 2.4.58 Continue logic */\n\tfunction slurp(R, blob, length, opts) {\n\t\tvar l = length;\n\t\tvar bufs = [];\n\t\tvar d = blob.slice(blob.l,blob.l+l);\n\t\tif(opts && opts.enc && opts.enc.insitu_decrypt) switch(R.n) {\n\t\tcase 'BOF': case 'FilePass': case 'FileLock': case 'InterfaceHdr': case 'RRDInfo': case 'RRDHead': case 'UsrExcl': break;\n\t\tdefault:\n\t\t\tif(d.length === 0) break;\n\t\t\topts.enc.insitu_decrypt(d);\n\t\t}\n\t\tbufs.push(d);\n\t\tblob.l += l;\n\t\tvar next = (XLSRecordEnum[__readUInt16LE(blob,blob.l)]);\n\t\twhile(next != null && next.n === 'Continue') {\n\t\t\tl = __readUInt16LE(blob,blob.l+2);\n\t\t\tbufs.push(blob.slice(blob.l+4,blob.l+4+l));\n\t\t\tblob.l += 4+l;\n\t\t\tnext = (XLSRecordEnum[__readUInt16LE(blob, blob.l)]);\n\t\t}\n\t\tvar b = bconcat(bufs);\n\t\tprep_blob(b, 0);\n\t\tvar ll = 0; b.lens = [];\n\t\tfor(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }\n\t\treturn R.f(b, b.length, opts);\n\t}\n\t\n\tfunction safe_format_xf(p, opts, date1904) {\n\t\tif(!p.XF) return;\n\t\ttry {\n\t\t\tvar fmtid = p.XF.ifmt||0;\n\t\t\tif(p.t === 'e') { p.w = p.w || BErr[p.v]; }\n\t\t\telse if(fmtid === 0) {\n\t\t\t\tif(p.t === 'n') {\n\t\t\t\t\tif((p.v|0) === p.v) p.w = SSF._general_int(p.v);\n\t\t\t\t\telse p.w = SSF._general_num(p.v);\n\t\t\t\t}\n\t\t\t\telse p.w = SSF._general(p.v);\n\t\t\t}\n\t\t\telse p.w = SSF.format(fmtid,p.v, {date1904:date1904||false});\n\t\t\tif(opts.cellNF) p.z = SSF._table[fmtid];\n\t\t} catch(e) { if(opts.WTF) throw e; }\n\t}\n\t\n\tfunction make_cell(val, ixfe, t) {\n\t\treturn {v:val, ixfe:ixfe, t:t};\n\t}\n\t\n\t// 2.3.2\n\tfunction parse_workbook(blob, options) {\n\t\tvar wb = {opts:{}};\n\t\tvar Sheets = {};\n\t\tvar out = {};\n\t\tvar Directory = {};\n\t\tvar found_sheet = false;\n\t\tvar range = {};\n\t\tvar last_formula = null;\n\t\tvar sst = [];\n\t\tvar cur_sheet = \"\";\n\t\tvar Preamble = {};\n\t\tvar lastcell, last_cell, cc, cmnt, rng, rngC, rngR;\n\t\tvar shared_formulae = {};\n\t\tvar array_formulae = []; /* TODO: something more clever */\n\t\tvar temp_val;\n\t\tvar country;\n\t\tvar cell_valid = true;\n\t\tvar XFs = []; /* XF records */\n\t\tvar palette = [];\n\t\tvar get_rgb = function getrgb(icv) {\n\t\t\tif(icv < 8) return XLSIcv[icv];\n\t\t\tif(icv < 64) return palette[icv-8] || XLSIcv[icv];\n\t\t\treturn XLSIcv[icv];\n\t\t};\n\t\tvar process_cell_style = function pcs(cell, line) {\n\t\t\tvar xfd = line.XF.data;\n\t\t\tif(!xfd || !xfd.patternType) return;\n\t\t\tline.s = {};\n\t\t\tline.s.patternType = xfd.patternType;\n\t\t\tvar t;\n\t\t\tif((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }\n\t\t\tif((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }\n\t\t};\n\t\tvar addcell = function addcell(cell, line, options) {\n\t\t\tif(!cell_valid) return;\n\t\t\tif(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line);\n\t\t\tlastcell = cell;\n\t\t\tlast_cell = encode_cell(cell);\n\t\t\tif(range.s) {\n\t\t\t\tif(cell.r < range.s.r) range.s.r = cell.r;\n\t\t\t\tif(cell.c < range.s.c) range.s.c = cell.c;\n\t\t\t}\n\t\t\tif(range.e) {\n\t\t\t\tif(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;\n\t\t\t\tif(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;\n\t\t\t}\n\t\t\tif(options.sheetRows && lastcell.r >= options.sheetRows) cell_valid = false;\n\t\t\telse out[last_cell] = line;\n\t\t};\n\t\tvar opts = {\n\t\t\tenc: false, // encrypted\n\t\t\tsbcch: 0, // cch in the preceding SupBook\n\t\t\tsnames: [], // sheetnames\n\t\t\tsharedf: shared_formulae, // shared formulae by address\n\t\t\tarrayf: array_formulae, // array formulae array\n\t\t\trrtabid: [], // RRTabId\n\t\t\tlastuser: \"\", // Last User from WriteAccess\n\t\t\tbiff: 8, // BIFF version\n\t\t\tcodepage: 0, // CP from CodePage record\n\t\t\twinlocked: 0, // fLockWn from WinProtect\n\t\t\twtf: false\n\t\t};\n\t\tif(options.password) opts.password = options.password;\n\t\tvar mergecells = [];\n\t\tvar objects = [];\n\t\tvar supbooks = [[]]; // 1-indexed, will hold extern names\n\t\tvar sbc = 0, sbci = 0, sbcli = 0;\n\t\tsupbooks.SheetNames = opts.snames;\n\t\tsupbooks.sharedf = opts.sharedf;\n\t\tsupbooks.arrayf = opts.arrayf;\n\t\tvar last_Rn = '';\n\t\tvar file_depth = 0; /* TODO: make a real stack */\n\t\n\t\t/* explicit override for some broken writers */\n\t\topts.codepage = 1200;\n\t\tset_cp(1200);\n\t\n\t\twhile(blob.l < blob.length - 1) {\n\t\t\tvar s = blob.l;\n\t\t\tvar RecordType = blob.read_shift(2);\n\t\t\tif(RecordType === 0 && last_Rn === 'EOF') break;\n\t\t\tvar length = (blob.l === blob.length ? 0 : blob.read_shift(2)), y;\n\t\t\tvar R = XLSRecordEnum[RecordType];\n\t\t\tif(R && R.f) {\n\t\t\t\tif(options.bookSheets) {\n\t\t\t\t\tif(last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;\n\t\t\t\t}\n\t\t\t\tlast_Rn = R.n;\n\t\t\t\tif(R.r === 2 || R.r == 12) {\n\t\t\t\t\tvar rt = blob.read_shift(2); length -= 2;\n\t\t\t\t\tif(!opts.enc && rt !== RecordType) throw \"rt mismatch\";\n\t\t\t\t\tif(R.r == 12){ blob.l += 10; length -= 10; } // skip FRT\n\t\t\t\t}\n\t\t\t\t//console.error(R,blob.l,length,blob.length);\n\t\t\t\tvar val;\n\t\t\t\tif(R.n === 'EOF') val = R.f(blob, length, opts);\n\t\t\t\telse val = slurp(R, blob, length, opts);\n\t\t\t\tvar Rn = R.n;\n\t\t\t\t/* BIFF5 overrides */\n\t\t\t\tif(opts.biff === 5 || opts.biff === 2) switch(Rn) {\n\t\t\t\t\tcase 'Lbl': Rn = 'Label'; break;\n\t\t\t\t}\n\t\t\t\t/* nested switch statements to workaround V8 128 limit */\n\t\t\t\tswitch(Rn) {\n\t\t\t\t\t/* Workbook Options */\n\t\t\t\t\tcase 'Date1904': wb.opts.Date1904 = val; break;\n\t\t\t\t\tcase 'WriteProtect': wb.opts.WriteProtect = true; break;\n\t\t\t\t\tcase 'FilePass':\n\t\t\t\t\t\tif(!opts.enc) blob.l = 0;\n\t\t\t\t\t\topts.enc = val;\n\t\t\t\t\t\tif(opts.WTF) console.error(val);\n\t\t\t\t\t\tif(!options.password) throw new Error(\"File is password-protected\");\n\t\t\t\t\t\tif(val.Type !== 0) throw new Error(\"Encryption scheme unsupported\");\n\t\t\t\t\t\tif(!val.valid) throw new Error(\"Password is incorrect\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'WriteAccess': opts.lastuser = val; break;\n\t\t\t\t\tcase 'FileSharing': break; //TODO\n\t\t\t\t\tcase 'CodePage':\n\t\t\t\t\t\t/* overrides based on test cases */\n\t\t\t\t\t\tif(val === 0x5212) val = 1200;\n\t\t\t\t\t\telse if(val === 0x8001) val = 1252;\n\t\t\t\t\t\topts.codepage = val;\n\t\t\t\t\t\tset_cp(val);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'RRTabId': opts.rrtabid = val; break;\n\t\t\t\t\tcase 'WinProtect': opts.winlocked = val; break;\n\t\t\t\t\tcase 'Template': break; // TODO\n\t\t\t\t\tcase 'RefreshAll': wb.opts.RefreshAll = val; break;\n\t\t\t\t\tcase 'BookBool': break; // TODO\n\t\t\t\t\tcase 'UsesELFs': /* if(val) console.error(\"Unsupported ELFs\"); */ break;\n\t\t\t\t\tcase 'MTRSettings': {\n\t\t\t\t\t\tif(val[0] && val[1]) throw \"Unsupported threads: \" + val;\n\t\t\t\t\t} break; // TODO: actually support threads\n\t\t\t\t\tcase 'CalcCount': wb.opts.CalcCount = val; break;\n\t\t\t\t\tcase 'CalcDelta': wb.opts.CalcDelta = val; break;\n\t\t\t\t\tcase 'CalcIter': wb.opts.CalcIter = val; break;\n\t\t\t\t\tcase 'CalcMode': wb.opts.CalcMode = val; break;\n\t\t\t\t\tcase 'CalcPrecision': wb.opts.CalcPrecision = val; break;\n\t\t\t\t\tcase 'CalcSaveRecalc': wb.opts.CalcSaveRecalc = val; break;\n\t\t\t\t\tcase 'CalcRefMode': opts.CalcRefMode = val; break; // TODO: implement R1C1\n\t\t\t\t\tcase 'Uncalced': break;\n\t\t\t\t\tcase 'ForceFullCalculation': wb.opts.FullCalc = val; break;\n\t\t\t\t\tcase 'WsBool': break; // TODO\n\t\t\t\t\tcase 'XF': XFs.push(val); break;\n\t\t\t\t\tcase 'ExtSST': break; // TODO\n\t\t\t\t\tcase 'BookExt': break; // TODO\n\t\t\t\t\tcase 'RichTextStream': break;\n\t\t\t\t\tcase 'BkHim': break;\n\t\n\t\t\t\t\tcase 'SupBook': supbooks[++sbc] = [val]; sbci = 0; break;\n\t\t\t\t\tcase 'ExternName': supbooks[sbc][++sbci] = val; break;\n\t\t\t\t\tcase 'Index': break; // TODO\n\t\t\t\t\tcase 'Lbl': supbooks[0][++sbcli] = val; break;\n\t\t\t\t\tcase 'ExternSheet': supbooks[sbc] = supbooks[sbc].concat(val); sbci += val.length; break;\n\t\n\t\t\t\t\tcase 'Protect': out[\"!protect\"] = val; break; /* for sheet or book */\n\t\t\t\t\tcase 'Password': if(val !== 0 && opts.WTF) console.error(\"Password verifier: \" + val); break;\n\t\t\t\t\tcase 'Prot4Rev': case 'Prot4RevPass': break; /*TODO: Revision Control*/\n\t\n\t\t\t\t\tcase 'BoundSheet8': {\n\t\t\t\t\t\tDirectory[val.pos] = val;\n\t\t\t\t\t\topts.snames.push(val.name);\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'EOF': {\n\t\t\t\t\t\tif(--file_depth) break;\n\t\t\t\t\t\tif(range.e) {\n\t\t\t\t\t\t\tout[\"!range\"] = range;\n\t\t\t\t\t\t\tif(range.e.r > 0 && range.e.c > 0) {\n\t\t\t\t\t\t\t\trange.e.r--; range.e.c--;\n\t\t\t\t\t\t\t\tout[\"!ref\"] = encode_range(range);\n\t\t\t\t\t\t\t\trange.e.r++; range.e.c++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(mergecells.length > 0) out[\"!merges\"] = mergecells;\n\t\t\t\t\t\t\tif(objects.length > 0) out[\"!objects\"] = objects;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(cur_sheet === \"\") Preamble = out; else Sheets[cur_sheet] = out;\n\t\t\t\t\t\tout = {};\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'BOF': {\n\t\t\t\t\t\tif(opts.biff !== 8);\n\t\t\t\t\t\telse if(val.BIFFVer === 0x0500) opts.biff = 5;\n\t\t\t\t\t\telse if(val.BIFFVer === 0x0002) opts.biff = 2;\n\t\t\t\t\t\telse if(val.BIFFVer === 0x0007) opts.biff = 2;\n\t\t\t\t\t\tif(file_depth++) break;\n\t\t\t\t\t\tcell_valid = true;\n\t\t\t\t\t\tout = {};\n\t\t\t\t\t\tif(opts.biff === 2) {\n\t\t\t\t\t\t\tif(cur_sheet === \"\") cur_sheet = \"Sheet1\";\n\t\t\t\t\t\t\trange = {s:{r:0,c:0},e:{r:0,c:0}};\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse cur_sheet = (Directory[s] || {name:\"\"}).name;\n\t\t\t\t\t\tmergecells = [];\n\t\t\t\t\t\tobjects = [];\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'Number': case 'BIFF2NUM': {\n\t\t\t\t\t\ttemp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:'n'};\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'BoolErr': {\n\t\t\t\t\t\ttemp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t};\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'RK': {\n\t\t\t\t\t\ttemp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'};\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'MulRk': {\n\t\t\t\t\t\tfor(var j = val.c; j <= val.C; ++j) {\n\t\t\t\t\t\t\tvar ixfe = val.rkrec[j-val.c][0];\n\t\t\t\t\t\t\ttemp_val= {ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'};\n\t\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\t\taddcell({c:j, r:val.r}, temp_val, options);\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'Formula': {\n\t\t\t\t\t\tswitch(val.val) {\n\t\t\t\t\t\t\tcase 'String': last_formula = val; break;\n\t\t\t\t\t\t\tcase 'Array Formula': throw \"Array Formula unsupported\";\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\ttemp_val = {v:val.val, ixfe:val.cell.ixfe, t:val.tt};\n\t\t\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\t\t\tif(options.cellFormula) temp_val.f = \"=\"+stringify_formula(val.formula,range,val.cell,supbooks, opts);\n\t\t\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\t\t\taddcell(val.cell, temp_val, options);\n\t\t\t\t\t\t\t\tlast_formula = val;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'String': {\n\t\t\t\t\t\tif(last_formula) {\n\t\t\t\t\t\t\tlast_formula.val = val;\n\t\t\t\t\t\t\ttemp_val = {v:last_formula.val, ixfe:last_formula.cell.ixfe, t:'s'};\n\t\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\t\tif(options.cellFormula) temp_val.f = \"=\"+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);\n\t\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\t\taddcell(last_formula.cell, temp_val, options);\n\t\t\t\t\t\t\tlast_formula = null;\n\t\t\t\t\t\t}\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'Array': {\n\t\t\t\t\t\tarray_formulae.push(val);\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'ShrFmla': {\n\t\t\t\t\t\tif(!cell_valid) break;\n\t\t\t\t\t\t//if(options.cellFormula) out[last_cell].f = stringify_formula(val[0], range, lastcell, supbooks, opts);\n\t\t\t\t\t\t/* TODO: capture range */\n\t\t\t\t\t\tshared_formulae[encode_cell(last_formula.cell)]= val[0];\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'LabelSst':\n\t\t\t\t\t\t//temp_val={v:sst[val.isst].t, ixfe:val.ixfe, t:'s'};\n\t\t\t\t\t\ttemp_val=make_cell(sst[val.isst].t, val.ixfe, 's');\n\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Label': case 'BIFF2STR':\n\t\t\t\t\t\t/* Some writers erroneously write Label */\n\t\t\t\t\t\ttemp_val=make_cell(val.val, val.ixfe, 's');\n\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Dimensions': {\n\t\t\t\t\t\tif(file_depth === 1) range = val; /* TODO: stack */\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'SST': {\n\t\t\t\t\t\tsst = val;\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'Format': { /* val = [id, fmt] */\n\t\t\t\t\t\tSSF.load(val[1], val[0]);\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\tcase 'MergeCells': mergecells = mergecells.concat(val); break;\n\t\n\t\t\t\t\tcase 'Obj': objects[val.cmo[0]] = opts.lastobj = val; break;\n\t\t\t\t\tcase 'TxO': opts.lastobj.TxO = val; break;\n\t\n\t\t\t\t\tcase 'HLink': {\n\t\t\t\t\t\tfor(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)\n\t\t\t\t\t\t\tfor(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC)\n\t\t\t\t\t\t\t\tif(out[encode_cell({c:rngC,r:rngR})])\n\t\t\t\t\t\t\t\t\tout[encode_cell({c:rngC,r:rngR})].l = val[1];\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'HLinkTooltip': {\n\t\t\t\t\t\tfor(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)\n\t\t\t\t\t\t\tfor(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC)\n\t\t\t\t\t\t\t\tif(out[encode_cell({c:rngC,r:rngR})])\n\t\t\t\t\t\t\t\t\tout[encode_cell({c:rngC,r:rngR})].l.tooltip = val[1];\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* Comments */\n\t\t\t\t\tcase 'Note': {\n\t\t\t\t\t\tif(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */\n\t\t\t\t\t\tcc = out[encode_cell(val[0])];\n\t\t\t\t\t\tvar noteobj = objects[val[2]];\n\t\t\t\t\t\tif(!cc) break;\n\t\t\t\t\t\tif(!cc.c) cc.c = [];\n\t\t\t\t\t\tcmnt = {a:val[1],t:noteobj.TxO.t};\n\t\t\t\t\t\tcc.c.push(cmnt);\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t\tcase 'ClrtClient': break;\n\t\t\t\t\tcase 'XFExt': update_xfext(XFs[val.ixfe], val.ext); break;\n\t\n\t\t\t\t\tcase 'NameCmt': break;\n\t\t\t\t\tcase 'Header': break; // TODO\n\t\t\t\t\tcase 'Footer': break; // TODO\n\t\t\t\t\tcase 'HCenter': break; // TODO\n\t\t\t\t\tcase 'VCenter': break; // TODO\n\t\t\t\t\tcase 'Pls': break; // TODO\n\t\t\t\t\tcase 'Setup': break; // TODO\n\t\t\t\t\tcase 'DefColWidth': break; // TODO\n\t\t\t\t\tcase 'GCW': break;\n\t\t\t\t\tcase 'LHRecord': break;\n\t\t\t\t\tcase 'ColInfo': break; // TODO\n\t\t\t\t\tcase 'Row': break; // TODO\n\t\t\t\t\tcase 'DBCell': break; // TODO\n\t\t\t\t\tcase 'MulBlank': break; // TODO\n\t\t\t\t\tcase 'EntExU2': break; // TODO\n\t\t\t\t\tcase 'SxView': break; // TODO\n\t\t\t\t\tcase 'Sxvd': break; // TODO\n\t\t\t\t\tcase 'SXVI': break; // TODO\n\t\t\t\t\tcase 'SXVDEx': break; // TODO\n\t\t\t\t\tcase 'SxIvd': break; // TODO\n\t\t\t\t\tcase 'SXDI': break; // TODO\n\t\t\t\t\tcase 'SXLI': break; // TODO\n\t\t\t\t\tcase 'SXEx': break; // TODO\n\t\t\t\t\tcase 'QsiSXTag': break; // TODO\n\t\t\t\t\tcase 'Selection': break;\n\t\t\t\t\tcase 'Feat': break;\n\t\t\t\t\tcase 'FeatHdr': case 'FeatHdr11': break;\n\t\t\t\t\tcase 'Feature11': case 'Feature12': case 'List12': break;\n\t\t\t\t\tcase 'Blank': break;\n\t\t\t\t\tcase 'Country': country = val; break;\n\t\t\t\t\tcase 'RecalcId': break;\n\t\t\t\t\tcase 'DefaultRowHeight': case 'DxGCol': break; // TODO: htmlify\n\t\t\t\t\tcase 'Fbi': case 'Fbi2': case 'GelFrame': break;\n\t\t\t\t\tcase 'Font': break; // TODO\n\t\t\t\t\tcase 'XFCRC': break; // TODO\n\t\t\t\t\tcase 'Style': break; // TODO\n\t\t\t\t\tcase 'StyleExt': break; // TODO\n\t\t\t\t\tcase 'Palette': palette = val; break; // TODO\n\t\t\t\t\tcase 'Theme': break; // TODO\n\t\t\t\t\t/* Protection */\n\t\t\t\t\tcase 'ScenarioProtect': break;\n\t\t\t\t\tcase 'ObjProtect': break;\n\t\n\t\t\t\t\t/* Conditional Formatting */\n\t\t\t\t\tcase 'CondFmt12': break;\n\t\n\t\t\t\t\t/* Table */\n\t\t\t\t\tcase 'Table': break; // TODO\n\t\t\t\t\tcase 'TableStyles': break; // TODO\n\t\t\t\t\tcase 'TableStyle': break; // TODO\n\t\t\t\t\tcase 'TableStyleElement': break; // TODO\n\t\n\t\t\t\t\t/* PivotTable */\n\t\t\t\t\tcase 'SXStreamID': break; // TODO\n\t\t\t\t\tcase 'SXVS': break; // TODO\n\t\t\t\t\tcase 'DConRef': break; // TODO\n\t\t\t\t\tcase 'SXAddl': break; // TODO\n\t\t\t\t\tcase 'DConBin': break; // TODO\n\t\t\t\t\tcase 'DConName': break; // TODO\n\t\t\t\t\tcase 'SXPI': break; // TODO\n\t\t\t\t\tcase 'SxFormat': break; // TODO\n\t\t\t\t\tcase 'SxSelect': break; // TODO\n\t\t\t\t\tcase 'SxRule': break; // TODO\n\t\t\t\t\tcase 'SxFilt': break; // TODO\n\t\t\t\t\tcase 'SxItm': break; // TODO\n\t\t\t\t\tcase 'SxDXF': break; // TODO\n\t\n\t\t\t\t\t/* Scenario Manager */\n\t\t\t\t\tcase 'ScenMan': break;\n\t\n\t\t\t\t\t/* Data Consolidation */\n\t\t\t\t\tcase 'DCon': break;\n\t\n\t\t\t\t\t/* Watched Cell */\n\t\t\t\t\tcase 'CellWatch': break;\n\t\n\t\t\t\t\t/* Print Settings */\n\t\t\t\t\tcase 'PrintRowCol': break;\n\t\t\t\t\tcase 'PrintGrid': break;\n\t\t\t\t\tcase 'PrintSize': break;\n\t\n\t\t\t\t\tcase 'XCT': break;\n\t\t\t\t\tcase 'CRN': break;\n\t\n\t\t\t\t\tcase 'Scl': {\n\t\t\t\t\t\t//console.log(\"Zoom Level:\", val[0]/val[1],val);\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'SheetExt': {\n\t\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'SheetExtOptional': {\n\t\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\t/* VBA */\n\t\t\t\t\tcase 'ObNoMacros': {\n\t\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'ObProj': {\n\t\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'CodeName': {\n\t\n\t\t\t\t\t} break;\n\t\t\t\t\tcase 'GUIDTypeLib': {\n\t\n\t\t\t\t\t} break;\n\t\n\t\t\t\t\tcase 'WOpt': break; // TODO: WTF?\n\t\t\t\t\tcase 'PhoneticInfo': break;\n\t\n\t\t\t\t\tcase 'OleObjectSize': break;\n\t\n\t\t\t\t\t/* Differential Formatting */\n\t\t\t\t\tcase 'DXF': case 'DXFN': case 'DXFN12': case 'DXFN12List': case 'DXFN12NoCB': break;\n\t\n\t\t\t\t\t/* Data Validation */\n\t\t\t\t\tcase 'Dv': case 'DVal': break;\n\t\n\t\t\t\t\t/* Data Series */\n\t\t\t\t\tcase 'BRAI': case 'Series': case 'SeriesText': break;\n\t\n\t\t\t\t\t/* Data Connection */\n\t\t\t\t\tcase 'DConn': break;\n\t\t\t\t\tcase 'DbOrParamQry': break;\n\t\t\t\t\tcase 'DBQueryExt': break;\n\t\n\t\t\t\t\t/* Formatting */\n\t\t\t\t\tcase 'IFmtRecord': break;\n\t\t\t\t\tcase 'CondFmt': case 'CF': case 'CF12': case 'CFEx': break;\n\t\n\t\t\t\t\t/* Explicitly Ignored */\n\t\t\t\t\tcase 'Excel9File': break;\n\t\t\t\t\tcase 'Units': break;\n\t\t\t\t\tcase 'InterfaceHdr': case 'Mms': case 'InterfaceEnd': case 'DSF': case 'BuiltInFnGroupCount':\n\t\t\t\t\t/* View Stuff */\n\t\t\t\t\tcase 'Window1': case 'Window2': case 'HideObj': case 'GridSet': case 'Guts':\n\t\t\t\t\tcase 'UserBView': case 'UserSViewBegin': case 'UserSViewEnd':\n\t\t\t\t\tcase 'Pane': break;\n\t\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t\t/* Chart */\n\t\t\t\t\tcase 'Dat':\n\t\t\t\t\tcase 'Begin': case 'End':\n\t\t\t\t\tcase 'StartBlock': case 'EndBlock':\n\t\t\t\t\tcase 'Frame': case 'Area':\n\t\t\t\t\tcase 'Axis': case 'AxisLine': case 'Tick': break;\n\t\t\t\t\tcase 'AxesUsed':\n\t\t\t\t\tcase 'CrtLayout12': case 'CrtLayout12A': case 'CrtLink': case 'CrtLine': case 'CrtMlFrt': case 'CrtMlFrtContinue': break;\n\t\t\t\t\tcase 'LineFormat': case 'AreaFormat':\n\t\t\t\t\tcase 'Chart': case 'Chart3d': case 'Chart3DBarShape': case 'ChartFormat': case 'ChartFrtInfo': break;\n\t\t\t\t\tcase 'PlotArea': case 'PlotGrowth': break;\n\t\t\t\t\tcase 'SeriesList': case 'SerParent': case 'SerAuxTrend': break;\n\t\t\t\t\tcase 'DataFormat': case 'SerToCrt': case 'FontX': break;\n\t\t\t\t\tcase 'CatSerRange': case 'AxcExt': case 'SerFmt': break;\n\t\t\t\t\tcase 'ShtProps': break;\n\t\t\t\t\tcase 'DefaultText': case 'Text': case 'CatLab': break;\n\t\t\t\t\tcase 'DataLabExtContents': break;\n\t\t\t\t\tcase 'Legend': case 'LegendException': break;\n\t\t\t\t\tcase 'Pie': case 'Scatter': break;\n\t\t\t\t\tcase 'PieFormat': case 'MarkerFormat': break;\n\t\t\t\t\tcase 'StartObject': case 'EndObject': break;\n\t\t\t\t\tcase 'AlRuns': case 'ObjectLink': break;\n\t\t\t\t\tcase 'SIIndex': break;\n\t\t\t\t\tcase 'AttachedLabel': case 'YMult': break;\n\t\n\t\t\t\t\t/* Chart Group */\n\t\t\t\t\tcase 'Line': case 'Bar': break;\n\t\t\t\t\tcase 'Surf': break;\n\t\n\t\t\t\t\t/* Axis Group */\n\t\t\t\t\tcase 'AxisParent': break;\n\t\t\t\t\tcase 'Pos': break;\n\t\t\t\t\tcase 'ValueRange': break;\n\t\n\t\t\t\t\t/* Pivot Chart */\n\t\t\t\t\tcase 'SXViewEx9': break; // TODO\n\t\t\t\t\tcase 'SXViewLink': break;\n\t\t\t\t\tcase 'PivotChartBits': break;\n\t\t\t\t\tcase 'SBaseRef': break;\n\t\t\t\t\tcase 'TextPropsStream': break;\n\t\n\t\t\t\t\t/* Chart Misc */\n\t\t\t\t\tcase 'LnExt': break;\n\t\t\t\t\tcase 'MkrExt': break;\n\t\t\t\t\tcase 'CrtCoopt': break;\n\t\n\t\t\t\t\t/* Query Table */\n\t\t\t\t\tcase 'Qsi': case 'Qsif': case 'Qsir': case 'QsiSXTag': break;\n\t\t\t\t\tcase 'TxtQry': break;\n\t\n\t\t\t\t\t/* Filter */\n\t\t\t\t\tcase 'FilterMode': break;\n\t\t\t\t\tcase 'AutoFilter': case 'AutoFilterInfo': break;\n\t\t\t\t\tcase 'AutoFilter12': break;\n\t\t\t\t\tcase 'DropDownObjIds': break;\n\t\t\t\t\tcase 'Sort': break;\n\t\t\t\t\tcase 'SortData': break;\n\t\n\t\t\t\t\t/* Drawing */\n\t\t\t\t\tcase 'ShapePropsStream': break;\n\t\t\t\t\tcase 'MsoDrawing': case 'MsoDrawingGroup': case 'MsoDrawingSelection': break;\n\t\t\t\t\tcase 'ImData': break;\n\t\t\t\t\t/* Pub Stuff */\n\t\t\t\t\tcase 'WebPub': case 'AutoWebPub':\n\t\n\t\t\t\t\t/* Print Stuff */\n\t\t\t\t\tcase 'RightMargin': case 'LeftMargin': case 'TopMargin': case 'BottomMargin':\n\t\t\t\t\tcase 'HeaderFooter': case 'HFPicture': case 'PLV':\n\t\t\t\t\tcase 'HorizontalPageBreaks': case 'VerticalPageBreaks':\n\t\t\t\t\t/* Behavioral */\n\t\t\t\t\tcase 'Backup': case 'CompressPictures': case 'Compat12': break;\n\t\n\t\t\t\t\t/* Should not Happen */\n\t\t\t\t\tcase 'Continue': case 'ContinueFrt12': break;\n\t\n\t\t\t\t\t/* Future Records */\n\t\t\t\t\tcase 'FrtFontList': case 'FrtWrapper': break;\n\t\n\t\t\t\t\t/* BIFF5 records */\n\t\t\t\t\tcase 'ExternCount': break;\n\t\t\t\t\tcase 'RString': break;\n\t\t\t\t\tcase 'TabIdConf': case 'Radar': case 'RadarArea': case 'DropBar': case 'Intl': case 'CoordList': case 'SerAuxErrBar': break;\n\t\n\t\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t\t/* Miscellaneous */\n\t\t\t\t\tcase 'SCENARIO': case 'DConBin': case 'PicF': case 'DataLabExt':\n\t\t\t\t\tcase 'Lel': case 'BopPop': case 'BopPopCustom': case 'RealTimeData':\n\t\t\t\t\tcase 'Name': break;\n\t\t\t\t\tdefault: if(options.WTF) throw 'Unrecognized Record ' + R.n;\n\t\t\t\t}}}}\n\t\t\t} else blob.l += length;\n\t\t}\n\t\tvar sheetnamesraw = opts.biff === 2 ? ['Sheet1'] : Object.keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});\n\t\tvar sheetnames = sheetnamesraw.slice();\n\t\twb.Directory=sheetnamesraw;\n\t\twb.SheetNames=sheetnamesraw;\n\t\tif(!options.bookSheets) wb.Sheets=Sheets;\n\t\twb.Preamble=Preamble;\n\t\twb.Strings = sst;\n\t\twb.SSF = SSF.get_table();\n\t\tif(opts.enc) wb.Encryption = opts.enc;\n\t\twb.Metadata = {};\n\t\tif(country !== undefined) wb.Metadata.Country = country;\n\t\treturn wb;\n\t}\n\t\n\tfunction parse_xlscfb(cfb, options) {\n\tif(!options) options = {};\n\tfix_read_opts(options);\n\treset_cp();\n\tvar CompObj, Summary, Workbook;\n\tif(cfb.find) {\n\t\tCompObj = cfb.find('!CompObj');\n\t\tSummary = cfb.find('!SummaryInformation');\n\t\tWorkbook = cfb.find('/Workbook');\n\t} else {\n\t\tprep_blob(cfb, 0);\n\t\tWorkbook = {content: cfb};\n\t}\n\t\n\tif(!Workbook) Workbook = cfb.find('/Book');\n\tvar CompObjP, SummaryP, WorkbookP;\n\t\n\tif(CompObj) CompObjP = parse_compobj(CompObj);\n\tif(options.bookProps && !options.bookSheets) WorkbookP = {};\n\telse {\n\t\tif(Workbook) WorkbookP = parse_workbook(Workbook.content, options, !!Workbook.find);\n\t\telse throw new Error(\"Cannot find Workbook stream\");\n\t}\n\t\n\tif(cfb.find) parse_props(cfb);\n\t\n\tvar props = {};\n\tfor(var y in cfb.Summary) props[y] = cfb.Summary[y];\n\tfor(y in cfb.DocSummary) props[y] = cfb.DocSummary[y];\n\tWorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */\n\tif(options.bookFiles) WorkbookP.cfb = cfb;\n\tWorkbookP.CompObjP = CompObjP;\n\treturn WorkbookP;\n\t}\n\t\n\t/* TODO: WTF */\n\tfunction parse_props(cfb) {\n\t\t/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */\n\t\tvar DSI = cfb.find('!DocumentSummaryInformation');\n\t\tif(DSI) try { cfb.DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI); } catch(e) {}\n\t\n\t\t/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/\n\t\tvar SI = cfb.find('!SummaryInformation');\n\t\tif(SI) try { cfb.Summary = parse_PropertySetStream(SI, SummaryPIDSI); } catch(e) {}\n\t}\n\t\n\t/* [MS-XLSB] 2.3 Record Enumeration */\n\tvar XLSBRecordEnum = {\n\t\t0x0000: { n:\"BrtRowHdr\", f:parse_BrtRowHdr },\n\t\t0x0001: { n:\"BrtCellBlank\", f:parse_BrtCellBlank },\n\t\t0x0002: { n:\"BrtCellRk\", f:parse_BrtCellRk },\n\t\t0x0003: { n:\"BrtCellError\", f:parse_BrtCellError },\n\t\t0x0004: { n:\"BrtCellBool\", f:parse_BrtCellBool },\n\t\t0x0005: { n:\"BrtCellReal\", f:parse_BrtCellReal },\n\t\t0x0006: { n:\"BrtCellSt\", f:parse_BrtCellSt },\n\t\t0x0007: { n:\"BrtCellIsst\", f:parse_BrtCellIsst },\n\t\t0x0008: { n:\"BrtFmlaString\", f:parse_BrtFmlaString },\n\t\t0x0009: { n:\"BrtFmlaNum\", f:parse_BrtFmlaNum },\n\t\t0x000A: { n:\"BrtFmlaBool\", f:parse_BrtFmlaBool },\n\t\t0x000B: { n:\"BrtFmlaError\", f:parse_BrtFmlaError },\n\t\t0x0010: { n:\"BrtFRTArchID$\", f:parse_BrtFRTArchID$ },\n\t\t0x0013: { n:\"BrtSSTItem\", f:parse_RichStr },\n\t\t0x0014: { n:\"BrtPCDIMissing\", f:parsenoop },\n\t\t0x0015: { n:\"BrtPCDINumber\", f:parsenoop },\n\t\t0x0016: { n:\"BrtPCDIBoolean\", f:parsenoop },\n\t\t0x0017: { n:\"BrtPCDIError\", f:parsenoop },\n\t\t0x0018: { n:\"BrtPCDIString\", f:parsenoop },\n\t\t0x0019: { n:\"BrtPCDIDatetime\", f:parsenoop },\n\t\t0x001A: { n:\"BrtPCDIIndex\", f:parsenoop },\n\t\t0x001B: { n:\"BrtPCDIAMissing\", f:parsenoop },\n\t\t0x001C: { n:\"BrtPCDIANumber\", f:parsenoop },\n\t\t0x001D: { n:\"BrtPCDIABoolean\", f:parsenoop },\n\t\t0x001E: { n:\"BrtPCDIAError\", f:parsenoop },\n\t\t0x001F: { n:\"BrtPCDIAString\", f:parsenoop },\n\t\t0x0020: { n:\"BrtPCDIADatetime\", f:parsenoop },\n\t\t0x0021: { n:\"BrtPCRRecord\", f:parsenoop },\n\t\t0x0022: { n:\"BrtPCRRecordDt\", f:parsenoop },\n\t\t0x0023: { n:\"BrtFRTBegin\", f:parsenoop },\n\t\t0x0024: { n:\"BrtFRTEnd\", f:parsenoop },\n\t\t0x0025: { n:\"BrtACBegin\", f:parsenoop },\n\t\t0x0026: { n:\"BrtACEnd\", f:parsenoop },\n\t\t0x0027: { n:\"BrtName\", f:parsenoop },\n\t\t0x0028: { n:\"BrtIndexRowBlock\", f:parsenoop },\n\t\t0x002A: { n:\"BrtIndexBlock\", f:parsenoop },\n\t\t0x002B: { n:\"BrtFont\", f:parse_BrtFont },\n\t\t0x002C: { n:\"BrtFmt\", f:parse_BrtFmt },\n\t\t0x002D: { n:\"BrtFill\", f:parsenoop },\n\t\t0x002E: { n:\"BrtBorder\", f:parsenoop },\n\t\t0x002F: { n:\"BrtXF\", f:parse_BrtXF },\n\t\t0x0030: { n:\"BrtStyle\", f:parsenoop },\n\t\t0x0031: { n:\"BrtCellMeta\", f:parsenoop },\n\t\t0x0032: { n:\"BrtValueMeta\", f:parsenoop },\n\t\t0x0033: { n:\"BrtMdb\", f:parsenoop },\n\t\t0x0034: { n:\"BrtBeginFmd\", f:parsenoop },\n\t\t0x0035: { n:\"BrtEndFmd\", f:parsenoop },\n\t\t0x0036: { n:\"BrtBeginMdx\", f:parsenoop },\n\t\t0x0037: { n:\"BrtEndMdx\", f:parsenoop },\n\t\t0x0038: { n:\"BrtBeginMdxTuple\", f:parsenoop },\n\t\t0x0039: { n:\"BrtEndMdxTuple\", f:parsenoop },\n\t\t0x003A: { n:\"BrtMdxMbrIstr\", f:parsenoop },\n\t\t0x003B: { n:\"BrtStr\", f:parsenoop },\n\t\t0x003C: { n:\"BrtColInfo\", f:parsenoop },\n\t\t0x003E: { n:\"BrtCellRString\", f:parsenoop },\n\t\t0x003F: { n:\"BrtCalcChainItem$\", f:parse_BrtCalcChainItem$ },\n\t\t0x0040: { n:\"BrtDVal\", f:parsenoop },\n\t\t0x0041: { n:\"BrtSxvcellNum\", f:parsenoop },\n\t\t0x0042: { n:\"BrtSxvcellStr\", f:parsenoop },\n\t\t0x0043: { n:\"BrtSxvcellBool\", f:parsenoop },\n\t\t0x0044: { n:\"BrtSxvcellErr\", f:parsenoop },\n\t\t0x0045: { n:\"BrtSxvcellDate\", f:parsenoop },\n\t\t0x0046: { n:\"BrtSxvcellNil\", f:parsenoop },\n\t\t0x0080: { n:\"BrtFileVersion\", f:parsenoop },\n\t\t0x0081: { n:\"BrtBeginSheet\", f:parsenoop },\n\t\t0x0082: { n:\"BrtEndSheet\", f:parsenoop },\n\t\t0x0083: { n:\"BrtBeginBook\", f:parsenoop, p:0 },\n\t\t0x0084: { n:\"BrtEndBook\", f:parsenoop },\n\t\t0x0085: { n:\"BrtBeginWsViews\", f:parsenoop },\n\t\t0x0086: { n:\"BrtEndWsViews\", f:parsenoop },\n\t\t0x0087: { n:\"BrtBeginBookViews\", f:parsenoop },\n\t\t0x0088: { n:\"BrtEndBookViews\", f:parsenoop },\n\t\t0x0089: { n:\"BrtBeginWsView\", f:parsenoop },\n\t\t0x008A: { n:\"BrtEndWsView\", f:parsenoop },\n\t\t0x008B: { n:\"BrtBeginCsViews\", f:parsenoop },\n\t\t0x008C: { n:\"BrtEndCsViews\", f:parsenoop },\n\t\t0x008D: { n:\"BrtBeginCsView\", f:parsenoop },\n\t\t0x008E: { n:\"BrtEndCsView\", f:parsenoop },\n\t\t0x008F: { n:\"BrtBeginBundleShs\", f:parsenoop },\n\t\t0x0090: { n:\"BrtEndBundleShs\", f:parsenoop },\n\t\t0x0091: { n:\"BrtBeginSheetData\", f:parsenoop },\n\t\t0x0092: { n:\"BrtEndSheetData\", f:parsenoop },\n\t\t0x0093: { n:\"BrtWsProp\", f:parse_BrtWsProp },\n\t\t0x0094: { n:\"BrtWsDim\", f:parse_BrtWsDim, p:16 },\n\t\t0x0097: { n:\"BrtPane\", f:parsenoop },\n\t\t0x0098: { n:\"BrtSel\", f:parsenoop },\n\t\t0x0099: { n:\"BrtWbProp\", f:parse_BrtWbProp },\n\t\t0x009A: { n:\"BrtWbFactoid\", f:parsenoop },\n\t\t0x009B: { n:\"BrtFileRecover\", f:parsenoop },\n\t\t0x009C: { n:\"BrtBundleSh\", f:parse_BrtBundleSh },\n\t\t0x009D: { n:\"BrtCalcProp\", f:parsenoop },\n\t\t0x009E: { n:\"BrtBookView\", f:parsenoop },\n\t\t0x009F: { n:\"BrtBeginSst\", f:parse_BrtBeginSst },\n\t\t0x00A0: { n:\"BrtEndSst\", f:parsenoop },\n\t\t0x00A1: { n:\"BrtBeginAFilter\", f:parsenoop },\n\t\t0x00A2: { n:\"BrtEndAFilter\", f:parsenoop },\n\t\t0x00A3: { n:\"BrtBeginFilterColumn\", f:parsenoop },\n\t\t0x00A4: { n:\"BrtEndFilterColumn\", f:parsenoop },\n\t\t0x00A5: { n:\"BrtBeginFilters\", f:parsenoop },\n\t\t0x00A6: { n:\"BrtEndFilters\", f:parsenoop },\n\t\t0x00A7: { n:\"BrtFilter\", f:parsenoop },\n\t\t0x00A8: { n:\"BrtColorFilter\", f:parsenoop },\n\t\t0x00A9: { n:\"BrtIconFilter\", f:parsenoop },\n\t\t0x00AA: { n:\"BrtTop10Filter\", f:parsenoop },\n\t\t0x00AB: { n:\"BrtDynamicFilter\", f:parsenoop },\n\t\t0x00AC: { n:\"BrtBeginCustomFilters\", f:parsenoop },\n\t\t0x00AD: { n:\"BrtEndCustomFilters\", f:parsenoop },\n\t\t0x00AE: { n:\"BrtCustomFilter\", f:parsenoop },\n\t\t0x00AF: { n:\"BrtAFilterDateGroupItem\", f:parsenoop },\n\t\t0x00B0: { n:\"BrtMergeCell\", f:parse_BrtMergeCell },\n\t\t0x00B1: { n:\"BrtBeginMergeCells\", f:parsenoop },\n\t\t0x00B2: { n:\"BrtEndMergeCells\", f:parsenoop },\n\t\t0x00B3: { n:\"BrtBeginPivotCacheDef\", f:parsenoop },\n\t\t0x00B4: { n:\"BrtEndPivotCacheDef\", f:parsenoop },\n\t\t0x00B5: { n:\"BrtBeginPCDFields\", f:parsenoop },\n\t\t0x00B6: { n:\"BrtEndPCDFields\", f:parsenoop },\n\t\t0x00B7: { n:\"BrtBeginPCDField\", f:parsenoop },\n\t\t0x00B8: { n:\"BrtEndPCDField\", f:parsenoop },\n\t\t0x00B9: { n:\"BrtBeginPCDSource\", f:parsenoop },\n\t\t0x00BA: { n:\"BrtEndPCDSource\", f:parsenoop },\n\t\t0x00BB: { n:\"BrtBeginPCDSRange\", f:parsenoop },\n\t\t0x00BC: { n:\"BrtEndPCDSRange\", f:parsenoop },\n\t\t0x00BD: { n:\"BrtBeginPCDFAtbl\", f:parsenoop },\n\t\t0x00BE: { n:\"BrtEndPCDFAtbl\", f:parsenoop },\n\t\t0x00BF: { n:\"BrtBeginPCDIRun\", f:parsenoop },\n\t\t0x00C0: { n:\"BrtEndPCDIRun\", f:parsenoop },\n\t\t0x00C1: { n:\"BrtBeginPivotCacheRecords\", f:parsenoop },\n\t\t0x00C2: { n:\"BrtEndPivotCacheRecords\", f:parsenoop },\n\t\t0x00C3: { n:\"BrtBeginPCDHierarchies\", f:parsenoop },\n\t\t0x00C4: { n:\"BrtEndPCDHierarchies\", f:parsenoop },\n\t\t0x00C5: { n:\"BrtBeginPCDHierarchy\", f:parsenoop },\n\t\t0x00C6: { n:\"BrtEndPCDHierarchy\", f:parsenoop },\n\t\t0x00C7: { n:\"BrtBeginPCDHFieldsUsage\", f:parsenoop },\n\t\t0x00C8: { n:\"BrtEndPCDHFieldsUsage\", f:parsenoop },\n\t\t0x00C9: { n:\"BrtBeginExtConnection\", f:parsenoop },\n\t\t0x00CA: { n:\"BrtEndExtConnection\", f:parsenoop },\n\t\t0x00CB: { n:\"BrtBeginECDbProps\", f:parsenoop },\n\t\t0x00CC: { n:\"BrtEndECDbProps\", f:parsenoop },\n\t\t0x00CD: { n:\"BrtBeginECOlapProps\", f:parsenoop },\n\t\t0x00CE: { n:\"BrtEndECOlapProps\", f:parsenoop },\n\t\t0x00CF: { n:\"BrtBeginPCDSConsol\", f:parsenoop },\n\t\t0x00D0: { n:\"BrtEndPCDSConsol\", f:parsenoop },\n\t\t0x00D1: { n:\"BrtBeginPCDSCPages\", f:parsenoop },\n\t\t0x00D2: { n:\"BrtEndPCDSCPages\", f:parsenoop },\n\t\t0x00D3: { n:\"BrtBeginPCDSCPage\", f:parsenoop },\n\t\t0x00D4: { n:\"BrtEndPCDSCPage\", f:parsenoop },\n\t\t0x00D5: { n:\"BrtBeginPCDSCPItem\", f:parsenoop },\n\t\t0x00D6: { n:\"BrtEndPCDSCPItem\", f:parsenoop },\n\t\t0x00D7: { n:\"BrtBeginPCDSCSets\", f:parsenoop },\n\t\t0x00D8: { n:\"BrtEndPCDSCSets\", f:parsenoop },\n\t\t0x00D9: { n:\"BrtBeginPCDSCSet\", f:parsenoop },\n\t\t0x00DA: { n:\"BrtEndPCDSCSet\", f:parsenoop },\n\t\t0x00DB: { n:\"BrtBeginPCDFGroup\", f:parsenoop },\n\t\t0x00DC: { n:\"BrtEndPCDFGroup\", f:parsenoop },\n\t\t0x00DD: { n:\"BrtBeginPCDFGItems\", f:parsenoop },\n\t\t0x00DE: { n:\"BrtEndPCDFGItems\", f:parsenoop },\n\t\t0x00DF: { n:\"BrtBeginPCDFGRange\", f:parsenoop },\n\t\t0x00E0: { n:\"BrtEndPCDFGRange\", f:parsenoop },\n\t\t0x00E1: { n:\"BrtBeginPCDFGDiscrete\", f:parsenoop },\n\t\t0x00E2: { n:\"BrtEndPCDFGDiscrete\", f:parsenoop },\n\t\t0x00E3: { n:\"BrtBeginPCDSDTupleCache\", f:parsenoop },\n\t\t0x00E4: { n:\"BrtEndPCDSDTupleCache\", f:parsenoop },\n\t\t0x00E5: { n:\"BrtBeginPCDSDTCEntries\", f:parsenoop },\n\t\t0x00E6: { n:\"BrtEndPCDSDTCEntries\", f:parsenoop },\n\t\t0x00E7: { n:\"BrtBeginPCDSDTCEMembers\", f:parsenoop },\n\t\t0x00E8: { n:\"BrtEndPCDSDTCEMembers\", f:parsenoop },\n\t\t0x00E9: { n:\"BrtBeginPCDSDTCEMember\", f:parsenoop },\n\t\t0x00EA: { n:\"BrtEndPCDSDTCEMember\", f:parsenoop },\n\t\t0x00EB: { n:\"BrtBeginPCDSDTCQueries\", f:parsenoop },\n\t\t0x00EC: { n:\"BrtEndPCDSDTCQueries\", f:parsenoop },\n\t\t0x00ED: { n:\"BrtBeginPCDSDTCQuery\", f:parsenoop },\n\t\t0x00EE: { n:\"BrtEndPCDSDTCQuery\", f:parsenoop },\n\t\t0x00EF: { n:\"BrtBeginPCDSDTCSets\", f:parsenoop },\n\t\t0x00F0: { n:\"BrtEndPCDSDTCSets\", f:parsenoop },\n\t\t0x00F1: { n:\"BrtBeginPCDSDTCSet\", f:parsenoop },\n\t\t0x00F2: { n:\"BrtEndPCDSDTCSet\", f:parsenoop },\n\t\t0x00F3: { n:\"BrtBeginPCDCalcItems\", f:parsenoop },\n\t\t0x00F4: { n:\"BrtEndPCDCalcItems\", f:parsenoop },\n\t\t0x00F5: { n:\"BrtBeginPCDCalcItem\", f:parsenoop },\n\t\t0x00F6: { n:\"BrtEndPCDCalcItem\", f:parsenoop },\n\t\t0x00F7: { n:\"BrtBeginPRule\", f:parsenoop },\n\t\t0x00F8: { n:\"BrtEndPRule\", f:parsenoop },\n\t\t0x00F9: { n:\"BrtBeginPRFilters\", f:parsenoop },\n\t\t0x00FA: { n:\"BrtEndPRFilters\", f:parsenoop },\n\t\t0x00FB: { n:\"BrtBeginPRFilter\", f:parsenoop },\n\t\t0x00FC: { n:\"BrtEndPRFilter\", f:parsenoop },\n\t\t0x00FD: { n:\"BrtBeginPNames\", f:parsenoop },\n\t\t0x00FE: { n:\"BrtEndPNames\", f:parsenoop },\n\t\t0x00FF: { n:\"BrtBeginPName\", f:parsenoop },\n\t\t0x0100: { n:\"BrtEndPName\", f:parsenoop },\n\t\t0x0101: { n:\"BrtBeginPNPairs\", f:parsenoop },\n\t\t0x0102: { n:\"BrtEndPNPairs\", f:parsenoop },\n\t\t0x0103: { n:\"BrtBeginPNPair\", f:parsenoop },\n\t\t0x0104: { n:\"BrtEndPNPair\", f:parsenoop },\n\t\t0x0105: { n:\"BrtBeginECWebProps\", f:parsenoop },\n\t\t0x0106: { n:\"BrtEndECWebProps\", f:parsenoop },\n\t\t0x0107: { n:\"BrtBeginEcWpTables\", f:parsenoop },\n\t\t0x0108: { n:\"BrtEndECWPTables\", f:parsenoop },\n\t\t0x0109: { n:\"BrtBeginECParams\", f:parsenoop },\n\t\t0x010A: { n:\"BrtEndECParams\", f:parsenoop },\n\t\t0x010B: { n:\"BrtBeginECParam\", f:parsenoop },\n\t\t0x010C: { n:\"BrtEndECParam\", f:parsenoop },\n\t\t0x010D: { n:\"BrtBeginPCDKPIs\", f:parsenoop },\n\t\t0x010E: { n:\"BrtEndPCDKPIs\", f:parsenoop },\n\t\t0x010F: { n:\"BrtBeginPCDKPI\", f:parsenoop },\n\t\t0x0110: { n:\"BrtEndPCDKPI\", f:parsenoop },\n\t\t0x0111: { n:\"BrtBeginDims\", f:parsenoop },\n\t\t0x0112: { n:\"BrtEndDims\", f:parsenoop },\n\t\t0x0113: { n:\"BrtBeginDim\", f:parsenoop },\n\t\t0x0114: { n:\"BrtEndDim\", f:parsenoop },\n\t\t0x0115: { n:\"BrtIndexPartEnd\", f:parsenoop },\n\t\t0x0116: { n:\"BrtBeginStyleSheet\", f:parsenoop },\n\t\t0x0117: { n:\"BrtEndStyleSheet\", f:parsenoop },\n\t\t0x0118: { n:\"BrtBeginSXView\", f:parsenoop },\n\t\t0x0119: { n:\"BrtEndSXVI\", f:parsenoop },\n\t\t0x011A: { n:\"BrtBeginSXVI\", f:parsenoop },\n\t\t0x011B: { n:\"BrtBeginSXVIs\", f:parsenoop },\n\t\t0x011C: { n:\"BrtEndSXVIs\", f:parsenoop },\n\t\t0x011D: { n:\"BrtBeginSXVD\", f:parsenoop },\n\t\t0x011E: { n:\"BrtEndSXVD\", f:parsenoop },\n\t\t0x011F: { n:\"BrtBeginSXVDs\", f:parsenoop },\n\t\t0x0120: { n:\"BrtEndSXVDs\", f:parsenoop },\n\t\t0x0121: { n:\"BrtBeginSXPI\", f:parsenoop },\n\t\t0x0122: { n:\"BrtEndSXPI\", f:parsenoop },\n\t\t0x0123: { n:\"BrtBeginSXPIs\", f:parsenoop },\n\t\t0x0124: { n:\"BrtEndSXPIs\", f:parsenoop },\n\t\t0x0125: { n:\"BrtBeginSXDI\", f:parsenoop },\n\t\t0x0126: { n:\"BrtEndSXDI\", f:parsenoop },\n\t\t0x0127: { n:\"BrtBeginSXDIs\", f:parsenoop },\n\t\t0x0128: { n:\"BrtEndSXDIs\", f:parsenoop },\n\t\t0x0129: { n:\"BrtBeginSXLI\", f:parsenoop },\n\t\t0x012A: { n:\"BrtEndSXLI\", f:parsenoop },\n\t\t0x012B: { n:\"BrtBeginSXLIRws\", f:parsenoop },\n\t\t0x012C: { n:\"BrtEndSXLIRws\", f:parsenoop },\n\t\t0x012D: { n:\"BrtBeginSXLICols\", f:parsenoop },\n\t\t0x012E: { n:\"BrtEndSXLICols\", f:parsenoop },\n\t\t0x012F: { n:\"BrtBeginSXFormat\", f:parsenoop },\n\t\t0x0130: { n:\"BrtEndSXFormat\", f:parsenoop },\n\t\t0x0131: { n:\"BrtBeginSXFormats\", f:parsenoop },\n\t\t0x0132: { n:\"BrtEndSxFormats\", f:parsenoop },\n\t\t0x0133: { n:\"BrtBeginSxSelect\", f:parsenoop },\n\t\t0x0134: { n:\"BrtEndSxSelect\", f:parsenoop },\n\t\t0x0135: { n:\"BrtBeginISXVDRws\", f:parsenoop },\n\t\t0x0136: { n:\"BrtEndISXVDRws\", f:parsenoop },\n\t\t0x0137: { n:\"BrtBeginISXVDCols\", f:parsenoop },\n\t\t0x0138: { n:\"BrtEndISXVDCols\", f:parsenoop },\n\t\t0x0139: { n:\"BrtEndSXLocation\", f:parsenoop },\n\t\t0x013A: { n:\"BrtBeginSXLocation\", f:parsenoop },\n\t\t0x013B: { n:\"BrtEndSXView\", f:parsenoop },\n\t\t0x013C: { n:\"BrtBeginSXTHs\", f:parsenoop },\n\t\t0x013D: { n:\"BrtEndSXTHs\", f:parsenoop },\n\t\t0x013E: { n:\"BrtBeginSXTH\", f:parsenoop },\n\t\t0x013F: { n:\"BrtEndSXTH\", f:parsenoop },\n\t\t0x0140: { n:\"BrtBeginISXTHRws\", f:parsenoop },\n\t\t0x0141: { n:\"BrtEndISXTHRws\", f:parsenoop },\n\t\t0x0142: { n:\"BrtBeginISXTHCols\", f:parsenoop },\n\t\t0x0143: { n:\"BrtEndISXTHCols\", f:parsenoop },\n\t\t0x0144: { n:\"BrtBeginSXTDMPS\", f:parsenoop },\n\t\t0x0145: { n:\"BrtEndSXTDMPs\", f:parsenoop },\n\t\t0x0146: { n:\"BrtBeginSXTDMP\", f:parsenoop },\n\t\t0x0147: { n:\"BrtEndSXTDMP\", f:parsenoop },\n\t\t0x0148: { n:\"BrtBeginSXTHItems\", f:parsenoop },\n\t\t0x0149: { n:\"BrtEndSXTHItems\", f:parsenoop },\n\t\t0x014A: { n:\"BrtBeginSXTHItem\", f:parsenoop },\n\t\t0x014B: { n:\"BrtEndSXTHItem\", f:parsenoop },\n\t\t0x014C: { n:\"BrtBeginMetadata\", f:parsenoop },\n\t\t0x014D: { n:\"BrtEndMetadata\", f:parsenoop },\n\t\t0x014E: { n:\"BrtBeginEsmdtinfo\", f:parsenoop },\n\t\t0x014F: { n:\"BrtMdtinfo\", f:parsenoop },\n\t\t0x0150: { n:\"BrtEndEsmdtinfo\", f:parsenoop },\n\t\t0x0151: { n:\"BrtBeginEsmdb\", f:parsenoop },\n\t\t0x0152: { n:\"BrtEndEsmdb\", f:parsenoop },\n\t\t0x0153: { n:\"BrtBeginEsfmd\", f:parsenoop },\n\t\t0x0154: { n:\"BrtEndEsfmd\", f:parsenoop },\n\t\t0x0155: { n:\"BrtBeginSingleCells\", f:parsenoop },\n\t\t0x0156: { n:\"BrtEndSingleCells\", f:parsenoop },\n\t\t0x0157: { n:\"BrtBeginList\", f:parsenoop },\n\t\t0x0158: { n:\"BrtEndList\", f:parsenoop },\n\t\t0x0159: { n:\"BrtBeginListCols\", f:parsenoop },\n\t\t0x015A: { n:\"BrtEndListCols\", f:parsenoop },\n\t\t0x015B: { n:\"BrtBeginListCol\", f:parsenoop },\n\t\t0x015C: { n:\"BrtEndListCol\", f:parsenoop },\n\t\t0x015D: { n:\"BrtBeginListXmlCPr\", f:parsenoop },\n\t\t0x015E: { n:\"BrtEndListXmlCPr\", f:parsenoop },\n\t\t0x015F: { n:\"BrtListCCFmla\", f:parsenoop },\n\t\t0x0160: { n:\"BrtListTrFmla\", f:parsenoop },\n\t\t0x0161: { n:\"BrtBeginExternals\", f:parsenoop },\n\t\t0x0162: { n:\"BrtEndExternals\", f:parsenoop },\n\t\t0x0163: { n:\"BrtSupBookSrc\", f:parsenoop },\n\t\t0x0165: { n:\"BrtSupSelf\", f:parsenoop },\n\t\t0x0166: { n:\"BrtSupSame\", f:parsenoop },\n\t\t0x0167: { n:\"BrtSupTabs\", f:parsenoop },\n\t\t0x0168: { n:\"BrtBeginSupBook\", f:parsenoop },\n\t\t0x0169: { n:\"BrtPlaceholderName\", f:parsenoop },\n\t\t0x016A: { n:\"BrtExternSheet\", f:parsenoop },\n\t\t0x016B: { n:\"BrtExternTableStart\", f:parsenoop },\n\t\t0x016C: { n:\"BrtExternTableEnd\", f:parsenoop },\n\t\t0x016E: { n:\"BrtExternRowHdr\", f:parsenoop },\n\t\t0x016F: { n:\"BrtExternCellBlank\", f:parsenoop },\n\t\t0x0170: { n:\"BrtExternCellReal\", f:parsenoop },\n\t\t0x0171: { n:\"BrtExternCellBool\", f:parsenoop },\n\t\t0x0172: { n:\"BrtExternCellError\", f:parsenoop },\n\t\t0x0173: { n:\"BrtExternCellString\", f:parsenoop },\n\t\t0x0174: { n:\"BrtBeginEsmdx\", f:parsenoop },\n\t\t0x0175: { n:\"BrtEndEsmdx\", f:parsenoop },\n\t\t0x0176: { n:\"BrtBeginMdxSet\", f:parsenoop },\n\t\t0x0177: { n:\"BrtEndMdxSet\", f:parsenoop },\n\t\t0x0178: { n:\"BrtBeginMdxMbrProp\", f:parsenoop },\n\t\t0x0179: { n:\"BrtEndMdxMbrProp\", f:parsenoop },\n\t\t0x017A: { n:\"BrtBeginMdxKPI\", f:parsenoop },\n\t\t0x017B: { n:\"BrtEndMdxKPI\", f:parsenoop },\n\t\t0x017C: { n:\"BrtBeginEsstr\", f:parsenoop },\n\t\t0x017D: { n:\"BrtEndEsstr\", f:parsenoop },\n\t\t0x017E: { n:\"BrtBeginPRFItem\", f:parsenoop },\n\t\t0x017F: { n:\"BrtEndPRFItem\", f:parsenoop },\n\t\t0x0180: { n:\"BrtBeginPivotCacheIDs\", f:parsenoop },\n\t\t0x0181: { n:\"BrtEndPivotCacheIDs\", f:parsenoop },\n\t\t0x0182: { n:\"BrtBeginPivotCacheID\", f:parsenoop },\n\t\t0x0183: { n:\"BrtEndPivotCacheID\", f:parsenoop },\n\t\t0x0184: { n:\"BrtBeginISXVIs\", f:parsenoop },\n\t\t0x0185: { n:\"BrtEndISXVIs\", f:parsenoop },\n\t\t0x0186: { n:\"BrtBeginColInfos\", f:parsenoop },\n\t\t0x0187: { n:\"BrtEndColInfos\", f:parsenoop },\n\t\t0x0188: { n:\"BrtBeginRwBrk\", f:parsenoop },\n\t\t0x0189: { n:\"BrtEndRwBrk\", f:parsenoop },\n\t\t0x018A: { n:\"BrtBeginColBrk\", f:parsenoop },\n\t\t0x018B: { n:\"BrtEndColBrk\", f:parsenoop },\n\t\t0x018C: { n:\"BrtBrk\", f:parsenoop },\n\t\t0x018D: { n:\"BrtUserBookView\", f:parsenoop },\n\t\t0x018E: { n:\"BrtInfo\", f:parsenoop },\n\t\t0x018F: { n:\"BrtCUsr\", f:parsenoop },\n\t\t0x0190: { n:\"BrtUsr\", f:parsenoop },\n\t\t0x0191: { n:\"BrtBeginUsers\", f:parsenoop },\n\t\t0x0193: { n:\"BrtEOF\", f:parsenoop },\n\t\t0x0194: { n:\"BrtUCR\", f:parsenoop },\n\t\t0x0195: { n:\"BrtRRInsDel\", f:parsenoop },\n\t\t0x0196: { n:\"BrtRREndInsDel\", f:parsenoop },\n\t\t0x0197: { n:\"BrtRRMove\", f:parsenoop },\n\t\t0x0198: { n:\"BrtRREndMove\", f:parsenoop },\n\t\t0x0199: { n:\"BrtRRChgCell\", f:parsenoop },\n\t\t0x019A: { n:\"BrtRREndChgCell\", f:parsenoop },\n\t\t0x019B: { n:\"BrtRRHeader\", f:parsenoop },\n\t\t0x019C: { n:\"BrtRRUserView\", f:parsenoop },\n\t\t0x019D: { n:\"BrtRRRenSheet\", f:parsenoop },\n\t\t0x019E: { n:\"BrtRRInsertSh\", f:parsenoop },\n\t\t0x019F: { n:\"BrtRRDefName\", f:parsenoop },\n\t\t0x01A0: { n:\"BrtRRNote\", f:parsenoop },\n\t\t0x01A1: { n:\"BrtRRConflict\", f:parsenoop },\n\t\t0x01A2: { n:\"BrtRRTQSIF\", f:parsenoop },\n\t\t0x01A3: { n:\"BrtRRFormat\", f:parsenoop },\n\t\t0x01A4: { n:\"BrtRREndFormat\", f:parsenoop },\n\t\t0x01A5: { n:\"BrtRRAutoFmt\", f:parsenoop },\n\t\t0x01A6: { n:\"BrtBeginUserShViews\", f:parsenoop },\n\t\t0x01A7: { n:\"BrtBeginUserShView\", f:parsenoop },\n\t\t0x01A8: { n:\"BrtEndUserShView\", f:parsenoop },\n\t\t0x01A9: { n:\"BrtEndUserShViews\", f:parsenoop },\n\t\t0x01AA: { n:\"BrtArrFmla\", f:parsenoop },\n\t\t0x01AB: { n:\"BrtShrFmla\", f:parsenoop },\n\t\t0x01AC: { n:\"BrtTable\", f:parsenoop },\n\t\t0x01AD: { n:\"BrtBeginExtConnections\", f:parsenoop },\n\t\t0x01AE: { n:\"BrtEndExtConnections\", f:parsenoop },\n\t\t0x01AF: { n:\"BrtBeginPCDCalcMems\", f:parsenoop },\n\t\t0x01B0: { n:\"BrtEndPCDCalcMems\", f:parsenoop },\n\t\t0x01B1: { n:\"BrtBeginPCDCalcMem\", f:parsenoop },\n\t\t0x01B2: { n:\"BrtEndPCDCalcMem\", f:parsenoop },\n\t\t0x01B3: { n:\"BrtBeginPCDHGLevels\", f:parsenoop },\n\t\t0x01B4: { n:\"BrtEndPCDHGLevels\", f:parsenoop },\n\t\t0x01B5: { n:\"BrtBeginPCDHGLevel\", f:parsenoop },\n\t\t0x01B6: { n:\"BrtEndPCDHGLevel\", f:parsenoop },\n\t\t0x01B7: { n:\"BrtBeginPCDHGLGroups\", f:parsenoop },\n\t\t0x01B8: { n:\"BrtEndPCDHGLGroups\", f:parsenoop },\n\t\t0x01B9: { n:\"BrtBeginPCDHGLGroup\", f:parsenoop },\n\t\t0x01BA: { n:\"BrtEndPCDHGLGroup\", f:parsenoop },\n\t\t0x01BB: { n:\"BrtBeginPCDHGLGMembers\", f:parsenoop },\n\t\t0x01BC: { n:\"BrtEndPCDHGLGMembers\", f:parsenoop },\n\t\t0x01BD: { n:\"BrtBeginPCDHGLGMember\", f:parsenoop },\n\t\t0x01BE: { n:\"BrtEndPCDHGLGMember\", f:parsenoop },\n\t\t0x01BF: { n:\"BrtBeginQSI\", f:parsenoop },\n\t\t0x01C0: { n:\"BrtEndQSI\", f:parsenoop },\n\t\t0x01C1: { n:\"BrtBeginQSIR\", f:parsenoop },\n\t\t0x01C2: { n:\"BrtEndQSIR\", f:parsenoop },\n\t\t0x01C3: { n:\"BrtBeginDeletedNames\", f:parsenoop },\n\t\t0x01C4: { n:\"BrtEndDeletedNames\", f:parsenoop },\n\t\t0x01C5: { n:\"BrtBeginDeletedName\", f:parsenoop },\n\t\t0x01C6: { n:\"BrtEndDeletedName\", f:parsenoop },\n\t\t0x01C7: { n:\"BrtBeginQSIFs\", f:parsenoop },\n\t\t0x01C8: { n:\"BrtEndQSIFs\", f:parsenoop },\n\t\t0x01C9: { n:\"BrtBeginQSIF\", f:parsenoop },\n\t\t0x01CA: { n:\"BrtEndQSIF\", f:parsenoop },\n\t\t0x01CB: { n:\"BrtBeginAutoSortScope\", f:parsenoop },\n\t\t0x01CC: { n:\"BrtEndAutoSortScope\", f:parsenoop },\n\t\t0x01CD: { n:\"BrtBeginConditionalFormatting\", f:parsenoop },\n\t\t0x01CE: { n:\"BrtEndConditionalFormatting\", f:parsenoop },\n\t\t0x01CF: { n:\"BrtBeginCFRule\", f:parsenoop },\n\t\t0x01D0: { n:\"BrtEndCFRule\", f:parsenoop },\n\t\t0x01D1: { n:\"BrtBeginIconSet\", f:parsenoop },\n\t\t0x01D2: { n:\"BrtEndIconSet\", f:parsenoop },\n\t\t0x01D3: { n:\"BrtBeginDatabar\", f:parsenoop },\n\t\t0x01D4: { n:\"BrtEndDatabar\", f:parsenoop },\n\t\t0x01D5: { n:\"BrtBeginColorScale\", f:parsenoop },\n\t\t0x01D6: { n:\"BrtEndColorScale\", f:parsenoop },\n\t\t0x01D7: { n:\"BrtCFVO\", f:parsenoop },\n\t\t0x01D8: { n:\"BrtExternValueMeta\", f:parsenoop },\n\t\t0x01D9: { n:\"BrtBeginColorPalette\", f:parsenoop },\n\t\t0x01DA: { n:\"BrtEndColorPalette\", f:parsenoop },\n\t\t0x01DB: { n:\"BrtIndexedColor\", f:parsenoop },\n\t\t0x01DC: { n:\"BrtMargins\", f:parsenoop },\n\t\t0x01DD: { n:\"BrtPrintOptions\", f:parsenoop },\n\t\t0x01DE: { n:\"BrtPageSetup\", f:parsenoop },\n\t\t0x01DF: { n:\"BrtBeginHeaderFooter\", f:parsenoop },\n\t\t0x01E0: { n:\"BrtEndHeaderFooter\", f:parsenoop },\n\t\t0x01E1: { n:\"BrtBeginSXCrtFormat\", f:parsenoop },\n\t\t0x01E2: { n:\"BrtEndSXCrtFormat\", f:parsenoop },\n\t\t0x01E3: { n:\"BrtBeginSXCrtFormats\", f:parsenoop },\n\t\t0x01E4: { n:\"BrtEndSXCrtFormats\", f:parsenoop },\n\t\t0x01E5: { n:\"BrtWsFmtInfo\", f:parsenoop },\n\t\t0x01E6: { n:\"BrtBeginMgs\", f:parsenoop },\n\t\t0x01E7: { n:\"BrtEndMGs\", f:parsenoop },\n\t\t0x01E8: { n:\"BrtBeginMGMaps\", f:parsenoop },\n\t\t0x01E9: { n:\"BrtEndMGMaps\", f:parsenoop },\n\t\t0x01EA: { n:\"BrtBeginMG\", f:parsenoop },\n\t\t0x01EB: { n:\"BrtEndMG\", f:parsenoop },\n\t\t0x01EC: { n:\"BrtBeginMap\", f:parsenoop },\n\t\t0x01ED: { n:\"BrtEndMap\", f:parsenoop },\n\t\t0x01EE: { n:\"BrtHLink\", f:parse_BrtHLink },\n\t\t0x01EF: { n:\"BrtBeginDCon\", f:parsenoop },\n\t\t0x01F0: { n:\"BrtEndDCon\", f:parsenoop },\n\t\t0x01F1: { n:\"BrtBeginDRefs\", f:parsenoop },\n\t\t0x01F2: { n:\"BrtEndDRefs\", f:parsenoop },\n\t\t0x01F3: { n:\"BrtDRef\", f:parsenoop },\n\t\t0x01F4: { n:\"BrtBeginScenMan\", f:parsenoop },\n\t\t0x01F5: { n:\"BrtEndScenMan\", f:parsenoop },\n\t\t0x01F6: { n:\"BrtBeginSct\", f:parsenoop },\n\t\t0x01F7: { n:\"BrtEndSct\", f:parsenoop },\n\t\t0x01F8: { n:\"BrtSlc\", f:parsenoop },\n\t\t0x01F9: { n:\"BrtBeginDXFs\", f:parsenoop },\n\t\t0x01FA: { n:\"BrtEndDXFs\", f:parsenoop },\n\t\t0x01FB: { n:\"BrtDXF\", f:parsenoop },\n\t\t0x01FC: { n:\"BrtBeginTableStyles\", f:parsenoop },\n\t\t0x01FD: { n:\"BrtEndTableStyles\", f:parsenoop },\n\t\t0x01FE: { n:\"BrtBeginTableStyle\", f:parsenoop },\n\t\t0x01FF: { n:\"BrtEndTableStyle\", f:parsenoop },\n\t\t0x0200: { n:\"BrtTableStyleElement\", f:parsenoop },\n\t\t0x0201: { n:\"BrtTableStyleClient\", f:parsenoop },\n\t\t0x0202: { n:\"BrtBeginVolDeps\", f:parsenoop },\n\t\t0x0203: { n:\"BrtEndVolDeps\", f:parsenoop },\n\t\t0x0204: { n:\"BrtBeginVolType\", f:parsenoop },\n\t\t0x0205: { n:\"BrtEndVolType\", f:parsenoop },\n\t\t0x0206: { n:\"BrtBeginVolMain\", f:parsenoop },\n\t\t0x0207: { n:\"BrtEndVolMain\", f:parsenoop },\n\t\t0x0208: { n:\"BrtBeginVolTopic\", f:parsenoop },\n\t\t0x0209: { n:\"BrtEndVolTopic\", f:parsenoop },\n\t\t0x020A: { n:\"BrtVolSubtopic\", f:parsenoop },\n\t\t0x020B: { n:\"BrtVolRef\", f:parsenoop },\n\t\t0x020C: { n:\"BrtVolNum\", f:parsenoop },\n\t\t0x020D: { n:\"BrtVolErr\", f:parsenoop },\n\t\t0x020E: { n:\"BrtVolStr\", f:parsenoop },\n\t\t0x020F: { n:\"BrtVolBool\", f:parsenoop },\n\t\t0x0210: { n:\"BrtBeginCalcChain$\", f:parsenoop },\n\t\t0x0211: { n:\"BrtEndCalcChain$\", f:parsenoop },\n\t\t0x0212: { n:\"BrtBeginSortState\", f:parsenoop },\n\t\t0x0213: { n:\"BrtEndSortState\", f:parsenoop },\n\t\t0x0214: { n:\"BrtBeginSortCond\", f:parsenoop },\n\t\t0x0215: { n:\"BrtEndSortCond\", f:parsenoop },\n\t\t0x0216: { n:\"BrtBookProtection\", f:parsenoop },\n\t\t0x0217: { n:\"BrtSheetProtection\", f:parsenoop },\n\t\t0x0218: { n:\"BrtRangeProtection\", f:parsenoop },\n\t\t0x0219: { n:\"BrtPhoneticInfo\", f:parsenoop },\n\t\t0x021A: { n:\"BrtBeginECTxtWiz\", f:parsenoop },\n\t\t0x021B: { n:\"BrtEndECTxtWiz\", f:parsenoop },\n\t\t0x021C: { n:\"BrtBeginECTWFldInfoLst\", f:parsenoop },\n\t\t0x021D: { n:\"BrtEndECTWFldInfoLst\", f:parsenoop },\n\t\t0x021E: { n:\"BrtBeginECTwFldInfo\", f:parsenoop },\n\t\t0x0224: { n:\"BrtFileSharing\", f:parsenoop },\n\t\t0x0225: { n:\"BrtOleSize\", f:parsenoop },\n\t\t0x0226: { n:\"BrtDrawing\", f:parsenoop },\n\t\t0x0227: { n:\"BrtLegacyDrawing\", f:parsenoop },\n\t\t0x0228: { n:\"BrtLegacyDrawingHF\", f:parsenoop },\n\t\t0x0229: { n:\"BrtWebOpt\", f:parsenoop },\n\t\t0x022A: { n:\"BrtBeginWebPubItems\", f:parsenoop },\n\t\t0x022B: { n:\"BrtEndWebPubItems\", f:parsenoop },\n\t\t0x022C: { n:\"BrtBeginWebPubItem\", f:parsenoop },\n\t\t0x022D: { n:\"BrtEndWebPubItem\", f:parsenoop },\n\t\t0x022E: { n:\"BrtBeginSXCondFmt\", f:parsenoop },\n\t\t0x022F: { n:\"BrtEndSXCondFmt\", f:parsenoop },\n\t\t0x0230: { n:\"BrtBeginSXCondFmts\", f:parsenoop },\n\t\t0x0231: { n:\"BrtEndSXCondFmts\", f:parsenoop },\n\t\t0x0232: { n:\"BrtBkHim\", f:parsenoop },\n\t\t0x0234: { n:\"BrtColor\", f:parsenoop },\n\t\t0x0235: { n:\"BrtBeginIndexedColors\", f:parsenoop },\n\t\t0x0236: { n:\"BrtEndIndexedColors\", f:parsenoop },\n\t\t0x0239: { n:\"BrtBeginMRUColors\", f:parsenoop },\n\t\t0x023A: { n:\"BrtEndMRUColors\", f:parsenoop },\n\t\t0x023C: { n:\"BrtMRUColor\", f:parsenoop },\n\t\t0x023D: { n:\"BrtBeginDVals\", f:parsenoop },\n\t\t0x023E: { n:\"BrtEndDVals\", f:parsenoop },\n\t\t0x0241: { n:\"BrtSupNameStart\", f:parsenoop },\n\t\t0x0242: { n:\"BrtSupNameValueStart\", f:parsenoop },\n\t\t0x0243: { n:\"BrtSupNameValueEnd\", f:parsenoop },\n\t\t0x0244: { n:\"BrtSupNameNum\", f:parsenoop },\n\t\t0x0245: { n:\"BrtSupNameErr\", f:parsenoop },\n\t\t0x0246: { n:\"BrtSupNameSt\", f:parsenoop },\n\t\t0x0247: { n:\"BrtSupNameNil\", f:parsenoop },\n\t\t0x0248: { n:\"BrtSupNameBool\", f:parsenoop },\n\t\t0x0249: { n:\"BrtSupNameFmla\", f:parsenoop },\n\t\t0x024A: { n:\"BrtSupNameBits\", f:parsenoop },\n\t\t0x024B: { n:\"BrtSupNameEnd\", f:parsenoop },\n\t\t0x024C: { n:\"BrtEndSupBook\", f:parsenoop },\n\t\t0x024D: { n:\"BrtCellSmartTagProperty\", f:parsenoop },\n\t\t0x024E: { n:\"BrtBeginCellSmartTag\", f:parsenoop },\n\t\t0x024F: { n:\"BrtEndCellSmartTag\", f:parsenoop },\n\t\t0x0250: { n:\"BrtBeginCellSmartTags\", f:parsenoop },\n\t\t0x0251: { n:\"BrtEndCellSmartTags\", f:parsenoop },\n\t\t0x0252: { n:\"BrtBeginSmartTags\", f:parsenoop },\n\t\t0x0253: { n:\"BrtEndSmartTags\", f:parsenoop },\n\t\t0x0254: { n:\"BrtSmartTagType\", f:parsenoop },\n\t\t0x0255: { n:\"BrtBeginSmartTagTypes\", f:parsenoop },\n\t\t0x0256: { n:\"BrtEndSmartTagTypes\", f:parsenoop },\n\t\t0x0257: { n:\"BrtBeginSXFilters\", f:parsenoop },\n\t\t0x0258: { n:\"BrtEndSXFilters\", f:parsenoop },\n\t\t0x0259: { n:\"BrtBeginSXFILTER\", f:parsenoop },\n\t\t0x025A: { n:\"BrtEndSXFilter\", f:parsenoop },\n\t\t0x025B: { n:\"BrtBeginFills\", f:parsenoop },\n\t\t0x025C: { n:\"BrtEndFills\", f:parsenoop },\n\t\t0x025D: { n:\"BrtBeginCellWatches\", f:parsenoop },\n\t\t0x025E: { n:\"BrtEndCellWatches\", f:parsenoop },\n\t\t0x025F: { n:\"BrtCellWatch\", f:parsenoop },\n\t\t0x0260: { n:\"BrtBeginCRErrs\", f:parsenoop },\n\t\t0x0261: { n:\"BrtEndCRErrs\", f:parsenoop },\n\t\t0x0262: { n:\"BrtCrashRecErr\", f:parsenoop },\n\t\t0x0263: { n:\"BrtBeginFonts\", f:parsenoop },\n\t\t0x0264: { n:\"BrtEndFonts\", f:parsenoop },\n\t\t0x0265: { n:\"BrtBeginBorders\", f:parsenoop },\n\t\t0x0266: { n:\"BrtEndBorders\", f:parsenoop },\n\t\t0x0267: { n:\"BrtBeginFmts\", f:parsenoop },\n\t\t0x0268: { n:\"BrtEndFmts\", f:parsenoop },\n\t\t0x0269: { n:\"BrtBeginCellXFs\", f:parsenoop },\n\t\t0x026A: { n:\"BrtEndCellXFs\", f:parsenoop },\n\t\t0x026B: { n:\"BrtBeginStyles\", f:parsenoop },\n\t\t0x026C: { n:\"BrtEndStyles\", f:parsenoop },\n\t\t0x0271: { n:\"BrtBigName\", f:parsenoop },\n\t\t0x0272: { n:\"BrtBeginCellStyleXFs\", f:parsenoop },\n\t\t0x0273: { n:\"BrtEndCellStyleXFs\", f:parsenoop },\n\t\t0x0274: { n:\"BrtBeginComments\", f:parsenoop },\n\t\t0x0275: { n:\"BrtEndComments\", f:parsenoop },\n\t\t0x0276: { n:\"BrtBeginCommentAuthors\", f:parsenoop },\n\t\t0x0277: { n:\"BrtEndCommentAuthors\", f:parsenoop },\n\t\t0x0278: { n:\"BrtCommentAuthor\", f:parse_BrtCommentAuthor },\n\t\t0x0279: { n:\"BrtBeginCommentList\", f:parsenoop },\n\t\t0x027A: { n:\"BrtEndCommentList\", f:parsenoop },\n\t\t0x027B: { n:\"BrtBeginComment\", f:parse_BrtBeginComment},\n\t\t0x027C: { n:\"BrtEndComment\", f:parsenoop },\n\t\t0x027D: { n:\"BrtCommentText\", f:parse_BrtCommentText },\n\t\t0x027E: { n:\"BrtBeginOleObjects\", f:parsenoop },\n\t\t0x027F: { n:\"BrtOleObject\", f:parsenoop },\n\t\t0x0280: { n:\"BrtEndOleObjects\", f:parsenoop },\n\t\t0x0281: { n:\"BrtBeginSxrules\", f:parsenoop },\n\t\t0x0282: { n:\"BrtEndSxRules\", f:parsenoop },\n\t\t0x0283: { n:\"BrtBeginActiveXControls\", f:parsenoop },\n\t\t0x0284: { n:\"BrtActiveX\", f:parsenoop },\n\t\t0x0285: { n:\"BrtEndActiveXControls\", f:parsenoop },\n\t\t0x0286: { n:\"BrtBeginPCDSDTCEMembersSortBy\", f:parsenoop },\n\t\t0x0288: { n:\"BrtBeginCellIgnoreECs\", f:parsenoop },\n\t\t0x0289: { n:\"BrtCellIgnoreEC\", f:parsenoop },\n\t\t0x028A: { n:\"BrtEndCellIgnoreECs\", f:parsenoop },\n\t\t0x028B: { n:\"BrtCsProp\", f:parsenoop },\n\t\t0x028C: { n:\"BrtCsPageSetup\", f:parsenoop },\n\t\t0x028D: { n:\"BrtBeginUserCsViews\", f:parsenoop },\n\t\t0x028E: { n:\"BrtEndUserCsViews\", f:parsenoop },\n\t\t0x028F: { n:\"BrtBeginUserCsView\", f:parsenoop },\n\t\t0x0290: { n:\"BrtEndUserCsView\", f:parsenoop },\n\t\t0x0291: { n:\"BrtBeginPcdSFCIEntries\", f:parsenoop },\n\t\t0x0292: { n:\"BrtEndPCDSFCIEntries\", f:parsenoop },\n\t\t0x0293: { n:\"BrtPCDSFCIEntry\", f:parsenoop },\n\t\t0x0294: { n:\"BrtBeginListParts\", f:parsenoop },\n\t\t0x0295: { n:\"BrtListPart\", f:parsenoop },\n\t\t0x0296: { n:\"BrtEndListParts\", f:parsenoop },\n\t\t0x0297: { n:\"BrtSheetCalcProp\", f:parsenoop },\n\t\t0x0298: { n:\"BrtBeginFnGroup\", f:parsenoop },\n\t\t0x0299: { n:\"BrtFnGroup\", f:parsenoop },\n\t\t0x029A: { n:\"BrtEndFnGroup\", f:parsenoop },\n\t\t0x029B: { n:\"BrtSupAddin\", f:parsenoop },\n\t\t0x029C: { n:\"BrtSXTDMPOrder\", f:parsenoop },\n\t\t0x029D: { n:\"BrtCsProtection\", f:parsenoop },\n\t\t0x029F: { n:\"BrtBeginWsSortMap\", f:parsenoop },\n\t\t0x02A0: { n:\"BrtEndWsSortMap\", f:parsenoop },\n\t\t0x02A1: { n:\"BrtBeginRRSort\", f:parsenoop },\n\t\t0x02A2: { n:\"BrtEndRRSort\", f:parsenoop },\n\t\t0x02A3: { n:\"BrtRRSortItem\", f:parsenoop },\n\t\t0x02A4: { n:\"BrtFileSharingIso\", f:parsenoop },\n\t\t0x02A5: { n:\"BrtBookProtectionIso\", f:parsenoop },\n\t\t0x02A6: { n:\"BrtSheetProtectionIso\", f:parsenoop },\n\t\t0x02A7: { n:\"BrtCsProtectionIso\", f:parsenoop },\n\t\t0x02A8: { n:\"BrtRangeProtectionIso\", f:parsenoop },\n\t\t0x0400: { n:\"BrtRwDescent\", f:parsenoop },\n\t\t0x0401: { n:\"BrtKnownFonts\", f:parsenoop },\n\t\t0x0402: { n:\"BrtBeginSXTupleSet\", f:parsenoop },\n\t\t0x0403: { n:\"BrtEndSXTupleSet\", f:parsenoop },\n\t\t0x0404: { n:\"BrtBeginSXTupleSetHeader\", f:parsenoop },\n\t\t0x0405: { n:\"BrtEndSXTupleSetHeader\", f:parsenoop },\n\t\t0x0406: { n:\"BrtSXTupleSetHeaderItem\", f:parsenoop },\n\t\t0x0407: { n:\"BrtBeginSXTupleSetData\", f:parsenoop },\n\t\t0x0408: { n:\"BrtEndSXTupleSetData\", f:parsenoop },\n\t\t0x0409: { n:\"BrtBeginSXTupleSetRow\", f:parsenoop },\n\t\t0x040A: { n:\"BrtEndSXTupleSetRow\", f:parsenoop },\n\t\t0x040B: { n:\"BrtSXTupleSetRowItem\", f:parsenoop },\n\t\t0x040C: { n:\"BrtNameExt\", f:parsenoop },\n\t\t0x040D: { n:\"BrtPCDH14\", f:parsenoop },\n\t\t0x040E: { n:\"BrtBeginPCDCalcMem14\", f:parsenoop },\n\t\t0x040F: { n:\"BrtEndPCDCalcMem14\", f:parsenoop },\n\t\t0x0410: { n:\"BrtSXTH14\", f:parsenoop },\n\t\t0x0411: { n:\"BrtBeginSparklineGroup\", f:parsenoop },\n\t\t0x0412: { n:\"BrtEndSparklineGroup\", f:parsenoop },\n\t\t0x0413: { n:\"BrtSparkline\", f:parsenoop },\n\t\t0x0414: { n:\"BrtSXDI14\", f:parsenoop },\n\t\t0x0415: { n:\"BrtWsFmtInfoEx14\", f:parsenoop },\n\t\t0x0416: { n:\"BrtBeginConditionalFormatting14\", f:parsenoop },\n\t\t0x0417: { n:\"BrtEndConditionalFormatting14\", f:parsenoop },\n\t\t0x0418: { n:\"BrtBeginCFRule14\", f:parsenoop },\n\t\t0x0419: { n:\"BrtEndCFRule14\", f:parsenoop },\n\t\t0x041A: { n:\"BrtCFVO14\", f:parsenoop },\n\t\t0x041B: { n:\"BrtBeginDatabar14\", f:parsenoop },\n\t\t0x041C: { n:\"BrtBeginIconSet14\", f:parsenoop },\n\t\t0x041D: { n:\"BrtDVal14\", f:parsenoop },\n\t\t0x041E: { n:\"BrtBeginDVals14\", f:parsenoop },\n\t\t0x041F: { n:\"BrtColor14\", f:parsenoop },\n\t\t0x0420: { n:\"BrtBeginSparklines\", f:parsenoop },\n\t\t0x0421: { n:\"BrtEndSparklines\", f:parsenoop },\n\t\t0x0422: { n:\"BrtBeginSparklineGroups\", f:parsenoop },\n\t\t0x0423: { n:\"BrtEndSparklineGroups\", f:parsenoop },\n\t\t0x0425: { n:\"BrtSXVD14\", f:parsenoop },\n\t\t0x0426: { n:\"BrtBeginSxview14\", f:parsenoop },\n\t\t0x0427: { n:\"BrtEndSxview14\", f:parsenoop },\n\t\t0x042A: { n:\"BrtBeginPCD14\", f:parsenoop },\n\t\t0x042B: { n:\"BrtEndPCD14\", f:parsenoop },\n\t\t0x042C: { n:\"BrtBeginExtConn14\", f:parsenoop },\n\t\t0x042D: { n:\"BrtEndExtConn14\", f:parsenoop },\n\t\t0x042E: { n:\"BrtBeginSlicerCacheIDs\", f:parsenoop },\n\t\t0x042F: { n:\"BrtEndSlicerCacheIDs\", f:parsenoop },\n\t\t0x0430: { n:\"BrtBeginSlicerCacheID\", f:parsenoop },\n\t\t0x0431: { n:\"BrtEndSlicerCacheID\", f:parsenoop },\n\t\t0x0433: { n:\"BrtBeginSlicerCache\", f:parsenoop },\n\t\t0x0434: { n:\"BrtEndSlicerCache\", f:parsenoop },\n\t\t0x0435: { n:\"BrtBeginSlicerCacheDef\", f:parsenoop },\n\t\t0x0436: { n:\"BrtEndSlicerCacheDef\", f:parsenoop },\n\t\t0x0437: { n:\"BrtBeginSlicersEx\", f:parsenoop },\n\t\t0x0438: { n:\"BrtEndSlicersEx\", f:parsenoop },\n\t\t0x0439: { n:\"BrtBeginSlicerEx\", f:parsenoop },\n\t\t0x043A: { n:\"BrtEndSlicerEx\", f:parsenoop },\n\t\t0x043B: { n:\"BrtBeginSlicer\", f:parsenoop },\n\t\t0x043C: { n:\"BrtEndSlicer\", f:parsenoop },\n\t\t0x043D: { n:\"BrtSlicerCachePivotTables\", f:parsenoop },\n\t\t0x043E: { n:\"BrtBeginSlicerCacheOlapImpl\", f:parsenoop },\n\t\t0x043F: { n:\"BrtEndSlicerCacheOlapImpl\", f:parsenoop },\n\t\t0x0440: { n:\"BrtBeginSlicerCacheLevelsData\", f:parsenoop },\n\t\t0x0441: { n:\"BrtEndSlicerCacheLevelsData\", f:parsenoop },\n\t\t0x0442: { n:\"BrtBeginSlicerCacheLevelData\", f:parsenoop },\n\t\t0x0443: { n:\"BrtEndSlicerCacheLevelData\", f:parsenoop },\n\t\t0x0444: { n:\"BrtBeginSlicerCacheSiRanges\", f:parsenoop },\n\t\t0x0445: { n:\"BrtEndSlicerCacheSiRanges\", f:parsenoop },\n\t\t0x0446: { n:\"BrtBeginSlicerCacheSiRange\", f:parsenoop },\n\t\t0x0447: { n:\"BrtEndSlicerCacheSiRange\", f:parsenoop },\n\t\t0x0448: { n:\"BrtSlicerCacheOlapItem\", f:parsenoop },\n\t\t0x0449: { n:\"BrtBeginSlicerCacheSelections\", f:parsenoop },\n\t\t0x044A: { n:\"BrtSlicerCacheSelection\", f:parsenoop },\n\t\t0x044B: { n:\"BrtEndSlicerCacheSelections\", f:parsenoop },\n\t\t0x044C: { n:\"BrtBeginSlicerCacheNative\", f:parsenoop },\n\t\t0x044D: { n:\"BrtEndSlicerCacheNative\", f:parsenoop },\n\t\t0x044E: { n:\"BrtSlicerCacheNativeItem\", f:parsenoop },\n\t\t0x044F: { n:\"BrtRangeProtection14\", f:parsenoop },\n\t\t0x0450: { n:\"BrtRangeProtectionIso14\", f:parsenoop },\n\t\t0x0451: { n:\"BrtCellIgnoreEC14\", f:parsenoop },\n\t\t0x0457: { n:\"BrtList14\", f:parsenoop },\n\t\t0x0458: { n:\"BrtCFIcon\", f:parsenoop },\n\t\t0x0459: { n:\"BrtBeginSlicerCachesPivotCacheIDs\", f:parsenoop },\n\t\t0x045A: { n:\"BrtEndSlicerCachesPivotCacheIDs\", f:parsenoop },\n\t\t0x045B: { n:\"BrtBeginSlicers\", f:parsenoop },\n\t\t0x045C: { n:\"BrtEndSlicers\", f:parsenoop },\n\t\t0x045D: { n:\"BrtWbProp14\", f:parsenoop },\n\t\t0x045E: { n:\"BrtBeginSXEdit\", f:parsenoop },\n\t\t0x045F: { n:\"BrtEndSXEdit\", f:parsenoop },\n\t\t0x0460: { n:\"BrtBeginSXEdits\", f:parsenoop },\n\t\t0x0461: { n:\"BrtEndSXEdits\", f:parsenoop },\n\t\t0x0462: { n:\"BrtBeginSXChange\", f:parsenoop },\n\t\t0x0463: { n:\"BrtEndSXChange\", f:parsenoop },\n\t\t0x0464: { n:\"BrtBeginSXChanges\", f:parsenoop },\n\t\t0x0465: { n:\"BrtEndSXChanges\", f:parsenoop },\n\t\t0x0466: { n:\"BrtSXTupleItems\", f:parsenoop },\n\t\t0x0468: { n:\"BrtBeginSlicerStyle\", f:parsenoop },\n\t\t0x0469: { n:\"BrtEndSlicerStyle\", f:parsenoop },\n\t\t0x046A: { n:\"BrtSlicerStyleElement\", f:parsenoop },\n\t\t0x046B: { n:\"BrtBeginStyleSheetExt14\", f:parsenoop },\n\t\t0x046C: { n:\"BrtEndStyleSheetExt14\", f:parsenoop },\n\t\t0x046D: { n:\"BrtBeginSlicerCachesPivotCacheID\", f:parsenoop },\n\t\t0x046E: { n:\"BrtEndSlicerCachesPivotCacheID\", f:parsenoop },\n\t\t0x046F: { n:\"BrtBeginConditionalFormattings\", f:parsenoop },\n\t\t0x0470: { n:\"BrtEndConditionalFormattings\", f:parsenoop },\n\t\t0x0471: { n:\"BrtBeginPCDCalcMemExt\", f:parsenoop },\n\t\t0x0472: { n:\"BrtEndPCDCalcMemExt\", f:parsenoop },\n\t\t0x0473: { n:\"BrtBeginPCDCalcMemsExt\", f:parsenoop },\n\t\t0x0474: { n:\"BrtEndPCDCalcMemsExt\", f:parsenoop },\n\t\t0x0475: { n:\"BrtPCDField14\", f:parsenoop },\n\t\t0x0476: { n:\"BrtBeginSlicerStyles\", f:parsenoop },\n\t\t0x0477: { n:\"BrtEndSlicerStyles\", f:parsenoop },\n\t\t0x0478: { n:\"BrtBeginSlicerStyleElements\", f:parsenoop },\n\t\t0x0479: { n:\"BrtEndSlicerStyleElements\", f:parsenoop },\n\t\t0x047A: { n:\"BrtCFRuleExt\", f:parsenoop },\n\t\t0x047B: { n:\"BrtBeginSXCondFmt14\", f:parsenoop },\n\t\t0x047C: { n:\"BrtEndSXCondFmt14\", f:parsenoop },\n\t\t0x047D: { n:\"BrtBeginSXCondFmts14\", f:parsenoop },\n\t\t0x047E: { n:\"BrtEndSXCondFmts14\", f:parsenoop },\n\t\t0x0480: { n:\"BrtBeginSortCond14\", f:parsenoop },\n\t\t0x0481: { n:\"BrtEndSortCond14\", f:parsenoop },\n\t\t0x0482: { n:\"BrtEndDVals14\", f:parsenoop },\n\t\t0x0483: { n:\"BrtEndIconSet14\", f:parsenoop },\n\t\t0x0484: { n:\"BrtEndDatabar14\", f:parsenoop },\n\t\t0x0485: { n:\"BrtBeginColorScale14\", f:parsenoop },\n\t\t0x0486: { n:\"BrtEndColorScale14\", f:parsenoop },\n\t\t0x0487: { n:\"BrtBeginSxrules14\", f:parsenoop },\n\t\t0x0488: { n:\"BrtEndSxrules14\", f:parsenoop },\n\t\t0x0489: { n:\"BrtBeginPRule14\", f:parsenoop },\n\t\t0x048A: { n:\"BrtEndPRule14\", f:parsenoop },\n\t\t0x048B: { n:\"BrtBeginPRFilters14\", f:parsenoop },\n\t\t0x048C: { n:\"BrtEndPRFilters14\", f:parsenoop },\n\t\t0x048D: { n:\"BrtBeginPRFilter14\", f:parsenoop },\n\t\t0x048E: { n:\"BrtEndPRFilter14\", f:parsenoop },\n\t\t0x048F: { n:\"BrtBeginPRFItem14\", f:parsenoop },\n\t\t0x0490: { n:\"BrtEndPRFItem14\", f:parsenoop },\n\t\t0x0491: { n:\"BrtBeginCellIgnoreECs14\", f:parsenoop },\n\t\t0x0492: { n:\"BrtEndCellIgnoreECs14\", f:parsenoop },\n\t\t0x0493: { n:\"BrtDxf14\", f:parsenoop },\n\t\t0x0494: { n:\"BrtBeginDxF14s\", f:parsenoop },\n\t\t0x0495: { n:\"BrtEndDxf14s\", f:parsenoop },\n\t\t0x0499: { n:\"BrtFilter14\", f:parsenoop },\n\t\t0x049A: { n:\"BrtBeginCustomFilters14\", f:parsenoop },\n\t\t0x049C: { n:\"BrtCustomFilter14\", f:parsenoop },\n\t\t0x049D: { n:\"BrtIconFilter14\", f:parsenoop },\n\t\t0x049E: { n:\"BrtPivotCacheConnectionName\", f:parsenoop },\n\t\t0x0800: { n:\"BrtBeginDecoupledPivotCacheIDs\", f:parsenoop },\n\t\t0x0801: { n:\"BrtEndDecoupledPivotCacheIDs\", f:parsenoop },\n\t\t0x0802: { n:\"BrtDecoupledPivotCacheID\", f:parsenoop },\n\t\t0x0803: { n:\"BrtBeginPivotTableRefs\", f:parsenoop },\n\t\t0x0804: { n:\"BrtEndPivotTableRefs\", f:parsenoop },\n\t\t0x0805: { n:\"BrtPivotTableRef\", f:parsenoop },\n\t\t0x0806: { n:\"BrtSlicerCacheBookPivotTables\", f:parsenoop },\n\t\t0x0807: { n:\"BrtBeginSxvcells\", f:parsenoop },\n\t\t0x0808: { n:\"BrtEndSxvcells\", f:parsenoop },\n\t\t0x0809: { n:\"BrtBeginSxRow\", f:parsenoop },\n\t\t0x080A: { n:\"BrtEndSxRow\", f:parsenoop },\n\t\t0x080C: { n:\"BrtPcdCalcMem15\", f:parsenoop },\n\t\t0x0813: { n:\"BrtQsi15\", f:parsenoop },\n\t\t0x0814: { n:\"BrtBeginWebExtensions\", f:parsenoop },\n\t\t0x0815: { n:\"BrtEndWebExtensions\", f:parsenoop },\n\t\t0x0816: { n:\"BrtWebExtension\", f:parsenoop },\n\t\t0x0817: { n:\"BrtAbsPath15\", f:parsenoop },\n\t\t0x0818: { n:\"BrtBeginPivotTableUISettings\", f:parsenoop },\n\t\t0x0819: { n:\"BrtEndPivotTableUISettings\", f:parsenoop },\n\t\t0x081B: { n:\"BrtTableSlicerCacheIDs\", f:parsenoop },\n\t\t0x081C: { n:\"BrtTableSlicerCacheID\", f:parsenoop },\n\t\t0x081D: { n:\"BrtBeginTableSlicerCache\", f:parsenoop },\n\t\t0x081E: { n:\"BrtEndTableSlicerCache\", f:parsenoop },\n\t\t0x081F: { n:\"BrtSxFilter15\", f:parsenoop },\n\t\t0x0820: { n:\"BrtBeginTimelineCachePivotCacheIDs\", f:parsenoop },\n\t\t0x0821: { n:\"BrtEndTimelineCachePivotCacheIDs\", f:parsenoop },\n\t\t0x0822: { n:\"BrtTimelineCachePivotCacheID\", f:parsenoop },\n\t\t0x0823: { n:\"BrtBeginTimelineCacheIDs\", f:parsenoop },\n\t\t0x0824: { n:\"BrtEndTimelineCacheIDs\", f:parsenoop },\n\t\t0x0825: { n:\"BrtBeginTimelineCacheID\", f:parsenoop },\n\t\t0x0826: { n:\"BrtEndTimelineCacheID\", f:parsenoop },\n\t\t0x0827: { n:\"BrtBeginTimelinesEx\", f:parsenoop },\n\t\t0x0828: { n:\"BrtEndTimelinesEx\", f:parsenoop },\n\t\t0x0829: { n:\"BrtBeginTimelineEx\", f:parsenoop },\n\t\t0x082A: { n:\"BrtEndTimelineEx\", f:parsenoop },\n\t\t0x082B: { n:\"BrtWorkBookPr15\", f:parsenoop },\n\t\t0x082C: { n:\"BrtPCDH15\", f:parsenoop },\n\t\t0x082D: { n:\"BrtBeginTimelineStyle\", f:parsenoop },\n\t\t0x082E: { n:\"BrtEndTimelineStyle\", f:parsenoop },\n\t\t0x082F: { n:\"BrtTimelineStyleElement\", f:parsenoop },\n\t\t0x0830: { n:\"BrtBeginTimelineStylesheetExt15\", f:parsenoop },\n\t\t0x0831: { n:\"BrtEndTimelineStylesheetExt15\", f:parsenoop },\n\t\t0x0832: { n:\"BrtBeginTimelineStyles\", f:parsenoop },\n\t\t0x0833: { n:\"BrtEndTimelineStyles\", f:parsenoop },\n\t\t0x0834: { n:\"BrtBeginTimelineStyleElements\", f:parsenoop },\n\t\t0x0835: { n:\"BrtEndTimelineStyleElements\", f:parsenoop },\n\t\t0x0836: { n:\"BrtDxf15\", f:parsenoop },\n\t\t0x0837: { n:\"BrtBeginDxfs15\", f:parsenoop },\n\t\t0x0838: { n:\"brtEndDxfs15\", f:parsenoop },\n\t\t0x0839: { n:\"BrtSlicerCacheHideItemsWithNoData\", f:parsenoop },\n\t\t0x083A: { n:\"BrtBeginItemUniqueNames\", f:parsenoop },\n\t\t0x083B: { n:\"BrtEndItemUniqueNames\", f:parsenoop },\n\t\t0x083C: { n:\"BrtItemUniqueName\", f:parsenoop },\n\t\t0x083D: { n:\"BrtBeginExtConn15\", f:parsenoop },\n\t\t0x083E: { n:\"BrtEndExtConn15\", f:parsenoop },\n\t\t0x083F: { n:\"BrtBeginOledbPr15\", f:parsenoop },\n\t\t0x0840: { n:\"BrtEndOledbPr15\", f:parsenoop },\n\t\t0x0841: { n:\"BrtBeginDataFeedPr15\", f:parsenoop },\n\t\t0x0842: { n:\"BrtEndDataFeedPr15\", f:parsenoop },\n\t\t0x0843: { n:\"BrtTextPr15\", f:parsenoop },\n\t\t0x0844: { n:\"BrtRangePr15\", f:parsenoop },\n\t\t0x0845: { n:\"BrtDbCommand15\", f:parsenoop },\n\t\t0x0846: { n:\"BrtBeginDbTables15\", f:parsenoop },\n\t\t0x0847: { n:\"BrtEndDbTables15\", f:parsenoop },\n\t\t0x0848: { n:\"BrtDbTable15\", f:parsenoop },\n\t\t0x0849: { n:\"BrtBeginDataModel\", f:parsenoop },\n\t\t0x084A: { n:\"BrtEndDataModel\", f:parsenoop },\n\t\t0x084B: { n:\"BrtBeginModelTables\", f:parsenoop },\n\t\t0x084C: { n:\"BrtEndModelTables\", f:parsenoop },\n\t\t0x084D: { n:\"BrtModelTable\", f:parsenoop },\n\t\t0x084E: { n:\"BrtBeginModelRelationships\", f:parsenoop },\n\t\t0x084F: { n:\"BrtEndModelRelationships\", f:parsenoop },\n\t\t0x0850: { n:\"BrtModelRelationship\", f:parsenoop },\n\t\t0x0851: { n:\"BrtBeginECTxtWiz15\", f:parsenoop },\n\t\t0x0852: { n:\"BrtEndECTxtWiz15\", f:parsenoop },\n\t\t0x0853: { n:\"BrtBeginECTWFldInfoLst15\", f:parsenoop },\n\t\t0x0854: { n:\"BrtEndECTWFldInfoLst15\", f:parsenoop },\n\t\t0x0855: { n:\"BrtBeginECTWFldInfo15\", f:parsenoop },\n\t\t0x0856: { n:\"BrtFieldListActiveItem\", f:parsenoop },\n\t\t0x0857: { n:\"BrtPivotCacheIdVersion\", f:parsenoop },\n\t\t0x0858: { n:\"BrtSXDI15\", f:parsenoop },\n\t\t0xFFFF: { n:\"\", f:parsenoop }\n\t};\n\t\n\tvar evert_RE = evert_key(XLSBRecordEnum, 'n');\n\t\n\t/* [MS-XLS] 2.3 Record Enumeration */\n\tvar XLSRecordEnum = {\n\t\t0x0003: { n:\"BIFF2NUM\", f:parse_BIFF2NUM },\n\t\t0x0004: { n:\"BIFF2STR\", f:parse_BIFF2STR },\n\t\t0x0006: { n:\"Formula\", f:parse_Formula },\n\t\t0x0009: { n:'BOF', f:parse_BOF },\n\t\t0x000a: { n:'EOF', f:parse_EOF },\n\t\t0x000c: { n:\"CalcCount\", f:parse_CalcCount },\n\t\t0x000d: { n:\"CalcMode\", f:parse_CalcMode },\n\t\t0x000e: { n:\"CalcPrecision\", f:parse_CalcPrecision },\n\t\t0x000f: { n:\"CalcRefMode\", f:parse_CalcRefMode },\n\t\t0x0010: { n:\"CalcDelta\", f:parse_CalcDelta },\n\t\t0x0011: { n:\"CalcIter\", f:parse_CalcIter },\n\t\t0x0012: { n:\"Protect\", f:parse_Protect },\n\t\t0x0013: { n:\"Password\", f:parse_Password },\n\t\t0x0014: { n:\"Header\", f:parse_Header },\n\t\t0x0015: { n:\"Footer\", f:parse_Footer },\n\t\t0x0017: { n:\"ExternSheet\", f:parse_ExternSheet },\n\t\t0x0018: { n:\"Lbl\", f:parse_Lbl },\n\t\t0x0019: { n:\"WinProtect\", f:parse_WinProtect },\n\t\t0x001a: { n:\"VerticalPageBreaks\", f:parse_VerticalPageBreaks },\n\t\t0x001b: { n:\"HorizontalPageBreaks\", f:parse_HorizontalPageBreaks },\n\t\t0x001c: { n:\"Note\", f:parse_Note },\n\t\t0x001d: { n:\"Selection\", f:parse_Selection },\n\t\t0x0022: { n:\"Date1904\", f:parse_Date1904 },\n\t\t0x0023: { n:\"ExternName\", f:parse_ExternName },\n\t\t0x0026: { n:\"LeftMargin\", f:parse_LeftMargin },\n\t\t0x0027: { n:\"RightMargin\", f:parse_RightMargin },\n\t\t0x0028: { n:\"TopMargin\", f:parse_TopMargin },\n\t\t0x0029: { n:\"BottomMargin\", f:parse_BottomMargin },\n\t\t0x002a: { n:\"PrintRowCol\", f:parse_PrintRowCol },\n\t\t0x002b: { n:\"PrintGrid\", f:parse_PrintGrid },\n\t\t0x002f: { n:\"FilePass\", f:parse_FilePass },\n\t\t0x0031: { n:\"Font\", f:parse_Font },\n\t\t0x0033: { n:\"PrintSize\", f:parse_PrintSize },\n\t\t0x003c: { n:\"Continue\", f:parse_Continue },\n\t\t0x003d: { n:\"Window1\", f:parse_Window1 },\n\t\t0x0040: { n:\"Backup\", f:parse_Backup },\n\t\t0x0041: { n:\"Pane\", f:parse_Pane },\n\t\t0x0042: { n:'CodePage', f:parse_CodePage },\n\t\t0x004d: { n:\"Pls\", f:parse_Pls },\n\t\t0x0050: { n:\"DCon\", f:parse_DCon },\n\t\t0x0051: { n:\"DConRef\", f:parse_DConRef },\n\t\t0x0052: { n:\"DConName\", f:parse_DConName },\n\t\t0x0055: { n:\"DefColWidth\", f:parse_DefColWidth },\n\t\t0x0059: { n:\"XCT\", f:parse_XCT },\n\t\t0x005a: { n:\"CRN\", f:parse_CRN },\n\t\t0x005b: { n:\"FileSharing\", f:parse_FileSharing },\n\t\t0x005c: { n:'WriteAccess', f:parse_WriteAccess },\n\t\t0x005d: { n:\"Obj\", f:parse_Obj },\n\t\t0x005e: { n:\"Uncalced\", f:parse_Uncalced },\n\t\t0x005f: { n:\"CalcSaveRecalc\", f:parse_CalcSaveRecalc },\n\t\t0x0060: { n:\"Template\", f:parse_Template },\n\t\t0x0061: { n:\"Intl\", f:parse_Intl },\n\t\t0x0063: { n:\"ObjProtect\", f:parse_ObjProtect },\n\t\t0x007d: { n:\"ColInfo\", f:parse_ColInfo },\n\t\t0x0080: { n:\"Guts\", f:parse_Guts },\n\t\t0x0081: { n:\"WsBool\", f:parse_WsBool },\n\t\t0x0082: { n:\"GridSet\", f:parse_GridSet },\n\t\t0x0083: { n:\"HCenter\", f:parse_HCenter },\n\t\t0x0084: { n:\"VCenter\", f:parse_VCenter },\n\t\t0x0085: { n:'BoundSheet8', f:parse_BoundSheet8 },\n\t\t0x0086: { n:\"WriteProtect\", f:parse_WriteProtect },\n\t\t0x008c: { n:\"Country\", f:parse_Country },\n\t\t0x008d: { n:\"HideObj\", f:parse_HideObj },\n\t\t0x0090: { n:\"Sort\", f:parse_Sort },\n\t\t0x0092: { n:\"Palette\", f:parse_Palette },\n\t\t0x0097: { n:\"Sync\", f:parse_Sync },\n\t\t0x0098: { n:\"LPr\", f:parse_LPr },\n\t\t0x0099: { n:\"DxGCol\", f:parse_DxGCol },\n\t\t0x009a: { n:\"FnGroupName\", f:parse_FnGroupName },\n\t\t0x009b: { n:\"FilterMode\", f:parse_FilterMode },\n\t\t0x009c: { n:\"BuiltInFnGroupCount\", f:parse_BuiltInFnGroupCount },\n\t\t0x009d: { n:\"AutoFilterInfo\", f:parse_AutoFilterInfo },\n\t\t0x009e: { n:\"AutoFilter\", f:parse_AutoFilter },\n\t\t0x00a0: { n:\"Scl\", f:parse_Scl },\n\t\t0x00a1: { n:\"Setup\", f:parse_Setup },\n\t\t0x00ae: { n:\"ScenMan\", f:parse_ScenMan },\n\t\t0x00af: { n:\"SCENARIO\", f:parse_SCENARIO },\n\t\t0x00b0: { n:\"SxView\", f:parse_SxView },\n\t\t0x00b1: { n:\"Sxvd\", f:parse_Sxvd },\n\t\t0x00b2: { n:\"SXVI\", f:parse_SXVI },\n\t\t0x00b4: { n:\"SxIvd\", f:parse_SxIvd },\n\t\t0x00b5: { n:\"SXLI\", f:parse_SXLI },\n\t\t0x00b6: { n:\"SXPI\", f:parse_SXPI },\n\t\t0x00b8: { n:\"DocRoute\", f:parse_DocRoute },\n\t\t0x00b9: { n:\"RecipName\", f:parse_RecipName },\n\t\t0x00bd: { n:\"MulRk\", f:parse_MulRk },\n\t\t0x00be: { n:\"MulBlank\", f:parse_MulBlank },\n\t\t0x00c1: { n:'Mms', f:parse_Mms },\n\t\t0x00c5: { n:\"SXDI\", f:parse_SXDI },\n\t\t0x00c6: { n:\"SXDB\", f:parse_SXDB },\n\t\t0x00c7: { n:\"SXFDB\", f:parse_SXFDB },\n\t\t0x00c8: { n:\"SXDBB\", f:parse_SXDBB },\n\t\t0x00c9: { n:\"SXNum\", f:parse_SXNum },\n\t\t0x00ca: { n:\"SxBool\", f:parse_SxBool },\n\t\t0x00cb: { n:\"SxErr\", f:parse_SxErr },\n\t\t0x00cc: { n:\"SXInt\", f:parse_SXInt },\n\t\t0x00cd: { n:\"SXString\", f:parse_SXString },\n\t\t0x00ce: { n:\"SXDtr\", f:parse_SXDtr },\n\t\t0x00cf: { n:\"SxNil\", f:parse_SxNil },\n\t\t0x00d0: { n:\"SXTbl\", f:parse_SXTbl },\n\t\t0x00d1: { n:\"SXTBRGIITM\", f:parse_SXTBRGIITM },\n\t\t0x00d2: { n:\"SxTbpg\", f:parse_SxTbpg },\n\t\t0x00d3: { n:\"ObProj\", f:parse_ObProj },\n\t\t0x00d5: { n:\"SXStreamID\", f:parse_SXStreamID },\n\t\t0x00d7: { n:\"DBCell\", f:parse_DBCell },\n\t\t0x00d8: { n:\"SXRng\", f:parse_SXRng },\n\t\t0x00d9: { n:\"SxIsxoper\", f:parse_SxIsxoper },\n\t\t0x00da: { n:\"BookBool\", f:parse_BookBool },\n\t\t0x00dc: { n:\"DbOrParamQry\", f:parse_DbOrParamQry },\n\t\t0x00dd: { n:\"ScenarioProtect\", f:parse_ScenarioProtect },\n\t\t0x00de: { n:\"OleObjectSize\", f:parse_OleObjectSize },\n\t\t0x00e0: { n:\"XF\", f:parse_XF },\n\t\t0x00e1: { n:'InterfaceHdr', f:parse_InterfaceHdr },\n\t\t0x00e2: { n:'InterfaceEnd', f:parse_InterfaceEnd },\n\t\t0x00e3: { n:\"SXVS\", f:parse_SXVS },\n\t\t0x00e5: { n:\"MergeCells\", f:parse_MergeCells },\n\t\t0x00e9: { n:\"BkHim\", f:parse_BkHim },\n\t\t0x00eb: { n:\"MsoDrawingGroup\", f:parse_MsoDrawingGroup },\n\t\t0x00ec: { n:\"MsoDrawing\", f:parse_MsoDrawing },\n\t\t0x00ed: { n:\"MsoDrawingSelection\", f:parse_MsoDrawingSelection },\n\t\t0x00ef: { n:\"PhoneticInfo\", f:parse_PhoneticInfo },\n\t\t0x00f0: { n:\"SxRule\", f:parse_SxRule },\n\t\t0x00f1: { n:\"SXEx\", f:parse_SXEx },\n\t\t0x00f2: { n:\"SxFilt\", f:parse_SxFilt },\n\t\t0x00f4: { n:\"SxDXF\", f:parse_SxDXF },\n\t\t0x00f5: { n:\"SxItm\", f:parse_SxItm },\n\t\t0x00f6: { n:\"SxName\", f:parse_SxName },\n\t\t0x00f7: { n:\"SxSelect\", f:parse_SxSelect },\n\t\t0x00f8: { n:\"SXPair\", f:parse_SXPair },\n\t\t0x00f9: { n:\"SxFmla\", f:parse_SxFmla },\n\t\t0x00fb: { n:\"SxFormat\", f:parse_SxFormat },\n\t\t0x00fc: { n:\"SST\", f:parse_SST },\n\t\t0x00fd: { n:\"LabelSst\", f:parse_LabelSst },\n\t\t0x00ff: { n:\"ExtSST\", f:parse_ExtSST },\n\t\t0x0100: { n:\"SXVDEx\", f:parse_SXVDEx },\n\t\t0x0103: { n:\"SXFormula\", f:parse_SXFormula },\n\t\t0x0122: { n:\"SXDBEx\", f:parse_SXDBEx },\n\t\t0x0137: { n:\"RRDInsDel\", f:parse_RRDInsDel },\n\t\t0x0138: { n:\"RRDHead\", f:parse_RRDHead },\n\t\t0x013b: { n:\"RRDChgCell\", f:parse_RRDChgCell },\n\t\t0x013d: { n:\"RRTabId\", f:parse_RRTabId },\n\t\t0x013e: { n:\"RRDRenSheet\", f:parse_RRDRenSheet },\n\t\t0x013f: { n:\"RRSort\", f:parse_RRSort },\n\t\t0x0140: { n:\"RRDMove\", f:parse_RRDMove },\n\t\t0x014a: { n:\"RRFormat\", f:parse_RRFormat },\n\t\t0x014b: { n:\"RRAutoFmt\", f:parse_RRAutoFmt },\n\t\t0x014d: { n:\"RRInsertSh\", f:parse_RRInsertSh },\n\t\t0x014e: { n:\"RRDMoveBegin\", f:parse_RRDMoveBegin },\n\t\t0x014f: { n:\"RRDMoveEnd\", f:parse_RRDMoveEnd },\n\t\t0x0150: { n:\"RRDInsDelBegin\", f:parse_RRDInsDelBegin },\n\t\t0x0151: { n:\"RRDInsDelEnd\", f:parse_RRDInsDelEnd },\n\t\t0x0152: { n:\"RRDConflict\", f:parse_RRDConflict },\n\t\t0x0153: { n:\"RRDDefName\", f:parse_RRDDefName },\n\t\t0x0154: { n:\"RRDRstEtxp\", f:parse_RRDRstEtxp },\n\t\t0x015f: { n:\"LRng\", f:parse_LRng },\n\t\t0x0160: { n:\"UsesELFs\", f:parse_UsesELFs },\n\t\t0x0161: { n:\"DSF\", f:parse_DSF },\n\t\t0x0191: { n:\"CUsr\", f:parse_CUsr },\n\t\t0x0192: { n:\"CbUsr\", f:parse_CbUsr },\n\t\t0x0193: { n:\"UsrInfo\", f:parse_UsrInfo },\n\t\t0x0194: { n:\"UsrExcl\", f:parse_UsrExcl },\n\t\t0x0195: { n:\"FileLock\", f:parse_FileLock },\n\t\t0x0196: { n:\"RRDInfo\", f:parse_RRDInfo },\n\t\t0x0197: { n:\"BCUsrs\", f:parse_BCUsrs },\n\t\t0x0198: { n:\"UsrChk\", f:parse_UsrChk },\n\t\t0x01a9: { n:\"UserBView\", f:parse_UserBView },\n\t\t0x01aa: { n:\"UserSViewBegin\", f:parse_UserSViewBegin },\n\t\t0x01ab: { n:\"UserSViewEnd\", f:parse_UserSViewEnd },\n\t\t0x01ac: { n:\"RRDUserView\", f:parse_RRDUserView },\n\t\t0x01ad: { n:\"Qsi\", f:parse_Qsi },\n\t\t0x01ae: { n:\"SupBook\", f:parse_SupBook },\n\t\t0x01af: { n:\"Prot4Rev\", f:parse_Prot4Rev },\n\t\t0x01b0: { n:\"CondFmt\", f:parse_CondFmt },\n\t\t0x01b1: { n:\"CF\", f:parse_CF },\n\t\t0x01b2: { n:\"DVal\", f:parse_DVal },\n\t\t0x01b5: { n:\"DConBin\", f:parse_DConBin },\n\t\t0x01b6: { n:\"TxO\", f:parse_TxO },\n\t\t0x01b7: { n:\"RefreshAll\", f:parse_RefreshAll },\n\t\t0x01b8: { n:\"HLink\", f:parse_HLink },\n\t\t0x01b9: { n:\"Lel\", f:parse_Lel },\n\t\t0x01ba: { n:\"CodeName\", f:parse_XLSCodeName },\n\t\t0x01bb: { n:\"SXFDBType\", f:parse_SXFDBType },\n\t\t0x01bc: { n:\"Prot4RevPass\", f:parse_Prot4RevPass },\n\t\t0x01bd: { n:\"ObNoMacros\", f:parse_ObNoMacros },\n\t\t0x01be: { n:\"Dv\", f:parse_Dv },\n\t\t0x01c0: { n:\"Excel9File\", f:parse_Excel9File },\n\t\t0x01c1: { n:\"RecalcId\", f:parse_RecalcId, r:2},\n\t\t0x01c2: { n:\"EntExU2\", f:parse_EntExU2 },\n\t\t0x0200: { n:\"Dimensions\", f:parse_Dimensions },\n\t\t0x0201: { n:\"Blank\", f:parse_Blank },\n\t\t0x0203: { n:\"Number\", f:parse_Number },\n\t\t0x0204: { n:\"Label\", f:parse_Label },\n\t\t0x0205: { n:\"BoolErr\", f:parse_BoolErr },\n\t\t0x0207: { n:\"String\", f:parse_String },\n\t\t0x0208: { n:'Row', f:parse_Row },\n\t\t0x020b: { n:\"Index\", f:parse_Index },\n\t\t0x0221: { n:\"Array\", f:parse_Array },\n\t\t0x0225: { n:\"DefaultRowHeight\", f:parse_DefaultRowHeight },\n\t\t0x0236: { n:\"Table\", f:parse_Table },\n\t\t0x023e: { n:\"Window2\", f:parse_Window2 },\n\t\t0x027e: { n:\"RK\", f:parse_RK },\n\t\t0x0293: { n:\"Style\", f:parse_Style },\n\t\t0x0418: { n:\"BigName\", f:parse_BigName },\n\t\t0x041e: { n:\"Format\", f:parse_Format },\n\t\t0x043c: { n:\"ContinueBigName\", f:parse_ContinueBigName },\n\t\t0x04bc: { n:\"ShrFmla\", f:parse_ShrFmla },\n\t\t0x0800: { n:\"HLinkTooltip\", f:parse_HLinkTooltip },\n\t\t0x0801: { n:\"WebPub\", f:parse_WebPub },\n\t\t0x0802: { n:\"QsiSXTag\", f:parse_QsiSXTag },\n\t\t0x0803: { n:\"DBQueryExt\", f:parse_DBQueryExt },\n\t\t0x0804: { n:\"ExtString\", f:parse_ExtString },\n\t\t0x0805: { n:\"TxtQry\", f:parse_TxtQry },\n\t\t0x0806: { n:\"Qsir\", f:parse_Qsir },\n\t\t0x0807: { n:\"Qsif\", f:parse_Qsif },\n\t\t0x0808: { n:\"RRDTQSIF\", f:parse_RRDTQSIF },\n\t\t0x0809: { n:'BOF', f:parse_BOF },\n\t\t0x080a: { n:\"OleDbConn\", f:parse_OleDbConn },\n\t\t0x080b: { n:\"WOpt\", f:parse_WOpt },\n\t\t0x080c: { n:\"SXViewEx\", f:parse_SXViewEx },\n\t\t0x080d: { n:\"SXTH\", f:parse_SXTH },\n\t\t0x080e: { n:\"SXPIEx\", f:parse_SXPIEx },\n\t\t0x080f: { n:\"SXVDTEx\", f:parse_SXVDTEx },\n\t\t0x0810: { n:\"SXViewEx9\", f:parse_SXViewEx9 },\n\t\t0x0812: { n:\"ContinueFrt\", f:parse_ContinueFrt },\n\t\t0x0813: { n:\"RealTimeData\", f:parse_RealTimeData },\n\t\t0x0850: { n:\"ChartFrtInfo\", f:parse_ChartFrtInfo },\n\t\t0x0851: { n:\"FrtWrapper\", f:parse_FrtWrapper },\n\t\t0x0852: { n:\"StartBlock\", f:parse_StartBlock },\n\t\t0x0853: { n:\"EndBlock\", f:parse_EndBlock },\n\t\t0x0854: { n:\"StartObject\", f:parse_StartObject },\n\t\t0x0855: { n:\"EndObject\", f:parse_EndObject },\n\t\t0x0856: { n:\"CatLab\", f:parse_CatLab },\n\t\t0x0857: { n:\"YMult\", f:parse_YMult },\n\t\t0x0858: { n:\"SXViewLink\", f:parse_SXViewLink },\n\t\t0x0859: { n:\"PivotChartBits\", f:parse_PivotChartBits },\n\t\t0x085a: { n:\"FrtFontList\", f:parse_FrtFontList },\n\t\t0x0862: { n:\"SheetExt\", f:parse_SheetExt },\n\t\t0x0863: { n:\"BookExt\", f:parse_BookExt, r:12},\n\t\t0x0864: { n:\"SXAddl\", f:parse_SXAddl },\n\t\t0x0865: { n:\"CrErr\", f:parse_CrErr },\n\t\t0x0866: { n:\"HFPicture\", f:parse_HFPicture },\n\t\t0x0867: { n:'FeatHdr', f:parse_FeatHdr },\n\t\t0x0868: { n:\"Feat\", f:parse_Feat },\n\t\t0x086a: { n:\"DataLabExt\", f:parse_DataLabExt },\n\t\t0x086b: { n:\"DataLabExtContents\", f:parse_DataLabExtContents },\n\t\t0x086c: { n:\"CellWatch\", f:parse_CellWatch },\n\t\t0x0871: { n:\"FeatHdr11\", f:parse_FeatHdr11 },\n\t\t0x0872: { n:\"Feature11\", f:parse_Feature11 },\n\t\t0x0874: { n:\"DropDownObjIds\", f:parse_DropDownObjIds },\n\t\t0x0875: { n:\"ContinueFrt11\", f:parse_ContinueFrt11 },\n\t\t0x0876: { n:\"DConn\", f:parse_DConn },\n\t\t0x0877: { n:\"List12\", f:parse_List12 },\n\t\t0x0878: { n:\"Feature12\", f:parse_Feature12 },\n\t\t0x0879: { n:\"CondFmt12\", f:parse_CondFmt12 },\n\t\t0x087a: { n:\"CF12\", f:parse_CF12 },\n\t\t0x087b: { n:\"CFEx\", f:parse_CFEx },\n\t\t0x087c: { n:\"XFCRC\", f:parse_XFCRC, r:12 },\n\t\t0x087d: { n:\"XFExt\", f:parse_XFExt, r:12 },\n\t\t0x087e: { n:\"AutoFilter12\", f:parse_AutoFilter12 },\n\t\t0x087f: { n:\"ContinueFrt12\", f:parse_ContinueFrt12 },\n\t\t0x0884: { n:\"MDTInfo\", f:parse_MDTInfo },\n\t\t0x0885: { n:\"MDXStr\", f:parse_MDXStr },\n\t\t0x0886: { n:\"MDXTuple\", f:parse_MDXTuple },\n\t\t0x0887: { n:\"MDXSet\", f:parse_MDXSet },\n\t\t0x0888: { n:\"MDXProp\", f:parse_MDXProp },\n\t\t0x0889: { n:\"MDXKPI\", f:parse_MDXKPI },\n\t\t0x088a: { n:\"MDB\", f:parse_MDB },\n\t\t0x088b: { n:\"PLV\", f:parse_PLV },\n\t\t0x088c: { n:\"Compat12\", f:parse_Compat12, r:12 },\n\t\t0x088d: { n:\"DXF\", f:parse_DXF },\n\t\t0x088e: { n:\"TableStyles\", f:parse_TableStyles, r:12 },\n\t\t0x088f: { n:\"TableStyle\", f:parse_TableStyle },\n\t\t0x0890: { n:\"TableStyleElement\", f:parse_TableStyleElement },\n\t\t0x0892: { n:\"StyleExt\", f:parse_StyleExt },\n\t\t0x0893: { n:\"NamePublish\", f:parse_NamePublish },\n\t\t0x0894: { n:\"NameCmt\", f:parse_NameCmt },\n\t\t0x0895: { n:\"SortData\", f:parse_SortData },\n\t\t0x0896: { n:\"Theme\", f:parse_Theme, r:12 },\n\t\t0x0897: { n:\"GUIDTypeLib\", f:parse_GUIDTypeLib },\n\t\t0x0898: { n:\"FnGrp12\", f:parse_FnGrp12 },\n\t\t0x0899: { n:\"NameFnGrp12\", f:parse_NameFnGrp12 },\n\t\t0x089a: { n:\"MTRSettings\", f:parse_MTRSettings, r:12 },\n\t\t0x089b: { n:\"CompressPictures\", f:parse_CompressPictures },\n\t\t0x089c: { n:\"HeaderFooter\", f:parse_HeaderFooter },\n\t\t0x089d: { n:\"CrtLayout12\", f:parse_CrtLayout12 },\n\t\t0x089e: { n:\"CrtMlFrt\", f:parse_CrtMlFrt },\n\t\t0x089f: { n:\"CrtMlFrtContinue\", f:parse_CrtMlFrtContinue },\n\t\t0x08a3: { n:\"ForceFullCalculation\", f:parse_ForceFullCalculation },\n\t\t0x08a4: { n:\"ShapePropsStream\", f:parse_ShapePropsStream },\n\t\t0x08a5: { n:\"TextPropsStream\", f:parse_TextPropsStream },\n\t\t0x08a6: { n:\"RichTextStream\", f:parse_RichTextStream },\n\t\t0x08a7: { n:\"CrtLayout12A\", f:parse_CrtLayout12A },\n\t\t0x1001: { n:\"Units\", f:parse_Units },\n\t\t0x1002: { n:\"Chart\", f:parse_Chart },\n\t\t0x1003: { n:\"Series\", f:parse_Series },\n\t\t0x1006: { n:\"DataFormat\", f:parse_DataFormat },\n\t\t0x1007: { n:\"LineFormat\", f:parse_LineFormat },\n\t\t0x1009: { n:\"MarkerFormat\", f:parse_MarkerFormat },\n\t\t0x100a: { n:\"AreaFormat\", f:parse_AreaFormat },\n\t\t0x100b: { n:\"PieFormat\", f:parse_PieFormat },\n\t\t0x100c: { n:\"AttachedLabel\", f:parse_AttachedLabel },\n\t\t0x100d: { n:\"SeriesText\", f:parse_SeriesText },\n\t\t0x1014: { n:\"ChartFormat\", f:parse_ChartFormat },\n\t\t0x1015: { n:\"Legend\", f:parse_Legend },\n\t\t0x1016: { n:\"SeriesList\", f:parse_SeriesList },\n\t\t0x1017: { n:\"Bar\", f:parse_Bar },\n\t\t0x1018: { n:\"Line\", f:parse_Line },\n\t\t0x1019: { n:\"Pie\", f:parse_Pie },\n\t\t0x101a: { n:\"Area\", f:parse_Area },\n\t\t0x101b: { n:\"Scatter\", f:parse_Scatter },\n\t\t0x101c: { n:\"CrtLine\", f:parse_CrtLine },\n\t\t0x101d: { n:\"Axis\", f:parse_Axis },\n\t\t0x101e: { n:\"Tick\", f:parse_Tick },\n\t\t0x101f: { n:\"ValueRange\", f:parse_ValueRange },\n\t\t0x1020: { n:\"CatSerRange\", f:parse_CatSerRange },\n\t\t0x1021: { n:\"AxisLine\", f:parse_AxisLine },\n\t\t0x1022: { n:\"CrtLink\", f:parse_CrtLink },\n\t\t0x1024: { n:\"DefaultText\", f:parse_DefaultText },\n\t\t0x1025: { n:\"Text\", f:parse_Text },\n\t\t0x1026: { n:\"FontX\", f:parse_FontX },\n\t\t0x1027: { n:\"ObjectLink\", f:parse_ObjectLink },\n\t\t0x1032: { n:\"Frame\", f:parse_Frame },\n\t\t0x1033: { n:\"Begin\", f:parse_Begin },\n\t\t0x1034: { n:\"End\", f:parse_End },\n\t\t0x1035: { n:\"PlotArea\", f:parse_PlotArea },\n\t\t0x103a: { n:\"Chart3d\", f:parse_Chart3d },\n\t\t0x103c: { n:\"PicF\", f:parse_PicF },\n\t\t0x103d: { n:\"DropBar\", f:parse_DropBar },\n\t\t0x103e: { n:\"Radar\", f:parse_Radar },\n\t\t0x103f: { n:\"Surf\", f:parse_Surf },\n\t\t0x1040: { n:\"RadarArea\", f:parse_RadarArea },\n\t\t0x1041: { n:\"AxisParent\", f:parse_AxisParent },\n\t\t0x1043: { n:\"LegendException\", f:parse_LegendException },\n\t\t0x1044: { n:\"ShtProps\", f:parse_ShtProps },\n\t\t0x1045: { n:\"SerToCrt\", f:parse_SerToCrt },\n\t\t0x1046: { n:\"AxesUsed\", f:parse_AxesUsed },\n\t\t0x1048: { n:\"SBaseRef\", f:parse_SBaseRef },\n\t\t0x104a: { n:\"SerParent\", f:parse_SerParent },\n\t\t0x104b: { n:\"SerAuxTrend\", f:parse_SerAuxTrend },\n\t\t0x104e: { n:\"IFmtRecord\", f:parse_IFmtRecord },\n\t\t0x104f: { n:\"Pos\", f:parse_Pos },\n\t\t0x1050: { n:\"AlRuns\", f:parse_AlRuns },\n\t\t0x1051: { n:\"BRAI\", f:parse_BRAI },\n\t\t0x105b: { n:\"SerAuxErrBar\", f:parse_SerAuxErrBar },\n\t\t0x105c: { n:\"ClrtClient\", f:parse_ClrtClient },\n\t\t0x105d: { n:\"SerFmt\", f:parse_SerFmt },\n\t\t0x105f: { n:\"Chart3DBarShape\", f:parse_Chart3DBarShape },\n\t\t0x1060: { n:\"Fbi\", f:parse_Fbi },\n\t\t0x1061: { n:\"BopPop\", f:parse_BopPop },\n\t\t0x1062: { n:\"AxcExt\", f:parse_AxcExt },\n\t\t0x1063: { n:\"Dat\", f:parse_Dat },\n\t\t0x1064: { n:\"PlotGrowth\", f:parse_PlotGrowth },\n\t\t0x1065: { n:\"SIIndex\", f:parse_SIIndex },\n\t\t0x1066: { n:\"GelFrame\", f:parse_GelFrame },\n\t\t0x1067: { n:\"BopPopCustom\", f:parse_BopPopCustom },\n\t\t0x1068: { n:\"Fbi2\", f:parse_Fbi2 },\n\t\n\t\t/* These are specified in an older version of the spec */\n\t\t0x0016: { n:\"ExternCount\", f:parsenoop },\n\t\t0x007e: { n:\"RK\", f:parsenoop }, /* Not necessarily same as 0x027e */\n\t\t0x007f: { n:\"ImData\", f:parsenoop },\n\t\t0x0087: { n:\"Addin\", f:parsenoop },\n\t\t0x0088: { n:\"Edg\", f:parsenoop },\n\t\t0x0089: { n:\"Pub\", f:parsenoop },\n\t\t0x0091: { n:\"Sub\", f:parsenoop },\n\t\t0x0094: { n:\"LHRecord\", f:parsenoop },\n\t\t0x0095: { n:\"LHNGraph\", f:parsenoop },\n\t\t0x0096: { n:\"Sound\", f:parsenoop },\n\t\t0x00a9: { n:\"CoordList\", f:parsenoop },\n\t\t0x00ab: { n:\"GCW\", f:parsenoop },\n\t\t0x00bc: { n:\"ShrFmla\", f:parsenoop }, /* Not necessarily same as 0x04bc */\n\t\t0x00c2: { n:\"AddMenu\", f:parsenoop },\n\t\t0x00c3: { n:\"DelMenu\", f:parsenoop },\n\t\t0x00d6: { n:\"RString\", f:parsenoop },\n\t\t0x00df: { n:\"UDDesc\", f:parsenoop },\n\t\t0x00ea: { n:\"TabIdConf\", f:parsenoop },\n\t\t0x0162: { n:\"XL5Modify\", f:parsenoop },\n\t\t0x01a5: { n:\"FileSharing2\", f:parsenoop },\n\t\t0x0218: { n:\"Name\", f:parsenoop },\n\t\t0x0223: { n:\"ExternName\", f:parse_ExternName },\n\t\t0x0231: { n:\"Font\", f:parsenoop },\n\t\t0x0406: { n:\"Formula\", f:parse_Formula },\n\t\t0x086d: { n:\"FeatInfo\", f:parsenoop },\n\t\t0x0873: { n:\"FeatInfo11\", f:parsenoop },\n\t\t0x0881: { n:\"SXAddl12\", f:parsenoop },\n\t\t0x08c0: { n:\"AutoWebPub\", f:parsenoop },\n\t\t0x08c1: { n:\"ListObj\", f:parsenoop },\n\t\t0x08c2: { n:\"ListField\", f:parsenoop },\n\t\t0x08c3: { n:\"ListDV\", f:parsenoop },\n\t\t0x08c4: { n:\"ListCondFmt\", f:parsenoop },\n\t\t0x08c5: { n:\"ListCF\", f:parsenoop },\n\t\t0x08c6: { n:\"FMQry\", f:parsenoop },\n\t\t0x08c7: { n:\"FMSQry\", f:parsenoop },\n\t\t0x08c8: { n:\"PLV\", f:parsenoop }, /* supposedly PLV for Excel 11 */\n\t\t0x08c9: { n:\"LnExt\", f:parsenoop },\n\t\t0x08ca: { n:\"MkrExt\", f:parsenoop },\n\t\t0x08cb: { n:\"CrtCoopt\", f:parsenoop },\n\t\n\t\t0x0000: {}\n\t};\n\t\n\t\n\t/* Helper function to call out to ODS parser */\n\tfunction parse_ods(zip, opts) {\n\t\t//if(typeof module !== \"undefined\" && typeof require !== 'undefined' && typeof ODS === 'undefined') ODS = require('./od' + 's');\n\t\tif(typeof ODS === 'undefined' || !ODS.parse_ods) throw new Error(\"Unsupported ODS\");\n\t\treturn ODS.parse_ods(zip, opts);\n\t}\n\tfunction fix_opts_func(defaults) {\n\t\treturn function fix_opts(opts) {\n\t\t\tfor(var i = 0; i != defaults.length; ++i) {\n\t\t\t\tvar d = defaults[i];\n\t\t\t\tif(opts[d[0]] === undefined) opts[d[0]] = d[1];\n\t\t\t\tif(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);\n\t\t\t}\n\t\t};\n\t}\n\t\n\tvar fix_read_opts = fix_opts_func([\n\t\t['cellNF', false], /* emit cell number format string as .z */\n\t\t['cellHTML', true], /* emit html string as .h */\n\t\t['cellFormula', true], /* emit formulae as .f */\n\t\t['cellStyles', false], /* emits style/theme as .s */\n\t\t['cellDates', false], /* emit date cells with type `d` */\n\t\n\t\t['sheetStubs', false], /* emit empty cells */\n\t\t['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */\n\t\n\t\t['bookDeps', false], /* parse calculation chains */\n\t\t['bookSheets', false], /* only try to get sheet names (no Sheets) */\n\t\t['bookProps', false], /* only try to get properties (no Sheets) */\n\t\t['bookFiles', false], /* include raw file structure (keys, files, cfb) */\n\t\t['bookVBA', false], /* include vba raw data (vbaraw) */\n\t\n\t\t['password',''], /* password */\n\t\t['WTF', false] /* WTF mode (throws errors) */\n\t]);\n\t\n\t\n\tvar fix_write_opts = fix_opts_func([\n\t\t['cellDates', false], /* write date cells with type `d` */\n\t\n\t\t['bookSST', false], /* Generate Shared String Table */\n\t\n\t\t['bookType', 'xlsx'], /* Type of workbook (xlsx/m/b) */\n\t\n\t\t['WTF', false] /* WTF mode (throws errors) */\n\t]);\n\tfunction safe_parse_wbrels(wbrels, sheets) {\n\t\tif(!wbrels) return 0;\n\t\ttry {\n\t\t\twbrels = sheets.map(function pwbr(w) { return [w.name, wbrels['!id'][w.id].Target]; });\n\t\t} catch(e) { return null; }\n\t\treturn !wbrels || wbrels.length === 0 ? null : wbrels;\n\t}\n\t\n\tfunction safe_parse_ws(zip, path, relsPath, sheet, sheetRels, sheets, opts) {\n\t\ttry {\n\t\t\tsheetRels[sheet]=parse_rels(getzipdata(zip, relsPath, true), path);\n\t\t\tsheets[sheet]=parse_ws(getzipdata(zip, path),path,opts,sheetRels[sheet]);\n\t\t} catch(e) { if(opts.WTF) throw e; }\n\t}\n\t\n\tvar nodirs = function nodirs(x){return x.substr(-1) != '/';};\n\tfunction parse_zip(zip, opts) {\n\t\tmake_ssf(SSF);\n\t\topts = opts || {};\n\t\tfix_read_opts(opts);\n\t\treset_cp();\n\t\n\t\t/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */\n\t\tif(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);\n\t\n\t\tvar entries = keys(zip.files).filter(nodirs).sort();\n\t\tvar dir = parse_ct(getzipdata(zip, '[Content_Types].xml'), opts);\n\t\tvar xlsb = false;\n\t\tvar sheets, binname;\n\t\tif(dir.workbooks.length === 0) {\n\t\t\tbinname = \"xl/workbook.xml\";\n\t\t\tif(getzipdata(zip,binname, true)) dir.workbooks.push(binname);\n\t\t}\n\t\tif(dir.workbooks.length === 0) {\n\t\t\tbinname = \"xl/workbook.bin\";\n\t\t\tif(!getzipfile(zip,binname,true)) throw new Error(\"Could not find workbook\");\n\t\t\tdir.workbooks.push(binname);\n\t\t\txlsb = true;\n\t\t}\n\t\tif(dir.workbooks[0].substr(-3) == \"bin\") xlsb = true;\n\t\tif(xlsb) set_cp(1200);\n\t\n\t\tif(!opts.bookSheets && !opts.bookProps) {\n\t\t\tstrs = [];\n\t\t\tif(dir.sst) strs=parse_sst(getzipdata(zip, dir.sst.replace(/^\\//,'')), dir.sst, opts);\n\t\n\t    // parse themes before styles so that we can reliably decode theme/tint into rgb when parsing styles\n\t    themes = {};\n\t    if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipdata(zip, dir.themes[0].replace(/^\\//,''), true),dir.themes[0], opts);\n\t\n\t    styles = {};\n\t\t\tif(dir.style) styles = parse_sty(getzipdata(zip, dir.style.replace(/^\\//,'')),dir.style, opts);\n\t\n\t\t}\n\t\n\t\tvar wb = parse_wb(getzipdata(zip, dir.workbooks[0].replace(/^\\//,'')), dir.workbooks[0], opts);\n\t\n\t\tvar props = {}, propdata = \"\";\n\t\n\t\tif(dir.coreprops.length !== 0) {\n\t\t\tpropdata = getzipdata(zip, dir.coreprops[0].replace(/^\\//,''), true);\n\t\t\tif(propdata) props = parse_core_props(propdata);\n\t\t\tif(dir.extprops.length !== 0) {\n\t\t\t\tpropdata = getzipdata(zip, dir.extprops[0].replace(/^\\//,''), true);\n\t\t\t\tif(propdata) parse_ext_props(propdata, props);\n\t\t\t}\n\t\t}\n\t\n\t\tvar custprops = {};\n\t\tif(!opts.bookSheets || opts.bookProps) {\n\t\t\tif (dir.custprops.length !== 0) {\n\t\t\t\tpropdata = getzipdata(zip, dir.custprops[0].replace(/^\\//,''), true);\n\t\t\t\tif(propdata) custprops = parse_cust_props(propdata, opts);\n\t\t\t}\n\t\t}\n\t\n\t\tvar out = {};\n\t\tif(opts.bookSheets || opts.bookProps) {\n\t\t\tif(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;\n\t\t\telse if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });\n\t\t\tif(opts.bookProps) { out.Props = props; out.Custprops = custprops; }\n\t\t\tif(typeof sheets !== 'undefined') out.SheetNames = sheets;\n\t\t\tif(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;\n\t\t}\n\t\tsheets = {};\n\t\n\t\tvar deps = {};\n\t\tif(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, dir.calcchain.replace(/^\\//,'')),dir.calcchain,opts);\n\t\n\t\tvar i=0;\n\t\tvar sheetRels = {};\n\t\tvar path, relsPath;\n\t\tif(!props.Worksheets) {\n\t\t\tvar wbsheets = wb.Sheets;\n\t\t\tprops.Worksheets = wbsheets.length;\n\t\t\tprops.SheetNames = [];\n\t\t\tfor(var j = 0; j != wbsheets.length; ++j) {\n\t\t\t\tprops.SheetNames[j] = wbsheets[j].name;\n\t\t\t}\n\t\t}\n\t\n\t\tvar wbext = xlsb ? \"bin\" : \"xml\";\n\t\tvar wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';\n\t\tvar wbrels = parse_rels(getzipdata(zip, wbrelsfile, true), wbrelsfile);\n\t\tif(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);\n\t\t/* Numbers iOS hack */\n\t\tvar nmode = (getzipdata(zip,\"xl/worksheets/sheet.xml\",true))?1:0;\n\t\tfor(i = 0; i != props.Worksheets; ++i) {\n\t\t\tif(wbrels) path = 'xl/' + (wbrels[i][1]).replace(/[\\/]?xl\\//, \"\");\n\t\t\telse {\n\t\t\t\tpath = 'xl/worksheets/sheet'+(i+1-nmode)+\".\" + wbext;\n\t\t\t\tpath = path.replace(/sheet0\\./,\"sheet.\");\n\t\t\t}\n\t\t\trelsPath = path.replace(/^(.*)(\\/)([^\\/]*)$/, \"$1/_rels/$3.rels\");\n\t\t\tsafe_parse_ws(zip, path, relsPath, props.SheetNames[i], sheetRels, sheets, opts);\n\t\t}\n\t\n\t\tif(dir.comments) parse_comments(zip, dir.comments, sheets, sheetRels, opts);\n\t\n\t\tout = {\n\t\t\tDirectory: dir,\n\t\t\tWorkbook: wb,\n\t\t\tProps: props,\n\t\t\tCustprops: custprops,\n\t\t\tDeps: deps,\n\t\t\tSheets: sheets,\n\t\t\tSheetNames: props.SheetNames,\n\t\t\tStrings: strs,\n\t\t\tStyles: styles,\n\t\t\tThemes: themes,\n\t\t\tSSF: SSF.get_table()\n\t\t};\n\t\tif(opts.bookFiles) {\n\t\t\tout.keys = entries;\n\t\t\tout.files = zip.files;\n\t\t}\n\t\tif(opts.bookVBA) {\n\t\t\tif(dir.vba.length > 0) out.vbaraw = getzipdata(zip,dir.vba[0],true);\n\t\t\telse if(dir.defaults.bin === 'application/vnd.ms-office.vbaProject') out.vbaraw = getzipdata(zip,'xl/vbaProject.bin',true);\n\t\t}\n\t\treturn out;\n\t}\n\tfunction add_rels(rels, rId, f, type, relobj) {\n\t\tif(!relobj) relobj = {};\n\t\tif(!rels['!id']) rels['!id'] = {};\n\t\trelobj.Id = 'rId' + rId;\n\t\trelobj.Type = type;\n\t\trelobj.Target = f;\n\t\tif(rels['!id'][relobj.Id]) throw new Error(\"Cannot rewrite rId \" + rId);\n\t\trels['!id'][relobj.Id] = relobj;\n\t\trels[('/' + relobj.Target).replace(\"//\",\"/\")] = relobj;\n\t}\n\t\n\tfunction write_zip(wb, opts) {\n\t\tif(wb && !wb.SSF) {\n\t\t\twb.SSF = SSF.get_table();\n\t\t}\n\t\tif(wb && wb.SSF) {\n\t\t\tmake_ssf(SSF); SSF.load_table(wb.SSF);\n\t\t\topts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;\n\t\t}\n\t\topts.rels = {}; opts.wbrels = {};\n\t\topts.Strings = []; opts.Strings.Count = 0; opts.Strings.Unique = 0;\n\t\tvar wbext = opts.bookType == \"xlsb\" ? \"bin\" : \"xml\";\n\t\tvar ct = { workbooks: [], sheets: [], calcchains: [], themes: [], styles: [],\n\t\t\tcoreprops: [], extprops: [], custprops: [], strs:[], comments: [], vba: [],\n\t\t\tTODO:[], rels:[], xmlns: \"\" };\n\t\tfix_write_opts(opts = opts || {});\n\t\tvar zip = new jszip();\n\t\tvar f = \"\", rId = 0;\n\t\n\t\topts.cellXfs = [];\n\t\tget_cell_style(opts.cellXfs, {}, {revssf:{\"General\":0}});\n\t\n\t\tf = \"docProps/core.xml\";\n\t\tzip.file(f, write_core_props(wb.Props, opts));\n\t\tct.coreprops.push(f);\n\t\tadd_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n\t\n\t\tf = \"docProps/app.xml\";\n\t\tif(!wb.Props) wb.Props = {};\n\t\twb.Props.SheetNames = wb.SheetNames;\n\t\twb.Props.Worksheets = wb.SheetNames.length;\n\t\tzip.file(f, write_ext_props(wb.Props, opts));\n\t\tct.extprops.push(f);\n\t\tadd_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n\t\n\t\tif(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {\n\t\t\tf = \"docProps/custom.xml\";\n\t\t\tzip.file(f, write_cust_props(wb.Custprops, opts));\n\t\t\tct.custprops.push(f);\n\t\t\tadd_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n\t\t}\n\t\n\t\tf = \"xl/workbook.\" + wbext;\n\t\tzip.file(f, write_wb(wb, f, opts));\n\t\tct.workbooks.push(f);\n\t\tadd_rels(opts.rels, 1, f, RELS.WB);\n\t\n\t\tfor(rId=1;rId <= wb.SheetNames.length; ++rId) {\n\t\t\tf = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n\t\t\tzip.file(f, write_ws(rId-1, f, opts, wb));\n\t\t\tct.sheets.push(f);\n\t\t\tadd_rels(opts.wbrels, rId, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS);\n\t\t}\n\t\n\t\tif(opts.Strings != null && opts.Strings.length > 0) {\n\t\t\tf = \"xl/sharedStrings.\" + wbext;\n\t\t\tzip.file(f, write_sst(opts.Strings, f, opts));\n\t\t\tct.strs.push(f);\n\t\t\tadd_rels(opts.wbrels, ++rId, \"sharedStrings.\" + wbext, RELS.SST);\n\t\t}\n\t\n\t\t/* TODO: something more intelligent with themes */\n\t\n\t\tf = \"xl/theme/theme1.xml\";\n\t  zip.file(f, write_theme(opts));\n\t\tct.themes.push(f);\n\t\tadd_rels(opts.wbrels, ++rId, \"theme/theme1.xml\", RELS.THEME);\n\t\n\t\t/* TODO: something more intelligent with styles */\n\t\n\t\tf = \"xl/styles.\" + wbext;\n\t\tzip.file(f, write_sty(wb, f, opts));\n\t\tct.styles.push(f);\n\t\tadd_rels(opts.wbrels, ++rId, \"styles.\" + wbext, RELS.STY);\n\t\n\t\tzip.file(\"[Content_Types].xml\", write_ct(ct, opts));\n\t\tzip.file('_rels/.rels', write_rels(opts.rels));\n\t\tzip.file('xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));\n\t\treturn zip;\n\t}\n\tfunction firstbyte(f,o) {\n\t\tswitch((o||{}).type || \"base64\") {\n\t\t\tcase 'buffer': return f[0];\n\t\t\tcase 'base64': return Base64.decode(f.substr(0,12)).charCodeAt(0);\n\t\t\tcase 'binary': return f.charCodeAt(0);\n\t\t\tcase 'array': return f[0];\n\t\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t\t}\n\t}\n\t\n\tfunction read_zip(data, opts) {\n\t\tvar zip, d = data;\n\t\tvar o = opts||{};\n\t\tif(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? \"buffer\" : \"base64\";\n\t\tswitch(o.type) {\n\t\t\tcase \"base64\": zip = new jszip(d, { base64:true }); break;\n\t\t\tcase \"binary\": case \"array\": zip = new jszip(d, { base64:false }); break;\n\t\t\tcase \"buffer\": zip = new jszip(d); break;\n\t\t\tcase \"file\": zip=new jszip(d=_fs.readFileSync(data)); break;\n\t\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t\t}\n\t\treturn parse_zip(zip, o);\n\t}\n\t\n\tfunction readSync(data, opts) {\n\t\tvar zip, d = data, isfile = false, n;\n\t\tvar o = opts||{};\n\t\tif(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? \"buffer\" : \"base64\";\n\t\tif(o.type == \"file\") { isfile = true; o.type = \"buffer\"; d = _fs.readFileSync(data); }\n\t\tswitch((n = firstbyte(d, o))) {\n\t\t\tcase 0xD0:\n\t\t\t\tif(isfile) o.type = \"file\";\n\t\t\t\treturn parse_xlscfb(CFB.read(data, o), o);\n\t\t\tcase 0x09: return parse_xlscfb(s2a(o.type === 'base64' ? Base64.decode(data) : data), o);\n\t\t\tcase 0x3C: return parse_xlml(d, o);\n\t\t\tcase 0x50:\n\t\t\t\tif(isfile) o.type = \"file\";\n\t\t\t\treturn read_zip(data, opts);\n\t\t\tdefault: throw new Error(\"Unsupported file \" + n);\n\t\t}\n\t}\n\t\n\tfunction readFileSync(data, opts) {\n\t\tvar o = opts||{}; o.type = 'file'\n\t  var wb = readSync(data, o);\n\t  wb.FILENAME = data;\n\t\treturn wb;\n\t}\n\tfunction write_zip_type(wb, opts) {\n\t\tvar o = opts||{};\n\t  style_builder  = new StyleBuilder(opts);\n\t\n\t  var z = write_zip(wb, o);\n\t\tswitch(o.type) {\n\t\t\tcase \"base64\": return z.generate({type:\"base64\"});\n\t\t\tcase \"binary\": return z.generate({type:\"string\"});\n\t\t\tcase \"buffer\": return z.generate({type:\"nodebuffer\"});\n\t\t\tcase \"file\": return _fs.writeFileSync(o.file, z.generate({type:\"nodebuffer\"}));\n\t\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t\t}\n\t}\n\t\n\tfunction writeSync(wb, opts) {\n\t\tvar o = opts||{};\n\t\tswitch(o.bookType) {\n\t\t\tcase 'xml': return write_xlml(wb, o);\n\t\t\tdefault: return write_zip_type(wb, o);\n\t\t}\n\t}\n\t\n\tfunction writeFileSync(wb, filename, opts) {\n\t\tvar o = opts||{}; o.type = 'file';\n\t\n\t\to.file = filename;\n\t\tswitch(o.file.substr(-5).toLowerCase()) {\n\t\t\tcase '.xlsx': o.bookType = 'xlsx'; break;\n\t\t\tcase '.xlsm': o.bookType = 'xlsm'; break;\n\t\t\tcase '.xlsb': o.bookType = 'xlsb'; break;\n\t\tdefault: switch(o.file.substr(-4).toLowerCase()) {\n\t\t\tcase '.xls': o.bookType = 'xls'; break;\n\t\t\tcase '.xml': o.bookType = 'xml'; break;\n\t\t}}\n\t\treturn writeSync(wb, o);\n\t}\n\t\n\tfunction decode_row(rowstr) { return parseInt(unfix_row(rowstr),10) - 1; }\n\tfunction encode_row(row) { return \"\" + (row + 1); }\n\tfunction fix_row(cstr) { return cstr.replace(/([A-Z]|^)(\\d+)$/,\"$1$$$2\"); }\n\tfunction unfix_row(cstr) { return cstr.replace(/\\$(\\d+)$/,\"$1\"); }\n\t\n\tfunction decode_col(colstr) { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }\n\tfunction encode_col(col) { var s=\"\"; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }\n\tfunction fix_col(cstr) { return cstr.replace(/^([A-Z])/,\"$$$1\"); }\n\tfunction unfix_col(cstr) { return cstr.replace(/^\\$([A-Z])/,\"$1\"); }\n\t\n\tfunction split_cell(cstr) { return cstr.replace(/(\\$?[A-Z]*)(\\$?\\d*)/,\"$1,$2\").split(\",\"); }\n\tfunction decode_cell(cstr) { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }\n\tfunction encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }\n\tfunction fix_cell(cstr) { return fix_col(fix_row(cstr)); }\n\tfunction unfix_cell(cstr) { return unfix_col(unfix_row(cstr)); }\n\tfunction decode_range(range) { var x =range.split(\":\").map(decode_cell); return {s:x[0],e:x[x.length-1]}; }\n\tfunction encode_range(cs,ce) {\n\t\tif(ce === undefined || typeof ce === 'number') return encode_range(cs.s, cs.e);\n\t\tif(typeof cs !== 'string') cs = encode_cell(cs); if(typeof ce !== 'string') ce = encode_cell(ce);\n\t\treturn cs == ce ? cs : cs + \":\" + ce;\n\t}\n\t\n\tfunction safe_decode_range(range) {\n\t\tvar o = {s:{c:0,r:0},e:{c:0,r:0}};\n\t\tvar idx = 0, i = 0, cc = 0;\n\t\tvar len = range.length;\n\t\tfor(idx = 0; i < len; ++i) {\n\t\t\tif((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\t\tidx = 26*idx + cc;\n\t\t}\n\t\to.s.c = --idx;\n\t\n\t\tfor(idx = 0; i < len; ++i) {\n\t\t\tif((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;\n\t\t\tidx = 10*idx + cc;\n\t\t}\n\t\to.s.r = --idx;\n\t\n\t\tif(i === len || range.charCodeAt(++i) === 58) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }\n\t\n\t\tfor(idx = 0; i != len; ++i) {\n\t\t\tif((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\t\tidx = 26*idx + cc;\n\t\t}\n\t\to.e.c = --idx;\n\t\n\t\tfor(idx = 0; i != len; ++i) {\n\t\t\tif((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;\n\t\t\tidx = 10*idx + cc;\n\t\t}\n\t\to.e.r = --idx;\n\t\treturn o;\n\t}\n\t\n\tfunction safe_format_cell(cell, v) {\n\t\tif(cell.z !== undefined) try { return (cell.w = SSF.format(cell.z, v)); } catch(e) { }\n\t\tif(!cell.XF) return v;\n\t\ttry { return (cell.w = SSF.format(cell.XF.ifmt||0, v)); } catch(e) { return ''+v; }\n\t}\n\t\n\tfunction format_cell(cell, v) {\n\t\tif(cell == null || cell.t == null) return \"\";\n\t\tif(cell.w !== undefined) return cell.w;\n\t\tif(v === undefined) return safe_format_cell(cell, cell.v);\n\t\treturn safe_format_cell(cell, v);\n\t}\n\t\n\tfunction sheet_to_json(sheet, opts){\n\t\tvar val, row, range, header = 0, offset = 1, r, hdr = [], isempty, R, C, v;\n\t\tvar o = opts != null ? opts : {};\n\t\tvar raw = o.raw;\n\t\tif(sheet == null || sheet[\"!ref\"] == null) return [];\n\t\trange = o.range !== undefined ? o.range : sheet[\"!ref\"];\n\t\tif(o.header === 1) header = 1;\n\t\telse if(o.header === \"A\") header = 2;\n\t\telse if(Array.isArray(o.header)) header = 3;\n\t\tswitch(typeof range) {\n\t\t\tcase 'string': r = safe_decode_range(range); break;\n\t\t\tcase 'number': r = safe_decode_range(sheet[\"!ref\"]); r.s.r = range; break;\n\t\t\tdefault: r = range;\n\t\t}\n\t\tif(header > 0) offset = 0;\n\t\tvar rr = encode_row(r.s.r);\n\t\tvar cols = new Array(r.e.c-r.s.c+1);\n\t\tvar out = new Array(r.e.r-r.s.r-offset+1);\n\t\tvar outi = 0;\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\tcols[C] = encode_col(C);\n\t\t\tval = sheet[cols[C] + rr];\n\t\t\tswitch(header) {\n\t\t\t\tcase 1: hdr[C] = C; break;\n\t\t\t\tcase 2: hdr[C] = cols[C]; break;\n\t\t\t\tcase 3: hdr[C] = o.header[C - r.s.c]; break;\n\t\t\t\tdefault:\n\t\t\t\t\tif(val === undefined) continue;\n\t\t\t\t\thdr[C] = format_cell(val);\n\t\t\t}\n\t\t}\n\t\n\t\tfor (R = r.s.r + offset; R <= r.e.r; ++R) {\n\t\t\trr = encode_row(R);\n\t\t\tisempty = true;\n\t\t\tif(header === 1) row = [];\n\t\t\telse {\n\t\t\t\trow = {};\n\t\t\t\tif(Object.defineProperty) Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false});\n\t\t\t\telse row.__rowNum__ = R;\n\t\t\t}\n\t\t\tfor (C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\tval = sheet[cols[C] + rr];\n\t\t\t\tif(val === undefined || val.t === undefined) continue;\n\t\t\t\tv = val.v;\n\t\t\t\tswitch(val.t){\n\t\t\t\t\tcase 'e': continue;\n\t\t\t\t\tcase 's': break;\n\t\t\t\t\tcase 'b': case 'n': break;\n\t\t\t\t\tdefault: throw 'unrecognized type ' + val.t;\n\t\t\t\t}\n\t\t\t\tif(v !== undefined) {\n\t\t\t\t\trow[hdr[C]] = raw ? v : format_cell(val,v);\n\t\t\t\t\tisempty = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isempty === false || header === 1) out[outi++] = row;\n\t\t}\n\t\tout.length = outi;\n\t\treturn out;\n\t}\n\t\n\tfunction sheet_to_row_object_array(sheet, opts) { return sheet_to_json(sheet, opts != null ? opts : {}); }\n\t\n\tfunction sheet_to_csv(sheet, opts) {\n\t\tvar out = \"\", txt = \"\", qreg = /\"/g;\n\t\tvar o = opts == null ? {} : opts;\n\t\tif(sheet == null || sheet[\"!ref\"] == null) return \"\";\n\t\tvar r = safe_decode_range(sheet[\"!ref\"]);\n\t\tvar FS = o.FS !== undefined ? o.FS : \",\", fs = FS.charCodeAt(0);\n\t\tvar RS = o.RS !== undefined ? o.RS : \"\\n\", rs = RS.charCodeAt(0);\n\t\tvar row = \"\", rr = \"\", cols = [];\n\t\tvar i = 0, cc = 0, val;\n\t\tvar R = 0, C = 0;\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);\n\t\tfor(R = r.s.r; R <= r.e.r; ++R) {\n\t\t\trow = \"\";\n\t\t\trr = encode_row(R);\n\t\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\tval = sheet[cols[C] + rr];\n\t\t\t\ttxt = val !== undefined ? ''+format_cell(val) : \"\";\n\t\t\t\tfor(i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {\n\t\t\t\t\ttxt = \"\\\"\" + txt.replace(qreg, '\"\"') + \"\\\"\"; break; }\n\t\t\t\trow += (C === r.s.c ? \"\" : FS) + txt;\n\t\t\t}\n\t\t\tout += row + RS;\n\t\t}\n\t\treturn out;\n\t}\n\tvar make_csv = sheet_to_csv;\n\t\n\tfunction sheet_to_formulae(sheet) {\n\t\tvar cmds, y = \"\", x, val=\"\";\n\t\tif(sheet == null || sheet[\"!ref\"] == null) return \"\";\n\t\tvar r = safe_decode_range(sheet['!ref']), rr = \"\", cols = [], C;\n\t\tcmds = new Array((r.e.r-r.s.r+1)*(r.e.c-r.s.c+1));\n\t\tvar i = 0;\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);\n\t\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\t\trr = encode_row(R);\n\t\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\t\ty = cols[C] + rr;\n\t\t\t\tx = sheet[y];\n\t\t\t\tval = \"\";\n\t\t\t\tif(x === undefined) continue;\n\t\t\t\tif(x.f != null) val = x.f;\n\t\t\t\telse if(x.w !== undefined) val = \"'\" + x.w;\n\t\t\t\telse if(x.v === undefined) continue;\n\t\t\t\telse val = \"\"+x.v;\n\t\t\t\tcmds[i++] = y + \"=\" + val;\n\t\t\t}\n\t\t}\n\t\tcmds.length = i;\n\t\treturn cmds;\n\t}\n\t\n\tvar utils = {\n\t\tencode_col: encode_col,\n\t\tencode_row: encode_row,\n\t\tencode_cell: encode_cell,\n\t\tencode_range: encode_range,\n\t\tdecode_col: decode_col,\n\t\tdecode_row: decode_row,\n\t\tsplit_cell: split_cell,\n\t\tdecode_cell: decode_cell,\n\t\tdecode_range: decode_range,\n\t\tformat_cell: format_cell,\n\t\tget_formulae: sheet_to_formulae,\n\t\tmake_csv: sheet_to_csv,\n\t\tmake_json: sheet_to_json,\n\t\tmake_formulae: sheet_to_formulae,\n\t\tsheet_to_csv: sheet_to_csv,\n\t\tsheet_to_json: sheet_to_json,\n\t\tsheet_to_formulae: sheet_to_formulae,\n\t\tsheet_to_row_object_array: sheet_to_row_object_array\n\t};\n\t\n\t\n\t\n\t\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////\n\tvar XmlNode = (function () {\n\t  function XmlNode(tagName, attributes, children) {\n\t\n\t    if (!(this instanceof XmlNode)) {\n\t      return new XmlNode(tagName, attributes, children);\n\t    }\n\t    this.tagName = tagName;\n\t    this._attributes = attributes || {};\n\t    this._children = children || [];\n\t    this._prefix = '';\n\t    return this;\n\t  }\n\t\n\t  XmlNode.prototype.createElement = function () {\n\t    return new XmlNode(arguments)\n\t  }\n\t\n\t  XmlNode.prototype.children = function() {\n\t    return this._children;\n\t  }\n\t\n\t  XmlNode.prototype.append = function (node) {\n\t    this._children.push(node);\n\t    return this;\n\t  }\n\t\n\t  XmlNode.prototype.prefix = function (prefix) {\n\t    if (arguments.length==0) { return this._prefix;}\n\t    this._prefix = prefix;\n\t    return this;\n\t  }\n\t\n\t  XmlNode.prototype.attr = function (attr, value) {\n\t    if (value == undefined) {\n\t      delete this._attributes[attr];\n\t      return this;\n\t    }\n\t    if (arguments.length == 0) {\n\t      return this._attributes;\n\t    }\n\t    else if (typeof attr == 'string' && arguments.length == 1) {\n\t      return this._attributes.attr[attr];\n\t    }\n\t    if (typeof attr == 'object' && arguments.length == 1) {\n\t      for (var key in attr) {\n\t        this._attributes[key] = attr[key];\n\t      }\n\t    }\n\t    else if (arguments.length == 2 && typeof attr == 'string') {\n\t      this._attributes[attr] = value;\n\t    }\n\t    return this;\n\t  }\n\t\n\t  var APOS = \"'\"; QUOTE = '\"'\n\t  var ESCAPED_QUOTE = {  }\n\t  ESCAPED_QUOTE[QUOTE] = '&quot;'\n\t  ESCAPED_QUOTE[APOS] = '&apos;'\n\t\n\t  XmlNode.prototype.escapeAttributeValue = function(att_value) {\n\t    return '\"' + att_value.replace(/\\\"/g,'&quot;') + '\"';// TODO Extend with four other codes\n\t\n\t  }\n\t\n\t  XmlNode.prototype.toXml = function (node) {\n\t    if (!node) node = this;\n\t    var xml = node._prefix;\n\t    xml += '<' + node.tagName;\n\t    if (node._attributes) {\n\t      for (var key in node._attributes) {\n\t        xml += ' ' + key + '=' + this.escapeAttributeValue(''+node._attributes[key]) + ''\n\t      }\n\t    }\n\t    if (node._children && node._children.length > 0) {\n\t      xml += \">\";\n\t      for (var i = 0; i < node._children.length; i++) {\n\t        xml += this.toXml(node._children[i]);\n\t      }\n\t      xml += '</' + node.tagName + '>';\n\t    }\n\t    else {\n\t      xml += '/>';\n\t    }\n\t    return xml;\n\t  }\n\t  return XmlNode;\n\t})();\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////\n\t\n\t  var StyleBuilder = function (options) {\n\t\n\t    var customNumFmtId = 164;\n\t\n\t\n\t\n\t    var table_fmt = {\n\t      0:  'General',\n\t      1:  '0',\n\t      2:  '0.00',\n\t      3:  '#,##0',\n\t      4:  '#,##0.00',\n\t      9:  '0%',\n\t      10: '0.00%',\n\t      11: '0.00E+00',\n\t      12: '# ?/?',\n\t      13: '# ??/??',\n\t      14: 'm/d/yy',\n\t      15: 'd-mmm-yy',\n\t      16: 'd-mmm',\n\t      17: 'mmm-yy',\n\t      18: 'h:mm AM/PM',\n\t      19: 'h:mm:ss AM/PM',\n\t      20: 'h:mm',\n\t      21: 'h:mm:ss',\n\t      22: 'm/d/yy h:mm',\n\t      37: '#,##0 ;(#,##0)',\n\t      38: '#,##0 ;[Red](#,##0)',\n\t      39: '#,##0.00;(#,##0.00)',\n\t      40: '#,##0.00;[Red](#,##0.00)',\n\t      45: 'mm:ss',\n\t      46: '[h]:mm:ss',\n\t      47: 'mmss.0',\n\t      48: '##0.0E+0',\n\t      49: '@',\n\t      56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"'    };\n\t    var fmt_table = {};\n\t\n\t    for (var idx in table_fmt) {\n\t      fmt_table[table_fmt[idx]] = idx;\n\t    }\n\t\n\t\n\t    // cache style specs to avoid excessive duplication\n\t    _hashIndex = {};\n\t    _listIndex = [];\n\t\n\t    return {\n\t\n\t      initialize: function (options) {\n\t\n\t        this.$fonts = XmlNode('fonts').attr('count',0).attr(\"x14ac:knownFonts\",\"1\");\n\t        this.$fills = XmlNode('fills').attr('count',0);\n\t        this.$borders = XmlNode('borders').attr('count',0);\n\t        this.$numFmts = XmlNode('numFmts').attr('count',0);\n\t        this.$cellStyleXfs = XmlNode('cellStyleXfs');\n\t        this.$xf = XmlNode('xf')\n\t            .attr('numFmtId', 0)\n\t            .attr('fontId', 0)\n\t            .attr('fillId', 0)\n\t            .attr('borderId', 0);\n\t\n\t        this.$cellXfs = XmlNode('cellXfs').attr('count',0);\n\t        this.$cellStyles = XmlNode('cellStyles')\n\t            .append(XmlNode('cellStyle')\n\t                .attr('name', 'Normal')\n\t                .attr('xfId',0)\n\t                .attr('builtinId',0)\n\t            );\n\t        this.$dxfs = XmlNode('dxfs').attr('count', \"0\");\n\t        this.$tableStyles = XmlNode('tableStyles')\n\t            .attr('count','0')\n\t            .attr('defaultTableStyle','TableStyleMedium9')\n\t            .attr('defaultPivotStyle','PivotStyleMedium4')\n\t\n\t\n\t        this.$styles = XmlNode('styleSheet')\n\t            .attr('xmlns:mc','http://schemas.openxmlformats.org/markup-compatibility/2006')\n\t            .attr('xmlns:x14ac','http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac')\n\t            .attr('xmlns','http://schemas.openxmlformats.org/spreadsheetml/2006/main')\n\t            .attr('mc:Ignorable','x14ac')\n\t            .prefix('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>')\n\t            .append(this.$numFmts)\n\t            .append(this.$fonts)\n\t            .append(this.$fills)\n\t            .append(this.$borders)\n\t            .append(this.$cellStyleXfs.append(this.$xf))\n\t            .append(this.$cellXfs)\n\t            .append(this.$cellStyles)\n\t            .append(this.$dxfs)\n\t            .append(this.$tableStyles);\n\t\n\t\n\t        // need to specify styles at index 0 and 1.\n\t        // the second style MUST be gray125 for some reason\n\t\n\t        var defaultStyle = options.defaultCellStyle || {};\n\t        if (!defaultStyle.font) defaultStyle.font = {name: 'Calibri', sz: '12'};\n\t        if (!defaultStyle.font.name) defaultStyle.font.name = 'Calibri';\n\t        if (!defaultStyle.font.sz) defaultStyle.font.sz = 11;\n\t        if (!defaultStyle.fill) defaultStyle.fill = {  patternType: \"none\", fgColor: {}};\n\t        if (!defaultStyle.border) defaultStyle.border = {};\n\t        if (!defaultStyle.numFmt) defaultStyle.numFmt = 0;\n\t\n\t        this.defaultStyle = defaultStyle;\n\t\n\t        var gray125Style = JSON.parse(JSON.stringify(defaultStyle));\n\t        gray125Style.fill = {patternType: \"gray125\", fgColor: { }}\n\t\n\t        this.addStyles([defaultStyle, gray125Style]);\n\t        return this;\n\t      },\n\t\n\t      // create a style entry and returns an integer index that can be used in the cell .s property\n\t      // these format of this object follows the emerging Common Spreadsheet Format\n\t      addStyle: function (attributes) {\n\t\n\t        var hashKey = JSON.stringify(attributes);\n\t        var index = _hashIndex[hashKey];\n\t        if (index == undefined) {\n\t\n\t          index = this._addXf(attributes); //_listIndex.push(attributes) -1;\n\t          _hashIndex[hashKey] = index;\n\t        }\n\t        else {\n\t          index = _hashIndex[hashKey];\n\t        }\n\t        return index;\n\t      },\n\t\n\t      // create style entries and returns array of integer indexes that can be used in cell .s property\n\t      addStyles: function (styles) {\n\t        var self = this;\n\t        return styles.map(function (style) {\n\t          return self.addStyle(style);\n\t        })\n\t      },\n\t\n\t      _duckTypeStyle: function(attributes) {\n\t\n\t        if (typeof attributes == 'object' && (attributes.patternFill || attributes.fgColor)) {\n\t          return {fill: attributes }; // this must be read via XLSX.parseFile(...)\n\t        }\n\t        else if (attributes.font || attributes.numFmt || attributes.border || attributes.fill) {\n\t          return attributes;\n\t        }\n\t        else {\n\t          return this._getStyleCSS(attributes)\n\t        }\n\t      },\n\t\n\t      _getStyleCSS: function(css) {\n\t        return css; //TODO\n\t      },\n\t\n\t      // Create an <xf> record for the style as well as corresponding <font>, <fill>, <border>, <numfmts>\n\t      // Right now this is simple and creates a <font>, <fill>, <border>, <numfmts> for every <xf>\n\t      // We could perhaps get fancier and avoid duplicating  auxiliary entries as Excel presumably intended, but bother.\n\t      _addXf: function (attributes) {\n\t\n\t\n\t        var fontId = this._addFont(attributes.font);\n\t        var fillId = this._addFill(attributes.fill);\n\t        var borderId = this._addBorder(attributes.border);\n\t        var numFmtId = this._addNumFmt(attributes.numFmt);\n\t\n\t        var $xf = XmlNode('xf')\n\t            .attr(\"numFmtId\", numFmtId)\n\t            .attr(\"fontId\", fontId)\n\t            .attr(\"fillId\", fillId)\n\t            .attr(\"borderId\", borderId)\n\t            .attr(\"xfId\", \"0\");\n\t\n\t        if (fontId > 0) {\n\t          $xf.attr('applyFont', \"1\");\n\t        }\n\t        if (fillId > 0) {\n\t          $xf.attr('applyFill', \"1\");\n\t        }\n\t        if (borderId > 0) {\n\t          $xf.attr('applyBorder', \"1\");\n\t        }\n\t        if (numFmtId > 0) {\n\t          $xf.attr('applyNumberFormat', \"1\");\n\t        }\n\t\n\t        if (attributes.alignment) {\n\t          var $alignment = XmlNode('alignment');\n\t          if (attributes.alignment.horizontal) { $alignment.attr('horizontal', attributes.alignment.horizontal);}\n\t          if (attributes.alignment.vertical)  { $alignment.attr('vertical', attributes.alignment.vertical);}\n\t          if (attributes.alignment.indent)  { $alignment.attr('indent', attributes.alignment.indent);}\n\t          if (attributes.alignment.readingOrder)  { $alignment.attr('readingOrder', attributes.alignment.readingOrder);}\n\t          if (attributes.alignment.wrapText)  { $alignment.attr('wrapText', attributes.alignment.wrapText);}\n\t          if (attributes.alignment.textRotation!=undefined)  { $alignment.attr('textRotation', attributes.alignment.textRotation);}\n\t\n\t          $xf.append($alignment).attr('applyAlignment',1)\n\t\n\t        }\n\t        this.$cellXfs.append($xf);\n\t        var count = +this.$cellXfs.children().length;\n\t\n\t        this.$cellXfs.attr('count', count);\n\t        return count - 1;\n\t      },\n\t\n\t      _addFont: function (attributes) {\n\t\n\t        if (!attributes) {  return 0; }\n\t\n\t        var $font = XmlNode('font')\n\t            .append(XmlNode('sz').attr('val', attributes.sz || this.defaultStyle.font.sz))\n\t            .append(XmlNode('name').attr('val', attributes.name || this.defaultStyle.font.name))\n\t\n\t        if (attributes.bold) $font.append(XmlNode('b'));\n\t        if (attributes.underline)  $font.append(XmlNode('u'));\n\t        if (attributes.italic)  $font.append(XmlNode('i'));\n\t        if (attributes.strike)  $font.append(XmlNode('strike'));\n\t        if (attributes.outline)  $font.append(XmlNode('outline'));\n\t        if (attributes.shadow)  $font.append(XmlNode('shadow'));\n\t\n\t        if (attributes.vertAlign) {\n\t          $font.append(XmlNode('vertAlign').attr('val', attributes.vertAlign))\n\t        }\n\t\n\t\n\t        if (attributes.color) {\n\t          if (attributes.color.theme) {\n\t            $font.append(XmlNode('color').attr('theme', attributes.color.theme))\n\t\n\t            if (attributes.color.tint) { //tint only if theme\n\t              $font.append(XmlNode('tint').attr('theme', attributes.color.tint))\n\t            }\n\t\n\t          } else if (attributes.color.rgb) { // not both rgb and theme\n\t            $font.append(XmlNode('color').attr('rgb', attributes.color.rgb))\n\t          }\n\t        }\n\t\n\t        this.$fonts.append($font);\n\t\n\t        var count = this.$fonts.children().length;\n\t        this.$fonts.attr('count', count);\n\t        return count - 1;\n\t      },\n\t\n\t        _addNumFmt: function (numFmt) {\n\t        if (!numFmt) { return 0; }\n\t\n\t        if (typeof numFmt == 'string') {\n\t          var numFmtIdx = fmt_table[numFmt];\n\t          if (numFmtIdx >= 0) {\n\t            return numFmtIdx; // we found a match against built in formats\n\t          }\n\t        }\n\t\n\t        if (/^[0-9]+$/.exec(numFmt)) {\n\t          return numFmt; // we're matching an integer against some known code\n\t        }\n\t        numFmt = numFmt\n\t            .replace(/&/g, '&amp;')\n\t            .replace(/</g, '&lt;')\n\t            .replace(/>/g, '&gt;')\n\t            .replace(/\"/g, '&quot;')\n\t            .replace(/'/g, '&apos;');\n\t\n\t\n\t        var $numFmt = XmlNode('numFmt')\n\t            .attr('numFmtId', (++customNumFmtId))\n\t            .attr('formatCode', numFmt);\n\t\n\t\n\t        this.$numFmts.append($numFmt);\n\t\n\t        var count = this.$numFmts.children().length;\n\t        this.$numFmts.attr('count', count);\n\t        return customNumFmtId ;\n\t      },\n\t\n\t      _addFill: function (attributes) {\n\t\n\t        if (!attributes) { return 0; }\n\t\n\t        var $patternFill = XmlNode('patternFill')\n\t            .attr('patternType', attributes.patternType || 'solid');\n\t\n\t        if (attributes.fgColor) {\n\t          var $fgColor = XmlNode('fgColor');\n\t\n\t          //Excel doesn't like it when we set both rgb and theme+tint, but xlsx.parseFile() sets both\n\t          //var $fgColor = createElement('<fgColor/>', null, null, {xmlMode: true}).attr(attributes.fgColor)\n\t          if (attributes.fgColor.rgb) {\n\t\n\t            if (attributes.fgColor.rgb.length == 6) {\n\t              attributes.fgColor.rgb = \"FF\" + attributes.fgColor.rgb /// add alpha to an RGB as Excel expects aRGB\n\t            }\n\t\n\t            $fgColor.attr('rgb', attributes.fgColor.rgb);\n\t            $patternFill.append($fgColor);\n\t          }\n\t          else if (attributes.fgColor.theme) {\n\t            $fgColor.attr('theme', attributes.fgColor.theme);\n\t            if (attributes.fgColor.tint) {\n\t              $fgColor.attr('tint', attributes.fgColor.tint);\n\t            }\n\t            $patternFill.append($fgColor);\n\t          }\n\t\n\t          if (!attributes.bgColor) {\n\t            attributes.bgColor = { \"indexed\": \"64\"}\n\t          }\n\t        }\n\t\n\t        if (attributes.bgColor) {\n\t          var $bgColor = XmlNode('bgColor').attr(attributes.bgColor);\n\t          $patternFill.append($bgColor);\n\t        }\n\t\n\t        var $fill = XmlNode('fill')\n\t            .append($patternFill);\n\t\n\t        this.$fills.append($fill);\n\t\n\t        var count = this.$fills.children().length;\n\t        this.$fills.attr('count', count);\n\t        return count - 1;\n\t      },\n\t\n\t      _getSubBorder: function(direction, spec) {\n\t\n\t        var $direction = XmlNode(direction);\n\t        if (spec){\n\t          if (spec.style) $direction.attr('style', spec.style);\n\t          if (spec.color) {\n\t            var $color = XmlNode('color');\n\t            if (spec.color.auto) {\n\t              $color.attr('auto', spec.color.auto);\n\t            }\n\t            else if (spec.color.rgb) {\n\t              $color.attr('rgb', spec.color.rgb);\n\t            }\n\t            else if (spec.color.theme || spec.color.tint) {\n\t              $color.attr('theme', spec.color.theme || \"1\");\n\t              $color.attr('tint', spec.color.tint || \"0\");\n\t            }\n\t            $direction.append($color)\n\t          }\n\t        }\n\t        return $direction;\n\t      },\n\t\n\t      _addBorder: function (attributes) {\n\t        if (!attributes) { return 0; }\n\t\n\t        var self = this;\n\t\n\t        var $border = XmlNode('border')\n\t            .attr(\"diagonalUp\",attributes.diagonalUp)\n\t            .attr(\"diagonalDown\",attributes.diagonalDown);\n\t\n\t        var directions = [\"left\",\"right\",\"top\",\"bottom\",\"diagonal\"];\n\t\n\t        directions.forEach(function(direction) {\n\t          $border.append(self._getSubBorder(direction, attributes[direction]))\n\t        });\n\t        this.$borders.append($border);\n\t\n\t        var count = this.$borders.children().length;\n\t        this.$borders.attr('count', count);\n\t        return count -1;\n\t      },\n\t\n\t      toXml: function () {\n\t        return this.$styles.toXml();\n\t      }\n\t    }.initialize(options||{});\n\t  }\n\t\n\t\n\tXLSX.parse_xlscfb = parse_xlscfb;\n\tXLSX.parse_zip = parse_zip;\n\tXLSX.read = readSync; //xlsread\n\tXLSX.readFile = readFileSync; //readFile\n\tXLSX.readFileSync = readFileSync;\n\tXLSX.write = writeSync;\n\tXLSX.writeFile = writeFileSync;\n\tXLSX.writeFileSync = writeFileSync;\n\tXLSX.utils = utils;\n\tXLSX.CFB = CFB;\n\tXLSX.SSF = SSF;\n\t})( true ? exports : XLSX);\n\tvar XLS = XLSX;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {/*!\n\t * The buffer module from node.js, for the browser.\n\t *\n\t * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n\t * @license  MIT\n\t */\n\t\n\tvar base64 = __webpack_require__(3)\n\tvar ieee754 = __webpack_require__(4)\n\tvar isArray = __webpack_require__(5)\n\t\n\texports.Buffer = Buffer\n\texports.SlowBuffer = SlowBuffer\n\texports.INSPECT_MAX_BYTES = 50\n\tBuffer.poolSize = 8192 // not used by this implementation\n\t\n\tvar rootParent = {}\n\t\n\t/**\n\t * If `Buffer.TYPED_ARRAY_SUPPORT`:\n\t *   === true    Use Uint8Array implementation (fastest)\n\t *   === false   Use Object implementation (most compatible, even IE6)\n\t *\n\t * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n\t * Opera 11.6+, iOS 4.2+.\n\t *\n\t * Due to various browser bugs, sometimes the Object implementation will be used even\n\t * when the browser supports typed arrays.\n\t *\n\t * Note:\n\t *\n\t *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n\t *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n\t *\n\t *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n\t *     on objects.\n\t *\n\t *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n\t *\n\t *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n\t *     incorrect length in some situations.\n\t\n\t * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n\t * get the Object implementation, which is slower but behaves correctly.\n\t */\n\tBuffer.TYPED_ARRAY_SUPPORT = (function () {\n\t  function Bar () {}\n\t  try {\n\t    var arr = new Uint8Array(1)\n\t    arr.foo = function () { return 42 }\n\t    arr.constructor = Bar\n\t    return arr.foo() === 42 && // typed array instances can be augmented\n\t        arr.constructor === Bar && // constructor can be set\n\t        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n\t        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n\t  } catch (e) {\n\t    return false\n\t  }\n\t})()\n\t\n\tfunction kMaxLength () {\n\t  return Buffer.TYPED_ARRAY_SUPPORT\n\t    ? 0x7fffffff\n\t    : 0x3fffffff\n\t}\n\t\n\t/**\n\t * Class: Buffer\n\t * =============\n\t *\n\t * The Buffer constructor returns instances of `Uint8Array` that are augmented\n\t * with function properties for all the node `Buffer` API functions. We use\n\t * `Uint8Array` so that square bracket notation works as expected -- it returns\n\t * a single octet.\n\t *\n\t * By augmenting the instances, we can avoid modifying the `Uint8Array`\n\t * prototype.\n\t */\n\tfunction Buffer (arg) {\n\t  if (!(this instanceof Buffer)) {\n\t    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n\t    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n\t    return new Buffer(arg)\n\t  }\n\t\n\t  this.length = 0\n\t  this.parent = undefined\n\t\n\t  // Common case.\n\t  if (typeof arg === 'number') {\n\t    return fromNumber(this, arg)\n\t  }\n\t\n\t  // Slightly less common case.\n\t  if (typeof arg === 'string') {\n\t    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n\t  }\n\t\n\t  // Unusual.\n\t  return fromObject(this, arg)\n\t}\n\t\n\tfunction fromNumber (that, length) {\n\t  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n\t    for (var i = 0; i < length; i++) {\n\t      that[i] = 0\n\t    }\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromString (that, string, encoding) {\n\t  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\t\n\t  // Assumption: byteLength() return value is always < kMaxLength.\n\t  var length = byteLength(string, encoding) | 0\n\t  that = allocate(that, length)\n\t\n\t  that.write(string, encoding)\n\t  return that\n\t}\n\t\n\tfunction fromObject (that, object) {\n\t  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\t\n\t  if (isArray(object)) return fromArray(that, object)\n\t\n\t  if (object == null) {\n\t    throw new TypeError('must start with number, buffer, array or string')\n\t  }\n\t\n\t  if (typeof ArrayBuffer !== 'undefined') {\n\t    if (object.buffer instanceof ArrayBuffer) {\n\t      return fromTypedArray(that, object)\n\t    }\n\t    if (object instanceof ArrayBuffer) {\n\t      return fromArrayBuffer(that, object)\n\t    }\n\t  }\n\t\n\t  if (object.length) return fromArrayLike(that, object)\n\t\n\t  return fromJsonObject(that, object)\n\t}\n\t\n\tfunction fromBuffer (that, buffer) {\n\t  var length = checked(buffer.length) | 0\n\t  that = allocate(that, length)\n\t  buffer.copy(that, 0, 0, length)\n\t  return that\n\t}\n\t\n\tfunction fromArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Duplicate of fromArray() to keep fromArray() monomorphic.\n\tfunction fromTypedArray (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  // Truncating the elements is probably not what people expect from typed\n\t  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n\t  // of the old Buffer constructor.\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayBuffer (that, array) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    array.byteLength\n\t    that = Buffer._augment(new Uint8Array(array))\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that = fromTypedArray(that, new Uint8Array(array))\n\t  }\n\t  return that\n\t}\n\t\n\tfunction fromArrayLike (that, array) {\n\t  var length = checked(array.length) | 0\n\t  that = allocate(that, length)\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\t// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n\t// Returns a zero-length buffer for inputs that don't conform to the spec.\n\tfunction fromJsonObject (that, object) {\n\t  var array\n\t  var length = 0\n\t\n\t  if (object.type === 'Buffer' && isArray(object.data)) {\n\t    array = object.data\n\t    length = checked(array.length) | 0\n\t  }\n\t  that = allocate(that, length)\n\t\n\t  for (var i = 0; i < length; i += 1) {\n\t    that[i] = array[i] & 255\n\t  }\n\t  return that\n\t}\n\t\n\tfunction allocate (that, length) {\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // Return an augmented `Uint8Array` instance, for best performance\n\t    that = Buffer._augment(new Uint8Array(length))\n\t  } else {\n\t    // Fallback: Return an object instance of the Buffer class\n\t    that.length = length\n\t    that._isBuffer = true\n\t  }\n\t\n\t  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n\t  if (fromPool) that.parent = rootParent\n\t\n\t  return that\n\t}\n\t\n\tfunction checked (length) {\n\t  // Note: cannot use `length < kMaxLength` here because that fails when\n\t  // length is NaN (which is otherwise coerced to zero.)\n\t  if (length >= kMaxLength()) {\n\t    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n\t                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n\t  }\n\t  return length | 0\n\t}\n\t\n\tfunction SlowBuffer (subject, encoding) {\n\t  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\t\n\t  var buf = new Buffer(subject, encoding)\n\t  delete buf.parent\n\t  return buf\n\t}\n\t\n\tBuffer.isBuffer = function isBuffer (b) {\n\t  return !!(b != null && b._isBuffer)\n\t}\n\t\n\tBuffer.compare = function compare (a, b) {\n\t  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n\t    throw new TypeError('Arguments must be Buffers')\n\t  }\n\t\n\t  if (a === b) return 0\n\t\n\t  var x = a.length\n\t  var y = b.length\n\t\n\t  var i = 0\n\t  var len = Math.min(x, y)\n\t  while (i < len) {\n\t    if (a[i] !== b[i]) break\n\t\n\t    ++i\n\t  }\n\t\n\t  if (i !== len) {\n\t    x = a[i]\n\t    y = b[i]\n\t  }\n\t\n\t  if (x < y) return -1\n\t  if (y < x) return 1\n\t  return 0\n\t}\n\t\n\tBuffer.isEncoding = function isEncoding (encoding) {\n\t  switch (String(encoding).toLowerCase()) {\n\t    case 'hex':\n\t    case 'utf8':\n\t    case 'utf-8':\n\t    case 'ascii':\n\t    case 'binary':\n\t    case 'base64':\n\t    case 'raw':\n\t    case 'ucs2':\n\t    case 'ucs-2':\n\t    case 'utf16le':\n\t    case 'utf-16le':\n\t      return true\n\t    default:\n\t      return false\n\t  }\n\t}\n\t\n\tBuffer.concat = function concat (list, length) {\n\t  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\t\n\t  if (list.length === 0) {\n\t    return new Buffer(0)\n\t  }\n\t\n\t  var i\n\t  if (length === undefined) {\n\t    length = 0\n\t    for (i = 0; i < list.length; i++) {\n\t      length += list[i].length\n\t    }\n\t  }\n\t\n\t  var buf = new Buffer(length)\n\t  var pos = 0\n\t  for (i = 0; i < list.length; i++) {\n\t    var item = list[i]\n\t    item.copy(buf, pos)\n\t    pos += item.length\n\t  }\n\t  return buf\n\t}\n\t\n\tfunction byteLength (string, encoding) {\n\t  if (typeof string !== 'string') string = '' + string\n\t\n\t  var len = string.length\n\t  if (len === 0) return 0\n\t\n\t  // Use a for loop to avoid recursion\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'ascii':\n\t      case 'binary':\n\t      // Deprecated\n\t      case 'raw':\n\t      case 'raws':\n\t        return len\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8ToBytes(string).length\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return len * 2\n\t      case 'hex':\n\t        return len >>> 1\n\t      case 'base64':\n\t        return base64ToBytes(string).length\n\t      default:\n\t        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\tBuffer.byteLength = byteLength\n\t\n\t// pre-set for values that may exist in the future\n\tBuffer.prototype.length = undefined\n\tBuffer.prototype.parent = undefined\n\t\n\tfunction slowToString (encoding, start, end) {\n\t  var loweredCase = false\n\t\n\t  start = start | 0\n\t  end = end === undefined || end === Infinity ? this.length : end | 0\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t  if (start < 0) start = 0\n\t  if (end > this.length) end = this.length\n\t  if (end <= start) return ''\n\t\n\t  while (true) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexSlice(this, start, end)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Slice(this, start, end)\n\t\n\t      case 'ascii':\n\t        return asciiSlice(this, start, end)\n\t\n\t      case 'binary':\n\t        return binarySlice(this, start, end)\n\t\n\t      case 'base64':\n\t        return base64Slice(this, start, end)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return utf16leSlice(this, start, end)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = (encoding + '').toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toString = function toString () {\n\t  var length = this.length | 0\n\t  if (length === 0) return ''\n\t  if (arguments.length === 0) return utf8Slice(this, 0, length)\n\t  return slowToString.apply(this, arguments)\n\t}\n\t\n\tBuffer.prototype.equals = function equals (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return true\n\t  return Buffer.compare(this, b) === 0\n\t}\n\t\n\tBuffer.prototype.inspect = function inspect () {\n\t  var str = ''\n\t  var max = exports.INSPECT_MAX_BYTES\n\t  if (this.length > 0) {\n\t    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n\t    if (this.length > max) str += ' ... '\n\t  }\n\t  return '<Buffer ' + str + '>'\n\t}\n\t\n\tBuffer.prototype.compare = function compare (b) {\n\t  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n\t  if (this === b) return 0\n\t  return Buffer.compare(this, b)\n\t}\n\t\n\tBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n\t  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n\t  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n\t  byteOffset >>= 0\n\t\n\t  if (this.length === 0) return -1\n\t  if (byteOffset >= this.length) return -1\n\t\n\t  // Negative offsets start from the end of the buffer\n\t  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\t\n\t  if (typeof val === 'string') {\n\t    if (val.length === 0) return -1 // special case: looking for empty string always fails\n\t    return String.prototype.indexOf.call(this, val, byteOffset)\n\t  }\n\t  if (Buffer.isBuffer(val)) {\n\t    return arrayIndexOf(this, val, byteOffset)\n\t  }\n\t  if (typeof val === 'number') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n\t      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n\t    }\n\t    return arrayIndexOf(this, [ val ], byteOffset)\n\t  }\n\t\n\t  function arrayIndexOf (arr, val, byteOffset) {\n\t    var foundIndex = -1\n\t    for (var i = 0; byteOffset + i < arr.length; i++) {\n\t      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n\t        if (foundIndex === -1) foundIndex = i\n\t        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n\t      } else {\n\t        foundIndex = -1\n\t      }\n\t    }\n\t    return -1\n\t  }\n\t\n\t  throw new TypeError('val must be string, number or Buffer')\n\t}\n\t\n\t// `get` is deprecated\n\tBuffer.prototype.get = function get (offset) {\n\t  console.log('.get() is deprecated. Access using array indexes instead.')\n\t  return this.readUInt8(offset)\n\t}\n\t\n\t// `set` is deprecated\n\tBuffer.prototype.set = function set (v, offset) {\n\t  console.log('.set() is deprecated. Access using array indexes instead.')\n\t  return this.writeUInt8(v, offset)\n\t}\n\t\n\tfunction hexWrite (buf, string, offset, length) {\n\t  offset = Number(offset) || 0\n\t  var remaining = buf.length - offset\n\t  if (!length) {\n\t    length = remaining\n\t  } else {\n\t    length = Number(length)\n\t    if (length > remaining) {\n\t      length = remaining\n\t    }\n\t  }\n\t\n\t  // must be an even number of digits\n\t  var strLen = string.length\n\t  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\t\n\t  if (length > strLen / 2) {\n\t    length = strLen / 2\n\t  }\n\t  for (var i = 0; i < length; i++) {\n\t    var parsed = parseInt(string.substr(i * 2, 2), 16)\n\t    if (isNaN(parsed)) throw new Error('Invalid hex string')\n\t    buf[offset + i] = parsed\n\t  }\n\t  return i\n\t}\n\t\n\tfunction utf8Write (buf, string, offset, length) {\n\t  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tfunction asciiWrite (buf, string, offset, length) {\n\t  return blitBuffer(asciiToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction binaryWrite (buf, string, offset, length) {\n\t  return asciiWrite(buf, string, offset, length)\n\t}\n\t\n\tfunction base64Write (buf, string, offset, length) {\n\t  return blitBuffer(base64ToBytes(string), buf, offset, length)\n\t}\n\t\n\tfunction ucs2Write (buf, string, offset, length) {\n\t  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n\t}\n\t\n\tBuffer.prototype.write = function write (string, offset, length, encoding) {\n\t  // Buffer#write(string)\n\t  if (offset === undefined) {\n\t    encoding = 'utf8'\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, encoding)\n\t  } else if (length === undefined && typeof offset === 'string') {\n\t    encoding = offset\n\t    length = this.length\n\t    offset = 0\n\t  // Buffer#write(string, offset[, length][, encoding])\n\t  } else if (isFinite(offset)) {\n\t    offset = offset | 0\n\t    if (isFinite(length)) {\n\t      length = length | 0\n\t      if (encoding === undefined) encoding = 'utf8'\n\t    } else {\n\t      encoding = length\n\t      length = undefined\n\t    }\n\t  // legacy write(string, encoding, offset, length) - remove in v0.13\n\t  } else {\n\t    var swap = encoding\n\t    encoding = offset\n\t    offset = length | 0\n\t    length = swap\n\t  }\n\t\n\t  var remaining = this.length - offset\n\t  if (length === undefined || length > remaining) length = remaining\n\t\n\t  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n\t    throw new RangeError('attempt to write outside buffer bounds')\n\t  }\n\t\n\t  if (!encoding) encoding = 'utf8'\n\t\n\t  var loweredCase = false\n\t  for (;;) {\n\t    switch (encoding) {\n\t      case 'hex':\n\t        return hexWrite(this, string, offset, length)\n\t\n\t      case 'utf8':\n\t      case 'utf-8':\n\t        return utf8Write(this, string, offset, length)\n\t\n\t      case 'ascii':\n\t        return asciiWrite(this, string, offset, length)\n\t\n\t      case 'binary':\n\t        return binaryWrite(this, string, offset, length)\n\t\n\t      case 'base64':\n\t        // Warning: maxLength not taken into account in base64Write\n\t        return base64Write(this, string, offset, length)\n\t\n\t      case 'ucs2':\n\t      case 'ucs-2':\n\t      case 'utf16le':\n\t      case 'utf-16le':\n\t        return ucs2Write(this, string, offset, length)\n\t\n\t      default:\n\t        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n\t        encoding = ('' + encoding).toLowerCase()\n\t        loweredCase = true\n\t    }\n\t  }\n\t}\n\t\n\tBuffer.prototype.toJSON = function toJSON () {\n\t  return {\n\t    type: 'Buffer',\n\t    data: Array.prototype.slice.call(this._arr || this, 0)\n\t  }\n\t}\n\t\n\tfunction base64Slice (buf, start, end) {\n\t  if (start === 0 && end === buf.length) {\n\t    return base64.fromByteArray(buf)\n\t  } else {\n\t    return base64.fromByteArray(buf.slice(start, end))\n\t  }\n\t}\n\t\n\tfunction utf8Slice (buf, start, end) {\n\t  var res = ''\n\t  var tmp = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    if (buf[i] <= 0x7F) {\n\t      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n\t      tmp = ''\n\t    } else {\n\t      tmp += '%' + buf[i].toString(16)\n\t    }\n\t  }\n\t\n\t  return res + decodeUtf8Char(tmp)\n\t}\n\t\n\tfunction asciiSlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i] & 0x7F)\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction binarySlice (buf, start, end) {\n\t  var ret = ''\n\t  end = Math.min(buf.length, end)\n\t\n\t  for (var i = start; i < end; i++) {\n\t    ret += String.fromCharCode(buf[i])\n\t  }\n\t  return ret\n\t}\n\t\n\tfunction hexSlice (buf, start, end) {\n\t  var len = buf.length\n\t\n\t  if (!start || start < 0) start = 0\n\t  if (!end || end < 0 || end > len) end = len\n\t\n\t  var out = ''\n\t  for (var i = start; i < end; i++) {\n\t    out += toHex(buf[i])\n\t  }\n\t  return out\n\t}\n\t\n\tfunction utf16leSlice (buf, start, end) {\n\t  var bytes = buf.slice(start, end)\n\t  var res = ''\n\t  for (var i = 0; i < bytes.length; i += 2) {\n\t    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n\t  }\n\t  return res\n\t}\n\t\n\tBuffer.prototype.slice = function slice (start, end) {\n\t  var len = this.length\n\t  start = ~~start\n\t  end = end === undefined ? len : ~~end\n\t\n\t  if (start < 0) {\n\t    start += len\n\t    if (start < 0) start = 0\n\t  } else if (start > len) {\n\t    start = len\n\t  }\n\t\n\t  if (end < 0) {\n\t    end += len\n\t    if (end < 0) end = 0\n\t  } else if (end > len) {\n\t    end = len\n\t  }\n\t\n\t  if (end < start) end = start\n\t\n\t  var newBuf\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    newBuf = Buffer._augment(this.subarray(start, end))\n\t  } else {\n\t    var sliceLen = end - start\n\t    newBuf = new Buffer(sliceLen, undefined)\n\t    for (var i = 0; i < sliceLen; i++) {\n\t      newBuf[i] = this[i + start]\n\t    }\n\t  }\n\t\n\t  if (newBuf.length) newBuf.parent = this.parent || this\n\t\n\t  return newBuf\n\t}\n\t\n\t/*\n\t * Need to make sure that buffer isn't trying to write out of bounds.\n\t */\n\tfunction checkOffset (offset, ext, length) {\n\t  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n\t  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n\t}\n\t\n\tBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) {\n\t    checkOffset(offset, byteLength, this.length)\n\t  }\n\t\n\t  var val = this[offset + --byteLength]\n\t  var mul = 1\n\t  while (byteLength > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --byteLength] * mul\n\t  }\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  return this[offset]\n\t}\n\t\n\tBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return this[offset] | (this[offset + 1] << 8)\n\t}\n\t\n\tBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  return (this[offset] << 8) | this[offset + 1]\n\t}\n\t\n\tBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return ((this[offset]) |\n\t      (this[offset + 1] << 8) |\n\t      (this[offset + 2] << 16)) +\n\t      (this[offset + 3] * 0x1000000)\n\t}\n\t\n\tBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] * 0x1000000) +\n\t    ((this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var val = this[offset]\n\t  var mul = 1\n\t  var i = 0\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    val += this[offset + i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\t\n\t  var i = byteLength\n\t  var mul = 1\n\t  var val = this[offset + --i]\n\t  while (i > 0 && (mul *= 0x100)) {\n\t    val += this[offset + --i] * mul\n\t  }\n\t  mul *= 0x80\n\t\n\t  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\t\n\t  return val\n\t}\n\t\n\tBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 1, this.length)\n\t  if (!(this[offset] & 0x80)) return (this[offset])\n\t  return ((0xff - this[offset] + 1) * -1)\n\t}\n\t\n\tBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset] | (this[offset + 1] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 2, this.length)\n\t  var val = this[offset + 1] | (this[offset] << 8)\n\t  return (val & 0x8000) ? val | 0xFFFF0000 : val\n\t}\n\t\n\tBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset]) |\n\t    (this[offset + 1] << 8) |\n\t    (this[offset + 2] << 16) |\n\t    (this[offset + 3] << 24)\n\t}\n\t\n\tBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t\n\t  return (this[offset] << 24) |\n\t    (this[offset + 1] << 16) |\n\t    (this[offset + 2] << 8) |\n\t    (this[offset + 3])\n\t}\n\t\n\tBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, true, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 4, this.length)\n\t  return ieee754.read(this, offset, false, 23, 4)\n\t}\n\t\n\tBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, true, 52, 8)\n\t}\n\t\n\tBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n\t  if (!noAssert) checkOffset(offset, 8, this.length)\n\t  return ieee754.read(this, offset, false, 52, 8)\n\t}\n\t\n\tfunction checkInt (buf, value, offset, ext, max, min) {\n\t  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t}\n\t\n\tBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var mul = 1\n\t  var i = 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  byteLength = byteLength | 0\n\t  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = (value / mul) & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  this[offset] = value\n\t  return offset + 1\n\t}\n\t\n\tfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n\t    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n\t      (littleEndian ? i : 1 - i) * 8\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = value\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = value\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n\t    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n\t  }\n\t}\n\t\n\tBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset + 3] = (value >>> 24)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset] = value\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = value\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = 0\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset] = value & 0xFF\n\t  while (++i < byteLength && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) {\n\t    var limit = Math.pow(2, 8 * byteLength - 1)\n\t\n\t    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n\t  }\n\t\n\t  var i = byteLength - 1\n\t  var mul = 1\n\t  var sub = value < 0 ? 1 : 0\n\t  this[offset + i] = value & 0xFF\n\t  while (--i >= 0 && (mul *= 0x100)) {\n\t    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n\t  }\n\t\n\t  return offset + byteLength\n\t}\n\t\n\tBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n\t  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n\t  if (value < 0) value = 0xff + value + 1\n\t  this[offset] = value\n\t  return offset + 1\n\t}\n\t\n\tBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = value\n\t    this[offset + 1] = (value >>> 8)\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, true)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 8)\n\t    this[offset + 1] = value\n\t  } else {\n\t    objectWriteUInt16(this, value, offset, false)\n\t  }\n\t  return offset + 2\n\t}\n\t\n\tBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = value\n\t    this[offset + 1] = (value >>> 8)\n\t    this[offset + 2] = (value >>> 16)\n\t    this[offset + 3] = (value >>> 24)\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, true)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n\t  value = +value\n\t  offset = offset | 0\n\t  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n\t  if (value < 0) value = 0xffffffff + value + 1\n\t  if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t    this[offset] = (value >>> 24)\n\t    this[offset + 1] = (value >>> 16)\n\t    this[offset + 2] = (value >>> 8)\n\t    this[offset + 3] = value\n\t  } else {\n\t    objectWriteUInt32(this, value, offset, false)\n\t  }\n\t  return offset + 4\n\t}\n\t\n\tfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n\t  if (value > max || value < min) throw new RangeError('value is out of bounds')\n\t  if (offset + ext > buf.length) throw new RangeError('index out of range')\n\t  if (offset < 0) throw new RangeError('index out of range')\n\t}\n\t\n\tfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n\t  return offset + 4\n\t}\n\t\n\tBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n\t  return writeFloat(this, value, offset, false, noAssert)\n\t}\n\t\n\tfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n\t  if (!noAssert) {\n\t    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n\t  }\n\t  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n\t  return offset + 8\n\t}\n\t\n\tBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, true, noAssert)\n\t}\n\t\n\tBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n\t  return writeDouble(this, value, offset, false, noAssert)\n\t}\n\t\n\t// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n\tBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n\t  if (!start) start = 0\n\t  if (!end && end !== 0) end = this.length\n\t  if (targetStart >= target.length) targetStart = target.length\n\t  if (!targetStart) targetStart = 0\n\t  if (end > 0 && end < start) end = start\n\t\n\t  // Copy 0 bytes; we're done\n\t  if (end === start) return 0\n\t  if (target.length === 0 || this.length === 0) return 0\n\t\n\t  // Fatal error conditions\n\t  if (targetStart < 0) {\n\t    throw new RangeError('targetStart out of bounds')\n\t  }\n\t  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n\t  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\t\n\t  // Are we oob?\n\t  if (end > this.length) end = this.length\n\t  if (target.length - targetStart < end - start) {\n\t    end = target.length - targetStart + start\n\t  }\n\t\n\t  var len = end - start\n\t  var i\n\t\n\t  if (this === target && start < targetStart && targetStart < end) {\n\t    // descending copy from end\n\t    for (i = len - 1; i >= 0; i--) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n\t    // ascending copy from start\n\t    for (i = 0; i < len; i++) {\n\t      target[i + targetStart] = this[i + start]\n\t    }\n\t  } else {\n\t    target._set(this.subarray(start, start + len), targetStart)\n\t  }\n\t\n\t  return len\n\t}\n\t\n\t// fill(value, start=0, end=buffer.length)\n\tBuffer.prototype.fill = function fill (value, start, end) {\n\t  if (!value) value = 0\n\t  if (!start) start = 0\n\t  if (!end) end = this.length\n\t\n\t  if (end < start) throw new RangeError('end < start')\n\t\n\t  // Fill 0 bytes; we're done\n\t  if (end === start) return\n\t  if (this.length === 0) return\n\t\n\t  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n\t  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\t\n\t  var i\n\t  if (typeof value === 'number') {\n\t    for (i = start; i < end; i++) {\n\t      this[i] = value\n\t    }\n\t  } else {\n\t    var bytes = utf8ToBytes(value.toString())\n\t    var len = bytes.length\n\t    for (i = start; i < end; i++) {\n\t      this[i] = bytes[i % len]\n\t    }\n\t  }\n\t\n\t  return this\n\t}\n\t\n\t/**\n\t * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n\t * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n\t */\n\tBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n\t  if (typeof Uint8Array !== 'undefined') {\n\t    if (Buffer.TYPED_ARRAY_SUPPORT) {\n\t      return (new Buffer(this)).buffer\n\t    } else {\n\t      var buf = new Uint8Array(this.length)\n\t      for (var i = 0, len = buf.length; i < len; i += 1) {\n\t        buf[i] = this[i]\n\t      }\n\t      return buf.buffer\n\t    }\n\t  } else {\n\t    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n\t  }\n\t}\n\t\n\t// HELPER FUNCTIONS\n\t// ================\n\t\n\tvar BP = Buffer.prototype\n\t\n\t/**\n\t * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n\t */\n\tBuffer._augment = function _augment (arr) {\n\t  arr.constructor = Buffer\n\t  arr._isBuffer = true\n\t\n\t  // save reference to original Uint8Array set method before overwriting\n\t  arr._set = arr.set\n\t\n\t  // deprecated\n\t  arr.get = BP.get\n\t  arr.set = BP.set\n\t\n\t  arr.write = BP.write\n\t  arr.toString = BP.toString\n\t  arr.toLocaleString = BP.toString\n\t  arr.toJSON = BP.toJSON\n\t  arr.equals = BP.equals\n\t  arr.compare = BP.compare\n\t  arr.indexOf = BP.indexOf\n\t  arr.copy = BP.copy\n\t  arr.slice = BP.slice\n\t  arr.readUIntLE = BP.readUIntLE\n\t  arr.readUIntBE = BP.readUIntBE\n\t  arr.readUInt8 = BP.readUInt8\n\t  arr.readUInt16LE = BP.readUInt16LE\n\t  arr.readUInt16BE = BP.readUInt16BE\n\t  arr.readUInt32LE = BP.readUInt32LE\n\t  arr.readUInt32BE = BP.readUInt32BE\n\t  arr.readIntLE = BP.readIntLE\n\t  arr.readIntBE = BP.readIntBE\n\t  arr.readInt8 = BP.readInt8\n\t  arr.readInt16LE = BP.readInt16LE\n\t  arr.readInt16BE = BP.readInt16BE\n\t  arr.readInt32LE = BP.readInt32LE\n\t  arr.readInt32BE = BP.readInt32BE\n\t  arr.readFloatLE = BP.readFloatLE\n\t  arr.readFloatBE = BP.readFloatBE\n\t  arr.readDoubleLE = BP.readDoubleLE\n\t  arr.readDoubleBE = BP.readDoubleBE\n\t  arr.writeUInt8 = BP.writeUInt8\n\t  arr.writeUIntLE = BP.writeUIntLE\n\t  arr.writeUIntBE = BP.writeUIntBE\n\t  arr.writeUInt16LE = BP.writeUInt16LE\n\t  arr.writeUInt16BE = BP.writeUInt16BE\n\t  arr.writeUInt32LE = BP.writeUInt32LE\n\t  arr.writeUInt32BE = BP.writeUInt32BE\n\t  arr.writeIntLE = BP.writeIntLE\n\t  arr.writeIntBE = BP.writeIntBE\n\t  arr.writeInt8 = BP.writeInt8\n\t  arr.writeInt16LE = BP.writeInt16LE\n\t  arr.writeInt16BE = BP.writeInt16BE\n\t  arr.writeInt32LE = BP.writeInt32LE\n\t  arr.writeInt32BE = BP.writeInt32BE\n\t  arr.writeFloatLE = BP.writeFloatLE\n\t  arr.writeFloatBE = BP.writeFloatBE\n\t  arr.writeDoubleLE = BP.writeDoubleLE\n\t  arr.writeDoubleBE = BP.writeDoubleBE\n\t  arr.fill = BP.fill\n\t  arr.inspect = BP.inspect\n\t  arr.toArrayBuffer = BP.toArrayBuffer\n\t\n\t  return arr\n\t}\n\t\n\tvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\t\n\tfunction base64clean (str) {\n\t  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n\t  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n\t  // Node converts strings with length < 2 to ''\n\t  if (str.length < 2) return ''\n\t  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n\t  while (str.length % 4 !== 0) {\n\t    str = str + '='\n\t  }\n\t  return str\n\t}\n\t\n\tfunction stringtrim (str) {\n\t  if (str.trim) return str.trim()\n\t  return str.replace(/^\\s+|\\s+$/g, '')\n\t}\n\t\n\tfunction toHex (n) {\n\t  if (n < 16) return '0' + n.toString(16)\n\t  return n.toString(16)\n\t}\n\t\n\tfunction utf8ToBytes (string, units) {\n\t  units = units || Infinity\n\t  var codePoint\n\t  var length = string.length\n\t  var leadSurrogate = null\n\t  var bytes = []\n\t  var i = 0\n\t\n\t  for (; i < length; i++) {\n\t    codePoint = string.charCodeAt(i)\n\t\n\t    // is surrogate component\n\t    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n\t      // last char was a lead\n\t      if (leadSurrogate) {\n\t        // 2 leads in a row\n\t        if (codePoint < 0xDC00) {\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          leadSurrogate = codePoint\n\t          continue\n\t        } else {\n\t          // valid surrogate pair\n\t          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n\t          leadSurrogate = null\n\t        }\n\t      } else {\n\t        // no lead yet\n\t\n\t        if (codePoint > 0xDBFF) {\n\t          // unexpected trail\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else if (i + 1 === length) {\n\t          // unpaired lead\n\t          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t          continue\n\t        } else {\n\t          // valid lead\n\t          leadSurrogate = codePoint\n\t          continue\n\t        }\n\t      }\n\t    } else if (leadSurrogate) {\n\t      // valid bmp char, but last char was a lead\n\t      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n\t      leadSurrogate = null\n\t    }\n\t\n\t    // encode utf8\n\t    if (codePoint < 0x80) {\n\t      if ((units -= 1) < 0) break\n\t      bytes.push(codePoint)\n\t    } else if (codePoint < 0x800) {\n\t      if ((units -= 2) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x6 | 0xC0,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x10000) {\n\t      if ((units -= 3) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0xC | 0xE0,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else if (codePoint < 0x200000) {\n\t      if ((units -= 4) < 0) break\n\t      bytes.push(\n\t        codePoint >> 0x12 | 0xF0,\n\t        codePoint >> 0xC & 0x3F | 0x80,\n\t        codePoint >> 0x6 & 0x3F | 0x80,\n\t        codePoint & 0x3F | 0x80\n\t      )\n\t    } else {\n\t      throw new Error('Invalid code point')\n\t    }\n\t  }\n\t\n\t  return bytes\n\t}\n\t\n\tfunction asciiToBytes (str) {\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    // Node's code seems to be doing this and not & 0x7F..\n\t    byteArray.push(str.charCodeAt(i) & 0xFF)\n\t  }\n\t  return byteArray\n\t}\n\t\n\tfunction utf16leToBytes (str, units) {\n\t  var c, hi, lo\n\t  var byteArray = []\n\t  for (var i = 0; i < str.length; i++) {\n\t    if ((units -= 2) < 0) break\n\t\n\t    c = str.charCodeAt(i)\n\t    hi = c >> 8\n\t    lo = c % 256\n\t    byteArray.push(lo)\n\t    byteArray.push(hi)\n\t  }\n\t\n\t  return byteArray\n\t}\n\t\n\tfunction base64ToBytes (str) {\n\t  return base64.toByteArray(base64clean(str))\n\t}\n\t\n\tfunction blitBuffer (src, dst, offset, length) {\n\t  for (var i = 0; i < length; i++) {\n\t    if ((i + offset >= dst.length) || (i >= src.length)) break\n\t    dst[i + offset] = src[i]\n\t  }\n\t  return i\n\t}\n\t\n\tfunction decodeUtf8Char (str) {\n\t  try {\n\t    return decodeURIComponent(str)\n\t  } catch (err) {\n\t    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n\t  }\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\t\n\t;(function (exports) {\n\t\t'use strict';\n\t\n\t  var Arr = (typeof Uint8Array !== 'undefined')\n\t    ? Uint8Array\n\t    : Array\n\t\n\t\tvar PLUS   = '+'.charCodeAt(0)\n\t\tvar SLASH  = '/'.charCodeAt(0)\n\t\tvar NUMBER = '0'.charCodeAt(0)\n\t\tvar LOWER  = 'a'.charCodeAt(0)\n\t\tvar UPPER  = 'A'.charCodeAt(0)\n\t\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\t\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\t\n\t\tfunction decode (elt) {\n\t\t\tvar code = elt.charCodeAt(0)\n\t\t\tif (code === PLUS ||\n\t\t\t    code === PLUS_URL_SAFE)\n\t\t\t\treturn 62 // '+'\n\t\t\tif (code === SLASH ||\n\t\t\t    code === SLASH_URL_SAFE)\n\t\t\t\treturn 63 // '/'\n\t\t\tif (code < NUMBER)\n\t\t\t\treturn -1 //no match\n\t\t\tif (code < NUMBER + 10)\n\t\t\t\treturn code - NUMBER + 26 + 26\n\t\t\tif (code < UPPER + 26)\n\t\t\t\treturn code - UPPER\n\t\t\tif (code < LOWER + 26)\n\t\t\t\treturn code - LOWER + 26\n\t\t}\n\t\n\t\tfunction b64ToByteArray (b64) {\n\t\t\tvar i, j, l, tmp, placeHolders, arr\n\t\n\t\t\tif (b64.length % 4 > 0) {\n\t\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t\t}\n\t\n\t\t\t// the number of equal signs (place holders)\n\t\t\t// if there are two placeholders, than the two characters before it\n\t\t\t// represent one byte\n\t\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t\t// this is just a cheap hack to not do indexOf twice\n\t\t\tvar len = b64.length\n\t\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\t\n\t\t\t// base64 is 4/3 + up to two characters of the original data\n\t\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\t\n\t\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\t\n\t\t\tvar L = 0\n\t\n\t\t\tfunction push (v) {\n\t\t\t\tarr[L++] = v\n\t\t\t}\n\t\n\t\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\tif (placeHolders === 2) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t} else if (placeHolders === 1) {\n\t\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\t\tpush(tmp & 0xFF)\n\t\t\t}\n\t\n\t\t\treturn arr\n\t\t}\n\t\n\t\tfunction uint8ToBase64 (uint8) {\n\t\t\tvar i,\n\t\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\t\toutput = \"\",\n\t\t\t\ttemp, length\n\t\n\t\t\tfunction encode (num) {\n\t\t\t\treturn lookup.charAt(num)\n\t\t\t}\n\t\n\t\t\tfunction tripletToBase64 (num) {\n\t\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t\t}\n\t\n\t\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\t\toutput += tripletToBase64(temp)\n\t\t\t}\n\t\n\t\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\t\tswitch (extraBytes) {\n\t\t\t\tcase 1:\n\t\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\t\toutput += '=='\n\t\t\t\t\tbreak\n\t\t\t\tcase 2:\n\t\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\t\toutput += '='\n\t\t\t\t\tbreak\n\t\t\t}\n\t\n\t\t\treturn output\n\t\t}\n\t\n\t\texports.toByteArray = b64ToByteArray\n\t\texports.fromByteArray = uint8ToBase64\n\t}( false ? (this.base64js = {}) : exports))\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\texports.read = function (buffer, offset, isLE, mLen, nBytes) {\n\t  var e, m\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var nBits = -7\n\t  var i = isLE ? (nBytes - 1) : 0\n\t  var d = isLE ? -1 : 1\n\t  var s = buffer[offset + i]\n\t\n\t  i += d\n\t\n\t  e = s & ((1 << (-nBits)) - 1)\n\t  s >>= (-nBits)\n\t  nBits += eLen\n\t  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  m = e & ((1 << (-nBits)) - 1)\n\t  e >>= (-nBits)\n\t  nBits += mLen\n\t  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\t\n\t  if (e === 0) {\n\t    e = 1 - eBias\n\t  } else if (e === eMax) {\n\t    return m ? NaN : ((s ? -1 : 1) * Infinity)\n\t  } else {\n\t    m = m + Math.pow(2, mLen)\n\t    e = e - eBias\n\t  }\n\t  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n\t}\n\t\n\texports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n\t  var e, m, c\n\t  var eLen = nBytes * 8 - mLen - 1\n\t  var eMax = (1 << eLen) - 1\n\t  var eBias = eMax >> 1\n\t  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n\t  var i = isLE ? 0 : (nBytes - 1)\n\t  var d = isLE ? 1 : -1\n\t  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\t\n\t  value = Math.abs(value)\n\t\n\t  if (isNaN(value) || value === Infinity) {\n\t    m = isNaN(value) ? 1 : 0\n\t    e = eMax\n\t  } else {\n\t    e = Math.floor(Math.log(value) / Math.LN2)\n\t    if (value * (c = Math.pow(2, -e)) < 1) {\n\t      e--\n\t      c *= 2\n\t    }\n\t    if (e + eBias >= 1) {\n\t      value += rt / c\n\t    } else {\n\t      value += rt * Math.pow(2, 1 - eBias)\n\t    }\n\t    if (value * c >= 2) {\n\t      e++\n\t      c /= 2\n\t    }\n\t\n\t    if (e + eBias >= eMax) {\n\t      m = 0\n\t      e = eMax\n\t    } else if (e + eBias >= 1) {\n\t      m = (value * c - 1) * Math.pow(2, mLen)\n\t      e = e + eBias\n\t    } else {\n\t      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n\t      e = 0\n\t    }\n\t  }\n\t\n\t  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\t\n\t  e = (e << mLen) | m\n\t  eLen += mLen\n\t  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\t\n\t  buffer[offset + i - d] |= s * 128\n\t}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\n\t/**\n\t * isArray\n\t */\n\t\n\tvar isArray = Array.isArray;\n\t\n\t/**\n\t * toString\n\t */\n\t\n\tvar str = Object.prototype.toString;\n\t\n\t/**\n\t * Whether or not the given `val`\n\t * is an array.\n\t *\n\t * example:\n\t *\n\t *        isArray([]);\n\t *        // > true\n\t *        isArray(arguments);\n\t *        // > false\n\t *        isArray('');\n\t *        // > false\n\t *\n\t * @param {mixed} val\n\t * @return {bool}\n\t */\n\t\n\tmodule.exports = isArray || function (val) {\n\t  return !! val && '[object Array]' == str.call(val);\n\t};\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar base64 = __webpack_require__(7);\n\t\n\t/**\n\tUsage:\n\t   zip = new JSZip();\n\t   zip.file(\"hello.txt\", \"Hello, World!\").file(\"tempfile\", \"nothing\");\n\t   zip.folder(\"images\").file(\"smile.gif\", base64Data, {base64: true});\n\t   zip.file(\"Xmas.txt\", \"Ho ho ho !\", {date : new Date(\"December 25, 2007 00:00:01\")});\n\t   zip.remove(\"tempfile\");\n\t\n\t   base64zip = zip.generate();\n\t\n\t**/\n\t\n\t/**\n\t * Representation a of zip file in js\n\t * @constructor\n\t * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).\n\t * @param {Object=} options the options for creating this objects (optional).\n\t */\n\tfunction JSZip(data, options) {\n\t    // if this constructor is used without `new`, it adds `new` before itself:\n\t    if(!(this instanceof JSZip)) return new JSZip(data, options);\n\t\n\t    // object containing the files :\n\t    // {\n\t    //   \"folder/\" : {...},\n\t    //   \"folder/data.txt\" : {...}\n\t    // }\n\t    this.files = {};\n\t\n\t    this.comment = null;\n\t\n\t    // Where we are in the hierarchy\n\t    this.root = \"\";\n\t    if (data) {\n\t        this.load(data, options);\n\t    }\n\t    this.clone = function() {\n\t        var newObj = new JSZip();\n\t        for (var i in this) {\n\t            if (typeof this[i] !== \"function\") {\n\t                newObj[i] = this[i];\n\t            }\n\t        }\n\t        return newObj;\n\t    };\n\t}\n\tJSZip.prototype = __webpack_require__(8);\n\tJSZip.prototype.load = __webpack_require__(37);\n\tJSZip.support = __webpack_require__(9);\n\tJSZip.defaults = __webpack_require__(32);\n\t\n\t/**\n\t * @deprecated\n\t * This namespace will be removed in a future version without replacement.\n\t */\n\tJSZip.utils = __webpack_require__(44);\n\t\n\tJSZip.base64 = {\n\t    /**\n\t     * @deprecated\n\t     * This method will be removed in a future version without replacement.\n\t     */\n\t    encode : function(input) {\n\t        return base64.encode(input);\n\t    },\n\t    /**\n\t     * @deprecated\n\t     * This method will be removed in a future version without replacement.\n\t     */\n\t    decode : function(input) {\n\t        return base64.decode(input);\n\t    }\n\t};\n\tJSZip.compressions = __webpack_require__(11);\n\tmodule.exports = JSZip;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t// private property\n\tvar _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t\n\t\n\t// public method for encoding\n\texports.encode = function(input, utf8) {\n\t    var output = \"\";\n\t    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n\t    var i = 0;\n\t\n\t    while (i < input.length) {\n\t\n\t        chr1 = input.charCodeAt(i++);\n\t        chr2 = input.charCodeAt(i++);\n\t        chr3 = input.charCodeAt(i++);\n\t\n\t        enc1 = chr1 >> 2;\n\t        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t        enc4 = chr3 & 63;\n\t\n\t        if (isNaN(chr2)) {\n\t            enc3 = enc4 = 64;\n\t        }\n\t        else if (isNaN(chr3)) {\n\t            enc4 = 64;\n\t        }\n\t\n\t        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n\t\n\t    }\n\t\n\t    return output;\n\t};\n\t\n\t// public method for decoding\n\texports.decode = function(input, utf8) {\n\t    var output = \"\";\n\t    var chr1, chr2, chr3;\n\t    var enc1, enc2, enc3, enc4;\n\t    var i = 0;\n\t\n\t    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\t\n\t    while (i < input.length) {\n\t\n\t        enc1 = _keyStr.indexOf(input.charAt(i++));\n\t        enc2 = _keyStr.indexOf(input.charAt(i++));\n\t        enc3 = _keyStr.indexOf(input.charAt(i++));\n\t        enc4 = _keyStr.indexOf(input.charAt(i++));\n\t\n\t        chr1 = (enc1 << 2) | (enc2 >> 4);\n\t        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n\t        chr3 = ((enc3 & 3) << 6) | enc4;\n\t\n\t        output = output + String.fromCharCode(chr1);\n\t\n\t        if (enc3 != 64) {\n\t            output = output + String.fromCharCode(chr2);\n\t        }\n\t        if (enc4 != 64) {\n\t            output = output + String.fromCharCode(chr3);\n\t        }\n\t\n\t    }\n\t\n\t    return output;\n\t\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar support = __webpack_require__(9);\n\tvar utils = __webpack_require__(10);\n\tvar crc32 = __webpack_require__(30);\n\tvar signature = __webpack_require__(31);\n\tvar defaults = __webpack_require__(32);\n\tvar base64 = __webpack_require__(7);\n\tvar compressions = __webpack_require__(11);\n\tvar CompressedObject = __webpack_require__(33);\n\tvar nodeBuffer = __webpack_require__(29);\n\tvar utf8 = __webpack_require__(34);\n\tvar StringWriter = __webpack_require__(35);\n\tvar Uint8ArrayWriter = __webpack_require__(36);\n\t\n\t/**\n\t * Returns the raw data of a ZipObject, decompress the content if necessary.\n\t * @param {ZipObject} file the file to use.\n\t * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n\t */\n\tvar getRawData = function(file) {\n\t    if (file._data instanceof CompressedObject) {\n\t        file._data = file._data.getContent();\n\t        file.options.binary = true;\n\t        file.options.base64 = false;\n\t\n\t        if (utils.getTypeOf(file._data) === \"uint8array\") {\n\t            var copy = file._data;\n\t            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n\t            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n\t            file._data = new Uint8Array(copy.length);\n\t            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n\t            if (copy.length !== 0) {\n\t                file._data.set(copy, 0);\n\t            }\n\t        }\n\t    }\n\t    return file._data;\n\t};\n\t\n\t/**\n\t * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n\t * @param {ZipObject} file the file to use.\n\t * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n\t */\n\tvar getBinaryData = function(file) {\n\t    var result = getRawData(file),\n\t        type = utils.getTypeOf(result);\n\t    if (type === \"string\") {\n\t        if (!file.options.binary) {\n\t            // unicode text !\n\t            // unicode string => binary string is a painful process, check if we can avoid it.\n\t            if (support.nodebuffer) {\n\t                return nodeBuffer(result, \"utf-8\");\n\t            }\n\t        }\n\t        return file.asBinary();\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Transform this._data into a string.\n\t * @param {function} filter a function String -> String, applied if not null on the result.\n\t * @return {String} the string representing this._data.\n\t */\n\tvar dataToString = function(asUTF8) {\n\t    var result = getRawData(this);\n\t    if (result === null || typeof result === \"undefined\") {\n\t        return \"\";\n\t    }\n\t    // if the data is a base64 string, we decode it before checking the encoding !\n\t    if (this.options.base64) {\n\t        result = base64.decode(result);\n\t    }\n\t    if (asUTF8 && this.options.binary) {\n\t        // JSZip.prototype.utf8decode supports arrays as input\n\t        // skip to array => string step, utf8decode will do it.\n\t        result = out.utf8decode(result);\n\t    }\n\t    else {\n\t        // no utf8 transformation, do the array => string step.\n\t        result = utils.transformTo(\"string\", result);\n\t    }\n\t\n\t    if (!asUTF8 && !this.options.binary) {\n\t        result = utils.transformTo(\"string\", out.utf8encode(result));\n\t    }\n\t    return result;\n\t};\n\t/**\n\t * A simple object representing a file in the zip file.\n\t * @constructor\n\t * @param {string} name the name of the file\n\t * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n\t * @param {Object} options the options of the file\n\t */\n\tvar ZipObject = function(name, data, options) {\n\t    this.name = name;\n\t    this.dir = options.dir;\n\t    this.date = options.date;\n\t    this.comment = options.comment;\n\t    this.unixPermissions = options.unixPermissions;\n\t    this.dosPermissions = options.dosPermissions;\n\t\n\t    this._data = data;\n\t    this.options = options;\n\t\n\t    /*\n\t     * This object contains initial values for dir and date.\n\t     * With them, we can check if the user changed the deprecated metadata in\n\t     * `ZipObject#options` or not.\n\t     */\n\t    this._initialMetadata = {\n\t      dir : options.dir,\n\t      date : options.date\n\t    };\n\t};\n\t\n\tZipObject.prototype = {\n\t    /**\n\t     * Return the content as UTF8 string.\n\t     * @return {string} the UTF8 string.\n\t     */\n\t    asText: function() {\n\t        return dataToString.call(this, true);\n\t    },\n\t    /**\n\t     * Returns the binary content.\n\t     * @return {string} the content as binary.\n\t     */\n\t    asBinary: function() {\n\t        return dataToString.call(this, false);\n\t    },\n\t    /**\n\t     * Returns the content as a nodejs Buffer.\n\t     * @return {Buffer} the content as a Buffer.\n\t     */\n\t    asNodeBuffer: function() {\n\t        var result = getBinaryData(this);\n\t        return utils.transformTo(\"nodebuffer\", result);\n\t    },\n\t    /**\n\t     * Returns the content as an Uint8Array.\n\t     * @return {Uint8Array} the content as an Uint8Array.\n\t     */\n\t    asUint8Array: function() {\n\t        var result = getBinaryData(this);\n\t        return utils.transformTo(\"uint8array\", result);\n\t    },\n\t    /**\n\t     * Returns the content as an ArrayBuffer.\n\t     * @return {ArrayBuffer} the content as an ArrayBufer.\n\t     */\n\t    asArrayBuffer: function() {\n\t        return this.asUint8Array().buffer;\n\t    }\n\t};\n\t\n\t/**\n\t * Transform an integer into a string in hexadecimal.\n\t * @private\n\t * @param {number} dec the number to convert.\n\t * @param {number} bytes the number of bytes to generate.\n\t * @returns {string} the result.\n\t */\n\tvar decToHex = function(dec, bytes) {\n\t    var hex = \"\",\n\t        i;\n\t    for (i = 0; i < bytes; i++) {\n\t        hex += String.fromCharCode(dec & 0xff);\n\t        dec = dec >>> 8;\n\t    }\n\t    return hex;\n\t};\n\t\n\t/**\n\t * Merge the objects passed as parameters into a new one.\n\t * @private\n\t * @param {...Object} var_args All objects to merge.\n\t * @return {Object} a new object with the data of the others.\n\t */\n\tvar extend = function() {\n\t    var result = {}, i, attr;\n\t    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers\n\t        for (attr in arguments[i]) {\n\t            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n\t                result[attr] = arguments[i][attr];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Transforms the (incomplete) options from the user into the complete\n\t * set of options to create a file.\n\t * @private\n\t * @param {Object} o the options from the user.\n\t * @return {Object} the complete set of options.\n\t */\n\tvar prepareFileAttrs = function(o) {\n\t    o = o || {};\n\t    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n\t        o.binary = true;\n\t    }\n\t    o = extend(o, defaults);\n\t    o.date = o.date || new Date();\n\t    if (o.compression !== null) o.compression = o.compression.toUpperCase();\n\t\n\t    return o;\n\t};\n\t\n\t/**\n\t * Add a file in the current folder.\n\t * @private\n\t * @param {string} name the name of the file\n\t * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n\t * @param {Object} o the options of the file\n\t * @return {Object} the new file.\n\t */\n\tvar fileAdd = function(name, data, o) {\n\t    // be sure sub folders exist\n\t    var dataType = utils.getTypeOf(data),\n\t        parent;\n\t\n\t    o = prepareFileAttrs(o);\n\t\n\t    if (typeof o.unixPermissions === \"string\") {\n\t        o.unixPermissions = parseInt(o.unixPermissions, 8);\n\t    }\n\t\n\t    // UNX_IFDIR  0040000 see zipinfo.c\n\t    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {\n\t        o.dir = true;\n\t    }\n\t    // Bit 4    Directory\n\t    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {\n\t        o.dir = true;\n\t    }\n\t\n\t    if (o.dir) {\n\t        name = forceTrailingSlash(name);\n\t    }\n\t\n\t    if (o.createFolders && (parent = parentFolder(name))) {\n\t        folderAdd.call(this, parent, true);\n\t    }\n\t\n\t    if (o.dir || data === null || typeof data === \"undefined\") {\n\t        o.base64 = false;\n\t        o.binary = false;\n\t        data = null;\n\t        dataType = null;\n\t    }\n\t    else if (dataType === \"string\") {\n\t        if (o.binary && !o.base64) {\n\t            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n\t            if (o.optimizedBinaryString !== true) {\n\t                // this is a string, not in a base64 format.\n\t                // Be sure that this is a correct \"binary string\"\n\t                data = utils.string2binary(data);\n\t            }\n\t        }\n\t    }\n\t    else { // arraybuffer, uint8array, ...\n\t        o.base64 = false;\n\t        o.binary = true;\n\t\n\t        if (!dataType && !(data instanceof CompressedObject)) {\n\t            throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n\t        }\n\t\n\t        // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n\t        if (dataType === \"arraybuffer\") {\n\t            data = utils.transformTo(\"uint8array\", data);\n\t        }\n\t    }\n\t\n\t    var object = new ZipObject(name, data, o);\n\t    this.files[name] = object;\n\t    return object;\n\t};\n\t\n\t/**\n\t * Find the parent folder of the path.\n\t * @private\n\t * @param {string} path the path to use\n\t * @return {string} the parent folder, or \"\"\n\t */\n\tvar parentFolder = function (path) {\n\t    if (path.slice(-1) == '/') {\n\t        path = path.substring(0, path.length - 1);\n\t    }\n\t    var lastSlash = path.lastIndexOf('/');\n\t    return (lastSlash > 0) ? path.substring(0, lastSlash) : \"\";\n\t};\n\t\n\t\n\t/**\n\t * Returns the path with a slash at the end.\n\t * @private\n\t * @param {String} path the path to check.\n\t * @return {String} the path with a trailing slash.\n\t */\n\tvar forceTrailingSlash = function(path) {\n\t    // Check the name ends with a /\n\t    if (path.slice(-1) != \"/\") {\n\t        path += \"/\"; // IE doesn't like substr(-1)\n\t    }\n\t    return path;\n\t};\n\t/**\n\t * Add a (sub) folder in the current folder.\n\t * @private\n\t * @param {string} name the folder's name\n\t * @param {boolean=} [createFolders] If true, automatically create sub\n\t *  folders. Defaults to false.\n\t * @return {Object} the new folder.\n\t */\n\tvar folderAdd = function(name, createFolders) {\n\t    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;\n\t\n\t    name = forceTrailingSlash(name);\n\t\n\t    // Does this folder already exist?\n\t    if (!this.files[name]) {\n\t        fileAdd.call(this, name, null, {\n\t            dir: true,\n\t            createFolders: createFolders\n\t        });\n\t    }\n\t    return this.files[name];\n\t};\n\t\n\t/**\n\t * Generate a JSZip.CompressedObject for a given zipOject.\n\t * @param {ZipObject} file the object to read.\n\t * @param {JSZip.compression} compression the compression to use.\n\t * @param {Object} compressionOptions the options to use when compressing.\n\t * @return {JSZip.CompressedObject} the compressed result.\n\t */\n\tvar generateCompressedObjectFrom = function(file, compression, compressionOptions) {\n\t    var result = new CompressedObject(),\n\t        content;\n\t\n\t    // the data has not been decompressed, we might reuse things !\n\t    if (file._data instanceof CompressedObject) {\n\t        result.uncompressedSize = file._data.uncompressedSize;\n\t        result.crc32 = file._data.crc32;\n\t\n\t        if (result.uncompressedSize === 0 || file.dir) {\n\t            compression = compressions['STORE'];\n\t            result.compressedContent = \"\";\n\t            result.crc32 = 0;\n\t        }\n\t        else if (file._data.compressionMethod === compression.magic) {\n\t            result.compressedContent = file._data.getCompressedContent();\n\t        }\n\t        else {\n\t            content = file._data.getContent();\n\t            // need to decompress / recompress\n\t            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n\t        }\n\t    }\n\t    else {\n\t        // have uncompressed data\n\t        content = getBinaryData(file);\n\t        if (!content || content.length === 0 || file.dir) {\n\t            compression = compressions['STORE'];\n\t            content = \"\";\n\t        }\n\t        result.uncompressedSize = content.length;\n\t        result.crc32 = crc32(content);\n\t        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n\t    }\n\t\n\t    result.compressedSize = result.compressedContent.length;\n\t    result.compressionMethod = compression.magic;\n\t\n\t    return result;\n\t};\n\t\n\t\n\t\n\t\n\t/**\n\t * Generate the UNIX part of the external file attributes.\n\t * @param {Object} unixPermissions the unix permissions or null.\n\t * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n\t * @return {Number} a 32 bit integer.\n\t *\n\t * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n\t *\n\t * TTTTsstrwxrwxrwx0000000000ADVSHR\n\t * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n\t *     ^^^_________________________ setuid, setgid, sticky\n\t *        ^^^^^^^^^________________ permissions\n\t *                 ^^^^^^^^^^______ not used ?\n\t *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n\t */\n\tvar generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n\t\n\t    var result = unixPermissions;\n\t    if (!unixPermissions) {\n\t        // I can't use octal values in strict mode, hence the hexa.\n\t        //  040775 => 0x41fd\n\t        // 0100664 => 0x81b4\n\t        result = isDir ? 0x41fd : 0x81b4;\n\t    }\n\t\n\t    return (result & 0xFFFF) << 16;\n\t};\n\t\n\t/**\n\t * Generate the DOS part of the external file attributes.\n\t * @param {Object} dosPermissions the dos permissions or null.\n\t * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n\t * @return {Number} a 32 bit integer.\n\t *\n\t * Bit 0     Read-Only\n\t * Bit 1     Hidden\n\t * Bit 2     System\n\t * Bit 3     Volume Label\n\t * Bit 4     Directory\n\t * Bit 5     Archive\n\t */\n\tvar generateDosExternalFileAttr = function (dosPermissions, isDir) {\n\t\n\t    // the dir flag is already set for compatibility\n\t\n\t    return (dosPermissions || 0)  & 0x3F;\n\t};\n\t\n\t/**\n\t * Generate the various parts used in the construction of the final zip file.\n\t * @param {string} name the file name.\n\t * @param {ZipObject} file the file content.\n\t * @param {JSZip.CompressedObject} compressedObject the compressed object.\n\t * @param {number} offset the current offset from the start of the zip file.\n\t * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n\t * @return {object} the zip parts.\n\t */\n\tvar generateZipParts = function(name, file, compressedObject, offset, platform) {\n\t    var data = compressedObject.compressedContent,\n\t        utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n\t        comment = file.comment || \"\",\n\t        utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n\t        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n\t        useUTF8ForComment = utfEncodedComment.length !== comment.length,\n\t        o = file.options,\n\t        dosTime,\n\t        dosDate,\n\t        extraFields = \"\",\n\t        unicodePathExtraField = \"\",\n\t        unicodeCommentExtraField = \"\",\n\t        dir, date;\n\t\n\t\n\t    // handle the deprecated options.dir\n\t    if (file._initialMetadata.dir !== file.dir) {\n\t        dir = file.dir;\n\t    } else {\n\t        dir = o.dir;\n\t    }\n\t\n\t    // handle the deprecated options.date\n\t    if(file._initialMetadata.date !== file.date) {\n\t        date = file.date;\n\t    } else {\n\t        date = o.date;\n\t    }\n\t\n\t    var extFileAttr = 0;\n\t    var versionMadeBy = 0;\n\t    if (dir) {\n\t        // dos or unix, we set the dos dir flag\n\t        extFileAttr |= 0x00010;\n\t    }\n\t    if(platform === \"UNIX\") {\n\t        versionMadeBy = 0x031E; // UNIX, version 3.0\n\t        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n\t    } else { // DOS or other, fallback to DOS\n\t        versionMadeBy = 0x0014; // DOS, version 2.0\n\t        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n\t    }\n\t\n\t    // date\n\t    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n\t    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n\t    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\t\n\t    dosTime = date.getHours();\n\t    dosTime = dosTime << 6;\n\t    dosTime = dosTime | date.getMinutes();\n\t    dosTime = dosTime << 5;\n\t    dosTime = dosTime | date.getSeconds() / 2;\n\t\n\t    dosDate = date.getFullYear() - 1980;\n\t    dosDate = dosDate << 4;\n\t    dosDate = dosDate | (date.getMonth() + 1);\n\t    dosDate = dosDate << 5;\n\t    dosDate = dosDate | date.getDate();\n\t\n\t    if (useUTF8ForFileName) {\n\t        // set the unicode path extra field. unzip needs at least one extra\n\t        // field to correctly handle unicode path, so using the path is as good\n\t        // as any other information. This could improve the situation with\n\t        // other archive managers too.\n\t        // This field is usually used without the utf8 flag, with a non\n\t        // unicode path in the header (winrar, winzip). This helps (a bit)\n\t        // with the messy Windows' default compressed folders feature but\n\t        // breaks on p7zip which doesn't seek the unicode path extra field.\n\t        // So for now, UTF-8 everywhere !\n\t        unicodePathExtraField =\n\t            // Version\n\t            decToHex(1, 1) +\n\t            // NameCRC32\n\t            decToHex(crc32(utfEncodedFileName), 4) +\n\t            // UnicodeName\n\t            utfEncodedFileName;\n\t\n\t        extraFields +=\n\t            // Info-ZIP Unicode Path Extra Field\n\t            \"\\x75\\x70\" +\n\t            // size\n\t            decToHex(unicodePathExtraField.length, 2) +\n\t            // content\n\t            unicodePathExtraField;\n\t    }\n\t\n\t    if(useUTF8ForComment) {\n\t\n\t        unicodeCommentExtraField =\n\t            // Version\n\t            decToHex(1, 1) +\n\t            // CommentCRC32\n\t            decToHex(this.crc32(utfEncodedComment), 4) +\n\t            // UnicodeName\n\t            utfEncodedComment;\n\t\n\t        extraFields +=\n\t            // Info-ZIP Unicode Path Extra Field\n\t            \"\\x75\\x63\" +\n\t            // size\n\t            decToHex(unicodeCommentExtraField.length, 2) +\n\t            // content\n\t            unicodeCommentExtraField;\n\t    }\n\t\n\t    var header = \"\";\n\t\n\t    // version needed to extract\n\t    header += \"\\x0A\\x00\";\n\t    // general purpose bit flag\n\t    // set bit 11 if utf8\n\t    header += (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n\t    // compression method\n\t    header += compressedObject.compressionMethod;\n\t    // last mod file time\n\t    header += decToHex(dosTime, 2);\n\t    // last mod file date\n\t    header += decToHex(dosDate, 2);\n\t    // crc-32\n\t    header += decToHex(compressedObject.crc32, 4);\n\t    // compressed size\n\t    header += decToHex(compressedObject.compressedSize, 4);\n\t    // uncompressed size\n\t    header += decToHex(compressedObject.uncompressedSize, 4);\n\t    // file name length\n\t    header += decToHex(utfEncodedFileName.length, 2);\n\t    // extra field length\n\t    header += decToHex(extraFields.length, 2);\n\t\n\t\n\t    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;\n\t\n\t    var dirRecord = signature.CENTRAL_FILE_HEADER +\n\t    // version made by (00: DOS)\n\t    decToHex(versionMadeBy, 2) +\n\t    // file header (common to file and central directory)\n\t    header +\n\t    // file comment length\n\t    decToHex(utfEncodedComment.length, 2) +\n\t    // disk number start\n\t    \"\\x00\\x00\" +\n\t    // internal file attributes TODO\n\t    \"\\x00\\x00\" +\n\t    // external file attributes\n\t    decToHex(extFileAttr, 4) +\n\t    // relative offset of local header\n\t    decToHex(offset, 4) +\n\t    // file name\n\t    utfEncodedFileName +\n\t    // extra field\n\t    extraFields +\n\t    // file comment\n\t    utfEncodedComment;\n\t\n\t    return {\n\t        fileRecord: fileRecord,\n\t        dirRecord: dirRecord,\n\t        compressedObject: compressedObject\n\t    };\n\t};\n\t\n\t\n\t// return the actual prototype of JSZip\n\tvar out = {\n\t    /**\n\t     * Read an existing zip and merge the data in the current JSZip object.\n\t     * The implementation is in jszip-load.js, don't forget to include it.\n\t     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n\t     * @param {Object} options Options for loading the stream.\n\t     *  options.base64 : is the stream in base64 ? default : false\n\t     * @return {JSZip} the current JSZip object\n\t     */\n\t    load: function(stream, options) {\n\t        throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n\t    },\n\t\n\t    /**\n\t     * Filter nested files/folders with the specified function.\n\t     * @param {Function} search the predicate to use :\n\t     * function (relativePath, file) {...}\n\t     * It takes 2 arguments : the relative path and the file.\n\t     * @return {Array} An array of matching elements.\n\t     */\n\t    filter: function(search) {\n\t        var result = [],\n\t            filename, relativePath, file, fileClone;\n\t        for (filename in this.files) {\n\t            if (!this.files.hasOwnProperty(filename)) {\n\t                continue;\n\t            }\n\t            file = this.files[filename];\n\t            // return a new object, don't let the user mess with our internal objects :)\n\t            fileClone = new ZipObject(file.name, file._data, extend(file.options));\n\t            relativePath = filename.slice(this.root.length, filename.length);\n\t            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root\n\t            search(relativePath, fileClone)) { // and the file matches the function\n\t                result.push(fileClone);\n\t            }\n\t        }\n\t        return result;\n\t    },\n\t\n\t    /**\n\t     * Add a file to the zip file, or search a file.\n\t     * @param   {string|RegExp} name The name of the file to add (if data is defined),\n\t     * the name of the file to find (if no data) or a regex to match files.\n\t     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n\t     * @param   {Object} o     File options\n\t     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n\t     * a file (when searching by string) or an array of files (when searching by regex).\n\t     */\n\t    file: function(name, data, o) {\n\t        if (arguments.length === 1) {\n\t            if (utils.isRegExp(name)) {\n\t                var regexp = name;\n\t                return this.filter(function(relativePath, file) {\n\t                    return !file.dir && regexp.test(relativePath);\n\t                });\n\t            }\n\t            else { // text\n\t                return this.filter(function(relativePath, file) {\n\t                    return !file.dir && relativePath === name;\n\t                })[0] || null;\n\t            }\n\t        }\n\t        else { // more than one argument : we have data !\n\t            name = this.root + name;\n\t            fileAdd.call(this, name, data, o);\n\t        }\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Add a directory to the zip file, or search.\n\t     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n\t     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n\t     */\n\t    folder: function(arg) {\n\t        if (!arg) {\n\t            return this;\n\t        }\n\t\n\t        if (utils.isRegExp(arg)) {\n\t            return this.filter(function(relativePath, file) {\n\t                return file.dir && arg.test(relativePath);\n\t            });\n\t        }\n\t\n\t        // else, name is a new folder\n\t        var name = this.root + arg;\n\t        var newFolder = folderAdd.call(this, name);\n\t\n\t        // Allow chaining by returning a new object with this folder as the root\n\t        var ret = this.clone();\n\t        ret.root = newFolder.name;\n\t        return ret;\n\t    },\n\t\n\t    /**\n\t     * Delete a file, or a directory and all sub-files, from the zip\n\t     * @param {string} name the name of the file to delete\n\t     * @return {JSZip} this JSZip object\n\t     */\n\t    remove: function(name) {\n\t        name = this.root + name;\n\t        var file = this.files[name];\n\t        if (!file) {\n\t            // Look for any folders\n\t            if (name.slice(-1) != \"/\") {\n\t                name += \"/\";\n\t            }\n\t            file = this.files[name];\n\t        }\n\t\n\t        if (file && !file.dir) {\n\t            // file\n\t            delete this.files[name];\n\t        } else {\n\t            // maybe a folder, delete recursively\n\t            var kids = this.filter(function(relativePath, file) {\n\t                return file.name.slice(0, name.length) === name;\n\t            });\n\t            for (var i = 0; i < kids.length; i++) {\n\t                delete this.files[kids[i].name];\n\t            }\n\t        }\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Generate the complete zip file\n\t     * @param {Object} options the options to generate the zip file :\n\t     * - base64, (deprecated, use type instead) true to generate base64.\n\t     * - compression, \"STORE\" by default.\n\t     * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n\t     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n\t     */\n\t    generate: function(options) {\n\t        options = extend(options || {}, {\n\t            base64: true,\n\t            compression: \"STORE\",\n\t            compressionOptions : null,\n\t            type: \"base64\",\n\t            platform: \"DOS\",\n\t            comment: null,\n\t            mimeType: 'application/zip'\n\t        });\n\t\n\t        utils.checkSupport(options.type);\n\t\n\t        // accept nodejs `process.platform`\n\t        if(\n\t          options.platform === 'darwin' ||\n\t          options.platform === 'freebsd' ||\n\t          options.platform === 'linux' ||\n\t          options.platform === 'sunos'\n\t        ) {\n\t          options.platform = \"UNIX\";\n\t        }\n\t        if (options.platform === 'win32') {\n\t          options.platform = \"DOS\";\n\t        }\n\t\n\t        var zipData = [],\n\t            localDirLength = 0,\n\t            centralDirLength = 0,\n\t            writer, i,\n\t            utfEncodedComment = utils.transformTo(\"string\", this.utf8encode(options.comment || this.comment || \"\"));\n\t\n\t        // first, generate all the zip parts.\n\t        for (var name in this.files) {\n\t            if (!this.files.hasOwnProperty(name)) {\n\t                continue;\n\t            }\n\t            var file = this.files[name];\n\t\n\t            var compressionName = file.options.compression || options.compression.toUpperCase();\n\t            var compression = compressions[compressionName];\n\t            if (!compression) {\n\t                throw new Error(compressionName + \" is not a valid compression method !\");\n\t            }\n\t            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n\t\n\t            var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);\n\t\n\t            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);\n\t            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n\t            centralDirLength += zipPart.dirRecord.length;\n\t            zipData.push(zipPart);\n\t        }\n\t\n\t        var dirEnd = \"\";\n\t\n\t        // end of central dir signature\n\t        dirEnd = signature.CENTRAL_DIRECTORY_END +\n\t        // number of this disk\n\t        \"\\x00\\x00\" +\n\t        // number of the disk with the start of the central directory\n\t        \"\\x00\\x00\" +\n\t        // total number of entries in the central directory on this disk\n\t        decToHex(zipData.length, 2) +\n\t        // total number of entries in the central directory\n\t        decToHex(zipData.length, 2) +\n\t        // size of the central directory   4 bytes\n\t        decToHex(centralDirLength, 4) +\n\t        // offset of start of central directory with respect to the starting disk number\n\t        decToHex(localDirLength, 4) +\n\t        // .ZIP file comment length\n\t        decToHex(utfEncodedComment.length, 2) +\n\t        // .ZIP file comment\n\t        utfEncodedComment;\n\t\n\t\n\t        // we have all the parts (and the total length)\n\t        // time to create a writer !\n\t        var typeName = options.type.toLowerCase();\n\t        if(typeName===\"uint8array\"||typeName===\"arraybuffer\"||typeName===\"blob\"||typeName===\"nodebuffer\") {\n\t            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n\t        }else{\n\t            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n\t        }\n\t\n\t        for (i = 0; i < zipData.length; i++) {\n\t            writer.append(zipData[i].fileRecord);\n\t            writer.append(zipData[i].compressedObject.compressedContent);\n\t        }\n\t        for (i = 0; i < zipData.length; i++) {\n\t            writer.append(zipData[i].dirRecord);\n\t        }\n\t\n\t        writer.append(dirEnd);\n\t\n\t        var zip = writer.finalize();\n\t\n\t\n\t\n\t        switch(options.type.toLowerCase()) {\n\t            // case \"zip is an Uint8Array\"\n\t            case \"uint8array\" :\n\t            case \"arraybuffer\" :\n\t            case \"nodebuffer\" :\n\t               return utils.transformTo(options.type.toLowerCase(), zip);\n\t            case \"blob\" :\n\t               return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip), options.mimeType);\n\t            // case \"zip is a string\"\n\t            case \"base64\" :\n\t               return (options.base64) ? base64.encode(zip) : zip;\n\t            default : // case \"string\" :\n\t               return zip;\n\t         }\n\t\n\t    },\n\t\n\t    /**\n\t     * @deprecated\n\t     * This method will be removed in a future version without replacement.\n\t     */\n\t    crc32: function (input, crc) {\n\t        return crc32(input, crc);\n\t    },\n\t\n\t    /**\n\t     * @deprecated\n\t     * This method will be removed in a future version without replacement.\n\t     */\n\t    utf8encode: function (string) {\n\t        return utils.transformTo(\"string\", utf8.utf8encode(string));\n\t    },\n\t\n\t    /**\n\t     * @deprecated\n\t     * This method will be removed in a future version without replacement.\n\t     */\n\t    utf8decode: function (input) {\n\t        return utf8.utf8decode(input);\n\t    }\n\t};\n\tmodule.exports = out;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';\n\texports.base64 = true;\n\texports.array = true;\n\texports.string = true;\n\texports.arraybuffer = typeof ArrayBuffer !== \"undefined\" && typeof Uint8Array !== \"undefined\";\n\t// contains true if JSZip can read/generate nodejs Buffer, false otherwise.\n\t// Browserify will provide a Buffer implementation for browsers, which is\n\t// an augmented Uint8Array (i.e., can be used as either Buffer or U8).\n\texports.nodebuffer = typeof Buffer !== \"undefined\";\n\t// contains true if JSZip can read/generate Uint8Array, false otherwise.\n\texports.uint8array = typeof Uint8Array !== \"undefined\";\n\t\n\tif (typeof ArrayBuffer === \"undefined\") {\n\t    exports.blob = false;\n\t}\n\telse {\n\t    var buffer = new ArrayBuffer(0);\n\t    try {\n\t        exports.blob = new Blob([buffer], {\n\t            type: \"application/zip\"\n\t        }).size === 0;\n\t    }\n\t    catch (e) {\n\t        try {\n\t            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\t            var builder = new Builder();\n\t            builder.append(buffer);\n\t            exports.blob = builder.getBlob('application/zip').size === 0;\n\t        }\n\t        catch (e) {\n\t            exports.blob = false;\n\t        }\n\t    }\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar support = __webpack_require__(9);\n\tvar compressions = __webpack_require__(11);\n\tvar nodeBuffer = __webpack_require__(29);\n\t/**\n\t * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.\n\t * @param {string} str the string to transform.\n\t * @return {String} the binary string.\n\t */\n\texports.string2binary = function(str) {\n\t    var result = \"\";\n\t    for (var i = 0; i < str.length; i++) {\n\t        result += String.fromCharCode(str.charCodeAt(i) & 0xff);\n\t    }\n\t    return result;\n\t};\n\texports.arrayBuffer2Blob = function(buffer, mimeType) {\n\t    exports.checkSupport(\"blob\");\n\t\tmimeType = mimeType || 'application/zip';\n\t\n\t    try {\n\t        // Blob constructor\n\t        return new Blob([buffer], {\n\t            type: mimeType\n\t        });\n\t    }\n\t    catch (e) {\n\t\n\t        try {\n\t            // deprecated, browser only, old way\n\t            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\t            var builder = new Builder();\n\t            builder.append(buffer);\n\t            return builder.getBlob(mimeType);\n\t        }\n\t        catch (e) {\n\t\n\t            // well, fuck ?!\n\t            throw new Error(\"Bug : can't construct the Blob.\");\n\t        }\n\t    }\n\t\n\t\n\t};\n\t/**\n\t * The identity function.\n\t * @param {Object} input the input.\n\t * @return {Object} the same input.\n\t */\n\tfunction identity(input) {\n\t    return input;\n\t}\n\t\n\t/**\n\t * Fill in an array with a string.\n\t * @param {String} str the string to use.\n\t * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n\t * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n\t */\n\tfunction stringToArrayLike(str, array) {\n\t    for (var i = 0; i < str.length; ++i) {\n\t        array[i] = str.charCodeAt(i) & 0xFF;\n\t    }\n\t    return array;\n\t}\n\t\n\t/**\n\t * Transform an array-like object to a string.\n\t * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n\t * @return {String} the result.\n\t */\n\tfunction arrayLikeToString(array) {\n\t    // Performances notes :\n\t    // --------------------\n\t    // String.fromCharCode.apply(null, array) is the fastest, see\n\t    // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n\t    // but the stack is limited (and we can get huge arrays !).\n\t    //\n\t    // result += String.fromCharCode(array[i]); generate too many strings !\n\t    //\n\t    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n\t    var chunk = 65536;\n\t    var result = [],\n\t        len = array.length,\n\t        type = exports.getTypeOf(array),\n\t        k = 0,\n\t        canUseApply = true;\n\t      try {\n\t         switch(type) {\n\t            case \"uint8array\":\n\t               String.fromCharCode.apply(null, new Uint8Array(0));\n\t               break;\n\t            case \"nodebuffer\":\n\t               String.fromCharCode.apply(null, nodeBuffer(0));\n\t               break;\n\t         }\n\t      } catch(e) {\n\t         canUseApply = false;\n\t      }\n\t\n\t      // no apply : slow and painful algorithm\n\t      // default browser on android 4.*\n\t      if (!canUseApply) {\n\t         var resultStr = \"\";\n\t         for(var i = 0; i < array.length;i++) {\n\t            resultStr += String.fromCharCode(array[i]);\n\t         }\n\t    return resultStr;\n\t    }\n\t    while (k < len && chunk > 1) {\n\t        try {\n\t            if (type === \"array\" || type === \"nodebuffer\") {\n\t                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n\t            }\n\t            else {\n\t                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n\t            }\n\t            k += chunk;\n\t        }\n\t        catch (e) {\n\t            chunk = Math.floor(chunk / 2);\n\t        }\n\t    }\n\t    return result.join(\"\");\n\t}\n\t\n\texports.applyFromCharCode = arrayLikeToString;\n\t\n\t\n\t/**\n\t * Copy the data from an array-like to an other array-like.\n\t * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n\t * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n\t * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n\t */\n\tfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n\t    for (var i = 0; i < arrayFrom.length; i++) {\n\t        arrayTo[i] = arrayFrom[i];\n\t    }\n\t    return arrayTo;\n\t}\n\t\n\t// a matrix containing functions to transform everything into everything.\n\tvar transform = {};\n\t\n\t// string to ?\n\ttransform[\"string\"] = {\n\t    \"string\": identity,\n\t    \"array\": function(input) {\n\t        return stringToArrayLike(input, new Array(input.length));\n\t    },\n\t    \"arraybuffer\": function(input) {\n\t        return transform[\"string\"][\"uint8array\"](input).buffer;\n\t    },\n\t    \"uint8array\": function(input) {\n\t        return stringToArrayLike(input, new Uint8Array(input.length));\n\t    },\n\t    \"nodebuffer\": function(input) {\n\t        return stringToArrayLike(input, nodeBuffer(input.length));\n\t    }\n\t};\n\t\n\t// array to ?\n\ttransform[\"array\"] = {\n\t    \"string\": arrayLikeToString,\n\t    \"array\": identity,\n\t    \"arraybuffer\": function(input) {\n\t        return (new Uint8Array(input)).buffer;\n\t    },\n\t    \"uint8array\": function(input) {\n\t        return new Uint8Array(input);\n\t    },\n\t    \"nodebuffer\": function(input) {\n\t        return nodeBuffer(input);\n\t    }\n\t};\n\t\n\t// arraybuffer to ?\n\ttransform[\"arraybuffer\"] = {\n\t    \"string\": function(input) {\n\t        return arrayLikeToString(new Uint8Array(input));\n\t    },\n\t    \"array\": function(input) {\n\t        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n\t    },\n\t    \"arraybuffer\": identity,\n\t    \"uint8array\": function(input) {\n\t        return new Uint8Array(input);\n\t    },\n\t    \"nodebuffer\": function(input) {\n\t        return nodeBuffer(new Uint8Array(input));\n\t    }\n\t};\n\t\n\t// uint8array to ?\n\ttransform[\"uint8array\"] = {\n\t    \"string\": arrayLikeToString,\n\t    \"array\": function(input) {\n\t        return arrayLikeToArrayLike(input, new Array(input.length));\n\t    },\n\t    \"arraybuffer\": function(input) {\n\t        return input.buffer;\n\t    },\n\t    \"uint8array\": identity,\n\t    \"nodebuffer\": function(input) {\n\t        return nodeBuffer(input);\n\t    }\n\t};\n\t\n\t// nodebuffer to ?\n\ttransform[\"nodebuffer\"] = {\n\t    \"string\": arrayLikeToString,\n\t    \"array\": function(input) {\n\t        return arrayLikeToArrayLike(input, new Array(input.length));\n\t    },\n\t    \"arraybuffer\": function(input) {\n\t        return transform[\"nodebuffer\"][\"uint8array\"](input).buffer;\n\t    },\n\t    \"uint8array\": function(input) {\n\t        return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n\t    },\n\t    \"nodebuffer\": identity\n\t};\n\t\n\t/**\n\t * Transform an input into any type.\n\t * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n\t * If no output type is specified, the unmodified input will be returned.\n\t * @param {String} outputType the output type.\n\t * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n\t * @throws {Error} an Error if the browser doesn't support the requested output type.\n\t */\n\texports.transformTo = function(outputType, input) {\n\t    if (!input) {\n\t        // undefined, null, etc\n\t        // an empty string won't harm.\n\t        input = \"\";\n\t    }\n\t    if (!outputType) {\n\t        return input;\n\t    }\n\t    exports.checkSupport(outputType);\n\t    var inputType = exports.getTypeOf(input);\n\t    var result = transform[inputType][outputType](input);\n\t    return result;\n\t};\n\t\n\t/**\n\t * Return the type of the input.\n\t * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n\t * @param {Object} input the input to identify.\n\t * @return {String} the (lowercase) type of the input.\n\t */\n\texports.getTypeOf = function(input) {\n\t    if (typeof input === \"string\") {\n\t        return \"string\";\n\t    }\n\t    if (Object.prototype.toString.call(input) === \"[object Array]\") {\n\t        return \"array\";\n\t    }\n\t    if (support.nodebuffer && nodeBuffer.test(input)) {\n\t        return \"nodebuffer\";\n\t    }\n\t    if (support.uint8array && input instanceof Uint8Array) {\n\t        return \"uint8array\";\n\t    }\n\t    if (support.arraybuffer && input instanceof ArrayBuffer) {\n\t        return \"arraybuffer\";\n\t    }\n\t};\n\t\n\t/**\n\t * Throw an exception if the type is not supported.\n\t * @param {String} type the type to check.\n\t * @throws {Error} an Error if the browser doesn't support the requested type.\n\t */\n\texports.checkSupport = function(type) {\n\t    var supported = support[type.toLowerCase()];\n\t    if (!supported) {\n\t        throw new Error(type + \" is not supported by this browser\");\n\t    }\n\t};\n\texports.MAX_VALUE_16BITS = 65535;\n\texports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\t\n\t/**\n\t * Prettify a string read as binary.\n\t * @param {string} str the string to prettify.\n\t * @return {string} a pretty string.\n\t */\n\texports.pretty = function(str) {\n\t    var res = '',\n\t        code, i;\n\t    for (i = 0; i < (str || \"\").length; i++) {\n\t        code = str.charCodeAt(i);\n\t        res += '\\\\x' + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n\t    }\n\t    return res;\n\t};\n\t\n\t/**\n\t * Find a compression registered in JSZip.\n\t * @param {string} compressionMethod the method magic to find.\n\t * @return {Object|null} the JSZip compression object, null if none found.\n\t */\n\texports.findCompression = function(compressionMethod) {\n\t    for (var method in compressions) {\n\t        if (!compressions.hasOwnProperty(method)) {\n\t            continue;\n\t        }\n\t        if (compressions[method].magic === compressionMethod) {\n\t            return compressions[method];\n\t        }\n\t    }\n\t    return null;\n\t};\n\t/**\n\t* Cross-window, cross-Node-context regular expression detection\n\t* @param  {Object}  object Anything\n\t* @return {Boolean}        true if the object is a regular expression,\n\t* false otherwise\n\t*/\n\texports.isRegExp = function (object) {\n\t    return Object.prototype.toString.call(object) === \"[object RegExp]\";\n\t};\n\t\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\texports.STORE = {\n\t    magic: \"\\x00\\x00\",\n\t    compress: function(content, compressionOptions) {\n\t        return content; // no compression\n\t    },\n\t    uncompress: function(content) {\n\t        return content; // no compression\n\t    },\n\t    compressInputType: null,\n\t    uncompressInputType: null\n\t};\n\texports.DEFLATE = __webpack_require__(12);\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\t\n\tvar pako = __webpack_require__(13);\n\texports.uncompressInputType = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\texports.compressInputType = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\t\n\texports.magic = \"\\x08\\x00\";\n\texports.compress = function(input, compressionOptions) {\n\t    return pako.deflateRaw(input, {\n\t        level : compressionOptions.level || -1 // default compression\n\t    });\n\t};\n\texports.uncompress =  function(input) {\n\t    return pako.inflateRaw(input);\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Top level file is just a mixin of submodules & constants\n\t'use strict';\n\t\n\tvar assign    = __webpack_require__(14).assign;\n\t\n\tvar deflate   = __webpack_require__(15);\n\tvar inflate   = __webpack_require__(23);\n\tvar constants = __webpack_require__(27);\n\t\n\tvar pako = {};\n\t\n\tassign(pako, deflate, inflate, constants);\n\t\n\tmodule.exports = pako;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\tvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n\t                (typeof Uint16Array !== 'undefined') &&\n\t                (typeof Int32Array !== 'undefined');\n\t\n\t\n\texports.assign = function (obj /*from1, from2, from3, ...*/) {\n\t  var sources = Array.prototype.slice.call(arguments, 1);\n\t  while (sources.length) {\n\t    var source = sources.shift();\n\t    if (!source) { continue; }\n\t\n\t    if (typeof source !== 'object') {\n\t      throw new TypeError(source + 'must be non-object');\n\t    }\n\t\n\t    for (var p in source) {\n\t      if (source.hasOwnProperty(p)) {\n\t        obj[p] = source[p];\n\t      }\n\t    }\n\t  }\n\t\n\t  return obj;\n\t};\n\t\n\t\n\t// reduce buffer size, avoiding mem copy\n\texports.shrinkBuf = function (buf, size) {\n\t  if (buf.length === size) { return buf; }\n\t  if (buf.subarray) { return buf.subarray(0, size); }\n\t  buf.length = size;\n\t  return buf;\n\t};\n\t\n\t\n\tvar fnTyped = {\n\t  arraySet: function (dest, src, src_offs, len, dest_offs) {\n\t    if (src.subarray && dest.subarray) {\n\t      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);\n\t      return;\n\t    }\n\t    // Fallback to ordinary array\n\t    for (var i=0; i<len; i++) {\n\t      dest[dest_offs + i] = src[src_offs + i];\n\t    }\n\t  },\n\t  // Join array of chunks to single array.\n\t  flattenChunks: function(chunks) {\n\t    var i, l, len, pos, chunk, result;\n\t\n\t    // calculate data length\n\t    len = 0;\n\t    for (i=0, l=chunks.length; i<l; i++) {\n\t      len += chunks[i].length;\n\t    }\n\t\n\t    // join chunks\n\t    result = new Uint8Array(len);\n\t    pos = 0;\n\t    for (i=0, l=chunks.length; i<l; i++) {\n\t      chunk = chunks[i];\n\t      result.set(chunk, pos);\n\t      pos += chunk.length;\n\t    }\n\t\n\t    return result;\n\t  }\n\t};\n\t\n\tvar fnUntyped = {\n\t  arraySet: function (dest, src, src_offs, len, dest_offs) {\n\t    for (var i=0; i<len; i++) {\n\t      dest[dest_offs + i] = src[src_offs + i];\n\t    }\n\t  },\n\t  // Join array of chunks to single array.\n\t  flattenChunks: function(chunks) {\n\t    return [].concat.apply([], chunks);\n\t  }\n\t};\n\t\n\t\n\t// Enable/Disable typed arrays use, for testing\n\t//\n\texports.setTyped = function (on) {\n\t  if (on) {\n\t    exports.Buf8  = Uint8Array;\n\t    exports.Buf16 = Uint16Array;\n\t    exports.Buf32 = Int32Array;\n\t    exports.assign(exports, fnTyped);\n\t  } else {\n\t    exports.Buf8  = Array;\n\t    exports.Buf16 = Array;\n\t    exports.Buf32 = Array;\n\t    exports.assign(exports, fnUntyped);\n\t  }\n\t};\n\t\n\texports.setTyped(TYPED_OK);\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar zlib_deflate = __webpack_require__(16);\n\tvar utils = __webpack_require__(14);\n\tvar strings = __webpack_require__(21);\n\tvar msg = __webpack_require__(20);\n\tvar zstream = __webpack_require__(22);\n\t\n\tvar toString = Object.prototype.toString;\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\tvar Z_NO_FLUSH      = 0;\n\tvar Z_FINISH        = 4;\n\t\n\tvar Z_OK            = 0;\n\tvar Z_STREAM_END    = 1;\n\tvar Z_SYNC_FLUSH    = 2;\n\t\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\t\n\tvar Z_DEFAULT_STRATEGY    = 0;\n\t\n\tvar Z_DEFLATED  = 8;\n\t\n\t/* ===========================================================================*/\n\t\n\t\n\t/**\n\t * class Deflate\n\t *\n\t * Generic JS-style wrapper for zlib calls. If you don't need\n\t * streaming behaviour - use more simple functions: [[deflate]],\n\t * [[deflateRaw]] and [[gzip]].\n\t **/\n\t\n\t/* internal\n\t * Deflate.chunks -> Array\n\t *\n\t * Chunks of output data, if [[Deflate#onData]] not overriden.\n\t **/\n\t\n\t/**\n\t * Deflate.result -> Uint8Array|Array\n\t *\n\t * Compressed result, generated by default [[Deflate#onData]]\n\t * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n\t * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n\t * push a chunk with explicit flush (call [[Deflate#push]] with\n\t * `Z_SYNC_FLUSH` param).\n\t **/\n\t\n\t/**\n\t * Deflate.err -> Number\n\t *\n\t * Error code after deflate finished. 0 (Z_OK) on success.\n\t * You will not need it in real life, because deflate errors\n\t * are possible only on wrong options or bad `onData` / `onEnd`\n\t * custom handlers.\n\t **/\n\t\n\t/**\n\t * Deflate.msg -> String\n\t *\n\t * Error message, if [[Deflate.err]] != 0\n\t **/\n\t\n\t\n\t/**\n\t * new Deflate(options)\n\t * - options (Object): zlib deflate options.\n\t *\n\t * Creates new deflator instance with specified params. Throws exception\n\t * on bad params. Supported options:\n\t *\n\t * - `level`\n\t * - `windowBits`\n\t * - `memLevel`\n\t * - `strategy`\n\t *\n\t * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n\t * for more information on these.\n\t *\n\t * Additional options, for internal needs:\n\t *\n\t * - `chunkSize` - size of generated data chunks (16K by default)\n\t * - `raw` (Boolean) - do raw deflate\n\t * - `gzip` (Boolean) - create gzip wrapper\n\t * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n\t *    (each char code [0..255])\n\t * - `header` (Object) - custom header for gzip\n\t *   - `text` (Boolean) - true if compressed data believed to be text\n\t *   - `time` (Number) - modification time, unix timestamp\n\t *   - `os` (Number) - operation system code\n\t *   - `extra` (Array) - array of bytes with extra data (max 65536)\n\t *   - `name` (String) - file name (binary string)\n\t *   - `comment` (String) - comment (binary string)\n\t *   - `hcrc` (Boolean) - true if header crc should be added\n\t *\n\t * ##### Example:\n\t *\n\t * ```javascript\n\t * var pako = require('pako')\n\t *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n\t *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n\t *\n\t * var deflate = new pako.Deflate({ level: 3});\n\t *\n\t * deflate.push(chunk1, false);\n\t * deflate.push(chunk2, true);  // true -> last chunk\n\t *\n\t * if (deflate.err) { throw new Error(deflate.err); }\n\t *\n\t * console.log(deflate.result);\n\t * ```\n\t **/\n\tvar Deflate = function(options) {\n\t\n\t  this.options = utils.assign({\n\t    level: Z_DEFAULT_COMPRESSION,\n\t    method: Z_DEFLATED,\n\t    chunkSize: 16384,\n\t    windowBits: 15,\n\t    memLevel: 8,\n\t    strategy: Z_DEFAULT_STRATEGY,\n\t    to: ''\n\t  }, options || {});\n\t\n\t  var opt = this.options;\n\t\n\t  if (opt.raw && (opt.windowBits > 0)) {\n\t    opt.windowBits = -opt.windowBits;\n\t  }\n\t\n\t  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n\t    opt.windowBits += 16;\n\t  }\n\t\n\t  this.err    = 0;      // error code, if happens (0 = Z_OK)\n\t  this.msg    = '';     // error message\n\t  this.ended  = false;  // used to avoid multiple onEnd() calls\n\t  this.chunks = [];     // chunks of compressed data\n\t\n\t  this.strm = new zstream();\n\t  this.strm.avail_out = 0;\n\t\n\t  var status = zlib_deflate.deflateInit2(\n\t    this.strm,\n\t    opt.level,\n\t    opt.method,\n\t    opt.windowBits,\n\t    opt.memLevel,\n\t    opt.strategy\n\t  );\n\t\n\t  if (status !== Z_OK) {\n\t    throw new Error(msg[status]);\n\t  }\n\t\n\t  if (opt.header) {\n\t    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n\t  }\n\t};\n\t\n\t/**\n\t * Deflate#push(data[, mode]) -> Boolean\n\t * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n\t *   converted to utf8 byte sequence.\n\t * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n\t *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n\t *\n\t * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n\t * new compressed chunks. Returns `true` on success. The last data block must have\n\t * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n\t * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n\t * can use mode Z_SYNC_FLUSH, keeping the compression context.\n\t *\n\t * On fail call [[Deflate#onEnd]] with error code and return false.\n\t *\n\t * We strongly recommend to use `Uint8Array` on input for best speed (output\n\t * array format is detected automatically). Also, don't skip last param and always\n\t * use the same type in your code (boolean or number). That will improve JS speed.\n\t *\n\t * For regular `Array`-s make sure all elements are [0..255].\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * push(chunk, false); // push one of data chunks\n\t * ...\n\t * push(chunk, true);  // push last chunk\n\t * ```\n\t **/\n\tDeflate.prototype.push = function(data, mode) {\n\t  var strm = this.strm;\n\t  var chunkSize = this.options.chunkSize;\n\t  var status, _mode;\n\t\n\t  if (this.ended) { return false; }\n\t\n\t  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\t\n\t  // Convert data if needed\n\t  if (typeof data === 'string') {\n\t    // If we need to compress text, change encoding to utf8.\n\t    strm.input = strings.string2buf(data);\n\t  } else if (toString.call(data) === '[object ArrayBuffer]') {\n\t    strm.input = new Uint8Array(data);\n\t  } else {\n\t    strm.input = data;\n\t  }\n\t\n\t  strm.next_in = 0;\n\t  strm.avail_in = strm.input.length;\n\t\n\t  do {\n\t    if (strm.avail_out === 0) {\n\t      strm.output = new utils.Buf8(chunkSize);\n\t      strm.next_out = 0;\n\t      strm.avail_out = chunkSize;\n\t    }\n\t    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\t\n\t    if (status !== Z_STREAM_END && status !== Z_OK) {\n\t      this.onEnd(status);\n\t      this.ended = true;\n\t      return false;\n\t    }\n\t    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n\t      if (this.options.to === 'string') {\n\t        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n\t      } else {\n\t        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n\t      }\n\t    }\n\t  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\t\n\t  // Finalize on the last chunk.\n\t  if (_mode === Z_FINISH) {\n\t    status = zlib_deflate.deflateEnd(this.strm);\n\t    this.onEnd(status);\n\t    this.ended = true;\n\t    return status === Z_OK;\n\t  }\n\t\n\t  // callback interim results if Z_SYNC_FLUSH.\n\t  if (_mode === Z_SYNC_FLUSH) {\n\t    this.onEnd(Z_OK);\n\t    strm.avail_out = 0;\n\t    return true;\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\t\n\t/**\n\t * Deflate#onData(chunk) -> Void\n\t * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n\t *   on js engine support. When string output requested, each chunk\n\t *   will be string.\n\t *\n\t * By default, stores data blocks in `chunks[]` property and glue\n\t * those in `onEnd`. Override this handler, if you need another behaviour.\n\t **/\n\tDeflate.prototype.onData = function(chunk) {\n\t  this.chunks.push(chunk);\n\t};\n\t\n\t\n\t/**\n\t * Deflate#onEnd(status) -> Void\n\t * - status (Number): deflate status. 0 (Z_OK) on success,\n\t *   other if not.\n\t *\n\t * Called once after you tell deflate that the input stream is\n\t * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n\t * or if an error happened. By default - join collected chunks,\n\t * free memory and fill `results` / `err` properties.\n\t **/\n\tDeflate.prototype.onEnd = function(status) {\n\t  // On success - join\n\t  if (status === Z_OK) {\n\t    if (this.options.to === 'string') {\n\t      this.result = this.chunks.join('');\n\t    } else {\n\t      this.result = utils.flattenChunks(this.chunks);\n\t    }\n\t  }\n\t  this.chunks = [];\n\t  this.err = status;\n\t  this.msg = this.strm.msg;\n\t};\n\t\n\t\n\t/**\n\t * deflate(data[, options]) -> Uint8Array|Array|String\n\t * - data (Uint8Array|Array|String): input data to compress.\n\t * - options (Object): zlib deflate options.\n\t *\n\t * Compress `data` with deflate alrorythm and `options`.\n\t *\n\t * Supported options are:\n\t *\n\t * - level\n\t * - windowBits\n\t * - memLevel\n\t * - strategy\n\t *\n\t * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n\t * for more information on these.\n\t *\n\t * Sugar (options):\n\t *\n\t * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n\t *   negative windowBits implicitly.\n\t * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n\t *    (each char code [0..255])\n\t *\n\t * ##### Example:\n\t *\n\t * ```javascript\n\t * var pako = require('pako')\n\t *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n\t *\n\t * console.log(pako.deflate(data));\n\t * ```\n\t **/\n\tfunction deflate(input, options) {\n\t  var deflator = new Deflate(options);\n\t\n\t  deflator.push(input, true);\n\t\n\t  // That will never happens, if you don't cheat with options :)\n\t  if (deflator.err) { throw deflator.msg; }\n\t\n\t  return deflator.result;\n\t}\n\t\n\t\n\t/**\n\t * deflateRaw(data[, options]) -> Uint8Array|Array|String\n\t * - data (Uint8Array|Array|String): input data to compress.\n\t * - options (Object): zlib deflate options.\n\t *\n\t * The same as [[deflate]], but creates raw data, without wrapper\n\t * (header and adler32 crc).\n\t **/\n\tfunction deflateRaw(input, options) {\n\t  options = options || {};\n\t  options.raw = true;\n\t  return deflate(input, options);\n\t}\n\t\n\t\n\t/**\n\t * gzip(data[, options]) -> Uint8Array|Array|String\n\t * - data (Uint8Array|Array|String): input data to compress.\n\t * - options (Object): zlib deflate options.\n\t *\n\t * The same as [[deflate]], but create gzip wrapper instead of\n\t * deflate one.\n\t **/\n\tfunction gzip(input, options) {\n\t  options = options || {};\n\t  options.gzip = true;\n\t  return deflate(input, options);\n\t}\n\t\n\t\n\texports.Deflate = Deflate;\n\texports.deflate = deflate;\n\texports.deflateRaw = deflateRaw;\n\texports.gzip = gzip;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils   = __webpack_require__(14);\n\tvar trees   = __webpack_require__(17);\n\tvar adler32 = __webpack_require__(18);\n\tvar crc32   = __webpack_require__(19);\n\tvar msg   = __webpack_require__(20);\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\t/* Allowed flush values; see deflate() and inflate() below for details */\n\tvar Z_NO_FLUSH      = 0;\n\tvar Z_PARTIAL_FLUSH = 1;\n\t//var Z_SYNC_FLUSH    = 2;\n\tvar Z_FULL_FLUSH    = 3;\n\tvar Z_FINISH        = 4;\n\tvar Z_BLOCK         = 5;\n\t//var Z_TREES         = 6;\n\t\n\t\n\t/* Return codes for the compression/decompression functions. Negative values\n\t * are errors, positive values are used for special but normal events.\n\t */\n\tvar Z_OK            = 0;\n\tvar Z_STREAM_END    = 1;\n\t//var Z_NEED_DICT     = 2;\n\t//var Z_ERRNO         = -1;\n\tvar Z_STREAM_ERROR  = -2;\n\tvar Z_DATA_ERROR    = -3;\n\t//var Z_MEM_ERROR     = -4;\n\tvar Z_BUF_ERROR     = -5;\n\t//var Z_VERSION_ERROR = -6;\n\t\n\t\n\t/* compression levels */\n\t//var Z_NO_COMPRESSION      = 0;\n\t//var Z_BEST_SPEED          = 1;\n\t//var Z_BEST_COMPRESSION    = 9;\n\tvar Z_DEFAULT_COMPRESSION = -1;\n\t\n\t\n\tvar Z_FILTERED            = 1;\n\tvar Z_HUFFMAN_ONLY        = 2;\n\tvar Z_RLE                 = 3;\n\tvar Z_FIXED               = 4;\n\tvar Z_DEFAULT_STRATEGY    = 0;\n\t\n\t/* Possible values of the data_type field (though see inflate()) */\n\t//var Z_BINARY              = 0;\n\t//var Z_TEXT                = 1;\n\t//var Z_ASCII               = 1; // = Z_TEXT\n\tvar Z_UNKNOWN             = 2;\n\t\n\t\n\t/* The deflate compression method */\n\tvar Z_DEFLATED  = 8;\n\t\n\t/*============================================================================*/\n\t\n\t\n\tvar MAX_MEM_LEVEL = 9;\n\t/* Maximum value for memLevel in deflateInit2 */\n\tvar MAX_WBITS = 15;\n\t/* 32K LZ77 window */\n\tvar DEF_MEM_LEVEL = 8;\n\t\n\t\n\tvar LENGTH_CODES  = 29;\n\t/* number of length codes, not counting the special END_BLOCK code */\n\tvar LITERALS      = 256;\n\t/* number of literal bytes 0..255 */\n\tvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n\t/* number of Literal or Length codes, including the END_BLOCK code */\n\tvar D_CODES       = 30;\n\t/* number of distance codes */\n\tvar BL_CODES      = 19;\n\t/* number of codes used to transfer the bit lengths */\n\tvar HEAP_SIZE     = 2*L_CODES + 1;\n\t/* maximum heap size */\n\tvar MAX_BITS  = 15;\n\t/* All codes must not exceed MAX_BITS bits */\n\t\n\tvar MIN_MATCH = 3;\n\tvar MAX_MATCH = 258;\n\tvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\t\n\tvar PRESET_DICT = 0x20;\n\t\n\tvar INIT_STATE = 42;\n\tvar EXTRA_STATE = 69;\n\tvar NAME_STATE = 73;\n\tvar COMMENT_STATE = 91;\n\tvar HCRC_STATE = 103;\n\tvar BUSY_STATE = 113;\n\tvar FINISH_STATE = 666;\n\t\n\tvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\n\tvar BS_BLOCK_DONE     = 2; /* block flush performed */\n\tvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\n\tvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\t\n\tvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\t\n\tfunction err(strm, errorCode) {\n\t  strm.msg = msg[errorCode];\n\t  return errorCode;\n\t}\n\t\n\tfunction rank(f) {\n\t  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n\t}\n\t\n\tfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\t\n\t\n\t/* =========================================================================\n\t * Flush as much pending output as possible. All deflate() output goes\n\t * through this function so some applications may wish to modify it\n\t * to avoid allocating a large strm->output buffer and copying into it.\n\t * (See also read_buf()).\n\t */\n\tfunction flush_pending(strm) {\n\t  var s = strm.state;\n\t\n\t  //_tr_flush_bits(s);\n\t  var len = s.pending;\n\t  if (len > strm.avail_out) {\n\t    len = strm.avail_out;\n\t  }\n\t  if (len === 0) { return; }\n\t\n\t  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n\t  strm.next_out += len;\n\t  s.pending_out += len;\n\t  strm.total_out += len;\n\t  strm.avail_out -= len;\n\t  s.pending -= len;\n\t  if (s.pending === 0) {\n\t    s.pending_out = 0;\n\t  }\n\t}\n\t\n\t\n\tfunction flush_block_only (s, last) {\n\t  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n\t  s.block_start = s.strstart;\n\t  flush_pending(s.strm);\n\t}\n\t\n\t\n\tfunction put_byte(s, b) {\n\t  s.pending_buf[s.pending++] = b;\n\t}\n\t\n\t\n\t/* =========================================================================\n\t * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n\t * IN assertion: the stream state is correct and there is enough room in\n\t * pending_buf.\n\t */\n\tfunction putShortMSB(s, b) {\n\t//  put_byte(s, (Byte)(b >> 8));\n\t//  put_byte(s, (Byte)(b & 0xff));\n\t  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n\t  s.pending_buf[s.pending++] = b & 0xff;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Read a new buffer from the current input stream, update the adler32\n\t * and total number of bytes read.  All deflate() input goes through\n\t * this function so some applications may wish to modify it to avoid\n\t * allocating a large strm->input buffer and copying from it.\n\t * (See also flush_pending()).\n\t */\n\tfunction read_buf(strm, buf, start, size) {\n\t  var len = strm.avail_in;\n\t\n\t  if (len > size) { len = size; }\n\t  if (len === 0) { return 0; }\n\t\n\t  strm.avail_in -= len;\n\t\n\t  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n\t  if (strm.state.wrap === 1) {\n\t    strm.adler = adler32(strm.adler, buf, len, start);\n\t  }\n\t\n\t  else if (strm.state.wrap === 2) {\n\t    strm.adler = crc32(strm.adler, buf, len, start);\n\t  }\n\t\n\t  strm.next_in += len;\n\t  strm.total_in += len;\n\t\n\t  return len;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Set match_start to the longest match starting at the given string and\n\t * return its length. Matches shorter or equal to prev_length are discarded,\n\t * in which case the result is equal to prev_length and match_start is\n\t * garbage.\n\t * IN assertions: cur_match is the head of the hash chain for the current\n\t *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n\t * OUT assertion: the match length is not greater than s->lookahead.\n\t */\n\tfunction longest_match(s, cur_match) {\n\t  var chain_length = s.max_chain_length;      /* max hash chain length */\n\t  var scan = s.strstart; /* current string */\n\t  var match;                       /* matched string */\n\t  var len;                           /* length of current match */\n\t  var best_len = s.prev_length;              /* best match length so far */\n\t  var nice_match = s.nice_match;             /* stop if match long enough */\n\t  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n\t      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\t\n\t  var _win = s.window; // shortcut\n\t\n\t  var wmask = s.w_mask;\n\t  var prev  = s.prev;\n\t\n\t  /* Stop when cur_match becomes <= limit. To simplify the code,\n\t   * we prevent matches with the string of window index 0.\n\t   */\n\t\n\t  var strend = s.strstart + MAX_MATCH;\n\t  var scan_end1  = _win[scan + best_len - 1];\n\t  var scan_end   = _win[scan + best_len];\n\t\n\t  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n\t   * It is easy to get rid of this optimization if necessary.\n\t   */\n\t  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\t\n\t  /* Do not waste too much time if we already have a good match: */\n\t  if (s.prev_length >= s.good_match) {\n\t    chain_length >>= 2;\n\t  }\n\t  /* Do not look for matches beyond the end of the input. This is necessary\n\t   * to make deflate deterministic.\n\t   */\n\t  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\t\n\t  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\t\n\t  do {\n\t    // Assert(cur_match < s->strstart, \"no future\");\n\t    match = cur_match;\n\t\n\t    /* Skip to next match if the match length cannot increase\n\t     * or if the match length is less than 2.  Note that the checks below\n\t     * for insufficient lookahead only occur occasionally for performance\n\t     * reasons.  Therefore uninitialized memory will be accessed, and\n\t     * conditional jumps will be made that depend on those values.\n\t     * However the length of the match is limited to the lookahead, so\n\t     * the output of deflate is not affected by the uninitialized values.\n\t     */\n\t\n\t    if (_win[match + best_len]     !== scan_end  ||\n\t        _win[match + best_len - 1] !== scan_end1 ||\n\t        _win[match]                !== _win[scan] ||\n\t        _win[++match]              !== _win[scan + 1]) {\n\t      continue;\n\t    }\n\t\n\t    /* The check at best_len-1 can be removed because it will be made\n\t     * again later. (This heuristic is not always a win.)\n\t     * It is not necessary to compare scan[2] and match[2] since they\n\t     * are always equal when the other bytes match, given that\n\t     * the hash keys are equal and that HASH_BITS >= 8.\n\t     */\n\t    scan += 2;\n\t    match++;\n\t    // Assert(*scan == *match, \"match[2]?\");\n\t\n\t    /* We check for insufficient lookahead only every 8th comparison;\n\t     * the 256th check will be made at strstart+258.\n\t     */\n\t    do {\n\t      /*jshint noempty:false*/\n\t    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n\t             scan < strend);\n\t\n\t    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\t\n\t    len = MAX_MATCH - (strend - scan);\n\t    scan = strend - MAX_MATCH;\n\t\n\t    if (len > best_len) {\n\t      s.match_start = cur_match;\n\t      best_len = len;\n\t      if (len >= nice_match) {\n\t        break;\n\t      }\n\t      scan_end1  = _win[scan + best_len - 1];\n\t      scan_end   = _win[scan + best_len];\n\t    }\n\t  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\t\n\t  if (best_len <= s.lookahead) {\n\t    return best_len;\n\t  }\n\t  return s.lookahead;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Fill the window when the lookahead becomes insufficient.\n\t * Updates strstart and lookahead.\n\t *\n\t * IN assertion: lookahead < MIN_LOOKAHEAD\n\t * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n\t *    At least one byte has been read, or avail_in == 0; reads are\n\t *    performed for at least two bytes (required for the zip translate_eol\n\t *    option -- not supported here).\n\t */\n\tfunction fill_window(s) {\n\t  var _w_size = s.w_size;\n\t  var p, n, m, more, str;\n\t\n\t  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\t\n\t  do {\n\t    more = s.window_size - s.lookahead - s.strstart;\n\t\n\t    // JS ints have 32 bit, block below not needed\n\t    /* Deal with !@#$% 64K limit: */\n\t    //if (sizeof(int) <= 2) {\n\t    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n\t    //        more = wsize;\n\t    //\n\t    //  } else if (more == (unsigned)(-1)) {\n\t    //        /* Very unlikely, but possible on 16 bit machine if\n\t    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n\t    //         */\n\t    //        more--;\n\t    //    }\n\t    //}\n\t\n\t\n\t    /* If the window is almost full and there is insufficient lookahead,\n\t     * move the upper half to the lower one to make room in the upper half.\n\t     */\n\t    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\t\n\t      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n\t      s.match_start -= _w_size;\n\t      s.strstart -= _w_size;\n\t      /* we now have strstart >= MAX_DIST */\n\t      s.block_start -= _w_size;\n\t\n\t      /* Slide the hash table (could be avoided with 32 bit values\n\t       at the expense of memory usage). We slide even when level == 0\n\t       to keep the hash table consistent if we switch back to level > 0\n\t       later. (Using level 0 permanently is not an optimal usage of\n\t       zlib, so we don't care about this pathological case.)\n\t       */\n\t\n\t      n = s.hash_size;\n\t      p = n;\n\t      do {\n\t        m = s.head[--p];\n\t        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n\t      } while (--n);\n\t\n\t      n = _w_size;\n\t      p = n;\n\t      do {\n\t        m = s.prev[--p];\n\t        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n\t        /* If n is not on any hash chain, prev[n] is garbage but\n\t         * its value will never be used.\n\t         */\n\t      } while (--n);\n\t\n\t      more += _w_size;\n\t    }\n\t    if (s.strm.avail_in === 0) {\n\t      break;\n\t    }\n\t\n\t    /* If there was no sliding:\n\t     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n\t     *    more == window_size - lookahead - strstart\n\t     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n\t     * => more >= window_size - 2*WSIZE + 2\n\t     * In the BIG_MEM or MMAP case (not yet supported),\n\t     *   window_size == input_size + MIN_LOOKAHEAD  &&\n\t     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n\t     * Otherwise, window_size == 2*WSIZE so more >= 2.\n\t     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n\t     */\n\t    //Assert(more >= 2, \"more < 2\");\n\t    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n\t    s.lookahead += n;\n\t\n\t    /* Initialize the hash value now that we have some input: */\n\t    if (s.lookahead + s.insert >= MIN_MATCH) {\n\t      str = s.strstart - s.insert;\n\t      s.ins_h = s.window[str];\n\t\n\t      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n\t//#if MIN_MATCH != 3\n\t//        Call update_hash() MIN_MATCH-3 more times\n\t//#endif\n\t      while (s.insert) {\n\t        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n\t        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;\n\t\n\t        s.prev[str & s.w_mask] = s.head[s.ins_h];\n\t        s.head[s.ins_h] = str;\n\t        str++;\n\t        s.insert--;\n\t        if (s.lookahead + s.insert < MIN_MATCH) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n\t     * but this is not important since only literal bytes will be emitted.\n\t     */\n\t\n\t  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\t\n\t  /* If the WIN_INIT bytes after the end of the current data have never been\n\t   * written, then zero those bytes in order to avoid memory check reports of\n\t   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n\t   * the longest match routines.  Update the high water mark for the next\n\t   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n\t   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n\t   */\n\t//  if (s.high_water < s.window_size) {\n\t//    var curr = s.strstart + s.lookahead;\n\t//    var init = 0;\n\t//\n\t//    if (s.high_water < curr) {\n\t//      /* Previous high water mark below current data -- zero WIN_INIT\n\t//       * bytes or up to end of window, whichever is less.\n\t//       */\n\t//      init = s.window_size - curr;\n\t//      if (init > WIN_INIT)\n\t//        init = WIN_INIT;\n\t//      zmemzero(s->window + curr, (unsigned)init);\n\t//      s->high_water = curr + init;\n\t//    }\n\t//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n\t//      /* High water mark at or above current data, but below current data\n\t//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n\t//       * to end of window, whichever is less.\n\t//       */\n\t//      init = (ulg)curr + WIN_INIT - s->high_water;\n\t//      if (init > s->window_size - s->high_water)\n\t//        init = s->window_size - s->high_water;\n\t//      zmemzero(s->window + s->high_water, (unsigned)init);\n\t//      s->high_water += init;\n\t//    }\n\t//  }\n\t//\n\t//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n\t//    \"not enough room for search\");\n\t}\n\t\n\t/* ===========================================================================\n\t * Copy without compression as much as possible from the input stream, return\n\t * the current block state.\n\t * This function does not insert new strings in the dictionary since\n\t * uncompressible data is probably not useful. This function is used\n\t * only for the level=0 compression option.\n\t * NOTE: this function should be optimized to avoid extra copying from\n\t * window to pending_buf.\n\t */\n\tfunction deflate_stored(s, flush) {\n\t  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n\t   * to pending_buf_size, and each stored block has a 5 byte header:\n\t   */\n\t  var max_block_size = 0xffff;\n\t\n\t  if (max_block_size > s.pending_buf_size - 5) {\n\t    max_block_size = s.pending_buf_size - 5;\n\t  }\n\t\n\t  /* Copy as much as possible from input to output: */\n\t  for (;;) {\n\t    /* Fill the window as much as possible: */\n\t    if (s.lookahead <= 1) {\n\t\n\t      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n\t      //  s->block_start >= (long)s->w_size, \"slide too late\");\n\t//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n\t//        s.block_start >= s.w_size)) {\n\t//        throw  new Error(\"slide too late\");\n\t//      }\n\t\n\t      fill_window(s);\n\t      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t\n\t      if (s.lookahead === 0) {\n\t        break;\n\t      }\n\t      /* flush the current block */\n\t    }\n\t    //Assert(s->block_start >= 0L, \"block gone\");\n\t//    if (s.block_start < 0) throw new Error(\"block gone\");\n\t\n\t    s.strstart += s.lookahead;\n\t    s.lookahead = 0;\n\t\n\t    /* Emit a stored block if pending_buf will be full: */\n\t    var max_start = s.block_start + max_block_size;\n\t\n\t    if (s.strstart === 0 || s.strstart >= max_start) {\n\t      /* strstart == 0 is possible when wraparound on 16-bit machine */\n\t      s.lookahead = s.strstart - max_start;\n\t      s.strstart = max_start;\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t\n\t\n\t    }\n\t    /* Flush if we may have to slide, otherwise block_start may become\n\t     * negative and the data will be gone:\n\t     */\n\t    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t\n\t  s.insert = 0;\n\t\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t\n\t  if (s.strstart > s.block_start) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t\n\t  return BS_NEED_MORE;\n\t}\n\t\n\t/* ===========================================================================\n\t * Compress as much as possible from the input stream, return the current\n\t * block state.\n\t * This function does not perform lazy evaluation of matches and inserts\n\t * new strings in the dictionary only for unmatched strings or for short\n\t * matches. It is used only for the fast compression options.\n\t */\n\tfunction deflate_fast(s, flush) {\n\t  var hash_head;        /* head of the hash chain */\n\t  var bflush;           /* set if current block must be flushed */\n\t\n\t  for (;;) {\n\t    /* Make sure that we always have enough lookahead, except\n\t     * at the end of the input file. We need MAX_MATCH bytes\n\t     * for the next match, plus MIN_MATCH bytes to insert the\n\t     * string following the next match.\n\t     */\n\t    if (s.lookahead < MIN_LOOKAHEAD) {\n\t      fill_window(s);\n\t      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      if (s.lookahead === 0) {\n\t        break; /* flush the current block */\n\t      }\n\t    }\n\t\n\t    /* Insert the string window[strstart .. strstart+2] in the\n\t     * dictionary, and set hash_head to the head of the hash chain:\n\t     */\n\t    hash_head = 0/*NIL*/;\n\t    if (s.lookahead >= MIN_MATCH) {\n\t      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t      s.head[s.ins_h] = s.strstart;\n\t      /***/\n\t    }\n\t\n\t    /* Find the longest match, discarding those <= prev_length.\n\t     * At this point we have always match_length < MIN_MATCH\n\t     */\n\t    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n\t      /* To simplify the code, we prevent matches with the string\n\t       * of window index 0 (in particular we have to avoid a match\n\t       * of the string with itself at the start of the input file).\n\t       */\n\t      s.match_length = longest_match(s, hash_head);\n\t      /* longest_match() sets match_start */\n\t    }\n\t    if (s.match_length >= MIN_MATCH) {\n\t      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\t\n\t      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n\t                     s.match_length - MIN_MATCH, bflush); ***/\n\t      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\t\n\t      s.lookahead -= s.match_length;\n\t\n\t      /* Insert new strings in the hash table only if the match length\n\t       * is not too large. This saves time but degrades compression.\n\t       */\n\t      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n\t        s.match_length--; /* string at strstart already in table */\n\t        do {\n\t          s.strstart++;\n\t          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t          s.head[s.ins_h] = s.strstart;\n\t          /***/\n\t          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n\t           * always MIN_MATCH bytes ahead.\n\t           */\n\t        } while (--s.match_length !== 0);\n\t        s.strstart++;\n\t      } else\n\t      {\n\t        s.strstart += s.match_length;\n\t        s.match_length = 0;\n\t        s.ins_h = s.window[s.strstart];\n\t        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n\t        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\t\n\t//#if MIN_MATCH != 3\n\t//                Call UPDATE_HASH() MIN_MATCH-3 more times\n\t//#endif\n\t        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n\t         * matter since it will be recomputed at next deflate call.\n\t         */\n\t      }\n\t    } else {\n\t      /* No match, output a literal byte */\n\t      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n\t      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n\t      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\t\n\t      s.lookahead--;\n\t      s.strstart++;\n\t    }\n\t    if (bflush) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t/* ===========================================================================\n\t * Same as above, but achieves better compression. We use a lazy\n\t * evaluation for matches: a match is finally adopted only if there is\n\t * no better match at the next window position.\n\t */\n\tfunction deflate_slow(s, flush) {\n\t  var hash_head;          /* head of hash chain */\n\t  var bflush;              /* set if current block must be flushed */\n\t\n\t  var max_insert;\n\t\n\t  /* Process the input block. */\n\t  for (;;) {\n\t    /* Make sure that we always have enough lookahead, except\n\t     * at the end of the input file. We need MAX_MATCH bytes\n\t     * for the next match, plus MIN_MATCH bytes to insert the\n\t     * string following the next match.\n\t     */\n\t    if (s.lookahead < MIN_LOOKAHEAD) {\n\t      fill_window(s);\n\t      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      if (s.lookahead === 0) { break; } /* flush the current block */\n\t    }\n\t\n\t    /* Insert the string window[strstart .. strstart+2] in the\n\t     * dictionary, and set hash_head to the head of the hash chain:\n\t     */\n\t    hash_head = 0/*NIL*/;\n\t    if (s.lookahead >= MIN_MATCH) {\n\t      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t      s.head[s.ins_h] = s.strstart;\n\t      /***/\n\t    }\n\t\n\t    /* Find the longest match, discarding those <= prev_length.\n\t     */\n\t    s.prev_length = s.match_length;\n\t    s.prev_match = s.match_start;\n\t    s.match_length = MIN_MATCH-1;\n\t\n\t    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n\t        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n\t      /* To simplify the code, we prevent matches with the string\n\t       * of window index 0 (in particular we have to avoid a match\n\t       * of the string with itself at the start of the input file).\n\t       */\n\t      s.match_length = longest_match(s, hash_head);\n\t      /* longest_match() sets match_start */\n\t\n\t      if (s.match_length <= 5 &&\n\t         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\t\n\t        /* If prev_match is also MIN_MATCH, match_start is garbage\n\t         * but we will ignore the current match anyway.\n\t         */\n\t        s.match_length = MIN_MATCH-1;\n\t      }\n\t    }\n\t    /* If there was a match at the previous step and the current\n\t     * match is not better, output the previous match:\n\t     */\n\t    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n\t      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n\t      /* Do not insert strings in hash table beyond this. */\n\t\n\t      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\t\n\t      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n\t                     s.prev_length - MIN_MATCH, bflush);***/\n\t      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);\n\t      /* Insert in hash table all strings up to the end of the match.\n\t       * strstart-1 and strstart are already inserted. If there is not\n\t       * enough lookahead, the last two strings are not inserted in\n\t       * the hash table.\n\t       */\n\t      s.lookahead -= s.prev_length-1;\n\t      s.prev_length -= 2;\n\t      do {\n\t        if (++s.strstart <= max_insert) {\n\t          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n\t          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n\t          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n\t          s.head[s.ins_h] = s.strstart;\n\t          /***/\n\t        }\n\t      } while (--s.prev_length !== 0);\n\t      s.match_available = 0;\n\t      s.match_length = MIN_MATCH-1;\n\t      s.strstart++;\n\t\n\t      if (bflush) {\n\t        /*** FLUSH_BLOCK(s, 0); ***/\n\t        flush_block_only(s, false);\n\t        if (s.strm.avail_out === 0) {\n\t          return BS_NEED_MORE;\n\t        }\n\t        /***/\n\t      }\n\t\n\t    } else if (s.match_available) {\n\t      /* If there was no match at the previous position, output a\n\t       * single literal. If there was a match but the current match\n\t       * is longer, truncate the previous match to a single literal.\n\t       */\n\t      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n\t      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n\t      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\t\n\t      if (bflush) {\n\t        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n\t        flush_block_only(s, false);\n\t        /***/\n\t      }\n\t      s.strstart++;\n\t      s.lookahead--;\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t    } else {\n\t      /* There is no previous match to compare with, wait for\n\t       * the next step to decide.\n\t       */\n\t      s.match_available = 1;\n\t      s.strstart++;\n\t      s.lookahead--;\n\t    }\n\t  }\n\t  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n\t  if (s.match_available) {\n\t    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n\t    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n\t    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\t\n\t    s.match_available = 0;\n\t  }\n\t  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n\t * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n\t * deflate switches away from Z_RLE.)\n\t */\n\tfunction deflate_rle(s, flush) {\n\t  var bflush;            /* set if current block must be flushed */\n\t  var prev;              /* byte at distance one to match */\n\t  var scan, strend;      /* scan goes up to strend for length of run */\n\t\n\t  var _win = s.window;\n\t\n\t  for (;;) {\n\t    /* Make sure that we always have enough lookahead, except\n\t     * at the end of the input file. We need MAX_MATCH bytes\n\t     * for the longest run, plus one for the unrolled loop.\n\t     */\n\t    if (s.lookahead <= MAX_MATCH) {\n\t      fill_window(s);\n\t      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      if (s.lookahead === 0) { break; } /* flush the current block */\n\t    }\n\t\n\t    /* See how many times the previous byte repeats */\n\t    s.match_length = 0;\n\t    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n\t      scan = s.strstart - 1;\n\t      prev = _win[scan];\n\t      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n\t        strend = s.strstart + MAX_MATCH;\n\t        do {\n\t          /*jshint noempty:false*/\n\t        } while (prev === _win[++scan] && prev === _win[++scan] &&\n\t                 prev === _win[++scan] && prev === _win[++scan] &&\n\t                 prev === _win[++scan] && prev === _win[++scan] &&\n\t                 prev === _win[++scan] && prev === _win[++scan] &&\n\t                 scan < strend);\n\t        s.match_length = MAX_MATCH - (strend - scan);\n\t        if (s.match_length > s.lookahead) {\n\t          s.match_length = s.lookahead;\n\t        }\n\t      }\n\t      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n\t    }\n\t\n\t    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n\t    if (s.match_length >= MIN_MATCH) {\n\t      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\t\n\t      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n\t      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\t\n\t      s.lookahead -= s.match_length;\n\t      s.strstart += s.match_length;\n\t      s.match_length = 0;\n\t    } else {\n\t      /* No match, output a literal byte */\n\t      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n\t      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n\t      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\t\n\t      s.lookahead--;\n\t      s.strstart++;\n\t    }\n\t    if (bflush) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t  s.insert = 0;\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t/* ===========================================================================\n\t * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n\t * (It will be regenerated if this run of deflate switches away from Huffman.)\n\t */\n\tfunction deflate_huff(s, flush) {\n\t  var bflush;             /* set if current block must be flushed */\n\t\n\t  for (;;) {\n\t    /* Make sure that we have a literal to write. */\n\t    if (s.lookahead === 0) {\n\t      fill_window(s);\n\t      if (s.lookahead === 0) {\n\t        if (flush === Z_NO_FLUSH) {\n\t          return BS_NEED_MORE;\n\t        }\n\t        break;      /* flush the current block */\n\t      }\n\t    }\n\t\n\t    /* Output a literal byte */\n\t    s.match_length = 0;\n\t    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n\t    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n\t    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\t    s.lookahead--;\n\t    s.strstart++;\n\t    if (bflush) {\n\t      /*** FLUSH_BLOCK(s, 0); ***/\n\t      flush_block_only(s, false);\n\t      if (s.strm.avail_out === 0) {\n\t        return BS_NEED_MORE;\n\t      }\n\t      /***/\n\t    }\n\t  }\n\t  s.insert = 0;\n\t  if (flush === Z_FINISH) {\n\t    /*** FLUSH_BLOCK(s, 1); ***/\n\t    flush_block_only(s, true);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_FINISH_STARTED;\n\t    }\n\t    /***/\n\t    return BS_FINISH_DONE;\n\t  }\n\t  if (s.last_lit) {\n\t    /*** FLUSH_BLOCK(s, 0); ***/\n\t    flush_block_only(s, false);\n\t    if (s.strm.avail_out === 0) {\n\t      return BS_NEED_MORE;\n\t    }\n\t    /***/\n\t  }\n\t  return BS_BLOCK_DONE;\n\t}\n\t\n\t/* Values for max_lazy_match, good_match and max_chain_length, depending on\n\t * the desired pack level (0..9). The values given below have been tuned to\n\t * exclude worst case performance for pathological files. Better values may be\n\t * found for specific files.\n\t */\n\tvar Config = function (good_length, max_lazy, nice_length, max_chain, func) {\n\t  this.good_length = good_length;\n\t  this.max_lazy = max_lazy;\n\t  this.nice_length = nice_length;\n\t  this.max_chain = max_chain;\n\t  this.func = func;\n\t};\n\t\n\tvar configuration_table;\n\t\n\tconfiguration_table = [\n\t  /*      good lazy nice chain */\n\t  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n\t  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n\t  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n\t  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\t\n\t  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n\t  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n\t  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n\t  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n\t  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n\t  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n\t];\n\t\n\t\n\t/* ===========================================================================\n\t * Initialize the \"longest match\" routines for a new zlib stream\n\t */\n\tfunction lm_init(s) {\n\t  s.window_size = 2 * s.w_size;\n\t\n\t  /*** CLEAR_HASH(s); ***/\n\t  zero(s.head); // Fill with NIL (= 0);\n\t\n\t  /* Set the default configuration parameters:\n\t   */\n\t  s.max_lazy_match = configuration_table[s.level].max_lazy;\n\t  s.good_match = configuration_table[s.level].good_length;\n\t  s.nice_match = configuration_table[s.level].nice_length;\n\t  s.max_chain_length = configuration_table[s.level].max_chain;\n\t\n\t  s.strstart = 0;\n\t  s.block_start = 0;\n\t  s.lookahead = 0;\n\t  s.insert = 0;\n\t  s.match_length = s.prev_length = MIN_MATCH - 1;\n\t  s.match_available = 0;\n\t  s.ins_h = 0;\n\t}\n\t\n\t\n\tfunction DeflateState() {\n\t  this.strm = null;            /* pointer back to this zlib stream */\n\t  this.status = 0;            /* as the name implies */\n\t  this.pending_buf = null;      /* output still pending */\n\t  this.pending_buf_size = 0;  /* size of pending_buf */\n\t  this.pending_out = 0;       /* next pending byte to output to the stream */\n\t  this.pending = 0;           /* nb of bytes in the pending buffer */\n\t  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n\t  this.gzhead = null;         /* gzip header information to write */\n\t  this.gzindex = 0;           /* where in extra, name, or comment */\n\t  this.method = Z_DEFLATED; /* can only be DEFLATED */\n\t  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\t\n\t  this.w_size = 0;  /* LZ77 window size (32K by default) */\n\t  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n\t  this.w_mask = 0;  /* w_size - 1 */\n\t\n\t  this.window = null;\n\t  /* Sliding window. Input bytes are read into the second half of the window,\n\t   * and move to the first half later to keep a dictionary of at least wSize\n\t   * bytes. With this organization, matches are limited to a distance of\n\t   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n\t   * performed with a length multiple of the block size.\n\t   */\n\t\n\t  this.window_size = 0;\n\t  /* Actual size of window: 2*wSize, except when the user input buffer\n\t   * is directly used as sliding window.\n\t   */\n\t\n\t  this.prev = null;\n\t  /* Link to older string with same hash index. To limit the size of this\n\t   * array to 64K, this link is maintained only for the last 32K strings.\n\t   * An index in this array is thus a window index modulo 32K.\n\t   */\n\t\n\t  this.head = null;   /* Heads of the hash chains or NIL. */\n\t\n\t  this.ins_h = 0;       /* hash index of string to be inserted */\n\t  this.hash_size = 0;   /* number of elements in hash table */\n\t  this.hash_bits = 0;   /* log2(hash_size) */\n\t  this.hash_mask = 0;   /* hash_size-1 */\n\t\n\t  this.hash_shift = 0;\n\t  /* Number of bits by which ins_h must be shifted at each input\n\t   * step. It must be such that after MIN_MATCH steps, the oldest\n\t   * byte no longer takes part in the hash key, that is:\n\t   *   hash_shift * MIN_MATCH >= hash_bits\n\t   */\n\t\n\t  this.block_start = 0;\n\t  /* Window position at the beginning of the current output block. Gets\n\t   * negative when the window is moved backwards.\n\t   */\n\t\n\t  this.match_length = 0;      /* length of best match */\n\t  this.prev_match = 0;        /* previous match */\n\t  this.match_available = 0;   /* set if previous match exists */\n\t  this.strstart = 0;          /* start of string to insert */\n\t  this.match_start = 0;       /* start of matching string */\n\t  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\t\n\t  this.prev_length = 0;\n\t  /* Length of the best match at previous step. Matches not greater than this\n\t   * are discarded. This is used in the lazy match evaluation.\n\t   */\n\t\n\t  this.max_chain_length = 0;\n\t  /* To speed up deflation, hash chains are never searched beyond this\n\t   * length.  A higher limit improves compression ratio but degrades the\n\t   * speed.\n\t   */\n\t\n\t  this.max_lazy_match = 0;\n\t  /* Attempt to find a better match only when the current match is strictly\n\t   * smaller than this value. This mechanism is used only for compression\n\t   * levels >= 4.\n\t   */\n\t  // That's alias to max_lazy_match, don't use directly\n\t  //this.max_insert_length = 0;\n\t  /* Insert new strings in the hash table only if the match length is not\n\t   * greater than this length. This saves time but degrades compression.\n\t   * max_insert_length is used only for compression levels <= 3.\n\t   */\n\t\n\t  this.level = 0;     /* compression level (1..9) */\n\t  this.strategy = 0;  /* favor or force Huffman coding*/\n\t\n\t  this.good_match = 0;\n\t  /* Use a faster search when the previous match is longer than this */\n\t\n\t  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\t\n\t              /* used by trees.c: */\n\t\n\t  /* Didn't use ct_data typedef below to suppress compiler warning */\n\t\n\t  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n\t  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n\t  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\t\n\t  // Use flat array of DOUBLE size, with interleaved fata,\n\t  // because JS does not support effective\n\t  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n\t  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);\n\t  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);\n\t  zero(this.dyn_ltree);\n\t  zero(this.dyn_dtree);\n\t  zero(this.bl_tree);\n\t\n\t  this.l_desc   = null;         /* desc. for literal tree */\n\t  this.d_desc   = null;         /* desc. for distance tree */\n\t  this.bl_desc  = null;         /* desc. for bit length tree */\n\t\n\t  //ush bl_count[MAX_BITS+1];\n\t  this.bl_count = new utils.Buf16(MAX_BITS+1);\n\t  /* number of codes at each bit length for an optimal tree */\n\t\n\t  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n\t  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */\n\t  zero(this.heap);\n\t\n\t  this.heap_len = 0;               /* number of elements in the heap */\n\t  this.heap_max = 0;               /* element of largest frequency */\n\t  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n\t   * The same heap array is used to build all trees.\n\t   */\n\t\n\t  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];\n\t  zero(this.depth);\n\t  /* Depth of each subtree used as tie breaker for trees of equal frequency\n\t   */\n\t\n\t  this.l_buf = 0;          /* buffer index for literals or lengths */\n\t\n\t  this.lit_bufsize = 0;\n\t  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n\t   * limiting lit_bufsize to 64K:\n\t   *   - frequencies can be kept in 16 bit counters\n\t   *   - if compression is not successful for the first block, all input\n\t   *     data is still in the window so we can still emit a stored block even\n\t   *     when input comes from standard input.  (This can also be done for\n\t   *     all blocks if lit_bufsize is not greater than 32K.)\n\t   *   - if compression is not successful for a file smaller than 64K, we can\n\t   *     even emit a stored file instead of a stored block (saving 5 bytes).\n\t   *     This is applicable only for zip (not gzip or zlib).\n\t   *   - creating new Huffman trees less frequently may not provide fast\n\t   *     adaptation to changes in the input data statistics. (Take for\n\t   *     example a binary file with poorly compressible code followed by\n\t   *     a highly compressible string table.) Smaller buffer sizes give\n\t   *     fast adaptation but have of course the overhead of transmitting\n\t   *     trees more frequently.\n\t   *   - I can't count above 4\n\t   */\n\t\n\t  this.last_lit = 0;      /* running index in l_buf */\n\t\n\t  this.d_buf = 0;\n\t  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n\t   * the same number of elements. To use different lengths, an extra flag\n\t   * array would be necessary.\n\t   */\n\t\n\t  this.opt_len = 0;       /* bit length of current block with optimal trees */\n\t  this.static_len = 0;    /* bit length of current block with static trees */\n\t  this.matches = 0;       /* number of string matches in current block */\n\t  this.insert = 0;        /* bytes at end of window left to insert */\n\t\n\t\n\t  this.bi_buf = 0;\n\t  /* Output buffer. bits are inserted starting at the bottom (least\n\t   * significant bits).\n\t   */\n\t  this.bi_valid = 0;\n\t  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n\t   * are always zero.\n\t   */\n\t\n\t  // Used for window memory init. We safely ignore it for JS. That makes\n\t  // sense only for pointers and memory check tools.\n\t  //this.high_water = 0;\n\t  /* High water mark offset in window for initialized bytes -- bytes above\n\t   * this are set to zero in order to avoid memory check warnings when\n\t   * longest match routines access bytes past the input.  This is then\n\t   * updated to the new high water mark.\n\t   */\n\t}\n\t\n\t\n\tfunction deflateResetKeep(strm) {\n\t  var s;\n\t\n\t  if (!strm || !strm.state) {\n\t    return err(strm, Z_STREAM_ERROR);\n\t  }\n\t\n\t  strm.total_in = strm.total_out = 0;\n\t  strm.data_type = Z_UNKNOWN;\n\t\n\t  s = strm.state;\n\t  s.pending = 0;\n\t  s.pending_out = 0;\n\t\n\t  if (s.wrap < 0) {\n\t    s.wrap = -s.wrap;\n\t    /* was made negative by deflate(..., Z_FINISH); */\n\t  }\n\t  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n\t  strm.adler = (s.wrap === 2) ?\n\t    0  // crc32(0, Z_NULL, 0)\n\t  :\n\t    1; // adler32(0, Z_NULL, 0)\n\t  s.last_flush = Z_NO_FLUSH;\n\t  trees._tr_init(s);\n\t  return Z_OK;\n\t}\n\t\n\t\n\tfunction deflateReset(strm) {\n\t  var ret = deflateResetKeep(strm);\n\t  if (ret === Z_OK) {\n\t    lm_init(strm.state);\n\t  }\n\t  return ret;\n\t}\n\t\n\t\n\tfunction deflateSetHeader(strm, head) {\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n\t  strm.state.gzhead = head;\n\t  return Z_OK;\n\t}\n\t\n\t\n\tfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n\t  if (!strm) { // === Z_NULL\n\t    return Z_STREAM_ERROR;\n\t  }\n\t  var wrap = 1;\n\t\n\t  if (level === Z_DEFAULT_COMPRESSION) {\n\t    level = 6;\n\t  }\n\t\n\t  if (windowBits < 0) { /* suppress zlib wrapper */\n\t    wrap = 0;\n\t    windowBits = -windowBits;\n\t  }\n\t\n\t  else if (windowBits > 15) {\n\t    wrap = 2;           /* write gzip wrapper instead */\n\t    windowBits -= 16;\n\t  }\n\t\n\t\n\t  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n\t    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n\t    strategy < 0 || strategy > Z_FIXED) {\n\t    return err(strm, Z_STREAM_ERROR);\n\t  }\n\t\n\t\n\t  if (windowBits === 8) {\n\t    windowBits = 9;\n\t  }\n\t  /* until 256-byte window bug fixed */\n\t\n\t  var s = new DeflateState();\n\t\n\t  strm.state = s;\n\t  s.strm = strm;\n\t\n\t  s.wrap = wrap;\n\t  s.gzhead = null;\n\t  s.w_bits = windowBits;\n\t  s.w_size = 1 << s.w_bits;\n\t  s.w_mask = s.w_size - 1;\n\t\n\t  s.hash_bits = memLevel + 7;\n\t  s.hash_size = 1 << s.hash_bits;\n\t  s.hash_mask = s.hash_size - 1;\n\t  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\t\n\t  s.window = new utils.Buf8(s.w_size * 2);\n\t  s.head = new utils.Buf16(s.hash_size);\n\t  s.prev = new utils.Buf16(s.w_size);\n\t\n\t  // Don't need mem init magic for JS.\n\t  //s.high_water = 0;  /* nothing written to s->window yet */\n\t\n\t  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\t\n\t  s.pending_buf_size = s.lit_bufsize * 4;\n\t  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\t\n\t  s.d_buf = s.lit_bufsize >> 1;\n\t  s.l_buf = (1 + 2) * s.lit_bufsize;\n\t\n\t  s.level = level;\n\t  s.strategy = strategy;\n\t  s.method = method;\n\t\n\t  return deflateReset(strm);\n\t}\n\t\n\tfunction deflateInit(strm, level) {\n\t  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n\t}\n\t\n\t\n\tfunction deflate(strm, flush) {\n\t  var old_flush, s;\n\t  var beg, val; // for gzip header write only\n\t\n\t  if (!strm || !strm.state ||\n\t    flush > Z_BLOCK || flush < 0) {\n\t    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n\t  }\n\t\n\t  s = strm.state;\n\t\n\t  if (!strm.output ||\n\t      (!strm.input && strm.avail_in !== 0) ||\n\t      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n\t    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n\t  }\n\t\n\t  s.strm = strm; /* just in case */\n\t  old_flush = s.last_flush;\n\t  s.last_flush = flush;\n\t\n\t  /* Write the header */\n\t  if (s.status === INIT_STATE) {\n\t\n\t    if (s.wrap === 2) { // GZIP header\n\t      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n\t      put_byte(s, 31);\n\t      put_byte(s, 139);\n\t      put_byte(s, 8);\n\t      if (!s.gzhead) { // s->gzhead == Z_NULL\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, 0);\n\t        put_byte(s, s.level === 9 ? 2 :\n\t                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n\t                     4 : 0));\n\t        put_byte(s, OS_CODE);\n\t        s.status = BUSY_STATE;\n\t      }\n\t      else {\n\t        put_byte(s, (s.gzhead.text ? 1 : 0) +\n\t                    (s.gzhead.hcrc ? 2 : 0) +\n\t                    (!s.gzhead.extra ? 0 : 4) +\n\t                    (!s.gzhead.name ? 0 : 8) +\n\t                    (!s.gzhead.comment ? 0 : 16)\n\t                );\n\t        put_byte(s, s.gzhead.time & 0xff);\n\t        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n\t        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n\t        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n\t        put_byte(s, s.level === 9 ? 2 :\n\t                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n\t                     4 : 0));\n\t        put_byte(s, s.gzhead.os & 0xff);\n\t        if (s.gzhead.extra && s.gzhead.extra.length) {\n\t          put_byte(s, s.gzhead.extra.length & 0xff);\n\t          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n\t        }\n\t        if (s.gzhead.hcrc) {\n\t          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n\t        }\n\t        s.gzindex = 0;\n\t        s.status = EXTRA_STATE;\n\t      }\n\t    }\n\t    else // DEFLATE header\n\t    {\n\t      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n\t      var level_flags = -1;\n\t\n\t      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n\t        level_flags = 0;\n\t      } else if (s.level < 6) {\n\t        level_flags = 1;\n\t      } else if (s.level === 6) {\n\t        level_flags = 2;\n\t      } else {\n\t        level_flags = 3;\n\t      }\n\t      header |= (level_flags << 6);\n\t      if (s.strstart !== 0) { header |= PRESET_DICT; }\n\t      header += 31 - (header % 31);\n\t\n\t      s.status = BUSY_STATE;\n\t      putShortMSB(s, header);\n\t\n\t      /* Save the adler32 of the preset dictionary: */\n\t      if (s.strstart !== 0) {\n\t        putShortMSB(s, strm.adler >>> 16);\n\t        putShortMSB(s, strm.adler & 0xffff);\n\t      }\n\t      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n\t    }\n\t  }\n\t\n\t//#ifdef GZIP\n\t  if (s.status === EXTRA_STATE) {\n\t    if (s.gzhead.extra/* != Z_NULL*/) {\n\t      beg = s.pending;  /* start of bytes to update crc */\n\t\n\t      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n\t        if (s.pending === s.pending_buf_size) {\n\t          if (s.gzhead.hcrc && s.pending > beg) {\n\t            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t          }\n\t          flush_pending(strm);\n\t          beg = s.pending;\n\t          if (s.pending === s.pending_buf_size) {\n\t            break;\n\t          }\n\t        }\n\t        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n\t        s.gzindex++;\n\t      }\n\t      if (s.gzhead.hcrc && s.pending > beg) {\n\t        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t      }\n\t      if (s.gzindex === s.gzhead.extra.length) {\n\t        s.gzindex = 0;\n\t        s.status = NAME_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = NAME_STATE;\n\t    }\n\t  }\n\t  if (s.status === NAME_STATE) {\n\t    if (s.gzhead.name/* != Z_NULL*/) {\n\t      beg = s.pending;  /* start of bytes to update crc */\n\t      //int val;\n\t\n\t      do {\n\t        if (s.pending === s.pending_buf_size) {\n\t          if (s.gzhead.hcrc && s.pending > beg) {\n\t            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t          }\n\t          flush_pending(strm);\n\t          beg = s.pending;\n\t          if (s.pending === s.pending_buf_size) {\n\t            val = 1;\n\t            break;\n\t          }\n\t        }\n\t        // JS specific: little magic to add zero terminator to end of string\n\t        if (s.gzindex < s.gzhead.name.length) {\n\t          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n\t        } else {\n\t          val = 0;\n\t        }\n\t        put_byte(s, val);\n\t      } while (val !== 0);\n\t\n\t      if (s.gzhead.hcrc && s.pending > beg) {\n\t        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t      }\n\t      if (val === 0) {\n\t        s.gzindex = 0;\n\t        s.status = COMMENT_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = COMMENT_STATE;\n\t    }\n\t  }\n\t  if (s.status === COMMENT_STATE) {\n\t    if (s.gzhead.comment/* != Z_NULL*/) {\n\t      beg = s.pending;  /* start of bytes to update crc */\n\t      //int val;\n\t\n\t      do {\n\t        if (s.pending === s.pending_buf_size) {\n\t          if (s.gzhead.hcrc && s.pending > beg) {\n\t            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t          }\n\t          flush_pending(strm);\n\t          beg = s.pending;\n\t          if (s.pending === s.pending_buf_size) {\n\t            val = 1;\n\t            break;\n\t          }\n\t        }\n\t        // JS specific: little magic to add zero terminator to end of string\n\t        if (s.gzindex < s.gzhead.comment.length) {\n\t          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n\t        } else {\n\t          val = 0;\n\t        }\n\t        put_byte(s, val);\n\t      } while (val !== 0);\n\t\n\t      if (s.gzhead.hcrc && s.pending > beg) {\n\t        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n\t      }\n\t      if (val === 0) {\n\t        s.status = HCRC_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = HCRC_STATE;\n\t    }\n\t  }\n\t  if (s.status === HCRC_STATE) {\n\t    if (s.gzhead.hcrc) {\n\t      if (s.pending + 2 > s.pending_buf_size) {\n\t        flush_pending(strm);\n\t      }\n\t      if (s.pending + 2 <= s.pending_buf_size) {\n\t        put_byte(s, strm.adler & 0xff);\n\t        put_byte(s, (strm.adler >> 8) & 0xff);\n\t        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n\t        s.status = BUSY_STATE;\n\t      }\n\t    }\n\t    else {\n\t      s.status = BUSY_STATE;\n\t    }\n\t  }\n\t//#endif\n\t\n\t  /* Flush as much pending output as possible */\n\t  if (s.pending !== 0) {\n\t    flush_pending(strm);\n\t    if (strm.avail_out === 0) {\n\t      /* Since avail_out is 0, deflate will be called again with\n\t       * more output space, but possibly with both pending and\n\t       * avail_in equal to zero. There won't be anything to do,\n\t       * but this is not an error situation so make sure we\n\t       * return OK instead of BUF_ERROR at next call of deflate:\n\t       */\n\t      s.last_flush = -1;\n\t      return Z_OK;\n\t    }\n\t\n\t    /* Make sure there is something to do and avoid duplicate consecutive\n\t     * flushes. For repeated and useless calls with Z_FINISH, we keep\n\t     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n\t     */\n\t  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n\t    flush !== Z_FINISH) {\n\t    return err(strm, Z_BUF_ERROR);\n\t  }\n\t\n\t  /* User must not provide more input after the first FINISH: */\n\t  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n\t    return err(strm, Z_BUF_ERROR);\n\t  }\n\t\n\t  /* Start a new block or continue the current one.\n\t   */\n\t  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n\t    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n\t    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n\t      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n\t        configuration_table[s.level].func(s, flush));\n\t\n\t    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n\t      s.status = FINISH_STATE;\n\t    }\n\t    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n\t      if (strm.avail_out === 0) {\n\t        s.last_flush = -1;\n\t        /* avoid BUF_ERROR next call, see above */\n\t      }\n\t      return Z_OK;\n\t      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n\t       * of deflate should use the same flush parameter to make sure\n\t       * that the flush is complete. So we don't have to output an\n\t       * empty block here, this will be done at next call. This also\n\t       * ensures that for a very small output buffer, we emit at most\n\t       * one empty block.\n\t       */\n\t    }\n\t    if (bstate === BS_BLOCK_DONE) {\n\t      if (flush === Z_PARTIAL_FLUSH) {\n\t        trees._tr_align(s);\n\t      }\n\t      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\t\n\t        trees._tr_stored_block(s, 0, 0, false);\n\t        /* For a full flush, this empty block will be recognized\n\t         * as a special marker by inflate_sync().\n\t         */\n\t        if (flush === Z_FULL_FLUSH) {\n\t          /*** CLEAR_HASH(s); ***/             /* forget history */\n\t          zero(s.head); // Fill with NIL (= 0);\n\t\n\t          if (s.lookahead === 0) {\n\t            s.strstart = 0;\n\t            s.block_start = 0;\n\t            s.insert = 0;\n\t          }\n\t        }\n\t      }\n\t      flush_pending(strm);\n\t      if (strm.avail_out === 0) {\n\t        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n\t        return Z_OK;\n\t      }\n\t    }\n\t  }\n\t  //Assert(strm->avail_out > 0, \"bug2\");\n\t  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\t\n\t  if (flush !== Z_FINISH) { return Z_OK; }\n\t  if (s.wrap <= 0) { return Z_STREAM_END; }\n\t\n\t  /* Write the trailer */\n\t  if (s.wrap === 2) {\n\t    put_byte(s, strm.adler & 0xff);\n\t    put_byte(s, (strm.adler >> 8) & 0xff);\n\t    put_byte(s, (strm.adler >> 16) & 0xff);\n\t    put_byte(s, (strm.adler >> 24) & 0xff);\n\t    put_byte(s, strm.total_in & 0xff);\n\t    put_byte(s, (strm.total_in >> 8) & 0xff);\n\t    put_byte(s, (strm.total_in >> 16) & 0xff);\n\t    put_byte(s, (strm.total_in >> 24) & 0xff);\n\t  }\n\t  else\n\t  {\n\t    putShortMSB(s, strm.adler >>> 16);\n\t    putShortMSB(s, strm.adler & 0xffff);\n\t  }\n\t\n\t  flush_pending(strm);\n\t  /* If avail_out is zero, the application will call deflate again\n\t   * to flush the rest.\n\t   */\n\t  if (s.wrap > 0) { s.wrap = -s.wrap; }\n\t  /* write the trailer only once! */\n\t  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n\t}\n\t\n\tfunction deflateEnd(strm) {\n\t  var status;\n\t\n\t  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  status = strm.state.status;\n\t  if (status !== INIT_STATE &&\n\t    status !== EXTRA_STATE &&\n\t    status !== NAME_STATE &&\n\t    status !== COMMENT_STATE &&\n\t    status !== HCRC_STATE &&\n\t    status !== BUSY_STATE &&\n\t    status !== FINISH_STATE\n\t  ) {\n\t    return err(strm, Z_STREAM_ERROR);\n\t  }\n\t\n\t  strm.state = null;\n\t\n\t  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n\t}\n\t\n\t/* =========================================================================\n\t * Copy the source state to the destination state\n\t */\n\t//function deflateCopy(dest, source) {\n\t//\n\t//}\n\t\n\texports.deflateInit = deflateInit;\n\texports.deflateInit2 = deflateInit2;\n\texports.deflateReset = deflateReset;\n\texports.deflateResetKeep = deflateResetKeep;\n\texports.deflateSetHeader = deflateSetHeader;\n\texports.deflate = deflate;\n\texports.deflateEnd = deflateEnd;\n\texports.deflateInfo = 'pako deflate (from Nodeca project)';\n\t\n\t/* Not implemented\n\texports.deflateBound = deflateBound;\n\texports.deflateCopy = deflateCopy;\n\texports.deflateSetDictionary = deflateSetDictionary;\n\texports.deflateParams = deflateParams;\n\texports.deflatePending = deflatePending;\n\texports.deflatePrime = deflatePrime;\n\texports.deflateTune = deflateTune;\n\t*/\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar utils = __webpack_require__(14);\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\t//var Z_FILTERED          = 1;\n\t//var Z_HUFFMAN_ONLY      = 2;\n\t//var Z_RLE               = 3;\n\tvar Z_FIXED               = 4;\n\t//var Z_DEFAULT_STRATEGY  = 0;\n\t\n\t/* Possible values of the data_type field (though see inflate()) */\n\tvar Z_BINARY              = 0;\n\tvar Z_TEXT                = 1;\n\t//var Z_ASCII             = 1; // = Z_TEXT\n\tvar Z_UNKNOWN             = 2;\n\t\n\t/*============================================================================*/\n\t\n\t\n\tfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\t\n\t// From zutil.h\n\t\n\tvar STORED_BLOCK = 0;\n\tvar STATIC_TREES = 1;\n\tvar DYN_TREES    = 2;\n\t/* The three kinds of block type */\n\t\n\tvar MIN_MATCH    = 3;\n\tvar MAX_MATCH    = 258;\n\t/* The minimum and maximum match lengths */\n\t\n\t// From deflate.h\n\t/* ===========================================================================\n\t * Internal compression state.\n\t */\n\t\n\tvar LENGTH_CODES  = 29;\n\t/* number of length codes, not counting the special END_BLOCK code */\n\t\n\tvar LITERALS      = 256;\n\t/* number of literal bytes 0..255 */\n\t\n\tvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n\t/* number of Literal or Length codes, including the END_BLOCK code */\n\t\n\tvar D_CODES       = 30;\n\t/* number of distance codes */\n\t\n\tvar BL_CODES      = 19;\n\t/* number of codes used to transfer the bit lengths */\n\t\n\tvar HEAP_SIZE     = 2*L_CODES + 1;\n\t/* maximum heap size */\n\t\n\tvar MAX_BITS      = 15;\n\t/* All codes must not exceed MAX_BITS bits */\n\t\n\tvar Buf_size      = 16;\n\t/* size of bit buffer in bi_buf */\n\t\n\t\n\t/* ===========================================================================\n\t * Constants\n\t */\n\t\n\tvar MAX_BL_BITS = 7;\n\t/* Bit length codes must not exceed MAX_BL_BITS bits */\n\t\n\tvar END_BLOCK   = 256;\n\t/* end of block literal code */\n\t\n\tvar REP_3_6     = 16;\n\t/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\t\n\tvar REPZ_3_10   = 17;\n\t/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\t\n\tvar REPZ_11_138 = 18;\n\t/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\t\n\tvar extra_lbits =   /* extra bits for each length code */\n\t  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\t\n\tvar extra_dbits =   /* extra bits for each distance code */\n\t  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\t\n\tvar extra_blbits =  /* extra bits for each bit length code */\n\t  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\t\n\tvar bl_order =\n\t  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n\t/* The lengths of the bit length codes are sent in order of decreasing\n\t * probability, to avoid transmitting the lengths for unused bit length codes.\n\t */\n\t\n\t/* ===========================================================================\n\t * Local data. These are initialized only once.\n\t */\n\t\n\t// We pre-fill arrays with 0 to avoid uninitialized gaps\n\t\n\tvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\t\n\t// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\n\tvar static_ltree  = new Array((L_CODES+2) * 2);\n\tzero(static_ltree);\n\t/* The static literal tree. Since the bit lengths are imposed, there is no\n\t * need for the L_CODES extra codes used during heap construction. However\n\t * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n\t * below).\n\t */\n\t\n\tvar static_dtree  = new Array(D_CODES * 2);\n\tzero(static_dtree);\n\t/* The static distance tree. (Actually a trivial tree since all codes use\n\t * 5 bits.)\n\t */\n\t\n\tvar _dist_code    = new Array(DIST_CODE_LEN);\n\tzero(_dist_code);\n\t/* Distance codes. The first 256 values correspond to the distances\n\t * 3 .. 258, the last 256 values correspond to the top 8 bits of\n\t * the 15 bit distances.\n\t */\n\t\n\tvar _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);\n\tzero(_length_code);\n\t/* length code for each normalized match length (0 == MIN_MATCH) */\n\t\n\tvar base_length   = new Array(LENGTH_CODES);\n\tzero(base_length);\n\t/* First normalized length for each code (0 = MIN_MATCH) */\n\t\n\tvar base_dist     = new Array(D_CODES);\n\tzero(base_dist);\n\t/* First normalized distance for each code (0 = distance of 1) */\n\t\n\t\n\tvar StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {\n\t\n\t  this.static_tree  = static_tree;  /* static tree or NULL */\n\t  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n\t  this.extra_base   = extra_base;   /* base index for extra_bits */\n\t  this.elems        = elems;        /* max number of elements in the tree */\n\t  this.max_length   = max_length;   /* max bit length for the codes */\n\t\n\t  // show if `static_tree` has data or dummy - needed for monomorphic objects\n\t  this.has_stree    = static_tree && static_tree.length;\n\t};\n\t\n\t\n\tvar static_l_desc;\n\tvar static_d_desc;\n\tvar static_bl_desc;\n\t\n\t\n\tvar TreeDesc = function(dyn_tree, stat_desc) {\n\t  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n\t  this.max_code = 0;            /* largest code with non zero frequency */\n\t  this.stat_desc = stat_desc;   /* the corresponding static tree */\n\t};\n\t\n\t\n\t\n\tfunction d_code(dist) {\n\t  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Output a short LSB first on the stream.\n\t * IN assertion: there is enough room in pendingBuf.\n\t */\n\tfunction put_short (s, w) {\n\t//    put_byte(s, (uch)((w) & 0xff));\n\t//    put_byte(s, (uch)((ush)(w) >> 8));\n\t  s.pending_buf[s.pending++] = (w) & 0xff;\n\t  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send a value on a given number of bits.\n\t * IN assertion: length <= 16 and value fits in length bits.\n\t */\n\tfunction send_bits(s, value, length) {\n\t  if (s.bi_valid > (Buf_size - length)) {\n\t    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n\t    put_short(s, s.bi_buf);\n\t    s.bi_buf = value >> (Buf_size - s.bi_valid);\n\t    s.bi_valid += length - Buf_size;\n\t  } else {\n\t    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n\t    s.bi_valid += length;\n\t  }\n\t}\n\t\n\t\n\tfunction send_code(s, c, tree) {\n\t  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Reverse the first len bits of a code, using straightforward code (a faster\n\t * method would use a table)\n\t * IN assertion: 1 <= len <= 15\n\t */\n\tfunction bi_reverse(code, len) {\n\t  var res = 0;\n\t  do {\n\t    res |= code & 1;\n\t    code >>>= 1;\n\t    res <<= 1;\n\t  } while (--len > 0);\n\t  return res >>> 1;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Flush the bit buffer, keeping at most 7 bits in it.\n\t */\n\tfunction bi_flush(s) {\n\t  if (s.bi_valid === 16) {\n\t    put_short(s, s.bi_buf);\n\t    s.bi_buf = 0;\n\t    s.bi_valid = 0;\n\t\n\t  } else if (s.bi_valid >= 8) {\n\t    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n\t    s.bi_buf >>= 8;\n\t    s.bi_valid -= 8;\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Compute the optimal bit lengths for a tree and update the total bit length\n\t * for the current block.\n\t * IN assertion: the fields freq and dad are set, heap[heap_max] and\n\t *    above are the tree nodes sorted by increasing frequency.\n\t * OUT assertions: the field len is set to the optimal bit length, the\n\t *     array bl_count contains the frequencies for each bit length.\n\t *     The length opt_len is updated; static_len is also updated if stree is\n\t *     not null.\n\t */\n\tfunction gen_bitlen(s, desc)\n\t//    deflate_state *s;\n\t//    tree_desc *desc;    /* the tree descriptor */\n\t{\n\t  var tree            = desc.dyn_tree;\n\t  var max_code        = desc.max_code;\n\t  var stree           = desc.stat_desc.static_tree;\n\t  var has_stree       = desc.stat_desc.has_stree;\n\t  var extra           = desc.stat_desc.extra_bits;\n\t  var base            = desc.stat_desc.extra_base;\n\t  var max_length      = desc.stat_desc.max_length;\n\t  var h;              /* heap index */\n\t  var n, m;           /* iterate over the tree elements */\n\t  var bits;           /* bit length */\n\t  var xbits;          /* extra bits */\n\t  var f;              /* frequency */\n\t  var overflow = 0;   /* number of elements with bit length too large */\n\t\n\t  for (bits = 0; bits <= MAX_BITS; bits++) {\n\t    s.bl_count[bits] = 0;\n\t  }\n\t\n\t  /* In a first pass, compute the optimal bit lengths (which may\n\t   * overflow in the case of the bit length tree).\n\t   */\n\t  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */\n\t\n\t  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {\n\t    n = s.heap[h];\n\t    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n\t    if (bits > max_length) {\n\t      bits = max_length;\n\t      overflow++;\n\t    }\n\t    tree[n*2 + 1]/*.Len*/ = bits;\n\t    /* We overwrite tree[n].Dad which is no longer needed */\n\t\n\t    if (n > max_code) { continue; } /* not a leaf node */\n\t\n\t    s.bl_count[bits]++;\n\t    xbits = 0;\n\t    if (n >= base) {\n\t      xbits = extra[n-base];\n\t    }\n\t    f = tree[n * 2]/*.Freq*/;\n\t    s.opt_len += f * (bits + xbits);\n\t    if (has_stree) {\n\t      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);\n\t    }\n\t  }\n\t  if (overflow === 0) { return; }\n\t\n\t  // Trace((stderr,\"\\nbit length overflow\\n\"));\n\t  /* This happens for example on obj2 and pic of the Calgary corpus */\n\t\n\t  /* Find the first bit length which could increase: */\n\t  do {\n\t    bits = max_length-1;\n\t    while (s.bl_count[bits] === 0) { bits--; }\n\t    s.bl_count[bits]--;      /* move one leaf down the tree */\n\t    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */\n\t    s.bl_count[max_length]--;\n\t    /* The brother of the overflow item also moves one step up,\n\t     * but this does not affect bl_count[max_length]\n\t     */\n\t    overflow -= 2;\n\t  } while (overflow > 0);\n\t\n\t  /* Now recompute all bit lengths, scanning in increasing frequency.\n\t   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n\t   * lengths instead of fixing only the wrong ones. This idea is taken\n\t   * from 'ar' written by Haruhiko Okumura.)\n\t   */\n\t  for (bits = max_length; bits !== 0; bits--) {\n\t    n = s.bl_count[bits];\n\t    while (n !== 0) {\n\t      m = s.heap[--h];\n\t      if (m > max_code) { continue; }\n\t      if (tree[m*2 + 1]/*.Len*/ !== bits) {\n\t        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n\t        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;\n\t        tree[m*2 + 1]/*.Len*/ = bits;\n\t      }\n\t      n--;\n\t    }\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Generate the codes for a given tree and bit counts (which need not be\n\t * optimal).\n\t * IN assertion: the array bl_count contains the bit length statistics for\n\t * the given tree and the field len is set for all tree elements.\n\t * OUT assertion: the field code is set for all tree elements of non\n\t *     zero code length.\n\t */\n\tfunction gen_codes(tree, max_code, bl_count)\n\t//    ct_data *tree;             /* the tree to decorate */\n\t//    int max_code;              /* largest code with non zero frequency */\n\t//    ushf *bl_count;            /* number of codes at each bit length */\n\t{\n\t  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */\n\t  var code = 0;              /* running code value */\n\t  var bits;                  /* bit index */\n\t  var n;                     /* code index */\n\t\n\t  /* The distribution counts are first used to generate the code values\n\t   * without bit reversal.\n\t   */\n\t  for (bits = 1; bits <= MAX_BITS; bits++) {\n\t    next_code[bits] = code = (code + bl_count[bits-1]) << 1;\n\t  }\n\t  /* Check that the bit counts in bl_count are consistent. The last code\n\t   * must be all ones.\n\t   */\n\t  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n\t  //        \"inconsistent bit counts\");\n\t  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\t\n\t  for (n = 0;  n <= max_code; n++) {\n\t    var len = tree[n*2 + 1]/*.Len*/;\n\t    if (len === 0) { continue; }\n\t    /* Now reverse the bits */\n\t    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\t\n\t    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n\t    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Initialize the various 'constant' tables.\n\t */\n\tfunction tr_static_init() {\n\t  var n;        /* iterates over tree elements */\n\t  var bits;     /* bit counter */\n\t  var length;   /* length value */\n\t  var code;     /* code value */\n\t  var dist;     /* distance index */\n\t  var bl_count = new Array(MAX_BITS+1);\n\t  /* number of codes at each bit length for an optimal tree */\n\t\n\t  // do check in _tr_init()\n\t  //if (static_init_done) return;\n\t\n\t  /* For some embedded targets, global variables are not initialized: */\n\t/*#ifdef NO_INIT_GLOBAL_POINTERS\n\t  static_l_desc.static_tree = static_ltree;\n\t  static_l_desc.extra_bits = extra_lbits;\n\t  static_d_desc.static_tree = static_dtree;\n\t  static_d_desc.extra_bits = extra_dbits;\n\t  static_bl_desc.extra_bits = extra_blbits;\n\t#endif*/\n\t\n\t  /* Initialize the mapping length (0..255) -> length code (0..28) */\n\t  length = 0;\n\t  for (code = 0; code < LENGTH_CODES-1; code++) {\n\t    base_length[code] = length;\n\t    for (n = 0; n < (1<<extra_lbits[code]); n++) {\n\t      _length_code[length++] = code;\n\t    }\n\t  }\n\t  //Assert (length == 256, \"tr_static_init: length != 256\");\n\t  /* Note that the length 255 (match length 258) can be represented\n\t   * in two different ways: code 284 + 5 bits or code 285, so we\n\t   * overwrite length_code[255] to use the best encoding:\n\t   */\n\t  _length_code[length-1] = code;\n\t\n\t  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n\t  dist = 0;\n\t  for (code = 0 ; code < 16; code++) {\n\t    base_dist[code] = dist;\n\t    for (n = 0; n < (1<<extra_dbits[code]); n++) {\n\t      _dist_code[dist++] = code;\n\t    }\n\t  }\n\t  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n\t  dist >>= 7; /* from now on, all distances are divided by 128 */\n\t  for (; code < D_CODES; code++) {\n\t    base_dist[code] = dist << 7;\n\t    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {\n\t      _dist_code[256 + dist++] = code;\n\t    }\n\t  }\n\t  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\t\n\t  /* Construct the codes of the static literal tree */\n\t  for (bits = 0; bits <= MAX_BITS; bits++) {\n\t    bl_count[bits] = 0;\n\t  }\n\t\n\t  n = 0;\n\t  while (n <= 143) {\n\t    static_ltree[n*2 + 1]/*.Len*/ = 8;\n\t    n++;\n\t    bl_count[8]++;\n\t  }\n\t  while (n <= 255) {\n\t    static_ltree[n*2 + 1]/*.Len*/ = 9;\n\t    n++;\n\t    bl_count[9]++;\n\t  }\n\t  while (n <= 279) {\n\t    static_ltree[n*2 + 1]/*.Len*/ = 7;\n\t    n++;\n\t    bl_count[7]++;\n\t  }\n\t  while (n <= 287) {\n\t    static_ltree[n*2 + 1]/*.Len*/ = 8;\n\t    n++;\n\t    bl_count[8]++;\n\t  }\n\t  /* Codes 286 and 287 do not exist, but we must include them in the\n\t   * tree construction to get a canonical Huffman tree (longest code\n\t   * all ones)\n\t   */\n\t  gen_codes(static_ltree, L_CODES+1, bl_count);\n\t\n\t  /* The static distance tree is trivial: */\n\t  for (n = 0; n < D_CODES; n++) {\n\t    static_dtree[n*2 + 1]/*.Len*/ = 5;\n\t    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);\n\t  }\n\t\n\t  // Now data ready and we can init static trees\n\t  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);\n\t  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n\t  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\t\n\t  //static_init_done = true;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Initialize a new block.\n\t */\n\tfunction init_block(s) {\n\t  var n; /* iterates over tree elements */\n\t\n\t  /* Initialize the trees. */\n\t  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }\n\t  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }\n\t  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }\n\t\n\t  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;\n\t  s.opt_len = s.static_len = 0;\n\t  s.last_lit = s.matches = 0;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Flush the bit buffer and align the output on a byte boundary\n\t */\n\tfunction bi_windup(s)\n\t{\n\t  if (s.bi_valid > 8) {\n\t    put_short(s, s.bi_buf);\n\t  } else if (s.bi_valid > 0) {\n\t    //put_byte(s, (Byte)s->bi_buf);\n\t    s.pending_buf[s.pending++] = s.bi_buf;\n\t  }\n\t  s.bi_buf = 0;\n\t  s.bi_valid = 0;\n\t}\n\t\n\t/* ===========================================================================\n\t * Copy a stored block, storing first the length and its\n\t * one's complement if requested.\n\t */\n\tfunction copy_block(s, buf, len, header)\n\t//DeflateState *s;\n\t//charf    *buf;    /* the input data */\n\t//unsigned len;     /* its length */\n\t//int      header;  /* true if block header must be written */\n\t{\n\t  bi_windup(s);        /* align on byte boundary */\n\t\n\t  if (header) {\n\t    put_short(s, len);\n\t    put_short(s, ~len);\n\t  }\n\t//  while (len--) {\n\t//    put_byte(s, *buf++);\n\t//  }\n\t  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n\t  s.pending += len;\n\t}\n\t\n\t/* ===========================================================================\n\t * Compares to subtrees, using the tree depth as tie breaker when\n\t * the subtrees have equal frequency. This minimizes the worst case length.\n\t */\n\tfunction smaller(tree, n, m, depth) {\n\t  var _n2 = n*2;\n\t  var _m2 = m*2;\n\t  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n\t         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n\t}\n\t\n\t/* ===========================================================================\n\t * Restore the heap property by moving down the tree starting at node k,\n\t * exchanging a node with the smallest of its two sons if necessary, stopping\n\t * when the heap property is re-established (each father smaller than its\n\t * two sons).\n\t */\n\tfunction pqdownheap(s, tree, k)\n\t//    deflate_state *s;\n\t//    ct_data *tree;  /* the tree to restore */\n\t//    int k;               /* node to move down */\n\t{\n\t  var v = s.heap[k];\n\t  var j = k << 1;  /* left son of k */\n\t  while (j <= s.heap_len) {\n\t    /* Set j to the smallest of the two sons: */\n\t    if (j < s.heap_len &&\n\t      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {\n\t      j++;\n\t    }\n\t    /* Exit if v is smaller than both sons */\n\t    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\t\n\t    /* Exchange v with the smallest son */\n\t    s.heap[k] = s.heap[j];\n\t    k = j;\n\t\n\t    /* And continue down the tree, setting j to the left son of k */\n\t    j <<= 1;\n\t  }\n\t  s.heap[k] = v;\n\t}\n\t\n\t\n\t// inlined manually\n\t// var SMALLEST = 1;\n\t\n\t/* ===========================================================================\n\t * Send the block data compressed using the given Huffman trees\n\t */\n\tfunction compress_block(s, ltree, dtree)\n\t//    deflate_state *s;\n\t//    const ct_data *ltree; /* literal tree */\n\t//    const ct_data *dtree; /* distance tree */\n\t{\n\t  var dist;           /* distance of matched string */\n\t  var lc;             /* match length or unmatched char (if dist == 0) */\n\t  var lx = 0;         /* running index in l_buf */\n\t  var code;           /* the code to send */\n\t  var extra;          /* number of extra bits to send */\n\t\n\t  if (s.last_lit !== 0) {\n\t    do {\n\t      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);\n\t      lc = s.pending_buf[s.l_buf + lx];\n\t      lx++;\n\t\n\t      if (dist === 0) {\n\t        send_code(s, lc, ltree); /* send a literal byte */\n\t        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n\t      } else {\n\t        /* Here, lc is the match length - MIN_MATCH */\n\t        code = _length_code[lc];\n\t        send_code(s, code+LITERALS+1, ltree); /* send the length code */\n\t        extra = extra_lbits[code];\n\t        if (extra !== 0) {\n\t          lc -= base_length[code];\n\t          send_bits(s, lc, extra);       /* send the extra length bits */\n\t        }\n\t        dist--; /* dist is now the match distance - 1 */\n\t        code = d_code(dist);\n\t        //Assert (code < D_CODES, \"bad d_code\");\n\t\n\t        send_code(s, code, dtree);       /* send the distance code */\n\t        extra = extra_dbits[code];\n\t        if (extra !== 0) {\n\t          dist -= base_dist[code];\n\t          send_bits(s, dist, extra);   /* send the extra distance bits */\n\t        }\n\t      } /* literal or match pair ? */\n\t\n\t      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n\t      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n\t      //       \"pendingBuf overflow\");\n\t\n\t    } while (lx < s.last_lit);\n\t  }\n\t\n\t  send_code(s, END_BLOCK, ltree);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Construct one Huffman tree and assigns the code bit strings and lengths.\n\t * Update the total bit length for the current block.\n\t * IN assertion: the field freq is set for all tree elements.\n\t * OUT assertions: the fields len and code are set to the optimal bit length\n\t *     and corresponding code. The length opt_len is updated; static_len is\n\t *     also updated if stree is not null. The field max_code is set.\n\t */\n\tfunction build_tree(s, desc)\n\t//    deflate_state *s;\n\t//    tree_desc *desc; /* the tree descriptor */\n\t{\n\t  var tree     = desc.dyn_tree;\n\t  var stree    = desc.stat_desc.static_tree;\n\t  var has_stree = desc.stat_desc.has_stree;\n\t  var elems    = desc.stat_desc.elems;\n\t  var n, m;          /* iterate over heap elements */\n\t  var max_code = -1; /* largest code with non zero frequency */\n\t  var node;          /* new node being created */\n\t\n\t  /* Construct the initial heap, with least frequent element in\n\t   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n\t   * heap[0] is not used.\n\t   */\n\t  s.heap_len = 0;\n\t  s.heap_max = HEAP_SIZE;\n\t\n\t  for (n = 0; n < elems; n++) {\n\t    if (tree[n * 2]/*.Freq*/ !== 0) {\n\t      s.heap[++s.heap_len] = max_code = n;\n\t      s.depth[n] = 0;\n\t\n\t    } else {\n\t      tree[n*2 + 1]/*.Len*/ = 0;\n\t    }\n\t  }\n\t\n\t  /* The pkzip format requires that at least one distance code exists,\n\t   * and that at least one bit should be sent even if there is only one\n\t   * possible code. So to avoid special checks later on we force at least\n\t   * two codes of non zero frequency.\n\t   */\n\t  while (s.heap_len < 2) {\n\t    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n\t    tree[node * 2]/*.Freq*/ = 1;\n\t    s.depth[node] = 0;\n\t    s.opt_len--;\n\t\n\t    if (has_stree) {\n\t      s.static_len -= stree[node*2 + 1]/*.Len*/;\n\t    }\n\t    /* node is 0 or 1 so it does not have extra bits */\n\t  }\n\t  desc.max_code = max_code;\n\t\n\t  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n\t   * establish sub-heaps of increasing lengths:\n\t   */\n\t  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\t\n\t  /* Construct the Huffman tree by repeatedly combining the least two\n\t   * frequent nodes.\n\t   */\n\t  node = elems;              /* next internal node of the tree */\n\t  do {\n\t    //pqremove(s, tree, n);  /* n = node of least frequency */\n\t    /*** pqremove ***/\n\t    n = s.heap[1/*SMALLEST*/];\n\t    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n\t    pqdownheap(s, tree, 1/*SMALLEST*/);\n\t    /***/\n\t\n\t    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\t\n\t    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n\t    s.heap[--s.heap_max] = m;\n\t\n\t    /* Create a new node father of n and m */\n\t    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n\t    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n\t    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;\n\t\n\t    /* and insert the new node in the heap */\n\t    s.heap[1/*SMALLEST*/] = node++;\n\t    pqdownheap(s, tree, 1/*SMALLEST*/);\n\t\n\t  } while (s.heap_len >= 2);\n\t\n\t  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\t\n\t  /* At this point, the fields freq and dad are set. We can now\n\t   * generate the bit lengths.\n\t   */\n\t  gen_bitlen(s, desc);\n\t\n\t  /* The field len is now set, we can generate the bit codes */\n\t  gen_codes(tree, max_code, s.bl_count);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Scan a literal or distance tree to determine the frequencies of the codes\n\t * in the bit length tree.\n\t */\n\tfunction scan_tree(s, tree, max_code)\n\t//    deflate_state *s;\n\t//    ct_data *tree;   /* the tree to be scanned */\n\t//    int max_code;    /* and its largest code of non zero frequency */\n\t{\n\t  var n;                     /* iterates over all tree elements */\n\t  var prevlen = -1;          /* last emitted length */\n\t  var curlen;                /* length of current code */\n\t\n\t  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\t\n\t  var count = 0;             /* repeat count of the current code */\n\t  var max_count = 7;         /* max repeat count */\n\t  var min_count = 4;         /* min repeat count */\n\t\n\t  if (nextlen === 0) {\n\t    max_count = 138;\n\t    min_count = 3;\n\t  }\n\t  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */\n\t\n\t  for (n = 0; n <= max_code; n++) {\n\t    curlen = nextlen;\n\t    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\t\n\t    if (++count < max_count && curlen === nextlen) {\n\t      continue;\n\t\n\t    } else if (count < min_count) {\n\t      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\t\n\t    } else if (curlen !== 0) {\n\t\n\t      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n\t      s.bl_tree[REP_3_6*2]/*.Freq*/++;\n\t\n\t    } else if (count <= 10) {\n\t      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;\n\t\n\t    } else {\n\t      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;\n\t    }\n\t\n\t    count = 0;\n\t    prevlen = curlen;\n\t\n\t    if (nextlen === 0) {\n\t      max_count = 138;\n\t      min_count = 3;\n\t\n\t    } else if (curlen === nextlen) {\n\t      max_count = 6;\n\t      min_count = 3;\n\t\n\t    } else {\n\t      max_count = 7;\n\t      min_count = 4;\n\t    }\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send a literal or distance tree in compressed form, using the codes in\n\t * bl_tree.\n\t */\n\tfunction send_tree(s, tree, max_code)\n\t//    deflate_state *s;\n\t//    ct_data *tree; /* the tree to be scanned */\n\t//    int max_code;       /* and its largest code of non zero frequency */\n\t{\n\t  var n;                     /* iterates over all tree elements */\n\t  var prevlen = -1;          /* last emitted length */\n\t  var curlen;                /* length of current code */\n\t\n\t  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\t\n\t  var count = 0;             /* repeat count of the current code */\n\t  var max_count = 7;         /* max repeat count */\n\t  var min_count = 4;         /* min repeat count */\n\t\n\t  /* tree[max_code+1].Len = -1; */  /* guard already set */\n\t  if (nextlen === 0) {\n\t    max_count = 138;\n\t    min_count = 3;\n\t  }\n\t\n\t  for (n = 0; n <= max_code; n++) {\n\t    curlen = nextlen;\n\t    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\t\n\t    if (++count < max_count && curlen === nextlen) {\n\t      continue;\n\t\n\t    } else if (count < min_count) {\n\t      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\t\n\t    } else if (curlen !== 0) {\n\t      if (curlen !== prevlen) {\n\t        send_code(s, curlen, s.bl_tree);\n\t        count--;\n\t      }\n\t      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n\t      send_code(s, REP_3_6, s.bl_tree);\n\t      send_bits(s, count-3, 2);\n\t\n\t    } else if (count <= 10) {\n\t      send_code(s, REPZ_3_10, s.bl_tree);\n\t      send_bits(s, count-3, 3);\n\t\n\t    } else {\n\t      send_code(s, REPZ_11_138, s.bl_tree);\n\t      send_bits(s, count-11, 7);\n\t    }\n\t\n\t    count = 0;\n\t    prevlen = curlen;\n\t    if (nextlen === 0) {\n\t      max_count = 138;\n\t      min_count = 3;\n\t\n\t    } else if (curlen === nextlen) {\n\t      max_count = 6;\n\t      min_count = 3;\n\t\n\t    } else {\n\t      max_count = 7;\n\t      min_count = 4;\n\t    }\n\t  }\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Construct the Huffman tree for the bit lengths and return the index in\n\t * bl_order of the last bit length code to send.\n\t */\n\tfunction build_bl_tree(s) {\n\t  var max_blindex;  /* index of last bit length code of non zero freq */\n\t\n\t  /* Determine the bit length frequencies for literal and distance trees */\n\t  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n\t  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\t\n\t  /* Build the bit length tree: */\n\t  build_tree(s, s.bl_desc);\n\t  /* opt_len now includes the length of the tree representations, except\n\t   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n\t   */\n\t\n\t  /* Determine the number of bit length codes to send. The pkzip format\n\t   * requires that at least 4 bit length codes be sent. (appnote.txt says\n\t   * 3 but the actual value used is 4.)\n\t   */\n\t  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {\n\t    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {\n\t      break;\n\t    }\n\t  }\n\t  /* Update opt_len to include the bit length tree and counts */\n\t  s.opt_len += 3*(max_blindex+1) + 5+5+4;\n\t  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n\t  //        s->opt_len, s->static_len));\n\t\n\t  return max_blindex;\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send the header for a block using dynamic Huffman trees: the counts, the\n\t * lengths of the bit length codes, the literal tree and the distance tree.\n\t * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n\t */\n\tfunction send_all_trees(s, lcodes, dcodes, blcodes)\n\t//    deflate_state *s;\n\t//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\t{\n\t  var rank;                    /* index in bl_order */\n\t\n\t  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n\t  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n\t  //        \"too many codes\");\n\t  //Tracev((stderr, \"\\nbl counts: \"));\n\t  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */\n\t  send_bits(s, dcodes-1,   5);\n\t  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */\n\t  for (rank = 0; rank < blcodes; rank++) {\n\t    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n\t    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);\n\t  }\n\t  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\t\n\t  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */\n\t  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\t\n\t  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */\n\t  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Check if the data type is TEXT or BINARY, using the following algorithm:\n\t * - TEXT if the two conditions below are satisfied:\n\t *    a) There are no non-portable control characters belonging to the\n\t *       \"black list\" (0..6, 14..25, 28..31).\n\t *    b) There is at least one printable character belonging to the\n\t *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n\t * - BINARY otherwise.\n\t * - The following partially-portable control characters form a\n\t *   \"gray list\" that is ignored in this detection algorithm:\n\t *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n\t * IN assertion: the fields Freq of dyn_ltree are set.\n\t */\n\tfunction detect_data_type(s) {\n\t  /* black_mask is the bit mask of black-listed bytes\n\t   * set bits 0..6, 14..25, and 28..31\n\t   * 0xf3ffc07f = binary 11110011111111111100000001111111\n\t   */\n\t  var black_mask = 0xf3ffc07f;\n\t  var n;\n\t\n\t  /* Check for non-textual (\"black-listed\") bytes. */\n\t  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n\t    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {\n\t      return Z_BINARY;\n\t    }\n\t  }\n\t\n\t  /* Check for textual (\"white-listed\") bytes. */\n\t  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n\t      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n\t    return Z_TEXT;\n\t  }\n\t  for (n = 32; n < LITERALS; n++) {\n\t    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n\t      return Z_TEXT;\n\t    }\n\t  }\n\t\n\t  /* There are no \"black-listed\" or \"white-listed\" bytes:\n\t   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n\t   */\n\t  return Z_BINARY;\n\t}\n\t\n\t\n\tvar static_init_done = false;\n\t\n\t/* ===========================================================================\n\t * Initialize the tree data structures for a new zlib stream.\n\t */\n\tfunction _tr_init(s)\n\t{\n\t\n\t  if (!static_init_done) {\n\t    tr_static_init();\n\t    static_init_done = true;\n\t  }\n\t\n\t  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n\t  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n\t  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\t\n\t  s.bi_buf = 0;\n\t  s.bi_valid = 0;\n\t\n\t  /* Initialize the first block of the first file: */\n\t  init_block(s);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send a stored block\n\t */\n\tfunction _tr_stored_block(s, buf, stored_len, last)\n\t//DeflateState *s;\n\t//charf *buf;       /* input block */\n\t//ulg stored_len;   /* length of input block */\n\t//int last;         /* one if this is the last block for a file */\n\t{\n\t  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */\n\t  copy_block(s, buf, stored_len, true); /* with header */\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Send one empty static block to give enough lookahead for inflate.\n\t * This takes 10 bits, of which 7 may remain in the bit buffer.\n\t */\n\tfunction _tr_align(s) {\n\t  send_bits(s, STATIC_TREES<<1, 3);\n\t  send_code(s, END_BLOCK, static_ltree);\n\t  bi_flush(s);\n\t}\n\t\n\t\n\t/* ===========================================================================\n\t * Determine the best encoding for the current block: dynamic trees, static\n\t * trees or store, and output the encoded block to the zip file.\n\t */\n\tfunction _tr_flush_block(s, buf, stored_len, last)\n\t//DeflateState *s;\n\t//charf *buf;       /* input block, or NULL if too old */\n\t//ulg stored_len;   /* length of input block */\n\t//int last;         /* one if this is the last block for a file */\n\t{\n\t  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n\t  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\t\n\t  /* Build the Huffman trees unless a stored block is forced */\n\t  if (s.level > 0) {\n\t\n\t    /* Check if the file is binary or text */\n\t    if (s.strm.data_type === Z_UNKNOWN) {\n\t      s.strm.data_type = detect_data_type(s);\n\t    }\n\t\n\t    /* Construct the literal and distance trees */\n\t    build_tree(s, s.l_desc);\n\t    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n\t    //        s->static_len));\n\t\n\t    build_tree(s, s.d_desc);\n\t    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n\t    //        s->static_len));\n\t    /* At this point, opt_len and static_len are the total bit lengths of\n\t     * the compressed block data, excluding the tree representations.\n\t     */\n\t\n\t    /* Build the bit length tree for the above two trees, and get the index\n\t     * in bl_order of the last bit length code to send.\n\t     */\n\t    max_blindex = build_bl_tree(s);\n\t\n\t    /* Determine the best encoding. Compute the block lengths in bytes. */\n\t    opt_lenb = (s.opt_len+3+7) >>> 3;\n\t    static_lenb = (s.static_len+3+7) >>> 3;\n\t\n\t    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n\t    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n\t    //        s->last_lit));\n\t\n\t    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\t\n\t  } else {\n\t    // Assert(buf != (char*)0, \"lost buf\");\n\t    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n\t  }\n\t\n\t  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {\n\t    /* 4: two words for the lengths */\n\t\n\t    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n\t     * Otherwise we can't have processed more than WSIZE input bytes since\n\t     * the last block flush, because compression would have been\n\t     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n\t     * transform a block into a stored block.\n\t     */\n\t    _tr_stored_block(s, buf, stored_len, last);\n\t\n\t  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\t\n\t    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);\n\t    compress_block(s, static_ltree, static_dtree);\n\t\n\t  } else {\n\t    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);\n\t    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);\n\t    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n\t  }\n\t  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n\t  /* The above check is made mod 2^32, for files larger than 512 MB\n\t   * and uLong implemented on 32 bits.\n\t   */\n\t  init_block(s);\n\t\n\t  if (last) {\n\t    bi_windup(s);\n\t  }\n\t  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n\t  //       s->compressed_len-7*last));\n\t}\n\t\n\t/* ===========================================================================\n\t * Save the match info and tally the frequency counts. Return true if\n\t * the current block must be flushed.\n\t */\n\tfunction _tr_tally(s, dist, lc)\n\t//    deflate_state *s;\n\t//    unsigned dist;  /* distance of matched string */\n\t//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\t{\n\t  //var out_length, in_length, dcode;\n\t\n\t  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n\t  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\t\n\t  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n\t  s.last_lit++;\n\t\n\t  if (dist === 0) {\n\t    /* lc is the unmatched char */\n\t    s.dyn_ltree[lc*2]/*.Freq*/++;\n\t  } else {\n\t    s.matches++;\n\t    /* Here, lc is the match length - MIN_MATCH */\n\t    dist--;             /* dist = match distance - 1 */\n\t    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n\t    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n\t    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\t\n\t    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;\n\t    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n\t  }\n\t\n\t// (!) This block is disabled in zlib defailts,\n\t// don't enable it for binary compatibility\n\t\n\t//#ifdef TRUNCATE_BLOCK\n\t//  /* Try to guess if it is profitable to stop the current block here */\n\t//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n\t//    /* Compute an upper bound for the compressed length */\n\t//    out_length = s.last_lit*8;\n\t//    in_length = s.strstart - s.block_start;\n\t//\n\t//    for (dcode = 0; dcode < D_CODES; dcode++) {\n\t//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n\t//    }\n\t//    out_length >>>= 3;\n\t//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n\t//    //       s->last_lit, in_length, out_length,\n\t//    //       100L - out_length*100L/in_length));\n\t//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n\t//      return true;\n\t//    }\n\t//  }\n\t//#endif\n\t\n\t  return (s.last_lit === s.lit_bufsize-1);\n\t  /* We avoid equality with lit_bufsize because of wraparound at 64K\n\t   * on 16 bit machines and because stored blocks are restricted to\n\t   * 64K-1 bytes.\n\t   */\n\t}\n\t\n\texports._tr_init  = _tr_init;\n\texports._tr_stored_block = _tr_stored_block;\n\texports._tr_flush_block  = _tr_flush_block;\n\texports._tr_tally = _tr_tally;\n\texports._tr_align = _tr_align;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// Note: adler32 takes 12% for level 0 and 2% for level 6.\n\t// It doesn't worth to make additional optimizationa as in original.\n\t// Small size is preferable.\n\t\n\tfunction adler32(adler, buf, len, pos) {\n\t  var s1 = (adler & 0xffff) |0,\n\t      s2 = ((adler >>> 16) & 0xffff) |0,\n\t      n = 0;\n\t\n\t  while (len !== 0) {\n\t    // Set limit ~ twice less than 5552, to keep\n\t    // s2 in 31-bits, because we force signed ints.\n\t    // in other case %= will fail.\n\t    n = len > 2000 ? 2000 : len;\n\t    len -= n;\n\t\n\t    do {\n\t      s1 = (s1 + buf[pos++]) |0;\n\t      s2 = (s2 + s1) |0;\n\t    } while (--n);\n\t\n\t    s1 %= 65521;\n\t    s2 %= 65521;\n\t  }\n\t\n\t  return (s1 | (s2 << 16)) |0;\n\t}\n\t\n\t\n\tmodule.exports = adler32;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// Note: we can't get significant speed boost here.\n\t// So write code to minimize size - no pregenerated tables\n\t// and array tools dependencies.\n\t\n\t\n\t// Use ordinary array, since untyped makes no boost here\n\tfunction makeTable() {\n\t  var c, table = [];\n\t\n\t  for (var n =0; n < 256; n++) {\n\t    c = n;\n\t    for (var k =0; k < 8; k++) {\n\t      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n\t    }\n\t    table[n] = c;\n\t  }\n\t\n\t  return table;\n\t}\n\t\n\t// Create table on load. Just 255 signed longs. Not a problem.\n\tvar crcTable = makeTable();\n\t\n\t\n\tfunction crc32(crc, buf, len, pos) {\n\t  var t = crcTable,\n\t      end = pos + len;\n\t\n\t  crc = crc ^ (-1);\n\t\n\t  for (var i = pos; i < end; i++) {\n\t    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n\t  }\n\t\n\t  return (crc ^ (-1)); // >>> 0;\n\t}\n\t\n\t\n\tmodule.exports = crc32;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  '2':    'need dictionary',     /* Z_NEED_DICT       2  */\n\t  '1':    'stream end',          /* Z_STREAM_END      1  */\n\t  '0':    '',                    /* Z_OK              0  */\n\t  '-1':   'file error',          /* Z_ERRNO         (-1) */\n\t  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n\t  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n\t  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n\t  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n\t  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n\t};\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// String encode/decode helpers\n\t'use strict';\n\t\n\t\n\tvar utils = __webpack_require__(14);\n\t\n\t\n\t// Quick check if we can use fast array to bin string conversion\n\t//\n\t// - apply(Array) can fail on Android 2.2\n\t// - apply(Uint8Array) can fail on iOS 5.1 Safary\n\t//\n\tvar STR_APPLY_OK = true;\n\tvar STR_APPLY_UIA_OK = true;\n\t\n\ttry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\n\ttry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\t\n\t\n\t// Table with utf8 lengths (calculated by first byte of sequence)\n\t// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n\t// because max possible codepoint is 0x10ffff\n\tvar _utf8len = new utils.Buf8(256);\n\tfor (var q=0; q<256; q++) {\n\t  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n\t}\n\t_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\t\n\t\n\t// convert string to array (typed, when possible)\n\texports.string2buf = function (str) {\n\t  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\t\n\t  // count binary size\n\t  for (m_pos = 0; m_pos < str_len; m_pos++) {\n\t    c = str.charCodeAt(m_pos);\n\t    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n\t      c2 = str.charCodeAt(m_pos+1);\n\t      if ((c2 & 0xfc00) === 0xdc00) {\n\t        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n\t        m_pos++;\n\t      }\n\t    }\n\t    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n\t  }\n\t\n\t  // allocate buffer\n\t  buf = new utils.Buf8(buf_len);\n\t\n\t  // convert\n\t  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n\t    c = str.charCodeAt(m_pos);\n\t    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n\t      c2 = str.charCodeAt(m_pos+1);\n\t      if ((c2 & 0xfc00) === 0xdc00) {\n\t        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n\t        m_pos++;\n\t      }\n\t    }\n\t    if (c < 0x80) {\n\t      /* one byte */\n\t      buf[i++] = c;\n\t    } else if (c < 0x800) {\n\t      /* two bytes */\n\t      buf[i++] = 0xC0 | (c >>> 6);\n\t      buf[i++] = 0x80 | (c & 0x3f);\n\t    } else if (c < 0x10000) {\n\t      /* three bytes */\n\t      buf[i++] = 0xE0 | (c >>> 12);\n\t      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n\t      buf[i++] = 0x80 | (c & 0x3f);\n\t    } else {\n\t      /* four bytes */\n\t      buf[i++] = 0xf0 | (c >>> 18);\n\t      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n\t      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n\t      buf[i++] = 0x80 | (c & 0x3f);\n\t    }\n\t  }\n\t\n\t  return buf;\n\t};\n\t\n\t// Helper (used in 2 places)\n\tfunction buf2binstring(buf, len) {\n\t  // use fallback for big arrays to avoid stack overflow\n\t  if (len < 65537) {\n\t    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n\t      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n\t    }\n\t  }\n\t\n\t  var result = '';\n\t  for (var i=0; i < len; i++) {\n\t    result += String.fromCharCode(buf[i]);\n\t  }\n\t  return result;\n\t}\n\t\n\t\n\t// Convert byte array to binary string\n\texports.buf2binstring = function(buf) {\n\t  return buf2binstring(buf, buf.length);\n\t};\n\t\n\t\n\t// Convert binary string (typed, when possible)\n\texports.binstring2buf = function(str) {\n\t  var buf = new utils.Buf8(str.length);\n\t  for (var i=0, len=buf.length; i < len; i++) {\n\t    buf[i] = str.charCodeAt(i);\n\t  }\n\t  return buf;\n\t};\n\t\n\t\n\t// convert array to string\n\texports.buf2string = function (buf, max) {\n\t  var i, out, c, c_len;\n\t  var len = max || buf.length;\n\t\n\t  // Reserve max possible length (2 words per char)\n\t  // NB: by unknown reasons, Array is significantly faster for\n\t  //     String.fromCharCode.apply than Uint16Array.\n\t  var utf16buf = new Array(len*2);\n\t\n\t  for (out=0, i=0; i<len;) {\n\t    c = buf[i++];\n\t    // quick process ascii\n\t    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\t\n\t    c_len = _utf8len[c];\n\t    // skip 5 & 6 byte codes\n\t    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\t\n\t    // apply mask on first byte\n\t    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n\t    // join the rest\n\t    while (c_len > 1 && i < len) {\n\t      c = (c << 6) | (buf[i++] & 0x3f);\n\t      c_len--;\n\t    }\n\t\n\t    // terminated by end of string?\n\t    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\t\n\t    if (c < 0x10000) {\n\t      utf16buf[out++] = c;\n\t    } else {\n\t      c -= 0x10000;\n\t      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n\t      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n\t    }\n\t  }\n\t\n\t  return buf2binstring(utf16buf, out);\n\t};\n\t\n\t\n\t// Calculate max possible position in utf8 buffer,\n\t// that will not break sequence. If that's not possible\n\t// - (very small limits) return max size as is.\n\t//\n\t// buf[] - utf8 bytes array\n\t// max   - length limit (mandatory);\n\texports.utf8border = function(buf, max) {\n\t  var pos;\n\t\n\t  max = max || buf.length;\n\t  if (max > buf.length) { max = buf.length; }\n\t\n\t  // go back from last position, until start of sequence found\n\t  pos = max-1;\n\t  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\t\n\t  // Fuckup - very small and broken sequence,\n\t  // return max, because we should return something anyway.\n\t  if (pos < 0) { return max; }\n\t\n\t  // If we came to start of buffer - that means vuffer is too small,\n\t  // return max too.\n\t  if (pos === 0) { return max; }\n\t\n\t  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n\t};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\tfunction ZStream() {\n\t  /* next input byte */\n\t  this.input = null; // JS specific, because we have no pointers\n\t  this.next_in = 0;\n\t  /* number of bytes available at input */\n\t  this.avail_in = 0;\n\t  /* total number of input bytes read so far */\n\t  this.total_in = 0;\n\t  /* next output byte should be put there */\n\t  this.output = null; // JS specific, because we have no pointers\n\t  this.next_out = 0;\n\t  /* remaining free space at output */\n\t  this.avail_out = 0;\n\t  /* total number of bytes output so far */\n\t  this.total_out = 0;\n\t  /* last error message, NULL if no error */\n\t  this.msg = ''/*Z_NULL*/;\n\t  /* not visible by applications */\n\t  this.state = null;\n\t  /* best guess about the data type: binary or text */\n\t  this.data_type = 2/*Z_UNKNOWN*/;\n\t  /* adler32 value of the uncompressed data */\n\t  this.adler = 0;\n\t}\n\t\n\tmodule.exports = ZStream;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar zlib_inflate = __webpack_require__(24);\n\tvar utils = __webpack_require__(14);\n\tvar strings = __webpack_require__(21);\n\tvar c = __webpack_require__(27);\n\tvar msg = __webpack_require__(20);\n\tvar zstream = __webpack_require__(22);\n\tvar gzheader = __webpack_require__(28);\n\t\n\tvar toString = Object.prototype.toString;\n\t\n\t/**\n\t * class Inflate\n\t *\n\t * Generic JS-style wrapper for zlib calls. If you don't need\n\t * streaming behaviour - use more simple functions: [[inflate]]\n\t * and [[inflateRaw]].\n\t **/\n\t\n\t/* internal\n\t * inflate.chunks -> Array\n\t *\n\t * Chunks of output data, if [[Inflate#onData]] not overriden.\n\t **/\n\t\n\t/**\n\t * Inflate.result -> Uint8Array|Array|String\n\t *\n\t * Uncompressed result, generated by default [[Inflate#onData]]\n\t * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n\t * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n\t * push a chunk with explicit flush (call [[Inflate#push]] with\n\t * `Z_SYNC_FLUSH` param).\n\t **/\n\t\n\t/**\n\t * Inflate.err -> Number\n\t *\n\t * Error code after inflate finished. 0 (Z_OK) on success.\n\t * Should be checked if broken data possible.\n\t **/\n\t\n\t/**\n\t * Inflate.msg -> String\n\t *\n\t * Error message, if [[Inflate.err]] != 0\n\t **/\n\t\n\t\n\t/**\n\t * new Inflate(options)\n\t * - options (Object): zlib inflate options.\n\t *\n\t * Creates new inflator instance with specified params. Throws exception\n\t * on bad params. Supported options:\n\t *\n\t * - `windowBits`\n\t *\n\t * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n\t * for more information on these.\n\t *\n\t * Additional options, for internal needs:\n\t *\n\t * - `chunkSize` - size of generated data chunks (16K by default)\n\t * - `raw` (Boolean) - do raw inflate\n\t * - `to` (String) - if equal to 'string', then result will be converted\n\t *   from utf8 to utf16 (javascript) string. When string output requested,\n\t *   chunk length can differ from `chunkSize`, depending on content.\n\t *\n\t * By default, when no options set, autodetect deflate/gzip data format via\n\t * wrapper header.\n\t *\n\t * ##### Example:\n\t *\n\t * ```javascript\n\t * var pako = require('pako')\n\t *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n\t *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n\t *\n\t * var inflate = new pako.Inflate({ level: 3});\n\t *\n\t * inflate.push(chunk1, false);\n\t * inflate.push(chunk2, true);  // true -> last chunk\n\t *\n\t * if (inflate.err) { throw new Error(inflate.err); }\n\t *\n\t * console.log(inflate.result);\n\t * ```\n\t **/\n\tvar Inflate = function(options) {\n\t\n\t  this.options = utils.assign({\n\t    chunkSize: 16384,\n\t    windowBits: 0,\n\t    to: ''\n\t  }, options || {});\n\t\n\t  var opt = this.options;\n\t\n\t  // Force window size for `raw` data, if not set directly,\n\t  // because we have no header for autodetect.\n\t  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n\t    opt.windowBits = -opt.windowBits;\n\t    if (opt.windowBits === 0) { opt.windowBits = -15; }\n\t  }\n\t\n\t  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n\t  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n\t      !(options && options.windowBits)) {\n\t    opt.windowBits += 32;\n\t  }\n\t\n\t  // Gzip header has no info about windows size, we can do autodetect only\n\t  // for deflate. So, if window size not set, force it to max when gzip possible\n\t  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n\t    // bit 3 (16) -> gzipped data\n\t    // bit 4 (32) -> autodetect gzip/deflate\n\t    if ((opt.windowBits & 15) === 0) {\n\t      opt.windowBits |= 15;\n\t    }\n\t  }\n\t\n\t  this.err    = 0;      // error code, if happens (0 = Z_OK)\n\t  this.msg    = '';     // error message\n\t  this.ended  = false;  // used to avoid multiple onEnd() calls\n\t  this.chunks = [];     // chunks of compressed data\n\t\n\t  this.strm   = new zstream();\n\t  this.strm.avail_out = 0;\n\t\n\t  var status  = zlib_inflate.inflateInit2(\n\t    this.strm,\n\t    opt.windowBits\n\t  );\n\t\n\t  if (status !== c.Z_OK) {\n\t    throw new Error(msg[status]);\n\t  }\n\t\n\t  this.header = new gzheader();\n\t\n\t  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\t};\n\t\n\t/**\n\t * Inflate#push(data[, mode]) -> Boolean\n\t * - data (Uint8Array|Array|ArrayBuffer|String): input data\n\t * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n\t *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n\t *\n\t * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n\t * new output chunks. Returns `true` on success. The last data block must have\n\t * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n\t * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n\t * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n\t *\n\t * On fail call [[Inflate#onEnd]] with error code and return false.\n\t *\n\t * We strongly recommend to use `Uint8Array` on input for best speed (output\n\t * format is detected automatically). Also, don't skip last param and always\n\t * use the same type in your code (boolean or number). That will improve JS speed.\n\t *\n\t * For regular `Array`-s make sure all elements are [0..255].\n\t *\n\t * ##### Example\n\t *\n\t * ```javascript\n\t * push(chunk, false); // push one of data chunks\n\t * ...\n\t * push(chunk, true);  // push last chunk\n\t * ```\n\t **/\n\tInflate.prototype.push = function(data, mode) {\n\t  var strm = this.strm;\n\t  var chunkSize = this.options.chunkSize;\n\t  var status, _mode;\n\t  var next_out_utf8, tail, utf8str;\n\t\n\t  if (this.ended) { return false; }\n\t  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\t\n\t  // Convert data if needed\n\t  if (typeof data === 'string') {\n\t    // Only binary strings can be decompressed on practice\n\t    strm.input = strings.binstring2buf(data);\n\t  } else if (toString.call(data) === '[object ArrayBuffer]') {\n\t    strm.input = new Uint8Array(data);\n\t  } else {\n\t    strm.input = data;\n\t  }\n\t\n\t  strm.next_in = 0;\n\t  strm.avail_in = strm.input.length;\n\t\n\t  do {\n\t    if (strm.avail_out === 0) {\n\t      strm.output = new utils.Buf8(chunkSize);\n\t      strm.next_out = 0;\n\t      strm.avail_out = chunkSize;\n\t    }\n\t\n\t    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\t\n\t    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n\t      this.onEnd(status);\n\t      this.ended = true;\n\t      return false;\n\t    }\n\t\n\t    if (strm.next_out) {\n\t      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\t\n\t        if (this.options.to === 'string') {\n\t\n\t          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\t\n\t          tail = strm.next_out - next_out_utf8;\n\t          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\t\n\t          // move tail\n\t          strm.next_out = tail;\n\t          strm.avail_out = chunkSize - tail;\n\t          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\t\n\t          this.onData(utf8str);\n\t\n\t        } else {\n\t          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n\t        }\n\t      }\n\t    }\n\t  } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);\n\t\n\t  if (status === c.Z_STREAM_END) {\n\t    _mode = c.Z_FINISH;\n\t  }\n\t\n\t  // Finalize on the last chunk.\n\t  if (_mode === c.Z_FINISH) {\n\t    status = zlib_inflate.inflateEnd(this.strm);\n\t    this.onEnd(status);\n\t    this.ended = true;\n\t    return status === c.Z_OK;\n\t  }\n\t\n\t  // callback interim results if Z_SYNC_FLUSH.\n\t  if (_mode === c.Z_SYNC_FLUSH) {\n\t    this.onEnd(c.Z_OK);\n\t    strm.avail_out = 0;\n\t    return true;\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\t\n\t/**\n\t * Inflate#onData(chunk) -> Void\n\t * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n\t *   on js engine support. When string output requested, each chunk\n\t *   will be string.\n\t *\n\t * By default, stores data blocks in `chunks[]` property and glue\n\t * those in `onEnd`. Override this handler, if you need another behaviour.\n\t **/\n\tInflate.prototype.onData = function(chunk) {\n\t  this.chunks.push(chunk);\n\t};\n\t\n\t\n\t/**\n\t * Inflate#onEnd(status) -> Void\n\t * - status (Number): inflate status. 0 (Z_OK) on success,\n\t *   other if not.\n\t *\n\t * Called either after you tell inflate that the input stream is\n\t * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n\t * or if an error happened. By default - join collected chunks,\n\t * free memory and fill `results` / `err` properties.\n\t **/\n\tInflate.prototype.onEnd = function(status) {\n\t  // On success - join\n\t  if (status === c.Z_OK) {\n\t    if (this.options.to === 'string') {\n\t      // Glue & convert here, until we teach pako to send\n\t      // utf8 alligned strings to onData\n\t      this.result = this.chunks.join('');\n\t    } else {\n\t      this.result = utils.flattenChunks(this.chunks);\n\t    }\n\t  }\n\t  this.chunks = [];\n\t  this.err = status;\n\t  this.msg = this.strm.msg;\n\t};\n\t\n\t\n\t/**\n\t * inflate(data[, options]) -> Uint8Array|Array|String\n\t * - data (Uint8Array|Array|String): input data to decompress.\n\t * - options (Object): zlib inflate options.\n\t *\n\t * Decompress `data` with inflate/ungzip and `options`. Autodetect\n\t * format via wrapper header by default. That's why we don't provide\n\t * separate `ungzip` method.\n\t *\n\t * Supported options are:\n\t *\n\t * - windowBits\n\t *\n\t * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n\t * for more information.\n\t *\n\t * Sugar (options):\n\t *\n\t * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n\t *   negative windowBits implicitly.\n\t * - `to` (String) - if equal to 'string', then result will be converted\n\t *   from utf8 to utf16 (javascript) string. When string output requested,\n\t *   chunk length can differ from `chunkSize`, depending on content.\n\t *\n\t *\n\t * ##### Example:\n\t *\n\t * ```javascript\n\t * var pako = require('pako')\n\t *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n\t *   , output;\n\t *\n\t * try {\n\t *   output = pako.inflate(input);\n\t * } catch (err)\n\t *   console.log(err);\n\t * }\n\t * ```\n\t **/\n\tfunction inflate(input, options) {\n\t  var inflator = new Inflate(options);\n\t\n\t  inflator.push(input, true);\n\t\n\t  // That will never happens, if you don't cheat with options :)\n\t  if (inflator.err) { throw inflator.msg; }\n\t\n\t  return inflator.result;\n\t}\n\t\n\t\n\t/**\n\t * inflateRaw(data[, options]) -> Uint8Array|Array|String\n\t * - data (Uint8Array|Array|String): input data to decompress.\n\t * - options (Object): zlib inflate options.\n\t *\n\t * The same as [[inflate]], but creates raw data, without wrapper\n\t * (header and adler32 crc).\n\t **/\n\tfunction inflateRaw(input, options) {\n\t  options = options || {};\n\t  options.raw = true;\n\t  return inflate(input, options);\n\t}\n\t\n\t\n\t/**\n\t * ungzip(data[, options]) -> Uint8Array|Array|String\n\t * - data (Uint8Array|Array|String): input data to decompress.\n\t * - options (Object): zlib inflate options.\n\t *\n\t * Just shortcut to [[inflate]], because it autodetects format\n\t * by header.content. Done for convenience.\n\t **/\n\t\n\t\n\texports.Inflate = Inflate;\n\texports.inflate = inflate;\n\texports.inflateRaw = inflateRaw;\n\texports.ungzip  = inflate;\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar utils = __webpack_require__(14);\n\tvar adler32 = __webpack_require__(18);\n\tvar crc32   = __webpack_require__(19);\n\tvar inflate_fast = __webpack_require__(25);\n\tvar inflate_table = __webpack_require__(26);\n\t\n\tvar CODES = 0;\n\tvar LENS = 1;\n\tvar DISTS = 2;\n\t\n\t/* Public constants ==========================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\t/* Allowed flush values; see deflate() and inflate() below for details */\n\t//var Z_NO_FLUSH      = 0;\n\t//var Z_PARTIAL_FLUSH = 1;\n\t//var Z_SYNC_FLUSH    = 2;\n\t//var Z_FULL_FLUSH    = 3;\n\tvar Z_FINISH        = 4;\n\tvar Z_BLOCK         = 5;\n\tvar Z_TREES         = 6;\n\t\n\t\n\t/* Return codes for the compression/decompression functions. Negative values\n\t * are errors, positive values are used for special but normal events.\n\t */\n\tvar Z_OK            = 0;\n\tvar Z_STREAM_END    = 1;\n\tvar Z_NEED_DICT     = 2;\n\t//var Z_ERRNO         = -1;\n\tvar Z_STREAM_ERROR  = -2;\n\tvar Z_DATA_ERROR    = -3;\n\tvar Z_MEM_ERROR     = -4;\n\tvar Z_BUF_ERROR     = -5;\n\t//var Z_VERSION_ERROR = -6;\n\t\n\t/* The deflate compression method */\n\tvar Z_DEFLATED  = 8;\n\t\n\t\n\t/* STATES ====================================================================*/\n\t/* ===========================================================================*/\n\t\n\t\n\tvar    HEAD = 1;       /* i: waiting for magic header */\n\tvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\n\tvar    TIME = 3;       /* i: waiting for modification time (gzip) */\n\tvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\n\tvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\n\tvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\n\tvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\n\tvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\n\tvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\n\tvar    DICTID = 10;    /* i: waiting for dictionary check value */\n\tvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\n\tvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\tvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\n\tvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\n\tvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\n\tvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\n\tvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\n\tvar        LENLENS = 18;   /* i: waiting for code length code lengths */\n\tvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\n\tvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\n\tvar            LEN = 21;       /* i: waiting for length/lit/eob code */\n\tvar            LENEXT = 22;    /* i: waiting for length extra bits */\n\tvar            DIST = 23;      /* i: waiting for distance code */\n\tvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\n\tvar            MATCH = 25;     /* o: waiting for output space to copy string */\n\tvar            LIT = 26;       /* o: waiting for output space to write literal */\n\tvar    CHECK = 27;     /* i: waiting for 32-bit check value */\n\tvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\n\tvar    DONE = 29;      /* finished check, done -- remain here until reset */\n\tvar    BAD = 30;       /* got a data error -- remain here until reset */\n\tvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\n\tvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\t\n\t/* ===========================================================================*/\n\t\n\t\n\t\n\tvar ENOUGH_LENS = 852;\n\tvar ENOUGH_DISTS = 592;\n\t//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\t\n\tvar MAX_WBITS = 15;\n\t/* 32K LZ77 window */\n\tvar DEF_WBITS = MAX_WBITS;\n\t\n\t\n\tfunction ZSWAP32(q) {\n\t  return  (((q >>> 24) & 0xff) +\n\t          ((q >>> 8) & 0xff00) +\n\t          ((q & 0xff00) << 8) +\n\t          ((q & 0xff) << 24));\n\t}\n\t\n\t\n\tfunction InflateState() {\n\t  this.mode = 0;             /* current inflate mode */\n\t  this.last = false;          /* true if processing last block */\n\t  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n\t  this.havedict = false;      /* true if dictionary provided */\n\t  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n\t  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n\t  this.check = 0;             /* protected copy of check value */\n\t  this.total = 0;             /* protected copy of output count */\n\t  // TODO: may be {}\n\t  this.head = null;           /* where to save gzip header information */\n\t\n\t  /* sliding window */\n\t  this.wbits = 0;             /* log base 2 of requested window size */\n\t  this.wsize = 0;             /* window size or zero if not using window */\n\t  this.whave = 0;             /* valid bytes in the window */\n\t  this.wnext = 0;             /* window write index */\n\t  this.window = null;         /* allocated sliding window, if needed */\n\t\n\t  /* bit accumulator */\n\t  this.hold = 0;              /* input bit accumulator */\n\t  this.bits = 0;              /* number of bits in \"in\" */\n\t\n\t  /* for string and stored block copying */\n\t  this.length = 0;            /* literal or length of data to copy */\n\t  this.offset = 0;            /* distance back to copy string from */\n\t\n\t  /* for table and code decoding */\n\t  this.extra = 0;             /* extra bits needed */\n\t\n\t  /* fixed and dynamic code tables */\n\t  this.lencode = null;          /* starting table for length/literal codes */\n\t  this.distcode = null;         /* starting table for distance codes */\n\t  this.lenbits = 0;           /* index bits for lencode */\n\t  this.distbits = 0;          /* index bits for distcode */\n\t\n\t  /* dynamic table building */\n\t  this.ncode = 0;             /* number of code length code lengths */\n\t  this.nlen = 0;              /* number of length code lengths */\n\t  this.ndist = 0;             /* number of distance code lengths */\n\t  this.have = 0;              /* number of code lengths in lens[] */\n\t  this.next = null;              /* next available space in codes[] */\n\t\n\t  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n\t  this.work = new utils.Buf16(288); /* work area for code table building */\n\t\n\t  /*\n\t   because we don't have pointers in js, we use lencode and distcode directly\n\t   as buffers so we don't need codes\n\t  */\n\t  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n\t  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n\t  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n\t  this.sane = 0;                   /* if false, allow invalid distance too far */\n\t  this.back = 0;                   /* bits back of last unprocessed length/lit */\n\t  this.was = 0;                    /* initial length of match */\n\t}\n\t\n\tfunction inflateResetKeep(strm) {\n\t  var state;\n\t\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t  strm.total_in = strm.total_out = state.total = 0;\n\t  strm.msg = ''; /*Z_NULL*/\n\t  if (state.wrap) {       /* to support ill-conceived Java test suite */\n\t    strm.adler = state.wrap & 1;\n\t  }\n\t  state.mode = HEAD;\n\t  state.last = 0;\n\t  state.havedict = 0;\n\t  state.dmax = 32768;\n\t  state.head = null/*Z_NULL*/;\n\t  state.hold = 0;\n\t  state.bits = 0;\n\t  //state.lencode = state.distcode = state.next = state.codes;\n\t  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n\t  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\t\n\t  state.sane = 1;\n\t  state.back = -1;\n\t  //Tracev((stderr, \"inflate: reset\\n\"));\n\t  return Z_OK;\n\t}\n\t\n\tfunction inflateReset(strm) {\n\t  var state;\n\t\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t  state.wsize = 0;\n\t  state.whave = 0;\n\t  state.wnext = 0;\n\t  return inflateResetKeep(strm);\n\t\n\t}\n\t\n\tfunction inflateReset2(strm, windowBits) {\n\t  var wrap;\n\t  var state;\n\t\n\t  /* get the state */\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t\n\t  /* extract wrap request from windowBits parameter */\n\t  if (windowBits < 0) {\n\t    wrap = 0;\n\t    windowBits = -windowBits;\n\t  }\n\t  else {\n\t    wrap = (windowBits >> 4) + 1;\n\t    if (windowBits < 48) {\n\t      windowBits &= 15;\n\t    }\n\t  }\n\t\n\t  /* set number of window bits, free window if different */\n\t  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t  if (state.window !== null && state.wbits !== windowBits) {\n\t    state.window = null;\n\t  }\n\t\n\t  /* update state and reset the rest of it */\n\t  state.wrap = wrap;\n\t  state.wbits = windowBits;\n\t  return inflateReset(strm);\n\t}\n\t\n\tfunction inflateInit2(strm, windowBits) {\n\t  var ret;\n\t  var state;\n\t\n\t  if (!strm) { return Z_STREAM_ERROR; }\n\t  //strm.msg = Z_NULL;                 /* in case we return an error */\n\t\n\t  state = new InflateState();\n\t\n\t  //if (state === Z_NULL) return Z_MEM_ERROR;\n\t  //Tracev((stderr, \"inflate: allocated\\n\"));\n\t  strm.state = state;\n\t  state.window = null/*Z_NULL*/;\n\t  ret = inflateReset2(strm, windowBits);\n\t  if (ret !== Z_OK) {\n\t    strm.state = null/*Z_NULL*/;\n\t  }\n\t  return ret;\n\t}\n\t\n\tfunction inflateInit(strm) {\n\t  return inflateInit2(strm, DEF_WBITS);\n\t}\n\t\n\t\n\t/*\n\t Return state with length and distance decoding tables and index sizes set to\n\t fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n\t If BUILDFIXED is defined, then instead this routine builds the tables the\n\t first time it's called, and returns those tables the first time and\n\t thereafter.  This reduces the size of the code by about 2K bytes, in\n\t exchange for a little execution time.  However, BUILDFIXED should not be\n\t used for threaded applications, since the rewriting of the tables and virgin\n\t may not be thread-safe.\n\t */\n\tvar virgin = true;\n\t\n\tvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\t\n\tfunction fixedtables(state) {\n\t  /* build fixed huffman tables if first call (may not be thread safe) */\n\t  if (virgin) {\n\t    var sym;\n\t\n\t    lenfix = new utils.Buf32(512);\n\t    distfix = new utils.Buf32(32);\n\t\n\t    /* literal/length table */\n\t    sym = 0;\n\t    while (sym < 144) { state.lens[sym++] = 8; }\n\t    while (sym < 256) { state.lens[sym++] = 9; }\n\t    while (sym < 280) { state.lens[sym++] = 7; }\n\t    while (sym < 288) { state.lens[sym++] = 8; }\n\t\n\t    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});\n\t\n\t    /* distance table */\n\t    sym = 0;\n\t    while (sym < 32) { state.lens[sym++] = 5; }\n\t\n\t    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});\n\t\n\t    /* do this just once */\n\t    virgin = false;\n\t  }\n\t\n\t  state.lencode = lenfix;\n\t  state.lenbits = 9;\n\t  state.distcode = distfix;\n\t  state.distbits = 5;\n\t}\n\t\n\t\n\t/*\n\t Update the window with the last wsize (normally 32K) bytes written before\n\t returning.  If window does not exist yet, create it.  This is only called\n\t when a window is already in use, or when output has been written during this\n\t inflate call, but the end of the deflate stream has not been reached yet.\n\t It is also called to create a window for dictionary data when a dictionary\n\t is loaded.\n\t\n\t Providing output buffers larger than 32K to inflate() should provide a speed\n\t advantage, since only the last 32K of output is copied to the sliding window\n\t upon return from inflate(), and since all distances after the first 32K of\n\t output will fall in the output data, making match copies simpler and faster.\n\t The advantage may be dependent on the size of the processor's data caches.\n\t */\n\tfunction updatewindow(strm, src, end, copy) {\n\t  var dist;\n\t  var state = strm.state;\n\t\n\t  /* if it hasn't been done already, allocate space for the window */\n\t  if (state.window === null) {\n\t    state.wsize = 1 << state.wbits;\n\t    state.wnext = 0;\n\t    state.whave = 0;\n\t\n\t    state.window = new utils.Buf8(state.wsize);\n\t  }\n\t\n\t  /* copy state->wsize or less output bytes into the circular window */\n\t  if (copy >= state.wsize) {\n\t    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);\n\t    state.wnext = 0;\n\t    state.whave = state.wsize;\n\t  }\n\t  else {\n\t    dist = state.wsize - state.wnext;\n\t    if (dist > copy) {\n\t      dist = copy;\n\t    }\n\t    //zmemcpy(state->window + state->wnext, end - copy, dist);\n\t    utils.arraySet(state.window,src, end - copy, dist, state.wnext);\n\t    copy -= dist;\n\t    if (copy) {\n\t      //zmemcpy(state->window, end - copy, copy);\n\t      utils.arraySet(state.window,src, end - copy, copy, 0);\n\t      state.wnext = copy;\n\t      state.whave = state.wsize;\n\t    }\n\t    else {\n\t      state.wnext += dist;\n\t      if (state.wnext === state.wsize) { state.wnext = 0; }\n\t      if (state.whave < state.wsize) { state.whave += dist; }\n\t    }\n\t  }\n\t  return 0;\n\t}\n\t\n\tfunction inflate(strm, flush) {\n\t  var state;\n\t  var input, output;          // input/output buffers\n\t  var next;                   /* next input INDEX */\n\t  var put;                    /* next output INDEX */\n\t  var have, left;             /* available input and output */\n\t  var hold;                   /* bit buffer */\n\t  var bits;                   /* bits in bit buffer */\n\t  var _in, _out;              /* save starting available input and output */\n\t  var copy;                   /* number of stored or match bytes to copy */\n\t  var from;                   /* where to copy match bytes from */\n\t  var from_source;\n\t  var here = 0;               /* current decoding table entry */\n\t  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n\t  //var last;                   /* parent table entry */\n\t  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n\t  var len;                    /* length to copy for repeats, bits to drop */\n\t  var ret;                    /* return code */\n\t  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n\t  var opts;\n\t\n\t  var n; // temporary var for NEED_BITS\n\t\n\t  var order = /* permutation of code lengths */\n\t    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\t\n\t\n\t  if (!strm || !strm.state || !strm.output ||\n\t      (!strm.input && strm.avail_in !== 0)) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  state = strm.state;\n\t  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\t\n\t\n\t  //--- LOAD() ---\n\t  put = strm.next_out;\n\t  output = strm.output;\n\t  left = strm.avail_out;\n\t  next = strm.next_in;\n\t  input = strm.input;\n\t  have = strm.avail_in;\n\t  hold = state.hold;\n\t  bits = state.bits;\n\t  //---\n\t\n\t  _in = have;\n\t  _out = left;\n\t  ret = Z_OK;\n\t\n\t  inf_leave: // goto emulation\n\t  for (;;) {\n\t    switch (state.mode) {\n\t    case HEAD:\n\t      if (state.wrap === 0) {\n\t        state.mode = TYPEDO;\n\t        break;\n\t      }\n\t      //=== NEEDBITS(16);\n\t      while (bits < 16) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n\t        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n\t        //=== CRC2(state.check, hold);\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 2, 0);\n\t        //===//\n\t\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t        state.mode = FLAGS;\n\t        break;\n\t      }\n\t      state.flags = 0;           /* expect zlib header */\n\t      if (state.head) {\n\t        state.head.done = false;\n\t      }\n\t      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n\t        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n\t        strm.msg = 'incorrect header check';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n\t        strm.msg = 'unknown compression method';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      //--- DROPBITS(4) ---//\n\t      hold >>>= 4;\n\t      bits -= 4;\n\t      //---//\n\t      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n\t      if (state.wbits === 0) {\n\t        state.wbits = len;\n\t      }\n\t      else if (len > state.wbits) {\n\t        strm.msg = 'invalid window size';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.dmax = 1 << len;\n\t      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n\t      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n\t      state.mode = hold & 0x200 ? DICTID : TYPE;\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      break;\n\t    case FLAGS:\n\t      //=== NEEDBITS(16); */\n\t      while (bits < 16) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      state.flags = hold;\n\t      if ((state.flags & 0xff) !== Z_DEFLATED) {\n\t        strm.msg = 'unknown compression method';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      if (state.flags & 0xe000) {\n\t        strm.msg = 'unknown header flags set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      if (state.head) {\n\t        state.head.text = ((hold >> 8) & 1);\n\t      }\n\t      if (state.flags & 0x0200) {\n\t        //=== CRC2(state.check, hold);\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 2, 0);\n\t        //===//\n\t      }\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = TIME;\n\t      /* falls through */\n\t    case TIME:\n\t      //=== NEEDBITS(32); */\n\t      while (bits < 32) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if (state.head) {\n\t        state.head.time = hold;\n\t      }\n\t      if (state.flags & 0x0200) {\n\t        //=== CRC4(state.check, hold)\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        hbuf[2] = (hold >>> 16) & 0xff;\n\t        hbuf[3] = (hold >>> 24) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 4, 0);\n\t        //===\n\t      }\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = OS;\n\t      /* falls through */\n\t    case OS:\n\t      //=== NEEDBITS(16); */\n\t      while (bits < 16) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if (state.head) {\n\t        state.head.xflags = (hold & 0xff);\n\t        state.head.os = (hold >> 8);\n\t      }\n\t      if (state.flags & 0x0200) {\n\t        //=== CRC2(state.check, hold);\n\t        hbuf[0] = hold & 0xff;\n\t        hbuf[1] = (hold >>> 8) & 0xff;\n\t        state.check = crc32(state.check, hbuf, 2, 0);\n\t        //===//\n\t      }\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = EXLEN;\n\t      /* falls through */\n\t    case EXLEN:\n\t      if (state.flags & 0x0400) {\n\t        //=== NEEDBITS(16); */\n\t        while (bits < 16) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.length = hold;\n\t        if (state.head) {\n\t          state.head.extra_len = hold;\n\t        }\n\t        if (state.flags & 0x0200) {\n\t          //=== CRC2(state.check, hold);\n\t          hbuf[0] = hold & 0xff;\n\t          hbuf[1] = (hold >>> 8) & 0xff;\n\t          state.check = crc32(state.check, hbuf, 2, 0);\n\t          //===//\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t      }\n\t      else if (state.head) {\n\t        state.head.extra = null/*Z_NULL*/;\n\t      }\n\t      state.mode = EXTRA;\n\t      /* falls through */\n\t    case EXTRA:\n\t      if (state.flags & 0x0400) {\n\t        copy = state.length;\n\t        if (copy > have) { copy = have; }\n\t        if (copy) {\n\t          if (state.head) {\n\t            len = state.head.extra_len - state.length;\n\t            if (!state.head.extra) {\n\t              // Use untyped array for more conveniend processing later\n\t              state.head.extra = new Array(state.head.extra_len);\n\t            }\n\t            utils.arraySet(\n\t              state.head.extra,\n\t              input,\n\t              next,\n\t              // extra field is limited to 65536 bytes\n\t              // - no need for additional size check\n\t              copy,\n\t              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n\t              len\n\t            );\n\t            //zmemcpy(state.head.extra + len, next,\n\t            //        len + copy > state.head.extra_max ?\n\t            //        state.head.extra_max - len : copy);\n\t          }\n\t          if (state.flags & 0x0200) {\n\t            state.check = crc32(state.check, input, copy, next);\n\t          }\n\t          have -= copy;\n\t          next += copy;\n\t          state.length -= copy;\n\t        }\n\t        if (state.length) { break inf_leave; }\n\t      }\n\t      state.length = 0;\n\t      state.mode = NAME;\n\t      /* falls through */\n\t    case NAME:\n\t      if (state.flags & 0x0800) {\n\t        if (have === 0) { break inf_leave; }\n\t        copy = 0;\n\t        do {\n\t          // TODO: 2 or 1 bytes?\n\t          len = input[next + copy++];\n\t          /* use constant limit because in js we should not preallocate memory */\n\t          if (state.head && len &&\n\t              (state.length < 65536 /*state.head.name_max*/)) {\n\t            state.head.name += String.fromCharCode(len);\n\t          }\n\t        } while (len && copy < have);\n\t\n\t        if (state.flags & 0x0200) {\n\t          state.check = crc32(state.check, input, copy, next);\n\t        }\n\t        have -= copy;\n\t        next += copy;\n\t        if (len) { break inf_leave; }\n\t      }\n\t      else if (state.head) {\n\t        state.head.name = null;\n\t      }\n\t      state.length = 0;\n\t      state.mode = COMMENT;\n\t      /* falls through */\n\t    case COMMENT:\n\t      if (state.flags & 0x1000) {\n\t        if (have === 0) { break inf_leave; }\n\t        copy = 0;\n\t        do {\n\t          len = input[next + copy++];\n\t          /* use constant limit because in js we should not preallocate memory */\n\t          if (state.head && len &&\n\t              (state.length < 65536 /*state.head.comm_max*/)) {\n\t            state.head.comment += String.fromCharCode(len);\n\t          }\n\t        } while (len && copy < have);\n\t        if (state.flags & 0x0200) {\n\t          state.check = crc32(state.check, input, copy, next);\n\t        }\n\t        have -= copy;\n\t        next += copy;\n\t        if (len) { break inf_leave; }\n\t      }\n\t      else if (state.head) {\n\t        state.head.comment = null;\n\t      }\n\t      state.mode = HCRC;\n\t      /* falls through */\n\t    case HCRC:\n\t      if (state.flags & 0x0200) {\n\t        //=== NEEDBITS(16); */\n\t        while (bits < 16) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        if (hold !== (state.check & 0xffff)) {\n\t          strm.msg = 'header crc mismatch';\n\t          state.mode = BAD;\n\t          break;\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t      }\n\t      if (state.head) {\n\t        state.head.hcrc = ((state.flags >> 9) & 1);\n\t        state.head.done = true;\n\t      }\n\t      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;\n\t      state.mode = TYPE;\n\t      break;\n\t    case DICTID:\n\t      //=== NEEDBITS(32); */\n\t      while (bits < 32) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      strm.adler = state.check = ZSWAP32(hold);\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = DICT;\n\t      /* falls through */\n\t    case DICT:\n\t      if (state.havedict === 0) {\n\t        //--- RESTORE() ---\n\t        strm.next_out = put;\n\t        strm.avail_out = left;\n\t        strm.next_in = next;\n\t        strm.avail_in = have;\n\t        state.hold = hold;\n\t        state.bits = bits;\n\t        //---\n\t        return Z_NEED_DICT;\n\t      }\n\t      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n\t      state.mode = TYPE;\n\t      /* falls through */\n\t    case TYPE:\n\t      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n\t      /* falls through */\n\t    case TYPEDO:\n\t      if (state.last) {\n\t        //--- BYTEBITS() ---//\n\t        hold >>>= bits & 7;\n\t        bits -= bits & 7;\n\t        //---//\n\t        state.mode = CHECK;\n\t        break;\n\t      }\n\t      //=== NEEDBITS(3); */\n\t      while (bits < 3) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      state.last = (hold & 0x01)/*BITS(1)*/;\n\t      //--- DROPBITS(1) ---//\n\t      hold >>>= 1;\n\t      bits -= 1;\n\t      //---//\n\t\n\t      switch ((hold & 0x03)/*BITS(2)*/) {\n\t      case 0:                             /* stored block */\n\t        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n\t        //        state.last ? \" (last)\" : \"\"));\n\t        state.mode = STORED;\n\t        break;\n\t      case 1:                             /* fixed block */\n\t        fixedtables(state);\n\t        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n\t        //        state.last ? \" (last)\" : \"\"));\n\t        state.mode = LEN_;             /* decode codes */\n\t        if (flush === Z_TREES) {\n\t          //--- DROPBITS(2) ---//\n\t          hold >>>= 2;\n\t          bits -= 2;\n\t          //---//\n\t          break inf_leave;\n\t        }\n\t        break;\n\t      case 2:                             /* dynamic block */\n\t        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n\t        //        state.last ? \" (last)\" : \"\"));\n\t        state.mode = TABLE;\n\t        break;\n\t      case 3:\n\t        strm.msg = 'invalid block type';\n\t        state.mode = BAD;\n\t      }\n\t      //--- DROPBITS(2) ---//\n\t      hold >>>= 2;\n\t      bits -= 2;\n\t      //---//\n\t      break;\n\t    case STORED:\n\t      //--- BYTEBITS() ---// /* go to byte boundary */\n\t      hold >>>= bits & 7;\n\t      bits -= bits & 7;\n\t      //---//\n\t      //=== NEEDBITS(32); */\n\t      while (bits < 32) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n\t        strm.msg = 'invalid stored block lengths';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.length = hold & 0xffff;\n\t      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n\t      //        state.length));\n\t      //=== INITBITS();\n\t      hold = 0;\n\t      bits = 0;\n\t      //===//\n\t      state.mode = COPY_;\n\t      if (flush === Z_TREES) { break inf_leave; }\n\t      /* falls through */\n\t    case COPY_:\n\t      state.mode = COPY;\n\t      /* falls through */\n\t    case COPY:\n\t      copy = state.length;\n\t      if (copy) {\n\t        if (copy > have) { copy = have; }\n\t        if (copy > left) { copy = left; }\n\t        if (copy === 0) { break inf_leave; }\n\t        //--- zmemcpy(put, next, copy); ---\n\t        utils.arraySet(output, input, next, copy, put);\n\t        //---//\n\t        have -= copy;\n\t        next += copy;\n\t        left -= copy;\n\t        put += copy;\n\t        state.length -= copy;\n\t        break;\n\t      }\n\t      //Tracev((stderr, \"inflate:       stored end\\n\"));\n\t      state.mode = TYPE;\n\t      break;\n\t    case TABLE:\n\t      //=== NEEDBITS(14); */\n\t      while (bits < 14) {\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t      }\n\t      //===//\n\t      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n\t      //--- DROPBITS(5) ---//\n\t      hold >>>= 5;\n\t      bits -= 5;\n\t      //---//\n\t      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n\t      //--- DROPBITS(5) ---//\n\t      hold >>>= 5;\n\t      bits -= 5;\n\t      //---//\n\t      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n\t      //--- DROPBITS(4) ---//\n\t      hold >>>= 4;\n\t      bits -= 4;\n\t      //---//\n\t//#ifndef PKZIP_BUG_WORKAROUND\n\t      if (state.nlen > 286 || state.ndist > 30) {\n\t        strm.msg = 'too many length or distance symbols';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t//#endif\n\t      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n\t      state.have = 0;\n\t      state.mode = LENLENS;\n\t      /* falls through */\n\t    case LENLENS:\n\t      while (state.have < state.ncode) {\n\t        //=== NEEDBITS(3);\n\t        while (bits < 3) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n\t        //--- DROPBITS(3) ---//\n\t        hold >>>= 3;\n\t        bits -= 3;\n\t        //---//\n\t      }\n\t      while (state.have < 19) {\n\t        state.lens[order[state.have++]] = 0;\n\t      }\n\t      // We have separate tables & no pointers. 2 commented lines below not needed.\n\t      //state.next = state.codes;\n\t      //state.lencode = state.next;\n\t      // Switch to use dynamic table\n\t      state.lencode = state.lendyn;\n\t      state.lenbits = 7;\n\t\n\t      opts = {bits: state.lenbits};\n\t      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n\t      state.lenbits = opts.bits;\n\t\n\t      if (ret) {\n\t        strm.msg = 'invalid code lengths set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n\t      state.have = 0;\n\t      state.mode = CODELENS;\n\t      /* falls through */\n\t    case CODELENS:\n\t      while (state.have < state.nlen + state.ndist) {\n\t        for (;;) {\n\t          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n\t          here_bits = here >>> 24;\n\t          here_op = (here >>> 16) & 0xff;\n\t          here_val = here & 0xffff;\n\t\n\t          if ((here_bits) <= bits) { break; }\n\t          //--- PULLBYTE() ---//\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t          //---//\n\t        }\n\t        if (here_val < 16) {\n\t          //--- DROPBITS(here.bits) ---//\n\t          hold >>>= here_bits;\n\t          bits -= here_bits;\n\t          //---//\n\t          state.lens[state.have++] = here_val;\n\t        }\n\t        else {\n\t          if (here_val === 16) {\n\t            //=== NEEDBITS(here.bits + 2);\n\t            n = here_bits + 2;\n\t            while (bits < n) {\n\t              if (have === 0) { break inf_leave; }\n\t              have--;\n\t              hold += input[next++] << bits;\n\t              bits += 8;\n\t            }\n\t            //===//\n\t            //--- DROPBITS(here.bits) ---//\n\t            hold >>>= here_bits;\n\t            bits -= here_bits;\n\t            //---//\n\t            if (state.have === 0) {\n\t              strm.msg = 'invalid bit length repeat';\n\t              state.mode = BAD;\n\t              break;\n\t            }\n\t            len = state.lens[state.have - 1];\n\t            copy = 3 + (hold & 0x03);//BITS(2);\n\t            //--- DROPBITS(2) ---//\n\t            hold >>>= 2;\n\t            bits -= 2;\n\t            //---//\n\t          }\n\t          else if (here_val === 17) {\n\t            //=== NEEDBITS(here.bits + 3);\n\t            n = here_bits + 3;\n\t            while (bits < n) {\n\t              if (have === 0) { break inf_leave; }\n\t              have--;\n\t              hold += input[next++] << bits;\n\t              bits += 8;\n\t            }\n\t            //===//\n\t            //--- DROPBITS(here.bits) ---//\n\t            hold >>>= here_bits;\n\t            bits -= here_bits;\n\t            //---//\n\t            len = 0;\n\t            copy = 3 + (hold & 0x07);//BITS(3);\n\t            //--- DROPBITS(3) ---//\n\t            hold >>>= 3;\n\t            bits -= 3;\n\t            //---//\n\t          }\n\t          else {\n\t            //=== NEEDBITS(here.bits + 7);\n\t            n = here_bits + 7;\n\t            while (bits < n) {\n\t              if (have === 0) { break inf_leave; }\n\t              have--;\n\t              hold += input[next++] << bits;\n\t              bits += 8;\n\t            }\n\t            //===//\n\t            //--- DROPBITS(here.bits) ---//\n\t            hold >>>= here_bits;\n\t            bits -= here_bits;\n\t            //---//\n\t            len = 0;\n\t            copy = 11 + (hold & 0x7f);//BITS(7);\n\t            //--- DROPBITS(7) ---//\n\t            hold >>>= 7;\n\t            bits -= 7;\n\t            //---//\n\t          }\n\t          if (state.have + copy > state.nlen + state.ndist) {\n\t            strm.msg = 'invalid bit length repeat';\n\t            state.mode = BAD;\n\t            break;\n\t          }\n\t          while (copy--) {\n\t            state.lens[state.have++] = len;\n\t          }\n\t        }\n\t      }\n\t\n\t      /* handle error breaks in while */\n\t      if (state.mode === BAD) { break; }\n\t\n\t      /* check for end-of-block code (better have one) */\n\t      if (state.lens[256] === 0) {\n\t        strm.msg = 'invalid code -- missing end-of-block';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t\n\t      /* build code tables -- note: do not change the lenbits or distbits\n\t         values here (9 and 6) without reading the comments in inftrees.h\n\t         concerning the ENOUGH constants, which depend on those values */\n\t      state.lenbits = 9;\n\t\n\t      opts = {bits: state.lenbits};\n\t      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n\t      // We have separate tables & no pointers. 2 commented lines below not needed.\n\t      // state.next_index = opts.table_index;\n\t      state.lenbits = opts.bits;\n\t      // state.lencode = state.next;\n\t\n\t      if (ret) {\n\t        strm.msg = 'invalid literal/lengths set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t\n\t      state.distbits = 6;\n\t      //state.distcode.copy(state.codes);\n\t      // Switch to use dynamic table\n\t      state.distcode = state.distdyn;\n\t      opts = {bits: state.distbits};\n\t      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n\t      // We have separate tables & no pointers. 2 commented lines below not needed.\n\t      // state.next_index = opts.table_index;\n\t      state.distbits = opts.bits;\n\t      // state.distcode = state.next;\n\t\n\t      if (ret) {\n\t        strm.msg = 'invalid distances set';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      //Tracev((stderr, 'inflate:       codes ok\\n'));\n\t      state.mode = LEN_;\n\t      if (flush === Z_TREES) { break inf_leave; }\n\t      /* falls through */\n\t    case LEN_:\n\t      state.mode = LEN;\n\t      /* falls through */\n\t    case LEN:\n\t      if (have >= 6 && left >= 258) {\n\t        //--- RESTORE() ---\n\t        strm.next_out = put;\n\t        strm.avail_out = left;\n\t        strm.next_in = next;\n\t        strm.avail_in = have;\n\t        state.hold = hold;\n\t        state.bits = bits;\n\t        //---\n\t        inflate_fast(strm, _out);\n\t        //--- LOAD() ---\n\t        put = strm.next_out;\n\t        output = strm.output;\n\t        left = strm.avail_out;\n\t        next = strm.next_in;\n\t        input = strm.input;\n\t        have = strm.avail_in;\n\t        hold = state.hold;\n\t        bits = state.bits;\n\t        //---\n\t\n\t        if (state.mode === TYPE) {\n\t          state.back = -1;\n\t        }\n\t        break;\n\t      }\n\t      state.back = 0;\n\t      for (;;) {\n\t        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/\n\t        here_bits = here >>> 24;\n\t        here_op = (here >>> 16) & 0xff;\n\t        here_val = here & 0xffff;\n\t\n\t        if (here_bits <= bits) { break; }\n\t        //--- PULLBYTE() ---//\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t        //---//\n\t      }\n\t      if (here_op && (here_op & 0xf0) === 0) {\n\t        last_bits = here_bits;\n\t        last_op = here_op;\n\t        last_val = here_val;\n\t        for (;;) {\n\t          here = state.lencode[last_val +\n\t                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n\t          here_bits = here >>> 24;\n\t          here_op = (here >>> 16) & 0xff;\n\t          here_val = here & 0xffff;\n\t\n\t          if ((last_bits + here_bits) <= bits) { break; }\n\t          //--- PULLBYTE() ---//\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t          //---//\n\t        }\n\t        //--- DROPBITS(last.bits) ---//\n\t        hold >>>= last_bits;\n\t        bits -= last_bits;\n\t        //---//\n\t        state.back += last_bits;\n\t      }\n\t      //--- DROPBITS(here.bits) ---//\n\t      hold >>>= here_bits;\n\t      bits -= here_bits;\n\t      //---//\n\t      state.back += here_bits;\n\t      state.length = here_val;\n\t      if (here_op === 0) {\n\t        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n\t        //        \"inflate:         literal '%c'\\n\" :\n\t        //        \"inflate:         literal 0x%02x\\n\", here.val));\n\t        state.mode = LIT;\n\t        break;\n\t      }\n\t      if (here_op & 32) {\n\t        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n\t        state.back = -1;\n\t        state.mode = TYPE;\n\t        break;\n\t      }\n\t      if (here_op & 64) {\n\t        strm.msg = 'invalid literal/length code';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.extra = here_op & 15;\n\t      state.mode = LENEXT;\n\t      /* falls through */\n\t    case LENEXT:\n\t      if (state.extra) {\n\t        //=== NEEDBITS(state.extra);\n\t        n = state.extra;\n\t        while (bits < n) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n\t        //--- DROPBITS(state.extra) ---//\n\t        hold >>>= state.extra;\n\t        bits -= state.extra;\n\t        //---//\n\t        state.back += state.extra;\n\t      }\n\t      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n\t      state.was = state.length;\n\t      state.mode = DIST;\n\t      /* falls through */\n\t    case DIST:\n\t      for (;;) {\n\t        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/\n\t        here_bits = here >>> 24;\n\t        here_op = (here >>> 16) & 0xff;\n\t        here_val = here & 0xffff;\n\t\n\t        if ((here_bits) <= bits) { break; }\n\t        //--- PULLBYTE() ---//\n\t        if (have === 0) { break inf_leave; }\n\t        have--;\n\t        hold += input[next++] << bits;\n\t        bits += 8;\n\t        //---//\n\t      }\n\t      if ((here_op & 0xf0) === 0) {\n\t        last_bits = here_bits;\n\t        last_op = here_op;\n\t        last_val = here_val;\n\t        for (;;) {\n\t          here = state.distcode[last_val +\n\t                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n\t          here_bits = here >>> 24;\n\t          here_op = (here >>> 16) & 0xff;\n\t          here_val = here & 0xffff;\n\t\n\t          if ((last_bits + here_bits) <= bits) { break; }\n\t          //--- PULLBYTE() ---//\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t          //---//\n\t        }\n\t        //--- DROPBITS(last.bits) ---//\n\t        hold >>>= last_bits;\n\t        bits -= last_bits;\n\t        //---//\n\t        state.back += last_bits;\n\t      }\n\t      //--- DROPBITS(here.bits) ---//\n\t      hold >>>= here_bits;\n\t      bits -= here_bits;\n\t      //---//\n\t      state.back += here_bits;\n\t      if (here_op & 64) {\n\t        strm.msg = 'invalid distance code';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t      state.offset = here_val;\n\t      state.extra = (here_op) & 15;\n\t      state.mode = DISTEXT;\n\t      /* falls through */\n\t    case DISTEXT:\n\t      if (state.extra) {\n\t        //=== NEEDBITS(state.extra);\n\t        n = state.extra;\n\t        while (bits < n) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n\t        //--- DROPBITS(state.extra) ---//\n\t        hold >>>= state.extra;\n\t        bits -= state.extra;\n\t        //---//\n\t        state.back += state.extra;\n\t      }\n\t//#ifdef INFLATE_STRICT\n\t      if (state.offset > state.dmax) {\n\t        strm.msg = 'invalid distance too far back';\n\t        state.mode = BAD;\n\t        break;\n\t      }\n\t//#endif\n\t      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n\t      state.mode = MATCH;\n\t      /* falls through */\n\t    case MATCH:\n\t      if (left === 0) { break inf_leave; }\n\t      copy = _out - left;\n\t      if (state.offset > copy) {         /* copy from window */\n\t        copy = state.offset - copy;\n\t        if (copy > state.whave) {\n\t          if (state.sane) {\n\t            strm.msg = 'invalid distance too far back';\n\t            state.mode = BAD;\n\t            break;\n\t          }\n\t// (!) This block is disabled in zlib defailts,\n\t// don't enable it for binary compatibility\n\t//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n\t//          Trace((stderr, \"inflate.c too far\\n\"));\n\t//          copy -= state.whave;\n\t//          if (copy > state.length) { copy = state.length; }\n\t//          if (copy > left) { copy = left; }\n\t//          left -= copy;\n\t//          state.length -= copy;\n\t//          do {\n\t//            output[put++] = 0;\n\t//          } while (--copy);\n\t//          if (state.length === 0) { state.mode = LEN; }\n\t//          break;\n\t//#endif\n\t        }\n\t        if (copy > state.wnext) {\n\t          copy -= state.wnext;\n\t          from = state.wsize - copy;\n\t        }\n\t        else {\n\t          from = state.wnext - copy;\n\t        }\n\t        if (copy > state.length) { copy = state.length; }\n\t        from_source = state.window;\n\t      }\n\t      else {                              /* copy from output */\n\t        from_source = output;\n\t        from = put - state.offset;\n\t        copy = state.length;\n\t      }\n\t      if (copy > left) { copy = left; }\n\t      left -= copy;\n\t      state.length -= copy;\n\t      do {\n\t        output[put++] = from_source[from++];\n\t      } while (--copy);\n\t      if (state.length === 0) { state.mode = LEN; }\n\t      break;\n\t    case LIT:\n\t      if (left === 0) { break inf_leave; }\n\t      output[put++] = state.length;\n\t      left--;\n\t      state.mode = LEN;\n\t      break;\n\t    case CHECK:\n\t      if (state.wrap) {\n\t        //=== NEEDBITS(32);\n\t        while (bits < 32) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          // Use '|' insdead of '+' to make sure that result is signed\n\t          hold |= input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        _out -= left;\n\t        strm.total_out += _out;\n\t        state.total += _out;\n\t        if (_out) {\n\t          strm.adler = state.check =\n\t              /*UPDATE(state.check, put - _out, _out);*/\n\t              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\t\n\t        }\n\t        _out = left;\n\t        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too\n\t        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {\n\t          strm.msg = 'incorrect data check';\n\t          state.mode = BAD;\n\t          break;\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n\t      }\n\t      state.mode = LENGTH;\n\t      /* falls through */\n\t    case LENGTH:\n\t      if (state.wrap && state.flags) {\n\t        //=== NEEDBITS(32);\n\t        while (bits < 32) {\n\t          if (have === 0) { break inf_leave; }\n\t          have--;\n\t          hold += input[next++] << bits;\n\t          bits += 8;\n\t        }\n\t        //===//\n\t        if (hold !== (state.total & 0xffffffff)) {\n\t          strm.msg = 'incorrect length check';\n\t          state.mode = BAD;\n\t          break;\n\t        }\n\t        //=== INITBITS();\n\t        hold = 0;\n\t        bits = 0;\n\t        //===//\n\t        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n\t      }\n\t      state.mode = DONE;\n\t      /* falls through */\n\t    case DONE:\n\t      ret = Z_STREAM_END;\n\t      break inf_leave;\n\t    case BAD:\n\t      ret = Z_DATA_ERROR;\n\t      break inf_leave;\n\t    case MEM:\n\t      return Z_MEM_ERROR;\n\t    case SYNC:\n\t      /* falls through */\n\t    default:\n\t      return Z_STREAM_ERROR;\n\t    }\n\t  }\n\t\n\t  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\t\n\t  /*\n\t     Return from inflate(), updating the total counts and the check value.\n\t     If there was no progress during the inflate() call, return a buffer\n\t     error.  Call updatewindow() to create and/or update the window state.\n\t     Note: a memory error from inflate() is non-recoverable.\n\t   */\n\t\n\t  //--- RESTORE() ---\n\t  strm.next_out = put;\n\t  strm.avail_out = left;\n\t  strm.next_in = next;\n\t  strm.avail_in = have;\n\t  state.hold = hold;\n\t  state.bits = bits;\n\t  //---\n\t\n\t  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n\t                      (state.mode < CHECK || flush !== Z_FINISH))) {\n\t    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n\t      state.mode = MEM;\n\t      return Z_MEM_ERROR;\n\t    }\n\t  }\n\t  _in -= strm.avail_in;\n\t  _out -= strm.avail_out;\n\t  strm.total_in += _in;\n\t  strm.total_out += _out;\n\t  state.total += _out;\n\t  if (state.wrap && _out) {\n\t    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n\t      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n\t  }\n\t  strm.data_type = state.bits + (state.last ? 64 : 0) +\n\t                    (state.mode === TYPE ? 128 : 0) +\n\t                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n\t  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n\t    ret = Z_BUF_ERROR;\n\t  }\n\t  return ret;\n\t}\n\t\n\tfunction inflateEnd(strm) {\n\t\n\t  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n\t    return Z_STREAM_ERROR;\n\t  }\n\t\n\t  var state = strm.state;\n\t  if (state.window) {\n\t    state.window = null;\n\t  }\n\t  strm.state = null;\n\t  return Z_OK;\n\t}\n\t\n\tfunction inflateGetHeader(strm, head) {\n\t  var state;\n\t\n\t  /* check state */\n\t  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n\t  state = strm.state;\n\t  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\t\n\t  /* save header structure */\n\t  state.head = head;\n\t  head.done = false;\n\t  return Z_OK;\n\t}\n\t\n\t\n\texports.inflateReset = inflateReset;\n\texports.inflateReset2 = inflateReset2;\n\texports.inflateResetKeep = inflateResetKeep;\n\texports.inflateInit = inflateInit;\n\texports.inflateInit2 = inflateInit2;\n\texports.inflate = inflate;\n\texports.inflateEnd = inflateEnd;\n\texports.inflateGetHeader = inflateGetHeader;\n\texports.inflateInfo = 'pako inflate (from Nodeca project)';\n\t\n\t/* Not implemented\n\texports.inflateCopy = inflateCopy;\n\texports.inflateGetDictionary = inflateGetDictionary;\n\texports.inflateMark = inflateMark;\n\texports.inflatePrime = inflatePrime;\n\texports.inflateSetDictionary = inflateSetDictionary;\n\texports.inflateSync = inflateSync;\n\texports.inflateSyncPoint = inflateSyncPoint;\n\texports.inflateUndermine = inflateUndermine;\n\t*/\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t// See state defs from inflate.js\n\tvar BAD = 30;       /* got a data error -- remain here until reset */\n\tvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\t\n\t/*\n\t   Decode literal, length, and distance codes and write out the resulting\n\t   literal and match bytes until either not enough input or output is\n\t   available, an end-of-block is encountered, or a data error is encountered.\n\t   When large enough input and output buffers are supplied to inflate(), for\n\t   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n\t   inflate execution time is spent in this routine.\n\t\n\t   Entry assumptions:\n\t\n\t        state.mode === LEN\n\t        strm.avail_in >= 6\n\t        strm.avail_out >= 258\n\t        start >= strm.avail_out\n\t        state.bits < 8\n\t\n\t   On return, state.mode is one of:\n\t\n\t        LEN -- ran out of enough output space or enough available input\n\t        TYPE -- reached end of block code, inflate() to interpret next block\n\t        BAD -- error in block data\n\t\n\t   Notes:\n\t\n\t    - The maximum input bits used by a length/distance pair is 15 bits for the\n\t      length code, 5 bits for the length extra, 15 bits for the distance code,\n\t      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n\t      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n\t      checking for available input while decoding.\n\t\n\t    - The maximum bytes that a single length/distance pair can output is 258\n\t      bytes, which is the maximum length that can be coded.  inflate_fast()\n\t      requires strm.avail_out >= 258 for each loop to avoid checking for\n\t      output space.\n\t */\n\tmodule.exports = function inflate_fast(strm, start) {\n\t  var state;\n\t  var _in;                    /* local strm.input */\n\t  var last;                   /* have enough input while in < last */\n\t  var _out;                   /* local strm.output */\n\t  var beg;                    /* inflate()'s initial strm.output */\n\t  var end;                    /* while out < end, enough space available */\n\t//#ifdef INFLATE_STRICT\n\t  var dmax;                   /* maximum distance from zlib header */\n\t//#endif\n\t  var wsize;                  /* window size or zero if not using window */\n\t  var whave;                  /* valid bytes in the window */\n\t  var wnext;                  /* window write index */\n\t  var window;                 /* allocated sliding window, if wsize != 0 */\n\t  var hold;                   /* local strm.hold */\n\t  var bits;                   /* local strm.bits */\n\t  var lcode;                  /* local strm.lencode */\n\t  var dcode;                  /* local strm.distcode */\n\t  var lmask;                  /* mask for first level of length codes */\n\t  var dmask;                  /* mask for first level of distance codes */\n\t  var here;                   /* retrieved table entry */\n\t  var op;                     /* code bits, operation, extra bits, or */\n\t                              /*  window position, window bytes to copy */\n\t  var len;                    /* match length, unused bytes */\n\t  var dist;                   /* match distance */\n\t  var from;                   /* where to copy match from */\n\t  var from_source;\n\t\n\t\n\t  var input, output; // JS specific, because we have no pointers\n\t\n\t  /* copy state to local variables */\n\t  state = strm.state;\n\t  //here = state.here;\n\t  _in = strm.next_in;\n\t  input = strm.input;\n\t  last = _in + (strm.avail_in - 5);\n\t  _out = strm.next_out;\n\t  output = strm.output;\n\t  beg = _out - (start - strm.avail_out);\n\t  end = _out + (strm.avail_out - 257);\n\t//#ifdef INFLATE_STRICT\n\t  dmax = state.dmax;\n\t//#endif\n\t  wsize = state.wsize;\n\t  whave = state.whave;\n\t  wnext = state.wnext;\n\t  window = state.window;\n\t  hold = state.hold;\n\t  bits = state.bits;\n\t  lcode = state.lencode;\n\t  dcode = state.distcode;\n\t  lmask = (1 << state.lenbits) - 1;\n\t  dmask = (1 << state.distbits) - 1;\n\t\n\t\n\t  /* decode literals and length/distances until end-of-block or not enough\n\t     input data or output space */\n\t\n\t  top:\n\t  do {\n\t    if (bits < 15) {\n\t      hold += input[_in++] << bits;\n\t      bits += 8;\n\t      hold += input[_in++] << bits;\n\t      bits += 8;\n\t    }\n\t\n\t    here = lcode[hold & lmask];\n\t\n\t    dolen:\n\t    for (;;) { // Goto emulation\n\t      op = here >>> 24/*here.bits*/;\n\t      hold >>>= op;\n\t      bits -= op;\n\t      op = (here >>> 16) & 0xff/*here.op*/;\n\t      if (op === 0) {                          /* literal */\n\t        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n\t        //        \"inflate:         literal '%c'\\n\" :\n\t        //        \"inflate:         literal 0x%02x\\n\", here.val));\n\t        output[_out++] = here & 0xffff/*here.val*/;\n\t      }\n\t      else if (op & 16) {                     /* length base */\n\t        len = here & 0xffff/*here.val*/;\n\t        op &= 15;                           /* number of extra bits */\n\t        if (op) {\n\t          if (bits < op) {\n\t            hold += input[_in++] << bits;\n\t            bits += 8;\n\t          }\n\t          len += hold & ((1 << op) - 1);\n\t          hold >>>= op;\n\t          bits -= op;\n\t        }\n\t        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n\t        if (bits < 15) {\n\t          hold += input[_in++] << bits;\n\t          bits += 8;\n\t          hold += input[_in++] << bits;\n\t          bits += 8;\n\t        }\n\t        here = dcode[hold & dmask];\n\t\n\t        dodist:\n\t        for (;;) { // goto emulation\n\t          op = here >>> 24/*here.bits*/;\n\t          hold >>>= op;\n\t          bits -= op;\n\t          op = (here >>> 16) & 0xff/*here.op*/;\n\t\n\t          if (op & 16) {                      /* distance base */\n\t            dist = here & 0xffff/*here.val*/;\n\t            op &= 15;                       /* number of extra bits */\n\t            if (bits < op) {\n\t              hold += input[_in++] << bits;\n\t              bits += 8;\n\t              if (bits < op) {\n\t                hold += input[_in++] << bits;\n\t                bits += 8;\n\t              }\n\t            }\n\t            dist += hold & ((1 << op) - 1);\n\t//#ifdef INFLATE_STRICT\n\t            if (dist > dmax) {\n\t              strm.msg = 'invalid distance too far back';\n\t              state.mode = BAD;\n\t              break top;\n\t            }\n\t//#endif\n\t            hold >>>= op;\n\t            bits -= op;\n\t            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n\t            op = _out - beg;                /* max distance in output */\n\t            if (dist > op) {                /* see if copy from window */\n\t              op = dist - op;               /* distance back in window */\n\t              if (op > whave) {\n\t                if (state.sane) {\n\t                  strm.msg = 'invalid distance too far back';\n\t                  state.mode = BAD;\n\t                  break top;\n\t                }\n\t\n\t// (!) This block is disabled in zlib defailts,\n\t// don't enable it for binary compatibility\n\t//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n\t//                if (len <= op - whave) {\n\t//                  do {\n\t//                    output[_out++] = 0;\n\t//                  } while (--len);\n\t//                  continue top;\n\t//                }\n\t//                len -= op - whave;\n\t//                do {\n\t//                  output[_out++] = 0;\n\t//                } while (--op > whave);\n\t//                if (op === 0) {\n\t//                  from = _out - dist;\n\t//                  do {\n\t//                    output[_out++] = output[from++];\n\t//                  } while (--len);\n\t//                  continue top;\n\t//                }\n\t//#endif\n\t              }\n\t              from = 0; // window index\n\t              from_source = window;\n\t              if (wnext === 0) {           /* very common case */\n\t                from += wsize - op;\n\t                if (op < len) {         /* some from window */\n\t                  len -= op;\n\t                  do {\n\t                    output[_out++] = window[from++];\n\t                  } while (--op);\n\t                  from = _out - dist;  /* rest from output */\n\t                  from_source = output;\n\t                }\n\t              }\n\t              else if (wnext < op) {      /* wrap around window */\n\t                from += wsize + wnext - op;\n\t                op -= wnext;\n\t                if (op < len) {         /* some from end of window */\n\t                  len -= op;\n\t                  do {\n\t                    output[_out++] = window[from++];\n\t                  } while (--op);\n\t                  from = 0;\n\t                  if (wnext < len) {  /* some from start of window */\n\t                    op = wnext;\n\t                    len -= op;\n\t                    do {\n\t                      output[_out++] = window[from++];\n\t                    } while (--op);\n\t                    from = _out - dist;      /* rest from output */\n\t                    from_source = output;\n\t                  }\n\t                }\n\t              }\n\t              else {                      /* contiguous in window */\n\t                from += wnext - op;\n\t                if (op < len) {         /* some from window */\n\t                  len -= op;\n\t                  do {\n\t                    output[_out++] = window[from++];\n\t                  } while (--op);\n\t                  from = _out - dist;  /* rest from output */\n\t                  from_source = output;\n\t                }\n\t              }\n\t              while (len > 2) {\n\t                output[_out++] = from_source[from++];\n\t                output[_out++] = from_source[from++];\n\t                output[_out++] = from_source[from++];\n\t                len -= 3;\n\t              }\n\t              if (len) {\n\t                output[_out++] = from_source[from++];\n\t                if (len > 1) {\n\t                  output[_out++] = from_source[from++];\n\t                }\n\t              }\n\t            }\n\t            else {\n\t              from = _out - dist;          /* copy direct from output */\n\t              do {                        /* minimum length is three */\n\t                output[_out++] = output[from++];\n\t                output[_out++] = output[from++];\n\t                output[_out++] = output[from++];\n\t                len -= 3;\n\t              } while (len > 2);\n\t              if (len) {\n\t                output[_out++] = output[from++];\n\t                if (len > 1) {\n\t                  output[_out++] = output[from++];\n\t                }\n\t              }\n\t            }\n\t          }\n\t          else if ((op & 64) === 0) {          /* 2nd level distance code */\n\t            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n\t            continue dodist;\n\t          }\n\t          else {\n\t            strm.msg = 'invalid distance code';\n\t            state.mode = BAD;\n\t            break top;\n\t          }\n\t\n\t          break; // need to emulate goto via \"continue\"\n\t        }\n\t      }\n\t      else if ((op & 64) === 0) {              /* 2nd level length code */\n\t        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n\t        continue dolen;\n\t      }\n\t      else if (op & 32) {                     /* end-of-block */\n\t        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n\t        state.mode = TYPE;\n\t        break top;\n\t      }\n\t      else {\n\t        strm.msg = 'invalid literal/length code';\n\t        state.mode = BAD;\n\t        break top;\n\t      }\n\t\n\t      break; // need to emulate goto via \"continue\"\n\t    }\n\t  } while (_in < last && _out < end);\n\t\n\t  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n\t  len = bits >> 3;\n\t  _in -= len;\n\t  bits -= len << 3;\n\t  hold &= (1 << bits) - 1;\n\t\n\t  /* update state and return */\n\t  strm.next_in = _in;\n\t  strm.next_out = _out;\n\t  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n\t  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n\t  state.hold = hold;\n\t  state.bits = bits;\n\t  return;\n\t};\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t\n\tvar utils = __webpack_require__(14);\n\t\n\tvar MAXBITS = 15;\n\tvar ENOUGH_LENS = 852;\n\tvar ENOUGH_DISTS = 592;\n\t//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\t\n\tvar CODES = 0;\n\tvar LENS = 1;\n\tvar DISTS = 2;\n\t\n\tvar lbase = [ /* Length codes 257..285 base */\n\t  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n\t  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n\t];\n\t\n\tvar lext = [ /* Length codes 257..285 extra */\n\t  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n\t  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n\t];\n\t\n\tvar dbase = [ /* Distance codes 0..29 base */\n\t  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n\t  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n\t  8193, 12289, 16385, 24577, 0, 0\n\t];\n\t\n\tvar dext = [ /* Distance codes 0..29 extra */\n\t  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n\t  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n\t  28, 28, 29, 29, 64, 64\n\t];\n\t\n\tmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n\t{\n\t  var bits = opts.bits;\n\t      //here = opts.here; /* table entry for duplication */\n\t\n\t  var len = 0;               /* a code's length in bits */\n\t  var sym = 0;               /* index of code symbols */\n\t  var min = 0, max = 0;          /* minimum and maximum code lengths */\n\t  var root = 0;              /* number of index bits for root table */\n\t  var curr = 0;              /* number of index bits for current table */\n\t  var drop = 0;              /* code bits to drop for sub-table */\n\t  var left = 0;                   /* number of prefix codes available */\n\t  var used = 0;              /* code entries in table used */\n\t  var huff = 0;              /* Huffman code */\n\t  var incr;              /* for incrementing code, index */\n\t  var fill;              /* index for replicating entries */\n\t  var low;               /* low bits for current root entry */\n\t  var mask;              /* mask for low root bits */\n\t  var next;             /* next available space in table */\n\t  var base = null;     /* base value table to use */\n\t  var base_index = 0;\n\t//  var shoextra;    /* extra bits table to use */\n\t  var end;                    /* use base and extra for symbol > end */\n\t  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */\n\t  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */\n\t  var extra = null;\n\t  var extra_index = 0;\n\t\n\t  var here_bits, here_op, here_val;\n\t\n\t  /*\n\t   Process a set of code lengths to create a canonical Huffman code.  The\n\t   code lengths are lens[0..codes-1].  Each length corresponds to the\n\t   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n\t   symbols by length from short to long, and retaining the symbol order\n\t   for codes with equal lengths.  Then the code starts with all zero bits\n\t   for the first code of the shortest length, and the codes are integer\n\t   increments for the same length, and zeros are appended as the length\n\t   increases.  For the deflate format, these bits are stored backwards\n\t   from their more natural integer increment ordering, and so when the\n\t   decoding tables are built in the large loop below, the integer codes\n\t   are incremented backwards.\n\t\n\t   This routine assumes, but does not check, that all of the entries in\n\t   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n\t   1..MAXBITS is interpreted as that code length.  zero means that that\n\t   symbol does not occur in this code.\n\t\n\t   The codes are sorted by computing a count of codes for each length,\n\t   creating from that a table of starting indices for each length in the\n\t   sorted table, and then entering the symbols in order in the sorted\n\t   table.  The sorted table is work[], with that space being provided by\n\t   the caller.\n\t\n\t   The length counts are used for other purposes as well, i.e. finding\n\t   the minimum and maximum length codes, determining if there are any\n\t   codes at all, checking for a valid set of lengths, and looking ahead\n\t   at length counts to determine sub-table sizes when building the\n\t   decoding tables.\n\t   */\n\t\n\t  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n\t  for (len = 0; len <= MAXBITS; len++) {\n\t    count[len] = 0;\n\t  }\n\t  for (sym = 0; sym < codes; sym++) {\n\t    count[lens[lens_index + sym]]++;\n\t  }\n\t\n\t  /* bound code lengths, force root to be within code lengths */\n\t  root = bits;\n\t  for (max = MAXBITS; max >= 1; max--) {\n\t    if (count[max] !== 0) { break; }\n\t  }\n\t  if (root > max) {\n\t    root = max;\n\t  }\n\t  if (max === 0) {                     /* no symbols to code at all */\n\t    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n\t    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n\t    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n\t    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\t\n\t\n\t    //table.op[opts.table_index] = 64;\n\t    //table.bits[opts.table_index] = 1;\n\t    //table.val[opts.table_index++] = 0;\n\t    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\t\n\t    opts.bits = 1;\n\t    return 0;     /* no symbols, but wait for decoding to report error */\n\t  }\n\t  for (min = 1; min < max; min++) {\n\t    if (count[min] !== 0) { break; }\n\t  }\n\t  if (root < min) {\n\t    root = min;\n\t  }\n\t\n\t  /* check for an over-subscribed or incomplete set of lengths */\n\t  left = 1;\n\t  for (len = 1; len <= MAXBITS; len++) {\n\t    left <<= 1;\n\t    left -= count[len];\n\t    if (left < 0) {\n\t      return -1;\n\t    }        /* over-subscribed */\n\t  }\n\t  if (left > 0 && (type === CODES || max !== 1)) {\n\t    return -1;                      /* incomplete set */\n\t  }\n\t\n\t  /* generate offsets into symbol table for each length for sorting */\n\t  offs[1] = 0;\n\t  for (len = 1; len < MAXBITS; len++) {\n\t    offs[len + 1] = offs[len] + count[len];\n\t  }\n\t\n\t  /* sort symbols by length, by symbol order within each length */\n\t  for (sym = 0; sym < codes; sym++) {\n\t    if (lens[lens_index + sym] !== 0) {\n\t      work[offs[lens[lens_index + sym]]++] = sym;\n\t    }\n\t  }\n\t\n\t  /*\n\t   Create and fill in decoding tables.  In this loop, the table being\n\t   filled is at next and has curr index bits.  The code being used is huff\n\t   with length len.  That code is converted to an index by dropping drop\n\t   bits off of the bottom.  For codes where len is less than drop + curr,\n\t   those top drop + curr - len bits are incremented through all values to\n\t   fill the table with replicated entries.\n\t\n\t   root is the number of index bits for the root table.  When len exceeds\n\t   root, sub-tables are created pointed to by the root entry with an index\n\t   of the low root bits of huff.  This is saved in low to check for when a\n\t   new sub-table should be started.  drop is zero when the root table is\n\t   being filled, and drop is root when sub-tables are being filled.\n\t\n\t   When a new sub-table is needed, it is necessary to look ahead in the\n\t   code lengths to determine what size sub-table is needed.  The length\n\t   counts are used for this, and so count[] is decremented as codes are\n\t   entered in the tables.\n\t\n\t   used keeps track of how many table entries have been allocated from the\n\t   provided *table space.  It is checked for LENS and DIST tables against\n\t   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n\t   the initial root table size constants.  See the comments in inftrees.h\n\t   for more information.\n\t\n\t   sym increments through all symbols, and the loop terminates when\n\t   all codes of length max, i.e. all codes, have been processed.  This\n\t   routine permits incomplete codes, so another loop after this one fills\n\t   in the rest of the decoding tables with invalid code markers.\n\t   */\n\t\n\t  /* set up for code type */\n\t  // poor man optimization - use if-else instead of switch,\n\t  // to avoid deopts in old v8\n\t  if (type === CODES) {\n\t    base = extra = work;    /* dummy value--not used */\n\t    end = 19;\n\t\n\t  } else if (type === LENS) {\n\t    base = lbase;\n\t    base_index -= 257;\n\t    extra = lext;\n\t    extra_index -= 257;\n\t    end = 256;\n\t\n\t  } else {                    /* DISTS */\n\t    base = dbase;\n\t    extra = dext;\n\t    end = -1;\n\t  }\n\t\n\t  /* initialize opts for loop */\n\t  huff = 0;                   /* starting code */\n\t  sym = 0;                    /* starting code symbol */\n\t  len = min;                  /* starting code length */\n\t  next = table_index;              /* current table to fill in */\n\t  curr = root;                /* current table index bits */\n\t  drop = 0;                   /* current bits to drop from code for index */\n\t  low = -1;                   /* trigger new sub-table when len > root */\n\t  used = 1 << root;          /* use root table entries */\n\t  mask = used - 1;            /* mask for comparing low */\n\t\n\t  /* check available table space */\n\t  if ((type === LENS && used > ENOUGH_LENS) ||\n\t    (type === DISTS && used > ENOUGH_DISTS)) {\n\t    return 1;\n\t  }\n\t\n\t  var i=0;\n\t  /* process all codes and make table entries */\n\t  for (;;) {\n\t    i++;\n\t    /* create table entry */\n\t    here_bits = len - drop;\n\t    if (work[sym] < end) {\n\t      here_op = 0;\n\t      here_val = work[sym];\n\t    }\n\t    else if (work[sym] > end) {\n\t      here_op = extra[extra_index + work[sym]];\n\t      here_val = base[base_index + work[sym]];\n\t    }\n\t    else {\n\t      here_op = 32 + 64;         /* end of block */\n\t      here_val = 0;\n\t    }\n\t\n\t    /* replicate for those indices with low len bits equal to huff */\n\t    incr = 1 << (len - drop);\n\t    fill = 1 << curr;\n\t    min = fill;                 /* save offset to next table */\n\t    do {\n\t      fill -= incr;\n\t      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n\t    } while (fill !== 0);\n\t\n\t    /* backwards increment the len-bit code huff */\n\t    incr = 1 << (len - 1);\n\t    while (huff & incr) {\n\t      incr >>= 1;\n\t    }\n\t    if (incr !== 0) {\n\t      huff &= incr - 1;\n\t      huff += incr;\n\t    } else {\n\t      huff = 0;\n\t    }\n\t\n\t    /* go to next symbol, update count, len */\n\t    sym++;\n\t    if (--count[len] === 0) {\n\t      if (len === max) { break; }\n\t      len = lens[lens_index + work[sym]];\n\t    }\n\t\n\t    /* create new sub-table if needed */\n\t    if (len > root && (huff & mask) !== low) {\n\t      /* if first time, transition to sub-tables */\n\t      if (drop === 0) {\n\t        drop = root;\n\t      }\n\t\n\t      /* increment past last table */\n\t      next += min;            /* here min is 1 << curr */\n\t\n\t      /* determine length of next table */\n\t      curr = len - drop;\n\t      left = 1 << curr;\n\t      while (curr + drop < max) {\n\t        left -= count[curr + drop];\n\t        if (left <= 0) { break; }\n\t        curr++;\n\t        left <<= 1;\n\t      }\n\t\n\t      /* check for enough space */\n\t      used += 1 << curr;\n\t      if ((type === LENS && used > ENOUGH_LENS) ||\n\t        (type === DISTS && used > ENOUGH_DISTS)) {\n\t        return 1;\n\t      }\n\t\n\t      /* point entry in root table to sub-table */\n\t      low = huff & mask;\n\t      /*table.op[low] = curr;\n\t      table.bits[low] = root;\n\t      table.val[low] = next - opts.table_index;*/\n\t      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n\t    }\n\t  }\n\t\n\t  /* fill in remaining table entry if code is incomplete (guaranteed to have\n\t   at most one remaining entry, since if the code is incomplete, the\n\t   maximum code length that was allowed to get this far is one bit) */\n\t  if (huff !== 0) {\n\t    //table.op[next + huff] = 64;            /* invalid code marker */\n\t    //table.bits[next + huff] = len - drop;\n\t    //table.val[next + huff] = 0;\n\t    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n\t  }\n\t\n\t  /* set return parameters */\n\t  //opts.table_index += used;\n\t  opts.bits = root;\n\t  return 0;\n\t};\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports) {\n\n\tmodule.exports = {\n\t\n\t  /* Allowed flush values; see deflate() and inflate() below for details */\n\t  Z_NO_FLUSH:         0,\n\t  Z_PARTIAL_FLUSH:    1,\n\t  Z_SYNC_FLUSH:       2,\n\t  Z_FULL_FLUSH:       3,\n\t  Z_FINISH:           4,\n\t  Z_BLOCK:            5,\n\t  Z_TREES:            6,\n\t\n\t  /* Return codes for the compression/decompression functions. Negative values\n\t  * are errors, positive values are used for special but normal events.\n\t  */\n\t  Z_OK:               0,\n\t  Z_STREAM_END:       1,\n\t  Z_NEED_DICT:        2,\n\t  Z_ERRNO:           -1,\n\t  Z_STREAM_ERROR:    -2,\n\t  Z_DATA_ERROR:      -3,\n\t  //Z_MEM_ERROR:     -4,\n\t  Z_BUF_ERROR:       -5,\n\t  //Z_VERSION_ERROR: -6,\n\t\n\t  /* compression levels */\n\t  Z_NO_COMPRESSION:         0,\n\t  Z_BEST_SPEED:             1,\n\t  Z_BEST_COMPRESSION:       9,\n\t  Z_DEFAULT_COMPRESSION:   -1,\n\t\n\t\n\t  Z_FILTERED:               1,\n\t  Z_HUFFMAN_ONLY:           2,\n\t  Z_RLE:                    3,\n\t  Z_FIXED:                  4,\n\t  Z_DEFAULT_STRATEGY:       0,\n\t\n\t  /* Possible values of the data_type field (though see inflate()) */\n\t  Z_BINARY:                 0,\n\t  Z_TEXT:                   1,\n\t  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n\t  Z_UNKNOWN:                2,\n\t\n\t  /* The deflate compression method */\n\t  Z_DEFLATED:               8\n\t  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n\t};\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t\n\tfunction GZheader() {\n\t  /* true if compressed data believed to be text */\n\t  this.text       = 0;\n\t  /* modification time */\n\t  this.time       = 0;\n\t  /* extra flags (not used when writing a gzip file) */\n\t  this.xflags     = 0;\n\t  /* operating system */\n\t  this.os         = 0;\n\t  /* pointer to extra field or Z_NULL if none */\n\t  this.extra      = null;\n\t  /* extra field length (valid if extra != Z_NULL) */\n\t  this.extra_len  = 0; // Actually, we don't need it in JS,\n\t                       // but leave for few code modifications\n\t\n\t  //\n\t  // Setup limits is not necessary because in js we should not preallocate memory\n\t  // for inflate use constant limit in 65536 bytes\n\t  //\n\t\n\t  /* space at extra (only when reading header) */\n\t  // this.extra_max  = 0;\n\t  /* pointer to zero-terminated file name or Z_NULL */\n\t  this.name       = '';\n\t  /* space at name (only when reading header) */\n\t  // this.name_max   = 0;\n\t  /* pointer to zero-terminated comment or Z_NULL */\n\t  this.comment    = '';\n\t  /* space at comment (only when reading header) */\n\t  // this.comm_max   = 0;\n\t  /* true if there was or will be a header crc */\n\t  this.hcrc       = 0;\n\t  /* true when done reading gzip header (not used when writing a gzip file) */\n\t  this.done       = false;\n\t}\n\t\n\tmodule.exports = GZheader;\n\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';\n\tmodule.exports = function(data, encoding){\n\t    return new Buffer(data, encoding);\n\t};\n\tmodule.exports.test = function(b){\n\t    return Buffer.isBuffer(b);\n\t};\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(10);\n\t\n\tvar table = [\n\t    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n\t    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n\t    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n\t    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n\t    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n\t    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n\t    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n\t    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n\t    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n\t    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n\t    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n\t    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n\t    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n\t    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n\t    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n\t    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n\t    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n\t    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n\t    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n\t    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n\t    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n\t    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n\t    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n\t    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n\t    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n\t    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n\t    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n\t    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n\t    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n\t    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n\t    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n\t    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n\t    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n\t    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n\t    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n\t    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n\t    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n\t    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n\t    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n\t    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n\t    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n\t    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n\t    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n\t    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n\t    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n\t    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n\t    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n\t    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n\t    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n\t    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n\t    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n\t    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n\t    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n\t    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n\t    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n\t    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n\t    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n\t    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n\t    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n\t    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n\t    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n\t    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n\t    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n\t    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D\n\t];\n\t\n\t/**\n\t *\n\t *  Javascript crc32\n\t *  http://www.webtoolkit.info/\n\t *\n\t */\n\tmodule.exports = function crc32(input, crc) {\n\t    if (typeof input === \"undefined\" || !input.length) {\n\t        return 0;\n\t    }\n\t\n\t    var isArray = utils.getTypeOf(input) !== \"string\";\n\t\n\t    if (typeof(crc) == \"undefined\") {\n\t        crc = 0;\n\t    }\n\t    var x = 0;\n\t    var y = 0;\n\t    var b = 0;\n\t\n\t    crc = crc ^ (-1);\n\t    for (var i = 0, iTop = input.length; i < iTop; i++) {\n\t        b = isArray ? input[i] : input.charCodeAt(i);\n\t        y = (crc ^ b) & 0xFF;\n\t        x = table[y];\n\t        crc = (crc >>> 8) ^ x;\n\t    }\n\t\n\t    return crc ^ (-1);\n\t};\n\t// vim: set shiftwidth=4 softtabstop=4:\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\texports.LOCAL_FILE_HEADER = \"PK\\x03\\x04\";\n\texports.CENTRAL_FILE_HEADER = \"PK\\x01\\x02\";\n\texports.CENTRAL_DIRECTORY_END = \"PK\\x05\\x06\";\n\texports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = \"PK\\x06\\x07\";\n\texports.ZIP64_CENTRAL_DIRECTORY_END = \"PK\\x06\\x06\";\n\texports.DATA_DESCRIPTOR = \"PK\\x07\\x08\";\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\texports.base64 = false;\n\texports.binary = false;\n\texports.dir = false;\n\texports.createFolders = false;\n\texports.date = null;\n\texports.compression = null;\n\texports.compressionOptions = null;\n\texports.comment = null;\n\texports.unixPermissions = null;\n\texports.dosPermissions = null;\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\tfunction CompressedObject() {\n\t    this.compressedSize = 0;\n\t    this.uncompressedSize = 0;\n\t    this.crc32 = 0;\n\t    this.compressionMethod = null;\n\t    this.compressedContent = null;\n\t}\n\t\n\tCompressedObject.prototype = {\n\t    /**\n\t     * Return the decompressed content in an unspecified format.\n\t     * The format will depend on the decompressor.\n\t     * @return {Object} the decompressed content.\n\t     */\n\t    getContent: function() {\n\t        return null; // see implementation\n\t    },\n\t    /**\n\t     * Return the compressed content in an unspecified format.\n\t     * The format will depend on the compressed conten source.\n\t     * @return {Object} the compressed content.\n\t     */\n\t    getCompressedContent: function() {\n\t        return null; // see implementation\n\t    }\n\t};\n\tmodule.exports = CompressedObject;\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(10);\n\tvar support = __webpack_require__(9);\n\tvar nodeBuffer = __webpack_require__(29);\n\t\n\t/**\n\t * The following functions come from pako, from pako/lib/utils/strings\n\t * released under the MIT license, see pako https://github.com/nodeca/pako/\n\t */\n\t\n\t// Table with utf8 lengths (calculated by first byte of sequence)\n\t// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n\t// because max possible codepoint is 0x10ffff\n\tvar _utf8len = new Array(256);\n\tfor (var i=0; i<256; i++) {\n\t  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);\n\t}\n\t_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\t\n\t// convert string to array (typed, when possible)\n\tvar string2buf = function (str) {\n\t    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\t\n\t    // count binary size\n\t    for (m_pos = 0; m_pos < str_len; m_pos++) {\n\t        c = str.charCodeAt(m_pos);\n\t        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n\t            c2 = str.charCodeAt(m_pos+1);\n\t            if ((c2 & 0xfc00) === 0xdc00) {\n\t                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n\t                m_pos++;\n\t            }\n\t        }\n\t        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n\t    }\n\t\n\t    // allocate buffer\n\t    if (support.uint8array) {\n\t        buf = new Uint8Array(buf_len);\n\t    } else {\n\t        buf = new Array(buf_len);\n\t    }\n\t\n\t    // convert\n\t    for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n\t        c = str.charCodeAt(m_pos);\n\t        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n\t            c2 = str.charCodeAt(m_pos+1);\n\t            if ((c2 & 0xfc00) === 0xdc00) {\n\t                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n\t                m_pos++;\n\t            }\n\t        }\n\t        if (c < 0x80) {\n\t            /* one byte */\n\t            buf[i++] = c;\n\t        } else if (c < 0x800) {\n\t            /* two bytes */\n\t            buf[i++] = 0xC0 | (c >>> 6);\n\t            buf[i++] = 0x80 | (c & 0x3f);\n\t        } else if (c < 0x10000) {\n\t            /* three bytes */\n\t            buf[i++] = 0xE0 | (c >>> 12);\n\t            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n\t            buf[i++] = 0x80 | (c & 0x3f);\n\t        } else {\n\t            /* four bytes */\n\t            buf[i++] = 0xf0 | (c >>> 18);\n\t            buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n\t            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n\t            buf[i++] = 0x80 | (c & 0x3f);\n\t        }\n\t    }\n\t\n\t    return buf;\n\t};\n\t\n\t// Calculate max possible position in utf8 buffer,\n\t// that will not break sequence. If that's not possible\n\t// - (very small limits) return max size as is.\n\t//\n\t// buf[] - utf8 bytes array\n\t// max   - length limit (mandatory);\n\tvar utf8border = function(buf, max) {\n\t    var pos;\n\t\n\t    max = max || buf.length;\n\t    if (max > buf.length) { max = buf.length; }\n\t\n\t    // go back from last position, until start of sequence found\n\t    pos = max-1;\n\t    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\t\n\t    // Fuckup - very small and broken sequence,\n\t    // return max, because we should return something anyway.\n\t    if (pos < 0) { return max; }\n\t\n\t    // If we came to start of buffer - that means vuffer is too small,\n\t    // return max too.\n\t    if (pos === 0) { return max; }\n\t\n\t    return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n\t};\n\t\n\t// convert array to string\n\tvar buf2string = function (buf) {\n\t    var str, i, out, c, c_len;\n\t    var len = buf.length;\n\t\n\t    // Reserve max possible length (2 words per char)\n\t    // NB: by unknown reasons, Array is significantly faster for\n\t    //     String.fromCharCode.apply than Uint16Array.\n\t    var utf16buf = new Array(len*2);\n\t\n\t    for (out=0, i=0; i<len;) {\n\t        c = buf[i++];\n\t        // quick process ascii\n\t        if (c < 0x80) { utf16buf[out++] = c; continue; }\n\t\n\t        c_len = _utf8len[c];\n\t        // skip 5 & 6 byte codes\n\t        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\t\n\t        // apply mask on first byte\n\t        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n\t        // join the rest\n\t        while (c_len > 1 && i < len) {\n\t            c = (c << 6) | (buf[i++] & 0x3f);\n\t            c_len--;\n\t        }\n\t\n\t        // terminated by end of string?\n\t        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\t\n\t        if (c < 0x10000) {\n\t            utf16buf[out++] = c;\n\t        } else {\n\t            c -= 0x10000;\n\t            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n\t            utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n\t        }\n\t    }\n\t\n\t    // shrinkBuf(utf16buf, out)\n\t    if (utf16buf.length !== out) {\n\t        if(utf16buf.subarray) {\n\t            utf16buf = utf16buf.subarray(0, out);\n\t        } else {\n\t            utf16buf.length = out;\n\t        }\n\t    }\n\t\n\t    // return String.fromCharCode.apply(null, utf16buf);\n\t    return utils.applyFromCharCode(utf16buf);\n\t};\n\t\n\t\n\t// That's all for the pako functions.\n\t\n\t\n\t/**\n\t * Transform a javascript string into an array (typed if possible) of bytes,\n\t * UTF-8 encoded.\n\t * @param {String} str the string to encode\n\t * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.\n\t */\n\texports.utf8encode = function utf8encode(str) {\n\t    if (support.nodebuffer) {\n\t        return nodeBuffer(str, \"utf-8\");\n\t    }\n\t\n\t    return string2buf(str);\n\t};\n\t\n\t\n\t/**\n\t * Transform a bytes array (or a representation) representing an UTF-8 encoded\n\t * string into a javascript string.\n\t * @param {Array|Uint8Array|Buffer} buf the data de decode\n\t * @return {String} the decoded string.\n\t */\n\texports.utf8decode = function utf8decode(buf) {\n\t    if (support.nodebuffer) {\n\t        return utils.transformTo(\"nodebuffer\", buf).toString(\"utf-8\");\n\t    }\n\t\n\t    buf = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", buf);\n\t\n\t    // return buf2string(buf);\n\t    // Chrome prefers to work with \"small\" chunks of data\n\t    // for the method buf2string.\n\t    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.\n\t    var result = [], k = 0, len = buf.length, chunk = 65536;\n\t    while (k < len) {\n\t        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));\n\t        if (support.uint8array) {\n\t            result.push(buf2string(buf.subarray(k, nextBoundary)));\n\t        } else {\n\t            result.push(buf2string(buf.slice(k, nextBoundary)));\n\t        }\n\t        k = nextBoundary;\n\t    }\n\t    return result.join(\"\");\n\t\n\t};\n\t// vim: set shiftwidth=4 softtabstop=4:\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(10);\n\t\n\t/**\n\t * An object to write any content to a string.\n\t * @constructor\n\t */\n\tvar StringWriter = function() {\n\t    this.data = [];\n\t};\n\tStringWriter.prototype = {\n\t    /**\n\t     * Append any content to the current string.\n\t     * @param {Object} input the content to add.\n\t     */\n\t    append: function(input) {\n\t        input = utils.transformTo(\"string\", input);\n\t        this.data.push(input);\n\t    },\n\t    /**\n\t     * Finalize the construction an return the result.\n\t     * @return {string} the generated string.\n\t     */\n\t    finalize: function() {\n\t        return this.data.join(\"\");\n\t    }\n\t};\n\t\n\tmodule.exports = StringWriter;\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(10);\n\t\n\t/**\n\t * An object to write any content to an Uint8Array.\n\t * @constructor\n\t * @param {number} length The length of the array.\n\t */\n\tvar Uint8ArrayWriter = function(length) {\n\t    this.data = new Uint8Array(length);\n\t    this.index = 0;\n\t};\n\tUint8ArrayWriter.prototype = {\n\t    /**\n\t     * Append any content to the current array.\n\t     * @param {Object} input the content to add.\n\t     */\n\t    append: function(input) {\n\t        if (input.length !== 0) {\n\t            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n\t            input = utils.transformTo(\"uint8array\", input);\n\t            this.data.set(input, this.index);\n\t            this.index += input.length;\n\t        }\n\t    },\n\t    /**\n\t     * Finalize the construction an return the result.\n\t     * @return {Uint8Array} the generated array.\n\t     */\n\t    finalize: function() {\n\t        return this.data;\n\t    }\n\t};\n\t\n\tmodule.exports = Uint8ArrayWriter;\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar base64 = __webpack_require__(7);\n\tvar ZipEntries = __webpack_require__(38);\n\tmodule.exports = function(data, options) {\n\t    var files, zipEntries, i, input;\n\t    options = options || {};\n\t    if (options.base64) {\n\t        data = base64.decode(data);\n\t    }\n\t\n\t    zipEntries = new ZipEntries(data, options);\n\t    files = zipEntries.files;\n\t    for (i = 0; i < files.length; i++) {\n\t        input = files[i];\n\t        this.file(input.fileName, input.decompressed, {\n\t            binary: true,\n\t            optimizedBinaryString: true,\n\t            date: input.date,\n\t            dir: input.dir,\n\t            comment : input.fileComment.length ? input.fileComment : null,\n\t            unixPermissions : input.unixPermissions,\n\t            dosPermissions : input.dosPermissions,\n\t            createFolders: options.createFolders\n\t        });\n\t    }\n\t    if (zipEntries.zipComment.length) {\n\t        this.comment = zipEntries.zipComment;\n\t    }\n\t\n\t    return this;\n\t};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar StringReader = __webpack_require__(39);\n\tvar NodeBufferReader = __webpack_require__(41);\n\tvar Uint8ArrayReader = __webpack_require__(42);\n\tvar utils = __webpack_require__(10);\n\tvar sig = __webpack_require__(31);\n\tvar ZipEntry = __webpack_require__(43);\n\tvar support = __webpack_require__(9);\n\tvar jszipProto = __webpack_require__(8);\n\t//  class ZipEntries {{{\n\t/**\n\t * All the entries in the zip file.\n\t * @constructor\n\t * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.\n\t * @param {Object} loadOptions Options for loading the stream.\n\t */\n\tfunction ZipEntries(data, loadOptions) {\n\t    this.files = [];\n\t    this.loadOptions = loadOptions;\n\t    if (data) {\n\t        this.load(data);\n\t    }\n\t}\n\tZipEntries.prototype = {\n\t    /**\n\t     * Check that the reader is on the speficied signature.\n\t     * @param {string} expectedSignature the expected signature.\n\t     * @throws {Error} if it is an other signature.\n\t     */\n\t    checkSignature: function(expectedSignature) {\n\t        var signature = this.reader.readString(4);\n\t        if (signature !== expectedSignature) {\n\t            throw new Error(\"Corrupted zip or bug : unexpected signature \" + \"(\" + utils.pretty(signature) + \", expected \" + utils.pretty(expectedSignature) + \")\");\n\t        }\n\t    },\n\t    /**\n\t     * Read the end of the central directory.\n\t     */\n\t    readBlockEndOfCentral: function() {\n\t        this.diskNumber = this.reader.readInt(2);\n\t        this.diskWithCentralDirStart = this.reader.readInt(2);\n\t        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);\n\t        this.centralDirRecords = this.reader.readInt(2);\n\t        this.centralDirSize = this.reader.readInt(4);\n\t        this.centralDirOffset = this.reader.readInt(4);\n\t\n\t        this.zipCommentLength = this.reader.readInt(2);\n\t        // warning : the encoding depends of the system locale\n\t        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.\n\t        // On a windows machine, this field is encoded with the localized windows code page.\n\t        this.zipComment = this.reader.readString(this.zipCommentLength);\n\t        // To get consistent behavior with the generation part, we will assume that\n\t        // this is utf8 encoded.\n\t        this.zipComment = jszipProto.utf8decode(this.zipComment);\n\t    },\n\t    /**\n\t     * Read the end of the Zip 64 central directory.\n\t     * Not merged with the method readEndOfCentral :\n\t     * The end of central can coexist with its Zip64 brother,\n\t     * I don't want to read the wrong number of bytes !\n\t     */\n\t    readBlockZip64EndOfCentral: function() {\n\t        this.zip64EndOfCentralSize = this.reader.readInt(8);\n\t        this.versionMadeBy = this.reader.readString(2);\n\t        this.versionNeeded = this.reader.readInt(2);\n\t        this.diskNumber = this.reader.readInt(4);\n\t        this.diskWithCentralDirStart = this.reader.readInt(4);\n\t        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);\n\t        this.centralDirRecords = this.reader.readInt(8);\n\t        this.centralDirSize = this.reader.readInt(8);\n\t        this.centralDirOffset = this.reader.readInt(8);\n\t\n\t        this.zip64ExtensibleData = {};\n\t        var extraDataSize = this.zip64EndOfCentralSize - 44,\n\t            index = 0,\n\t            extraFieldId,\n\t            extraFieldLength,\n\t            extraFieldValue;\n\t        while (index < extraDataSize) {\n\t            extraFieldId = this.reader.readInt(2);\n\t            extraFieldLength = this.reader.readInt(4);\n\t            extraFieldValue = this.reader.readString(extraFieldLength);\n\t            this.zip64ExtensibleData[extraFieldId] = {\n\t                id: extraFieldId,\n\t                length: extraFieldLength,\n\t                value: extraFieldValue\n\t            };\n\t        }\n\t    },\n\t    /**\n\t     * Read the end of the Zip 64 central directory locator.\n\t     */\n\t    readBlockZip64EndOfCentralLocator: function() {\n\t        this.diskWithZip64CentralDirStart = this.reader.readInt(4);\n\t        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);\n\t        this.disksCount = this.reader.readInt(4);\n\t        if (this.disksCount > 1) {\n\t            throw new Error(\"Multi-volumes zip are not supported\");\n\t        }\n\t    },\n\t    /**\n\t     * Read the local files, based on the offset read in the central part.\n\t     */\n\t    readLocalFiles: function() {\n\t        var i, file;\n\t        for (i = 0; i < this.files.length; i++) {\n\t            file = this.files[i];\n\t            this.reader.setIndex(file.localHeaderOffset);\n\t            this.checkSignature(sig.LOCAL_FILE_HEADER);\n\t            file.readLocalPart(this.reader);\n\t            file.handleUTF8();\n\t            file.processAttributes();\n\t        }\n\t    },\n\t    /**\n\t     * Read the central directory.\n\t     */\n\t    readCentralDir: function() {\n\t        var file;\n\t\n\t        this.reader.setIndex(this.centralDirOffset);\n\t        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {\n\t            file = new ZipEntry({\n\t                zip64: this.zip64\n\t            }, this.loadOptions);\n\t            file.readCentralPart(this.reader);\n\t            this.files.push(file);\n\t        }\n\t    },\n\t    /**\n\t     * Read the end of central directory.\n\t     */\n\t    readEndOfCentral: function() {\n\t        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);\n\t        if (offset === -1) {\n\t            // Check if the content is a truncated zip or complete garbage.\n\t            // A \"LOCAL_FILE_HEADER\" is not required at the beginning (auto\n\t            // extractible zip for example) but it can give a good hint.\n\t            // If an ajax request was used without responseType, we will also\n\t            // get unreadable data.\n\t            var isGarbage = true;\n\t            try {\n\t                this.reader.setIndex(0);\n\t                this.checkSignature(sig.LOCAL_FILE_HEADER);\n\t                isGarbage = false;\n\t            } catch (e) {}\n\t\n\t            if (isGarbage) {\n\t                throw new Error(\"Can't find end of central directory : is this a zip file ? \" +\n\t                                \"If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html\");\n\t            } else {\n\t                throw new Error(\"Corrupted zip : can't find end of central directory\");\n\t            }\n\t        }\n\t        this.reader.setIndex(offset);\n\t        this.checkSignature(sig.CENTRAL_DIRECTORY_END);\n\t        this.readBlockEndOfCentral();\n\t\n\t\n\t        /* extract from the zip spec :\n\t            4)  If one of the fields in the end of central directory\n\t                record is too small to hold required data, the field\n\t                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the\n\t                ZIP64 format record should be created.\n\t            5)  The end of central directory record and the\n\t                Zip64 end of central directory locator record must\n\t                reside on the same disk when splitting or spanning\n\t                an archive.\n\t         */\n\t        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {\n\t            this.zip64 = true;\n\t\n\t            /*\n\t            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from\n\t            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents\n\t            all numbers as 64-bit double precision IEEE 754 floating point numbers.\n\t            So, we have 53bits for integers and bitwise operations treat everything as 32bits.\n\t            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators\n\t            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5\n\t            */\n\t\n\t            // should look for a zip64 EOCD locator\n\t            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n\t            if (offset === -1) {\n\t                throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory locator\");\n\t            }\n\t            this.reader.setIndex(offset);\n\t            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n\t            this.readBlockZip64EndOfCentralLocator();\n\t\n\t            // now the zip64 EOCD record\n\t            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);\n\t            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n\t            this.readBlockZip64EndOfCentral();\n\t        }\n\t    },\n\t    prepareReader: function(data) {\n\t        var type = utils.getTypeOf(data);\n\t        if (type === \"string\" && !support.uint8array) {\n\t            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);\n\t        }\n\t        else if (type === \"nodebuffer\") {\n\t            this.reader = new NodeBufferReader(data);\n\t        }\n\t        else {\n\t            this.reader = new Uint8ArrayReader(utils.transformTo(\"uint8array\", data));\n\t        }\n\t    },\n\t    /**\n\t     * Read a zip file and create ZipEntries.\n\t     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.\n\t     */\n\t    load: function(data) {\n\t        this.prepareReader(data);\n\t        this.readEndOfCentral();\n\t        this.readCentralDir();\n\t        this.readLocalFiles();\n\t    }\n\t};\n\t// }}} end of ZipEntries\n\tmodule.exports = ZipEntries;\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar DataReader = __webpack_require__(40);\n\tvar utils = __webpack_require__(10);\n\t\n\tfunction StringReader(data, optimizedBinaryString) {\n\t    this.data = data;\n\t    if (!optimizedBinaryString) {\n\t        this.data = utils.string2binary(this.data);\n\t    }\n\t    this.length = this.data.length;\n\t    this.index = 0;\n\t}\n\tStringReader.prototype = new DataReader();\n\t/**\n\t * @see DataReader.byteAt\n\t */\n\tStringReader.prototype.byteAt = function(i) {\n\t    return this.data.charCodeAt(i);\n\t};\n\t/**\n\t * @see DataReader.lastIndexOfSignature\n\t */\n\tStringReader.prototype.lastIndexOfSignature = function(sig) {\n\t    return this.data.lastIndexOf(sig);\n\t};\n\t/**\n\t * @see DataReader.readData\n\t */\n\tStringReader.prototype.readData = function(size) {\n\t    this.checkOffset(size);\n\t    // this will work because the constructor applied the \"& 0xff\" mask.\n\t    var result = this.data.slice(this.index, this.index + size);\n\t    this.index += size;\n\t    return result;\n\t};\n\tmodule.exports = StringReader;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar utils = __webpack_require__(10);\n\t\n\tfunction DataReader(data) {\n\t    this.data = null; // type : see implementation\n\t    this.length = 0;\n\t    this.index = 0;\n\t}\n\tDataReader.prototype = {\n\t    /**\n\t     * Check that the offset will not go too far.\n\t     * @param {string} offset the additional offset to check.\n\t     * @throws {Error} an Error if the offset is out of bounds.\n\t     */\n\t    checkOffset: function(offset) {\n\t        this.checkIndex(this.index + offset);\n\t    },\n\t    /**\n\t     * Check that the specifed index will not be too far.\n\t     * @param {string} newIndex the index to check.\n\t     * @throws {Error} an Error if the index is out of bounds.\n\t     */\n\t    checkIndex: function(newIndex) {\n\t        if (this.length < newIndex || newIndex < 0) {\n\t            throw new Error(\"End of data reached (data length = \" + this.length + \", asked index = \" + (newIndex) + \"). Corrupted zip ?\");\n\t        }\n\t    },\n\t    /**\n\t     * Change the index.\n\t     * @param {number} newIndex The new index.\n\t     * @throws {Error} if the new index is out of the data.\n\t     */\n\t    setIndex: function(newIndex) {\n\t        this.checkIndex(newIndex);\n\t        this.index = newIndex;\n\t    },\n\t    /**\n\t     * Skip the next n bytes.\n\t     * @param {number} n the number of bytes to skip.\n\t     * @throws {Error} if the new index is out of the data.\n\t     */\n\t    skip: function(n) {\n\t        this.setIndex(this.index + n);\n\t    },\n\t    /**\n\t     * Get the byte at the specified index.\n\t     * @param {number} i the index to use.\n\t     * @return {number} a byte.\n\t     */\n\t    byteAt: function(i) {\n\t        // see implementations\n\t    },\n\t    /**\n\t     * Get the next number with a given byte size.\n\t     * @param {number} size the number of bytes to read.\n\t     * @return {number} the corresponding number.\n\t     */\n\t    readInt: function(size) {\n\t        var result = 0,\n\t            i;\n\t        this.checkOffset(size);\n\t        for (i = this.index + size - 1; i >= this.index; i--) {\n\t            result = (result << 8) + this.byteAt(i);\n\t        }\n\t        this.index += size;\n\t        return result;\n\t    },\n\t    /**\n\t     * Get the next string with a given byte size.\n\t     * @param {number} size the number of bytes to read.\n\t     * @return {string} the corresponding string.\n\t     */\n\t    readString: function(size) {\n\t        return utils.transformTo(\"string\", this.readData(size));\n\t    },\n\t    /**\n\t     * Get raw data without conversion, <size> bytes.\n\t     * @param {number} size the number of bytes to read.\n\t     * @return {Object} the raw data, implementation specific.\n\t     */\n\t    readData: function(size) {\n\t        // see implementations\n\t    },\n\t    /**\n\t     * Find the last occurence of a zip signature (4 bytes).\n\t     * @param {string} sig the signature to find.\n\t     * @return {number} the index of the last occurence, -1 if not found.\n\t     */\n\t    lastIndexOfSignature: function(sig) {\n\t        // see implementations\n\t    },\n\t    /**\n\t     * Get the next date.\n\t     * @return {Date} the date.\n\t     */\n\t    readDate: function() {\n\t        var dostime = this.readInt(4);\n\t        return new Date(\n\t        ((dostime >> 25) & 0x7f) + 1980, // year\n\t        ((dostime >> 21) & 0x0f) - 1, // month\n\t        (dostime >> 16) & 0x1f, // day\n\t        (dostime >> 11) & 0x1f, // hour\n\t        (dostime >> 5) & 0x3f, // minute\n\t        (dostime & 0x1f) << 1); // second\n\t    }\n\t};\n\tmodule.exports = DataReader;\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar Uint8ArrayReader = __webpack_require__(42);\n\t\n\tfunction NodeBufferReader(data) {\n\t    this.data = data;\n\t    this.length = this.data.length;\n\t    this.index = 0;\n\t}\n\tNodeBufferReader.prototype = new Uint8ArrayReader();\n\t\n\t/**\n\t * @see DataReader.readData\n\t */\n\tNodeBufferReader.prototype.readData = function(size) {\n\t    this.checkOffset(size);\n\t    var result = this.data.slice(this.index, this.index + size);\n\t    this.index += size;\n\t    return result;\n\t};\n\tmodule.exports = NodeBufferReader;\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar DataReader = __webpack_require__(40);\n\t\n\tfunction Uint8ArrayReader(data) {\n\t    if (data) {\n\t        this.data = data;\n\t        this.length = this.data.length;\n\t        this.index = 0;\n\t    }\n\t}\n\tUint8ArrayReader.prototype = new DataReader();\n\t/**\n\t * @see DataReader.byteAt\n\t */\n\tUint8ArrayReader.prototype.byteAt = function(i) {\n\t    return this.data[i];\n\t};\n\t/**\n\t * @see DataReader.lastIndexOfSignature\n\t */\n\tUint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {\n\t    var sig0 = sig.charCodeAt(0),\n\t        sig1 = sig.charCodeAt(1),\n\t        sig2 = sig.charCodeAt(2),\n\t        sig3 = sig.charCodeAt(3);\n\t    for (var i = this.length - 4; i >= 0; --i) {\n\t        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {\n\t            return i;\n\t        }\n\t    }\n\t\n\t    return -1;\n\t};\n\t/**\n\t * @see DataReader.readData\n\t */\n\tUint8ArrayReader.prototype.readData = function(size) {\n\t    this.checkOffset(size);\n\t    if(size === 0) {\n\t        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].\n\t        return new Uint8Array(0);\n\t    }\n\t    var result = this.data.subarray(this.index, this.index + size);\n\t    this.index += size;\n\t    return result;\n\t};\n\tmodule.exports = Uint8ArrayReader;\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar StringReader = __webpack_require__(39);\n\tvar utils = __webpack_require__(10);\n\tvar CompressedObject = __webpack_require__(33);\n\tvar jszipProto = __webpack_require__(8);\n\t\n\tvar MADE_BY_DOS = 0x00;\n\tvar MADE_BY_UNIX = 0x03;\n\t\n\t// class ZipEntry {{{\n\t/**\n\t * An entry in the zip file.\n\t * @constructor\n\t * @param {Object} options Options of the current file.\n\t * @param {Object} loadOptions Options for loading the stream.\n\t */\n\tfunction ZipEntry(options, loadOptions) {\n\t    this.options = options;\n\t    this.loadOptions = loadOptions;\n\t}\n\tZipEntry.prototype = {\n\t    /**\n\t     * say if the file is encrypted.\n\t     * @return {boolean} true if the file is encrypted, false otherwise.\n\t     */\n\t    isEncrypted: function() {\n\t        // bit 1 is set\n\t        return (this.bitFlag & 0x0001) === 0x0001;\n\t    },\n\t    /**\n\t     * say if the file has utf-8 filename/comment.\n\t     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n\t     */\n\t    useUTF8: function() {\n\t        // bit 11 is set\n\t        return (this.bitFlag & 0x0800) === 0x0800;\n\t    },\n\t    /**\n\t     * Prepare the function used to generate the compressed content from this ZipFile.\n\t     * @param {DataReader} reader the reader to use.\n\t     * @param {number} from the offset from where we should read the data.\n\t     * @param {number} length the length of the data to read.\n\t     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n\t     */\n\t    prepareCompressedContent: function(reader, from, length) {\n\t        return function() {\n\t            var previousIndex = reader.index;\n\t            reader.setIndex(from);\n\t            var compressedFileData = reader.readData(length);\n\t            reader.setIndex(previousIndex);\n\t\n\t            return compressedFileData;\n\t        };\n\t    },\n\t    /**\n\t     * Prepare the function used to generate the uncompressed content from this ZipFile.\n\t     * @param {DataReader} reader the reader to use.\n\t     * @param {number} from the offset from where we should read the data.\n\t     * @param {number} length the length of the data to read.\n\t     * @param {JSZip.compression} compression the compression used on this file.\n\t     * @param {number} uncompressedSize the uncompressed size to expect.\n\t     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n\t     */\n\t    prepareContent: function(reader, from, length, compression, uncompressedSize) {\n\t        return function() {\n\t\n\t            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n\t            var uncompressedFileData = compression.uncompress(compressedFileData);\n\t\n\t            if (uncompressedFileData.length !== uncompressedSize) {\n\t                throw new Error(\"Bug : uncompressed data size mismatch\");\n\t            }\n\t\n\t            return uncompressedFileData;\n\t        };\n\t    },\n\t    /**\n\t     * Read the local part of a zip file and add the info in this object.\n\t     * @param {DataReader} reader the reader to use.\n\t     */\n\t    readLocalPart: function(reader) {\n\t        var compression, localExtraFieldsLength;\n\t\n\t        // we already know everything from the central dir !\n\t        // If the central dir data are false, we are doomed.\n\t        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n\t        // The less data we get here, the more reliable this should be.\n\t        // Let's skip the whole header and dash to the data !\n\t        reader.skip(22);\n\t        // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n\t        // Strangely, the filename here is OK.\n\t        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n\t        // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n\t        // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n\t        // the internet.\n\t        //\n\t        // I think I see the logic here : the central directory is used to display\n\t        // content and the local directory is used to extract the files. Mixing / and \\\n\t        // may be used to display \\ to windows users and use / when extracting the files.\n\t        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n\t        this.fileNameLength = reader.readInt(2);\n\t        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n\t        this.fileName = reader.readString(this.fileNameLength);\n\t        reader.skip(localExtraFieldsLength);\n\t\n\t        if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n\t            throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n\t        }\n\t\n\t        compression = utils.findCompression(this.compressionMethod);\n\t        if (compression === null) { // no compression found\n\t            throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + this.fileName + \")\");\n\t        }\n\t        this.decompressed = new CompressedObject();\n\t        this.decompressed.compressedSize = this.compressedSize;\n\t        this.decompressed.uncompressedSize = this.uncompressedSize;\n\t        this.decompressed.crc32 = this.crc32;\n\t        this.decompressed.compressionMethod = this.compressionMethod;\n\t        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n\t        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);\n\t\n\t        // we need to compute the crc32...\n\t        if (this.loadOptions.checkCRC32) {\n\t            this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n\t            if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n\t                throw new Error(\"Corrupted zip : CRC32 mismatch\");\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Read the central part of a zip file and add the info in this object.\n\t     * @param {DataReader} reader the reader to use.\n\t     */\n\t    readCentralPart: function(reader) {\n\t        this.versionMadeBy = reader.readInt(2);\n\t        this.versionNeeded = reader.readInt(2);\n\t        this.bitFlag = reader.readInt(2);\n\t        this.compressionMethod = reader.readString(2);\n\t        this.date = reader.readDate();\n\t        this.crc32 = reader.readInt(4);\n\t        this.compressedSize = reader.readInt(4);\n\t        this.uncompressedSize = reader.readInt(4);\n\t        this.fileNameLength = reader.readInt(2);\n\t        this.extraFieldsLength = reader.readInt(2);\n\t        this.fileCommentLength = reader.readInt(2);\n\t        this.diskNumberStart = reader.readInt(2);\n\t        this.internalFileAttributes = reader.readInt(2);\n\t        this.externalFileAttributes = reader.readInt(4);\n\t        this.localHeaderOffset = reader.readInt(4);\n\t\n\t        if (this.isEncrypted()) {\n\t            throw new Error(\"Encrypted zip are not supported\");\n\t        }\n\t\n\t        this.fileName = reader.readString(this.fileNameLength);\n\t        this.readExtraFields(reader);\n\t        this.parseZIP64ExtraField(reader);\n\t        this.fileComment = reader.readString(this.fileCommentLength);\n\t    },\n\t\n\t    /**\n\t     * Parse the external file attributes and get the unix/dos permissions.\n\t     */\n\t    processAttributes: function () {\n\t        this.unixPermissions = null;\n\t        this.dosPermissions = null;\n\t        var madeBy = this.versionMadeBy >> 8;\n\t\n\t        // Check if we have the DOS directory flag set.\n\t        // We look for it in the DOS and UNIX permissions\n\t        // but some unknown platform could set it as a compatibility flag.\n\t        this.dir = this.externalFileAttributes & 0x0010 ? true : false;\n\t\n\t        if(madeBy === MADE_BY_DOS) {\n\t            // first 6 bits (0 to 5)\n\t            this.dosPermissions = this.externalFileAttributes & 0x3F;\n\t        }\n\t\n\t        if(madeBy === MADE_BY_UNIX) {\n\t            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;\n\t            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);\n\t        }\n\t\n\t        // fail safe : if the name ends with a / it probably means a folder\n\t        if (!this.dir && this.fileName.slice(-1) === '/') {\n\t            this.dir = true;\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n\t     * @param {DataReader} reader the reader to use.\n\t     */\n\t    parseZIP64ExtraField: function(reader) {\n\t\n\t        if (!this.extraFields[0x0001]) {\n\t            return;\n\t        }\n\t\n\t        // should be something, preparing the extra reader\n\t        var extraReader = new StringReader(this.extraFields[0x0001].value);\n\t\n\t        // I really hope that these 64bits integer can fit in 32 bits integer, because js\n\t        // won't let us have more.\n\t        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n\t            this.uncompressedSize = extraReader.readInt(8);\n\t        }\n\t        if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n\t            this.compressedSize = extraReader.readInt(8);\n\t        }\n\t        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n\t            this.localHeaderOffset = extraReader.readInt(8);\n\t        }\n\t        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n\t            this.diskNumberStart = extraReader.readInt(4);\n\t        }\n\t    },\n\t    /**\n\t     * Read the central part of a zip file and add the info in this object.\n\t     * @param {DataReader} reader the reader to use.\n\t     */\n\t    readExtraFields: function(reader) {\n\t        var start = reader.index,\n\t            extraFieldId,\n\t            extraFieldLength,\n\t            extraFieldValue;\n\t\n\t        this.extraFields = this.extraFields || {};\n\t\n\t        while (reader.index < start + this.extraFieldsLength) {\n\t            extraFieldId = reader.readInt(2);\n\t            extraFieldLength = reader.readInt(2);\n\t            extraFieldValue = reader.readString(extraFieldLength);\n\t\n\t            this.extraFields[extraFieldId] = {\n\t                id: extraFieldId,\n\t                length: extraFieldLength,\n\t                value: extraFieldValue\n\t            };\n\t        }\n\t    },\n\t    /**\n\t     * Apply an UTF8 transformation if needed.\n\t     */\n\t    handleUTF8: function() {\n\t        if (this.useUTF8()) {\n\t            this.fileName = jszipProto.utf8decode(this.fileName);\n\t            this.fileComment = jszipProto.utf8decode(this.fileComment);\n\t        } else {\n\t            var upath = this.findExtraFieldUnicodePath();\n\t            if (upath !== null) {\n\t                this.fileName = upath;\n\t            }\n\t            var ucomment = this.findExtraFieldUnicodeComment();\n\t            if (ucomment !== null) {\n\t                this.fileComment = ucomment;\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Find the unicode path declared in the extra field, if any.\n\t     * @return {String} the unicode path, null otherwise.\n\t     */\n\t    findExtraFieldUnicodePath: function() {\n\t        var upathField = this.extraFields[0x7075];\n\t        if (upathField) {\n\t            var extraReader = new StringReader(upathField.value);\n\t\n\t            // wrong version\n\t            if (extraReader.readInt(1) !== 1) {\n\t                return null;\n\t            }\n\t\n\t            // the crc of the filename changed, this field is out of date.\n\t            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n\t                return null;\n\t            }\n\t\n\t            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n\t        }\n\t        return null;\n\t    },\n\t\n\t    /**\n\t     * Find the unicode comment declared in the extra field, if any.\n\t     * @return {String} the unicode comment, null otherwise.\n\t     */\n\t    findExtraFieldUnicodeComment: function() {\n\t        var ucommentField = this.extraFields[0x6375];\n\t        if (ucommentField) {\n\t            var extraReader = new StringReader(ucommentField.value);\n\t\n\t            // wrong version\n\t            if (extraReader.readInt(1) !== 1) {\n\t                return null;\n\t            }\n\t\n\t            // the crc of the comment changed, this field is out of date.\n\t            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n\t                return null;\n\t            }\n\t\n\t            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n\t        }\n\t        return null;\n\t    }\n\t};\n\tmodule.exports = ZipEntry;\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar utils = __webpack_require__(10);\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.string2binary = function(str) {\n\t    return utils.string2binary(str);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.string2Uint8Array = function(str) {\n\t    return utils.transformTo(\"uint8array\", str);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.uint8Array2String = function(array) {\n\t    return utils.transformTo(\"string\", array);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.string2Blob = function(str) {\n\t    var buffer = utils.transformTo(\"arraybuffer\", str);\n\t    return utils.arrayBuffer2Blob(buffer);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.arrayBuffer2Blob = function(buffer) {\n\t    return utils.arrayBuffer2Blob(buffer);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.transformTo = function(outputType, input) {\n\t    return utils.transformTo(outputType, input);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.getTypeOf = function(input) {\n\t    return utils.getTypeOf(input);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.checkSupport = function(type) {\n\t    return utils.checkSupport(type);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This value will be removed in a future version without replacement.\n\t */\n\texports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;\n\t\n\t/**\n\t * @deprecated\n\t * This value will be removed in a future version without replacement.\n\t */\n\texports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;\n\t\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.pretty = function(str) {\n\t    return utils.pretty(str);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.findCompression = function(compressionMethod) {\n\t    return utils.findCompression(compressionMethod);\n\t};\n\t\n\t/**\n\t * @deprecated\n\t * This function will be removed in a future version without replacement.\n\t */\n\texports.isRegExp = function (object) {\n\t    return utils.isRegExp(object);\n\t};\n\t\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(46)\n\t\n\tfunction error () {\n\t  var m = [].slice.call(arguments).join(' ')\n\t  throw new Error([\n\t    m,\n\t    'we accept pull requests',\n\t    'http://github.com/dominictarr/crypto-browserify'\n\t    ].join('\\n'))\n\t}\n\t\n\texports.createHash = __webpack_require__(48)\n\t\n\texports.createHmac = __webpack_require__(61)\n\t\n\texports.randomBytes = function(size, callback) {\n\t  if (callback && callback.call) {\n\t    try {\n\t      callback.call(this, undefined, new Buffer(rng(size)))\n\t    } catch (err) { callback(err) }\n\t  } else {\n\t    return new Buffer(rng(size))\n\t  }\n\t}\n\t\n\tfunction each(a, f) {\n\t  for(var i in a)\n\t    f(a[i], i)\n\t}\n\t\n\texports.getHashes = function () {\n\t  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']\n\t}\n\t\n\tvar p = __webpack_require__(62)(exports)\n\texports.pbkdf2 = p.pbkdf2\n\texports.pbkdf2Sync = p.pbkdf2Sync\n\t\n\t\n\t// the least I can do is make error messages for the rest of the node.js/crypto api.\n\teach(['createCredentials'\n\t, 'createCipher'\n\t, 'createCipheriv'\n\t, 'createDecipher'\n\t, 'createDecipheriv'\n\t, 'createSign'\n\t, 'createVerify'\n\t, 'createDiffieHellman'\n\t], function (name) {\n\t  exports[name] = function () {\n\t    error('sorry,', name, 'is not implemented yet')\n\t  }\n\t})\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {\n\t  var g = ('undefined' === typeof window ? global : window) || {}\n\t  _crypto = (\n\t    g.crypto || g.msCrypto || __webpack_require__(47)\n\t  )\n\t  module.exports = function(size) {\n\t    // Modern Browsers\n\t    if(_crypto.getRandomValues) {\n\t      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array\n\t      /* This will not work in older browsers.\n\t       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n\t       */\n\t    \n\t      _crypto.getRandomValues(bytes);\n\t      return bytes;\n\t    }\n\t    else if (_crypto.randomBytes) {\n\t      return _crypto.randomBytes(size)\n\t    }\n\t    else\n\t      throw new Error(\n\t        'secure random number generation not supported by this browser\\n'+\n\t        'use chrome, FireFox or Internet Explorer 11'\n\t      )\n\t  }\n\t}())\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(2).Buffer))\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\t/* (ignored) */\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(49)\n\t\n\tvar md5 = toConstructor(__webpack_require__(58))\n\tvar rmd160 = toConstructor(__webpack_require__(60))\n\t\n\tfunction toConstructor (fn) {\n\t  return function () {\n\t    var buffers = []\n\t    var m= {\n\t      update: function (data, enc) {\n\t        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)\n\t        buffers.push(data)\n\t        return this\n\t      },\n\t      digest: function (enc) {\n\t        var buf = Buffer.concat(buffers)\n\t        var r = fn(buf)\n\t        buffers = null\n\t        return enc ? r.toString(enc) : r\n\t      }\n\t    }\n\t    return m\n\t  }\n\t}\n\t\n\tmodule.exports = function (alg) {\n\t  if('md5' === alg) return new md5()\n\t  if('rmd160' === alg) return new rmd160()\n\t  return createHash(alg)\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar exports = module.exports = function (alg) {\n\t  var Alg = exports[alg]\n\t  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')\n\t  return new Alg()\n\t}\n\t\n\tvar Buffer = __webpack_require__(2).Buffer\n\tvar Hash   = __webpack_require__(50)(Buffer)\n\t\n\texports.sha1 = __webpack_require__(51)(Buffer, Hash)\n\texports.sha256 = __webpack_require__(56)(Buffer, Hash)\n\texports.sha512 = __webpack_require__(57)(Buffer, Hash)\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function (Buffer) {\n\t\n\t  //prototype class for hash functions\n\t  function Hash (blockSize, finalSize) {\n\t    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)\n\t    this._finalSize = finalSize\n\t    this._blockSize = blockSize\n\t    this._len = 0\n\t    this._s = 0\n\t  }\n\t\n\t  Hash.prototype.init = function () {\n\t    this._s = 0\n\t    this._len = 0\n\t  }\n\t\n\t  Hash.prototype.update = function (data, enc) {\n\t    if (\"string\" === typeof data) {\n\t      enc = enc || \"utf8\"\n\t      data = new Buffer(data, enc)\n\t    }\n\t\n\t    var l = this._len += data.length\n\t    var s = this._s = (this._s || 0)\n\t    var f = 0\n\t    var buffer = this._block\n\t\n\t    while (s < l) {\n\t      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))\n\t      var ch = (t - f)\n\t\n\t      for (var i = 0; i < ch; i++) {\n\t        buffer[(s % this._blockSize) + i] = data[i + f]\n\t      }\n\t\n\t      s += ch\n\t      f += ch\n\t\n\t      if ((s % this._blockSize) === 0) {\n\t        this._update(buffer)\n\t      }\n\t    }\n\t    this._s = s\n\t\n\t    return this\n\t  }\n\t\n\t  Hash.prototype.digest = function (enc) {\n\t    // Suppose the length of the message M, in bits, is l\n\t    var l = this._len * 8\n\t\n\t    // Append the bit 1 to the end of the message\n\t    this._block[this._len % this._blockSize] = 0x80\n\t\n\t    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n\t    this._block.fill(0, this._len % this._blockSize + 1)\n\t\n\t    if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n\t      this._update(this._block)\n\t      this._block.fill(0)\n\t    }\n\t\n\t    // to this append the block which is equal to the number l written in binary\n\t    // TODO: handle case where l is > Math.pow(2, 29)\n\t    this._block.writeInt32BE(l, this._blockSize - 4)\n\t\n\t    var hash = this._update(this._block) || this._hash()\n\t\n\t    return enc ? hash.toString(enc) : hash\n\t  }\n\t\n\t  Hash.prototype._update = function () {\n\t    throw new Error('_update must be implemented by subclass')\n\t  }\n\t\n\t  return Hash\n\t}\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n\t * in FIPS PUB 180-1\n\t * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t * Distributed under the BSD License\n\t * See http://pajhome.org.uk/crypt/md5 for details.\n\t */\n\t\n\tvar inherits = __webpack_require__(52).inherits\n\t\n\tmodule.exports = function (Buffer, Hash) {\n\t\n\t  var A = 0|0\n\t  var B = 4|0\n\t  var C = 8|0\n\t  var D = 12|0\n\t  var E = 16|0\n\t\n\t  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)\n\t\n\t  var POOL = []\n\t\n\t  function Sha1 () {\n\t    if(POOL.length)\n\t      return POOL.pop().init()\n\t\n\t    if(!(this instanceof Sha1)) return new Sha1()\n\t    this._w = W\n\t    Hash.call(this, 16*4, 14*4)\n\t\n\t    this._h = null\n\t    this.init()\n\t  }\n\t\n\t  inherits(Sha1, Hash)\n\t\n\t  Sha1.prototype.init = function () {\n\t    this._a = 0x67452301\n\t    this._b = 0xefcdab89\n\t    this._c = 0x98badcfe\n\t    this._d = 0x10325476\n\t    this._e = 0xc3d2e1f0\n\t\n\t    Hash.prototype.init.call(this)\n\t    return this\n\t  }\n\t\n\t  Sha1.prototype._POOL = POOL\n\t  Sha1.prototype._update = function (X) {\n\t\n\t    var a, b, c, d, e, _a, _b, _c, _d, _e\n\t\n\t    a = _a = this._a\n\t    b = _b = this._b\n\t    c = _c = this._c\n\t    d = _d = this._d\n\t    e = _e = this._e\n\t\n\t    var w = this._w\n\t\n\t    for(var j = 0; j < 80; j++) {\n\t      var W = w[j] = j < 16 ? X.readInt32BE(j*4)\n\t        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)\n\t\n\t      var t = add(\n\t        add(rol(a, 5), sha1_ft(j, b, c, d)),\n\t        add(add(e, W), sha1_kt(j))\n\t      )\n\t\n\t      e = d\n\t      d = c\n\t      c = rol(b, 30)\n\t      b = a\n\t      a = t\n\t    }\n\t\n\t    this._a = add(a, _a)\n\t    this._b = add(b, _b)\n\t    this._c = add(c, _c)\n\t    this._d = add(d, _d)\n\t    this._e = add(e, _e)\n\t  }\n\t\n\t  Sha1.prototype._hash = function () {\n\t    if(POOL.length < 100) POOL.push(this)\n\t    var H = new Buffer(20)\n\t    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)\n\t    H.writeInt32BE(this._a|0, A)\n\t    H.writeInt32BE(this._b|0, B)\n\t    H.writeInt32BE(this._c|0, C)\n\t    H.writeInt32BE(this._d|0, D)\n\t    H.writeInt32BE(this._e|0, E)\n\t    return H\n\t  }\n\t\n\t  /*\n\t   * Perform the appropriate triplet combination function for the current\n\t   * iteration\n\t   */\n\t  function sha1_ft(t, b, c, d) {\n\t    if(t < 20) return (b & c) | ((~b) & d);\n\t    if(t < 40) return b ^ c ^ d;\n\t    if(t < 60) return (b & c) | (b & d) | (c & d);\n\t    return b ^ c ^ d;\n\t  }\n\t\n\t  /*\n\t   * Determine the appropriate additive constant for the current iteration\n\t   */\n\t  function sha1_kt(t) {\n\t    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n\t           (t < 60) ? -1894007588 : -899497514;\n\t  }\n\t\n\t  /*\n\t   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n\t   * to work around bugs in some JS interpreters.\n\t   * //dominictarr: this is 10 years old, so maybe this can be dropped?)\n\t   *\n\t   */\n\t  function add(x, y) {\n\t    return (x + y ) | 0\n\t  //lets see how this goes on testling.\n\t  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n\t  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t  //  return (msw << 16) | (lsw & 0xFFFF);\n\t  }\n\t\n\t  /*\n\t   * Bitwise rotate a 32-bit number to the left.\n\t   */\n\t  function rol(num, cnt) {\n\t    return (num << cnt) | (num >>> (32 - cnt));\n\t  }\n\t\n\t  return Sha1\n\t}\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n\t\n\t  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\t\n\t\n\t// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global.process)) {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  if (process.noDeprecation === true) {\n\t    return fn;\n\t  }\n\t\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\t\n\t  return deprecated;\n\t};\n\t\n\t\n\tvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\t\n\t\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */\n\t/* legacy: obj, showHidden, depth, colors*/\n\tfunction inspect(obj, opts) {\n\t  // default options\n\t  var ctx = {\n\t    seen: [],\n\t    stylize: stylizeNoColor\n\t  };\n\t  // legacy...\n\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t  if (isBoolean(opts)) {\n\t    // legacy...\n\t    ctx.showHidden = opts;\n\t  } else if (opts) {\n\t    // got an \"options\" object\n\t    exports._extend(ctx, opts);\n\t  }\n\t  // set default options\n\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t  return formatValue(ctx, obj, ctx.depth);\n\t}\n\texports.inspect = inspect;\n\t\n\t\n\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\tinspect.colors = {\n\t  'bold' : [1, 22],\n\t  'italic' : [3, 23],\n\t  'underline' : [4, 24],\n\t  'inverse' : [7, 27],\n\t  'white' : [37, 39],\n\t  'grey' : [90, 39],\n\t  'black' : [30, 39],\n\t  'blue' : [34, 39],\n\t  'cyan' : [36, 39],\n\t  'green' : [32, 39],\n\t  'magenta' : [35, 39],\n\t  'red' : [31, 39],\n\t  'yellow' : [33, 39]\n\t};\n\t\n\t// Don't use 'blue' not visible on cmd.exe\n\tinspect.styles = {\n\t  'special': 'cyan',\n\t  'number': 'yellow',\n\t  'boolean': 'yellow',\n\t  'undefined': 'grey',\n\t  'null': 'bold',\n\t  'string': 'green',\n\t  'date': 'magenta',\n\t  // \"name\": intentionally not styling\n\t  'regexp': 'red'\n\t};\n\t\n\t\n\tfunction stylizeWithColor(str, styleType) {\n\t  var style = inspect.styles[styleType];\n\t\n\t  if (style) {\n\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t  } else {\n\t    return str;\n\t  }\n\t}\n\t\n\t\n\tfunction stylizeNoColor(str, styleType) {\n\t  return str;\n\t}\n\t\n\t\n\tfunction arrayToHash(array) {\n\t  var hash = {};\n\t\n\t  array.forEach(function(val, idx) {\n\t    hash[val] = true;\n\t  });\n\t\n\t  return hash;\n\t}\n\t\n\t\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (ctx.customInspect &&\n\t      value &&\n\t      isFunction(value.inspect) &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes, ctx);\n\t    if (!isString(ret)) {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\t\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\t\n\t  // Look up the keys of the object.\n\t  var keys = Object.keys(value);\n\t  var visibleKeys = arrayToHash(keys);\n\t\n\t  if (ctx.showHidden) {\n\t    keys = Object.getOwnPropertyNames(value);\n\t  }\n\t\n\t  // IE doesn't make error fields non-enumerable\n\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t  if (isError(value)\n\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t    return formatError(value);\n\t  }\n\t\n\t  // Some type of object without properties can be shortcutted.\n\t  if (keys.length === 0) {\n\t    if (isFunction(value)) {\n\t      var name = value.name ? ': ' + value.name : '';\n\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\t\n\t  var base = '', array = false, braces = ['{', '}'];\n\t\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\t\n\t  // Make functions say that they are functions\n\t  if (isFunction(value)) {\n\t    var n = value.name ? ': ' + value.name : '';\n\t    base = ' [Function' + n + ']';\n\t  }\n\t\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\t\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\t\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    base = ' ' + formatError(value);\n\t  }\n\t\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\t\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\t\n\t  ctx.seen.push(value);\n\t\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\t\n\t  ctx.seen.pop();\n\t\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\t\n\t\n\tfunction formatPrimitive(ctx, value) {\n\t  if (isUndefined(value))\n\t    return ctx.stylize('undefined', 'undefined');\n\t  if (isString(value)) {\n\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                             .replace(/'/g, \"\\\\'\")\n\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t    return ctx.stylize(simple, 'string');\n\t  }\n\t  if (isNumber(value))\n\t    return ctx.stylize('' + value, 'number');\n\t  if (isBoolean(value))\n\t    return ctx.stylize('' + value, 'boolean');\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (isNull(value))\n\t    return ctx.stylize('null', 'null');\n\t}\n\t\n\t\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\t\n\t\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (hasOwnProperty(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\t\n\t\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str, desc;\n\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t  if (desc.get) {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t    } else {\n\t      str = ctx.stylize('[Getter]', 'special');\n\t    }\n\t  } else {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Setter]', 'special');\n\t    }\n\t  }\n\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t      if (isNull(recurseTimes)) {\n\t        str = formatValue(ctx, desc.value, null);\n\t      } else {\n\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (isUndefined(name)) {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\t\n\t  return name + ': ' + str;\n\t}\n\t\n\t\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t  }, 0);\n\t\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\t\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\t\n\t\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar);\n\t}\n\texports.isArray = isArray;\n\t\n\tfunction isBoolean(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\texports.isBoolean = isBoolean;\n\t\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\texports.isNull = isNull;\n\t\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\texports.isNullOrUndefined = isNullOrUndefined;\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\texports.isNumber = isNumber;\n\t\n\tfunction isString(arg) {\n\t  return typeof arg === 'string';\n\t}\n\texports.isString = isString;\n\t\n\tfunction isSymbol(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\texports.isSymbol = isSymbol;\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\texports.isUndefined = isUndefined;\n\t\n\tfunction isRegExp(re) {\n\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t}\n\texports.isRegExp = isRegExp;\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\texports.isObject = isObject;\n\t\n\tfunction isDate(d) {\n\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t}\n\texports.isDate = isDate;\n\t\n\tfunction isError(e) {\n\t  return isObject(e) &&\n\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t}\n\texports.isError = isError;\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\texports.isPrimitive = isPrimitive;\n\t\n\texports.isBuffer = __webpack_require__(54);\n\t\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\t\n\t\n\tfunction pad(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\t\n\t\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t              'Oct', 'Nov', 'Dec'];\n\t\n\t// 26 Feb 16:19:34\n\tfunction timestamp() {\n\t  var d = new Date();\n\t  var time = [pad(d.getHours()),\n\t              pad(d.getMinutes()),\n\t              pad(d.getSeconds())].join(':');\n\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t}\n\t\n\t\n\t// log is just a thin wrapper to console.log that prepends a timestamp\n\texports.log = function() {\n\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t};\n\t\n\t\n\t/**\n\t * Inherit the prototype methods from one constructor into another.\n\t *\n\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t * during bootstrapping this function needs to be rewritten using some native\n\t * functions as prototype setup using normal JavaScript does not work as\n\t * expected during bootstrapping (see mirror.js in r114903).\n\t *\n\t * @param {function} ctor Constructor function which needs to inherit the\n\t *     prototype.\n\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t */\n\texports.inherits = __webpack_require__(55);\n\t\n\texports._extend = function(origin, add) {\n\t  // Don't do anything if add isn't an object\n\t  if (!add || !isObject(add)) return origin;\n\t\n\t  var keys = Object.keys(add);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    origin[keys[i]] = add[keys[i]];\n\t  }\n\t  return origin;\n\t};\n\t\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(53)))\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            currentQueue[queueIndex].run();\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\t// TODO(shtylman)\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/**\n\t * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n\t * in FIPS 180-2\n\t * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t *\n\t */\n\t\n\tvar inherits = __webpack_require__(52).inherits\n\t\n\tmodule.exports = function (Buffer, Hash) {\n\t\n\t  var K = [\n\t      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n\t      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n\t      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n\t      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n\t      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n\t      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n\t      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n\t      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n\t      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n\t      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n\t      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n\t      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n\t      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n\t      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n\t      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n\t      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n\t    ]\n\t\n\t  var W = new Array(64)\n\t\n\t  function Sha256() {\n\t    this.init()\n\t\n\t    this._w = W //new Array(64)\n\t\n\t    Hash.call(this, 16*4, 14*4)\n\t  }\n\t\n\t  inherits(Sha256, Hash)\n\t\n\t  Sha256.prototype.init = function () {\n\t\n\t    this._a = 0x6a09e667|0\n\t    this._b = 0xbb67ae85|0\n\t    this._c = 0x3c6ef372|0\n\t    this._d = 0xa54ff53a|0\n\t    this._e = 0x510e527f|0\n\t    this._f = 0x9b05688c|0\n\t    this._g = 0x1f83d9ab|0\n\t    this._h = 0x5be0cd19|0\n\t\n\t    this._len = this._s = 0\n\t\n\t    return this\n\t  }\n\t\n\t  function S (X, n) {\n\t    return (X >>> n) | (X << (32 - n));\n\t  }\n\t\n\t  function R (X, n) {\n\t    return (X >>> n);\n\t  }\n\t\n\t  function Ch (x, y, z) {\n\t    return ((x & y) ^ ((~x) & z));\n\t  }\n\t\n\t  function Maj (x, y, z) {\n\t    return ((x & y) ^ (x & z) ^ (y & z));\n\t  }\n\t\n\t  function Sigma0256 (x) {\n\t    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));\n\t  }\n\t\n\t  function Sigma1256 (x) {\n\t    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));\n\t  }\n\t\n\t  function Gamma0256 (x) {\n\t    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));\n\t  }\n\t\n\t  function Gamma1256 (x) {\n\t    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));\n\t  }\n\t\n\t  Sha256.prototype._update = function(M) {\n\t\n\t    var W = this._w\n\t    var a, b, c, d, e, f, g, h\n\t    var T1, T2\n\t\n\t    a = this._a | 0\n\t    b = this._b | 0\n\t    c = this._c | 0\n\t    d = this._d | 0\n\t    e = this._e | 0\n\t    f = this._f | 0\n\t    g = this._g | 0\n\t    h = this._h | 0\n\t\n\t    for (var j = 0; j < 64; j++) {\n\t      var w = W[j] = j < 16\n\t        ? M.readInt32BE(j * 4)\n\t        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]\n\t\n\t      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w\n\t\n\t      T2 = Sigma0256(a) + Maj(a, b, c);\n\t      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;\n\t    }\n\t\n\t    this._a = (a + this._a) | 0\n\t    this._b = (b + this._b) | 0\n\t    this._c = (c + this._c) | 0\n\t    this._d = (d + this._d) | 0\n\t    this._e = (e + this._e) | 0\n\t    this._f = (f + this._f) | 0\n\t    this._g = (g + this._g) | 0\n\t    this._h = (h + this._h) | 0\n\t\n\t  };\n\t\n\t  Sha256.prototype._hash = function () {\n\t    var H = new Buffer(32)\n\t\n\t    H.writeInt32BE(this._a,  0)\n\t    H.writeInt32BE(this._b,  4)\n\t    H.writeInt32BE(this._c,  8)\n\t    H.writeInt32BE(this._d, 12)\n\t    H.writeInt32BE(this._e, 16)\n\t    H.writeInt32BE(this._f, 20)\n\t    H.writeInt32BE(this._g, 24)\n\t    H.writeInt32BE(this._h, 28)\n\t\n\t    return H\n\t  }\n\t\n\t  return Sha256\n\t\n\t}\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar inherits = __webpack_require__(52).inherits\n\t\n\tmodule.exports = function (Buffer, Hash) {\n\t  var K = [\n\t    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n\t    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n\t    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n\t    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n\t    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n\t    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n\t    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n\t    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n\t    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n\t    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n\t    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n\t    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n\t    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n\t    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n\t    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n\t    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n\t    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n\t    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n\t    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n\t    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n\t    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n\t    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n\t    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n\t    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n\t    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n\t    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n\t    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n\t    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n\t    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n\t    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n\t    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n\t    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n\t    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n\t    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n\t    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n\t    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n\t    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n\t    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n\t    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n\t    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n\t  ]\n\t\n\t  var W = new Array(160)\n\t\n\t  function Sha512() {\n\t    this.init()\n\t    this._w = W\n\t\n\t    Hash.call(this, 128, 112)\n\t  }\n\t\n\t  inherits(Sha512, Hash)\n\t\n\t  Sha512.prototype.init = function () {\n\t\n\t    this._a = 0x6a09e667|0\n\t    this._b = 0xbb67ae85|0\n\t    this._c = 0x3c6ef372|0\n\t    this._d = 0xa54ff53a|0\n\t    this._e = 0x510e527f|0\n\t    this._f = 0x9b05688c|0\n\t    this._g = 0x1f83d9ab|0\n\t    this._h = 0x5be0cd19|0\n\t\n\t    this._al = 0xf3bcc908|0\n\t    this._bl = 0x84caa73b|0\n\t    this._cl = 0xfe94f82b|0\n\t    this._dl = 0x5f1d36f1|0\n\t    this._el = 0xade682d1|0\n\t    this._fl = 0x2b3e6c1f|0\n\t    this._gl = 0xfb41bd6b|0\n\t    this._hl = 0x137e2179|0\n\t\n\t    this._len = this._s = 0\n\t\n\t    return this\n\t  }\n\t\n\t  function S (X, Xl, n) {\n\t    return (X >>> n) | (Xl << (32 - n))\n\t  }\n\t\n\t  function Ch (x, y, z) {\n\t    return ((x & y) ^ ((~x) & z));\n\t  }\n\t\n\t  function Maj (x, y, z) {\n\t    return ((x & y) ^ (x & z) ^ (y & z));\n\t  }\n\t\n\t  Sha512.prototype._update = function(M) {\n\t\n\t    var W = this._w\n\t    var a, b, c, d, e, f, g, h\n\t    var al, bl, cl, dl, el, fl, gl, hl\n\t\n\t    a = this._a | 0\n\t    b = this._b | 0\n\t    c = this._c | 0\n\t    d = this._d | 0\n\t    e = this._e | 0\n\t    f = this._f | 0\n\t    g = this._g | 0\n\t    h = this._h | 0\n\t\n\t    al = this._al | 0\n\t    bl = this._bl | 0\n\t    cl = this._cl | 0\n\t    dl = this._dl | 0\n\t    el = this._el | 0\n\t    fl = this._fl | 0\n\t    gl = this._gl | 0\n\t    hl = this._hl | 0\n\t\n\t    for (var i = 0; i < 80; i++) {\n\t      var j = i * 2\n\t\n\t      var Wi, Wil\n\t\n\t      if (i < 16) {\n\t        Wi = W[j] = M.readInt32BE(j * 4)\n\t        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)\n\t\n\t      } else {\n\t        var x  = W[j - 15*2]\n\t        var xl = W[j - 15*2 + 1]\n\t        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)\n\t        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)\n\t\n\t        x  = W[j - 2*2]\n\t        xl = W[j - 2*2 + 1]\n\t        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)\n\t        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)\n\t\n\t        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t        var Wi7  = W[j - 7*2]\n\t        var Wi7l = W[j - 7*2 + 1]\n\t\n\t        var Wi16  = W[j - 16*2]\n\t        var Wi16l = W[j - 16*2 + 1]\n\t\n\t        Wil = gamma0l + Wi7l\n\t        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)\n\t        Wil = Wil + gamma1l\n\t        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)\n\t        Wil = Wil + Wi16l\n\t        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)\n\t\n\t        W[j] = Wi\n\t        W[j + 1] = Wil\n\t      }\n\t\n\t      var maj = Maj(a, b, c)\n\t      var majl = Maj(al, bl, cl)\n\t\n\t      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)\n\t      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)\n\t      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)\n\t      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)\n\t\n\t      // t1 = h + sigma1 + ch + K[i] + W[i]\n\t      var Ki = K[j]\n\t      var Kil = K[j + 1]\n\t\n\t      var ch = Ch(e, f, g)\n\t      var chl = Ch(el, fl, gl)\n\t\n\t      var t1l = hl + sigma1l\n\t      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)\n\t      t1l = t1l + chl\n\t      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)\n\t      t1l = t1l + Kil\n\t      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)\n\t      t1l = t1l + Wil\n\t      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)\n\t\n\t      // t2 = sigma0 + maj\n\t      var t2l = sigma0l + majl\n\t      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)\n\t\n\t      h  = g\n\t      hl = gl\n\t      g  = f\n\t      gl = fl\n\t      f  = e\n\t      fl = el\n\t      el = (dl + t1l) | 0\n\t      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n\t      d  = c\n\t      dl = cl\n\t      c  = b\n\t      cl = bl\n\t      b  = a\n\t      bl = al\n\t      al = (t1l + t2l) | 0\n\t      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0\n\t    }\n\t\n\t    this._al = (this._al + al) | 0\n\t    this._bl = (this._bl + bl) | 0\n\t    this._cl = (this._cl + cl) | 0\n\t    this._dl = (this._dl + dl) | 0\n\t    this._el = (this._el + el) | 0\n\t    this._fl = (this._fl + fl) | 0\n\t    this._gl = (this._gl + gl) | 0\n\t    this._hl = (this._hl + hl) | 0\n\t\n\t    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0\n\t    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0\n\t    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0\n\t    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n\t    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0\n\t    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0\n\t    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0\n\t    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0\n\t  }\n\t\n\t  Sha512.prototype._hash = function () {\n\t    var H = new Buffer(64)\n\t\n\t    function writeInt64BE(h, l, offset) {\n\t      H.writeInt32BE(h, offset)\n\t      H.writeInt32BE(l, offset + 4)\n\t    }\n\t\n\t    writeInt64BE(this._a, this._al, 0)\n\t    writeInt64BE(this._b, this._bl, 8)\n\t    writeInt64BE(this._c, this._cl, 16)\n\t    writeInt64BE(this._d, this._dl, 24)\n\t    writeInt64BE(this._e, this._el, 32)\n\t    writeInt64BE(this._f, this._fl, 40)\n\t    writeInt64BE(this._g, this._gl, 48)\n\t    writeInt64BE(this._h, this._hl, 56)\n\t\n\t    return H\n\t  }\n\t\n\t  return Sha512\n\t\n\t}\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*\n\t * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n\t * Digest Algorithm, as defined in RFC 1321.\n\t * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n\t * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n\t * Distributed under the BSD License\n\t * See http://pajhome.org.uk/crypt/md5 for more info.\n\t */\n\t\n\tvar helpers = __webpack_require__(59);\n\t\n\t/*\n\t * Calculate the MD5 of an array of little-endian words, and a bit length\n\t */\n\tfunction core_md5(x, len)\n\t{\n\t  /* append padding */\n\t  x[len >> 5] |= 0x80 << ((len) % 32);\n\t  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\t\n\t  var a =  1732584193;\n\t  var b = -271733879;\n\t  var c = -1732584194;\n\t  var d =  271733878;\n\t\n\t  for(var i = 0; i < x.length; i += 16)\n\t  {\n\t    var olda = a;\n\t    var oldb = b;\n\t    var oldc = c;\n\t    var oldd = d;\n\t\n\t    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n\t    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n\t    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n\t    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n\t    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n\t    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n\t    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n\t    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n\t    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n\t    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n\t    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n\t    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n\t    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n\t    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n\t    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n\t    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\t\n\t    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n\t    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n\t    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n\t    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n\t    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n\t    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n\t    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n\t    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n\t    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n\t    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n\t    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n\t    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n\t    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n\t    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n\t    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n\t    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\t\n\t    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n\t    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n\t    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n\t    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n\t    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n\t    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n\t    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n\t    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n\t    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n\t    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n\t    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n\t    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n\t    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n\t    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n\t    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n\t    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\t\n\t    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n\t    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n\t    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n\t    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n\t    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n\t    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n\t    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n\t    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n\t    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n\t    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n\t    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n\t    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n\t    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n\t    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n\t    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n\t    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\t\n\t    a = safe_add(a, olda);\n\t    b = safe_add(b, oldb);\n\t    c = safe_add(c, oldc);\n\t    d = safe_add(d, oldd);\n\t  }\n\t  return Array(a, b, c, d);\n\t\n\t}\n\t\n\t/*\n\t * These functions implement the four basic operations the algorithm uses.\n\t */\n\tfunction md5_cmn(q, a, b, x, s, t)\n\t{\n\t  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\n\t}\n\tfunction md5_ff(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n\t}\n\tfunction md5_gg(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n\t}\n\tfunction md5_hh(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n\t}\n\tfunction md5_ii(a, b, c, d, x, s, t)\n\t{\n\t  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n\t}\n\t\n\t/*\n\t * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n\t * to work around bugs in some JS interpreters.\n\t */\n\tfunction safe_add(x, y)\n\t{\n\t  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n\t  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t  return (msw << 16) | (lsw & 0xFFFF);\n\t}\n\t\n\t/*\n\t * Bitwise rotate a 32-bit number to the left.\n\t */\n\tfunction bit_rol(num, cnt)\n\t{\n\t  return (num << cnt) | (num >>> (32 - cnt));\n\t}\n\t\n\tmodule.exports = function md5(buf) {\n\t  return helpers.hash(buf, core_md5, 16);\n\t};\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;\n\tvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\n\tvar chrsz = 8;\n\t\n\tfunction toArray(buf, bigEndian) {\n\t  if ((buf.length % intSize) !== 0) {\n\t    var len = buf.length + (intSize - (buf.length % intSize));\n\t    buf = Buffer.concat([buf, zeroBuffer], len);\n\t  }\n\t\n\t  var arr = [];\n\t  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n\t  for (var i = 0; i < buf.length; i += intSize) {\n\t    arr.push(fn.call(buf, i));\n\t  }\n\t  return arr;\n\t}\n\t\n\tfunction toBuffer(arr, size, bigEndian) {\n\t  var buf = new Buffer(size);\n\t  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n\t  for (var i = 0; i < arr.length; i++) {\n\t    fn.call(buf, arr[i], i * 4, true);\n\t  }\n\t  return buf;\n\t}\n\t\n\tfunction hash(buf, fn, hashSize, bigEndian) {\n\t  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n\t  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n\t  return toBuffer(arr, hashSize, bigEndian);\n\t}\n\t\n\tmodule.exports = { hash: hash };\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {\n\tmodule.exports = ripemd160\n\t\n\t\n\t\n\t/*\n\tCryptoJS v3.1.2\n\tcode.google.com/p/crypto-js\n\t(c) 2009-2013 by Jeff Mott. All rights reserved.\n\tcode.google.com/p/crypto-js/wiki/License\n\t*/\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\t\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\t\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\t\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\t\n\t// Constants table\n\tvar zl = [\n\t    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];\n\tvar zr = [\n\t    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];\n\tvar sl = [\n\t     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];\n\tvar sr = [\n\t    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];\n\t\n\tvar hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];\n\tvar hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];\n\t\n\tvar bytesToWords = function (bytes) {\n\t  var words = [];\n\t  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n\t    words[b >>> 5] |= bytes[i] << (24 - b % 32);\n\t  }\n\t  return words;\n\t};\n\t\n\tvar wordsToBytes = function (words) {\n\t  var bytes = [];\n\t  for (var b = 0; b < words.length * 32; b += 8) {\n\t    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n\t  }\n\t  return bytes;\n\t};\n\t\n\tvar processBlock = function (H, M, offset) {\n\t\n\t  // Swap endian\n\t  for (var i = 0; i < 16; i++) {\n\t    var offset_i = offset + i;\n\t    var M_offset_i = M[offset_i];\n\t\n\t    // Swap\n\t    M[offset_i] = (\n\t        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t    );\n\t  }\n\t\n\t  // Working variables\n\t  var al, bl, cl, dl, el;\n\t  var ar, br, cr, dr, er;\n\t\n\t  ar = al = H[0];\n\t  br = bl = H[1];\n\t  cr = cl = H[2];\n\t  dr = dl = H[3];\n\t  er = el = H[4];\n\t  // Computation\n\t  var t;\n\t  for (var i = 0; i < 80; i += 1) {\n\t    t = (al +  M[offset+zl[i]])|0;\n\t    if (i<16){\n\t        t +=  f1(bl,cl,dl) + hl[0];\n\t    } else if (i<32) {\n\t        t +=  f2(bl,cl,dl) + hl[1];\n\t    } else if (i<48) {\n\t        t +=  f3(bl,cl,dl) + hl[2];\n\t    } else if (i<64) {\n\t        t +=  f4(bl,cl,dl) + hl[3];\n\t    } else {// if (i<80) {\n\t        t +=  f5(bl,cl,dl) + hl[4];\n\t    }\n\t    t = t|0;\n\t    t =  rotl(t,sl[i]);\n\t    t = (t+el)|0;\n\t    al = el;\n\t    el = dl;\n\t    dl = rotl(cl, 10);\n\t    cl = bl;\n\t    bl = t;\n\t\n\t    t = (ar + M[offset+zr[i]])|0;\n\t    if (i<16){\n\t        t +=  f5(br,cr,dr) + hr[0];\n\t    } else if (i<32) {\n\t        t +=  f4(br,cr,dr) + hr[1];\n\t    } else if (i<48) {\n\t        t +=  f3(br,cr,dr) + hr[2];\n\t    } else if (i<64) {\n\t        t +=  f2(br,cr,dr) + hr[3];\n\t    } else {// if (i<80) {\n\t        t +=  f1(br,cr,dr) + hr[4];\n\t    }\n\t    t = t|0;\n\t    t =  rotl(t,sr[i]) ;\n\t    t = (t+er)|0;\n\t    ar = er;\n\t    er = dr;\n\t    dr = rotl(cr, 10);\n\t    cr = br;\n\t    br = t;\n\t  }\n\t  // Intermediate hash value\n\t  t    = (H[1] + cl + dr)|0;\n\t  H[1] = (H[2] + dl + er)|0;\n\t  H[2] = (H[3] + el + ar)|0;\n\t  H[3] = (H[4] + al + br)|0;\n\t  H[4] = (H[0] + bl + cr)|0;\n\t  H[0] =  t;\n\t};\n\t\n\tfunction f1(x, y, z) {\n\t  return ((x) ^ (y) ^ (z));\n\t}\n\t\n\tfunction f2(x, y, z) {\n\t  return (((x)&(y)) | ((~x)&(z)));\n\t}\n\t\n\tfunction f3(x, y, z) {\n\t  return (((x) | (~(y))) ^ (z));\n\t}\n\t\n\tfunction f4(x, y, z) {\n\t  return (((x) & (z)) | ((y)&(~(z))));\n\t}\n\t\n\tfunction f5(x, y, z) {\n\t  return ((x) ^ ((y) |(~(z))));\n\t}\n\t\n\tfunction rotl(x,n) {\n\t  return (x<<n) | (x>>>(32-n));\n\t}\n\t\n\tfunction ripemd160(message) {\n\t  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];\n\t\n\t  if (typeof message == 'string')\n\t    message = new Buffer(message, 'utf8');\n\t\n\t  var m = bytesToWords(message);\n\t\n\t  var nBitsLeft = message.length * 8;\n\t  var nBitsTotal = message.length * 8;\n\t\n\t  // Add padding\n\t  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t  );\n\t\n\t  for (var i=0 ; i<m.length; i += 16) {\n\t    processBlock(H, m, i);\n\t  }\n\t\n\t  // Swap endian\n\t  for (var i = 0; i < 5; i++) {\n\t      // Shortcut\n\t    var H_i = H[i];\n\t\n\t    // Swap\n\t    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t  }\n\t\n\t  var digestbytes = wordsToBytes(H);\n\t  return new Buffer(digestbytes);\n\t}\n\t\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(48)\n\t\n\tvar zeroBuffer = new Buffer(128)\n\tzeroBuffer.fill(0)\n\t\n\tmodule.exports = Hmac\n\t\n\tfunction Hmac (alg, key) {\n\t  if(!(this instanceof Hmac)) return new Hmac(alg, key)\n\t  this._opad = opad\n\t  this._alg = alg\n\t\n\t  var blocksize = (alg === 'sha512') ? 128 : 64\n\t\n\t  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key\n\t\n\t  if(key.length > blocksize) {\n\t    key = createHash(alg).update(key).digest()\n\t  } else if(key.length < blocksize) {\n\t    key = Buffer.concat([key, zeroBuffer], blocksize)\n\t  }\n\t\n\t  var ipad = this._ipad = new Buffer(blocksize)\n\t  var opad = this._opad = new Buffer(blocksize)\n\t\n\t  for(var i = 0; i < blocksize; i++) {\n\t    ipad[i] = key[i] ^ 0x36\n\t    opad[i] = key[i] ^ 0x5C\n\t  }\n\t\n\t  this._hash = createHash(alg).update(ipad)\n\t}\n\t\n\tHmac.prototype.update = function (data, enc) {\n\t  this._hash.update(data, enc)\n\t  return this\n\t}\n\t\n\tHmac.prototype.digest = function (enc) {\n\t  var h = this._hash.digest()\n\t  return createHash(this._alg).update(this._opad).update(h).digest(enc)\n\t}\n\t\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar pbkdf2Export = __webpack_require__(63)\n\t\n\tmodule.exports = function (crypto, exports) {\n\t  exports = exports || {}\n\t\n\t  var exported = pbkdf2Export(crypto)\n\t\n\t  exports.pbkdf2 = exported.pbkdf2\n\t  exports.pbkdf2Sync = exported.pbkdf2Sync\n\t\n\t  return exports\n\t}\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {\n\t  function pbkdf2(password, salt, iterations, keylen, digest, callback) {\n\t    if ('function' === typeof digest) {\n\t      callback = digest\n\t      digest = undefined\n\t    }\n\t\n\t    if ('function' !== typeof callback)\n\t      throw new Error('No callback provided to pbkdf2')\n\t\n\t    setTimeout(function() {\n\t      var result\n\t\n\t      try {\n\t        result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n\t      } catch (e) {\n\t        return callback(e)\n\t      }\n\t\n\t      callback(undefined, result)\n\t    })\n\t  }\n\t\n\t  function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n\t    if ('number' !== typeof iterations)\n\t      throw new TypeError('Iterations not a number')\n\t\n\t    if (iterations < 0)\n\t      throw new TypeError('Bad iterations')\n\t\n\t    if ('number' !== typeof keylen)\n\t      throw new TypeError('Key length not a number')\n\t\n\t    if (keylen < 0)\n\t      throw new TypeError('Bad key length')\n\t\n\t    digest = digest || 'sha1'\n\t\n\t    if (!Buffer.isBuffer(password)) password = new Buffer(password)\n\t    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)\n\t\n\t    var hLen, l = 1, r, T\n\t    var DK = new Buffer(keylen)\n\t    var block1 = new Buffer(salt.length + 4)\n\t    salt.copy(block1, 0, 0, salt.length)\n\t\n\t    for (var i = 1; i <= l; i++) {\n\t      block1.writeUInt32BE(i, salt.length)\n\t\n\t      var U = crypto.createHmac(digest, password).update(block1).digest()\n\t\n\t      if (!hLen) {\n\t        hLen = U.length\n\t        T = new Buffer(hLen)\n\t        l = Math.ceil(keylen / hLen)\n\t        r = keylen - (l - 1) * hLen\n\t\n\t        if (keylen > (Math.pow(2, 32) - 1) * hLen)\n\t          throw new TypeError('keylen exceeds maximum length')\n\t      }\n\t\n\t      U.copy(T, 0, 0, hLen)\n\t\n\t      for (var j = 1; j < iterations; j++) {\n\t        U = crypto.createHmac(digest, password).update(U).digest()\n\t\n\t        for (var k = 0; k < hLen; k++) {\n\t          T[k] ^= U[k]\n\t        }\n\t      }\n\t\n\t      var destPos = (i - 1) * hLen\n\t      var len = (i == l ? r : hLen)\n\t      T.copy(DK, destPos, 0, len)\n\t    }\n\t\n\t    return DK\n\t  }\n\t\n\t  return {\n\t    pbkdf2: pbkdf2,\n\t    pbkdf2Sync: pbkdf2Sync\n\t  }\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2).Buffer))\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;// Support  CommonJS, AMD or independent user\n\t(function (name, definition) {\n\t  if (true) {\n\t    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t  }\n\t  else if (typeof module != 'undefined') module.exports = definition();\n\t  else this[name] = definition();\n\t}('Workbook', function () {\n\t\n\t  // encode functions lifted from XLSX to eliminate dependency on XLSX so this can be serialized/deserialized to JSON\n\t  function encode_row(row) { return \"\" + (row + 1); }\n\t  function encode_col(col) { var s=\"\"; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }\n\t  function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }\n\t  function encode_range(cs,ce) {\n\t    if(ce === undefined || typeof ce === 'number') return encode_range(cs.s, cs.e);\n\t    if(typeof cs !== 'string') cs = encode_cell(cs); if(typeof ce !== 'string') ce = encode_cell(ce);\n\t    return cs == ce ? cs : cs + \":\" + ce;\n\t  }\n\t\n\t  function datenum(v, date1904) {\n\t    if (date1904) v += 1462;\n\t    return (Date.parse(v) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n\t  }\n\t\n\t  return function Workbook() {\n\t\n\t      var ranges = {}; //track  extent of each sheet\n\t      var rows = {};   // accumulate data rows for each sheet\n\t\n\t      return {\n\t        SheetNames: [],\n\t        Sheets: {},\n\t        CellStyles: [],\n\t\n\t        getSheet: function (sheetName) {\n\t          if (!this.Sheets[sheetName]) {\n\t            this.Sheets[sheetName] = {};\n\t\n\t            this.SheetNames.push(sheetName);\n\t            ranges[sheetName] = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0 }};\n\t            rows[sheetName] = [];\n\t          }\n\t          return this.Sheets[sheetName];\n\t        },\n\t\n\t        getSheetRows: function (sheetName) {\n\t          var ws = this.getSheet(sheetName); // init if not previously called\n\t          return rows[sheetName];\n\t        },\n\t\n\t        getRange: function (sheetName) {\n\t          return ranges[sheetName];\n\t        },\n\t\n\t        getColumnProperties: function(sheetName) {\n\t          var ws = this.getSheet(sheetName);\n\t          if (!ws['!cols']) ws['!cols'] = [];\n\t          return ws['!cols'];\n\t        },\n\t        setCell: function (sheetName, rowIdx, colIdx, val) {\n\t          var rows = this.getSheetRows(sheetName);\n\t          if (!rows[rowIdx]) {\n\t            rows[rowIdx] = [];\n\t          }\n\t          rows[rowIdx][colIdx] = val;\n\t          return this;\n\t        },\n\t        setColWidthChars: function(sheetName, colId, width) {\n\t          var cps = this.getColumnProperties(sheetName);\n\t          if (!cps[colId]) cps[colId] = {};\n\t          cps[colId].wch = width;\n\t          return this;\n\t        },\n\t        setColWidthPixels: function(sheetName, colId, width) {\n\t          var cps = this.getColumnProperties(sheetName);\n\t          if (!cps[colId]) cps[colId] = {};\n\t          cps[colId].wpx = width;\n\t          return this;\n\t        },\n\t        getCell: function (sheetName, rowIdx, colIdx, val) {\n\t          var rows = this.getSheetRows(sheetName);\n\t          if (!rows[rowIdx]) {\n\t            rows[rowIdx] = [];\n\t          }\n\t          return rows[rowIdx][colIdx] = val;\n\t        },\n\t\n\t\n\t        addRowsToSheet: function (sheetName, rows) {\n\t          var ws = this.getSheet(sheetName);\n\t          var sheetRows = this.getSheetRows(sheetName);\n\t          rows.forEach(function (row) {\n\t            sheetRows.push(row);\n\t          });\n\t          return this;\n\t        },\n\t\n\t        finalize: function () {\n\t          var self = this;\n\t          this.SheetNames.forEach(function (sheetName) {\n\t            self._finalizeSheet(sheetName);\n\t          });\n\t          return this;\n\t        },\n\t\n\t        // { s: { c: 0, r: 0}, e: {c: 2, r: 2}}\n\t        mergeCells: function (sheetName, merge) {\n\t          var sheet = this.getSheet(sheetName);\n\t          sheet[\"!merges\"] = sheet[\"!merges\"] || [];\n\t          sheet[\"!merges\"].push(merge);\n\t          return this;\n\t        },\n\t\n\t        // data is an array of row arrays\n\t        // from https://gist.github.com/SheetJSDev/88a3ca3533adf389d13c\n\t        _finalizeSheet: function (sheetName) {\n\t          var ws = this.getSheet(sheetName), range = this.getRange(sheetName);\n\t\n\t          var data = this.getSheetRows(sheetName) || [];\n\t\n\t          for (var R = 0; R < data.length; ++R) {\n\t\n\t            for (var C = 0; data[R] && C < data[R].length; ++C) {\n\t              if (range.s.r > R) range.s.r = R;\n\t              if (range.s.c > C) range.s.c = C;\n\t              if (range.e.r < R) range.e.r = R;\n\t              if (range.e.c < C) range.e.c = C;\n\t\n\t              var cell = (typeof data[R][C] == 'object' ? data[R][C] : {v: data[R][C] });\n\t              if (cell.v == null) continue;\n\t              var cell_ref = encode_cell({c: C, r: R});\n\t\n\t              if (typeof cell.v === 'number') cell.t = 'n';\n\t              else if (typeof cell.v === 'boolean') cell.t = 'b';\n\t              else if (cell.v instanceof Date) {\n\t                cell.t = 'n';\n\t                cell.z = cell.z || 'dd/mm/yy';\n\t                cell.v = datenum(cell.v);\n\t              }\n\t              else cell.t = 's';\n\t\n\t              ws[cell_ref] = cell;\n\t            }\n\t          }\n\t          if (range && range.s.c < 10000000) ws['!ref'] = encode_range(range);\n\t          return ws;\n\t        }\n\t      }\n\t    }\n\t}));\n\t\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * Create a blob builder even when vendor prefixes exist\n\t */\n\t\n\tvar BlobBuilder = global.BlobBuilder\n\t  || global.WebKitBlobBuilder\n\t  || global.MSBlobBuilder\n\t  || global.MozBlobBuilder;\n\t\n\t/**\n\t * Check if Blob constructor is supported\n\t */\n\t\n\tvar blobSupported = (function() {\n\t  try {\n\t    var a = new Blob(['hi']);\n\t    return a.size === 2;\n\t  } catch(e) {\n\t    return false;\n\t  }\n\t})();\n\t\n\t/**\n\t * Check if Blob constructor supports ArrayBufferViews\n\t * Fails in Safari 6, so we need to map to ArrayBuffers there.\n\t */\n\t\n\tvar blobSupportsArrayBufferView = blobSupported && (function() {\n\t  try {\n\t    var b = new Blob([new Uint8Array([1,2])]);\n\t    return b.size === 2;\n\t  } catch(e) {\n\t    return false;\n\t  }\n\t})();\n\t\n\t/**\n\t * Check if BlobBuilder is supported\n\t */\n\t\n\tvar blobBuilderSupported = BlobBuilder\n\t  && BlobBuilder.prototype.append\n\t  && BlobBuilder.prototype.getBlob;\n\t\n\t/**\n\t * Helper function that maps ArrayBufferViews to ArrayBuffers\n\t * Used by BlobBuilder constructor and old browsers that didn't\n\t * support it in the Blob constructor.\n\t */\n\t\n\tfunction mapArrayBufferViews(ary) {\n\t  for (var i = 0; i < ary.length; i++) {\n\t    var chunk = ary[i];\n\t    if (chunk.buffer instanceof ArrayBuffer) {\n\t      var buf = chunk.buffer;\n\t\n\t      // if this is a subarray, make a copy so we only\n\t      // include the subarray region from the underlying buffer\n\t      if (chunk.byteLength !== buf.byteLength) {\n\t        var copy = new Uint8Array(chunk.byteLength);\n\t        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n\t        buf = copy.buffer;\n\t      }\n\t\n\t      ary[i] = buf;\n\t    }\n\t  }\n\t}\n\t\n\tfunction BlobBuilderConstructor(ary, options) {\n\t  options = options || {};\n\t\n\t  var bb = new BlobBuilder();\n\t  mapArrayBufferViews(ary);\n\t\n\t  for (var i = 0; i < ary.length; i++) {\n\t    bb.append(ary[i]);\n\t  }\n\t\n\t  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n\t};\n\t\n\tfunction BlobConstructor(ary, options) {\n\t  mapArrayBufferViews(ary);\n\t  return new Blob(ary, options || {});\n\t};\n\t\n\tmodule.exports = (function() {\n\t  if (blobSupported) {\n\t    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n\t  } else if (blobBuilderSupported) {\n\t    return BlobBuilderConstructor;\n\t  } else {\n\t    return undefined;\n\t  }\n\t})();\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/*! FileSaver.js\n\t *  A saveAs() FileSaver implementation.\n\t *  2014-01-24\n\t *\n\t *  By Eli Grey, http://eligrey.com\n\t *  License: X11/MIT\n\t *    See LICENSE.md\n\t */\n\t\n\t/*global self */\n\t/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\t\n\t/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\t\n\tvar saveAs = saveAs\n\t  // IE 10+ (native saveAs)\n\t  || (typeof navigator !== \"undefined\" &&\n\t      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))\n\t  // Everyone else\n\t  || (function(view) {\n\t\t\"use strict\";\n\t\t// IE <10 is explicitly unsupported\n\t\tif (typeof navigator !== \"undefined\" &&\n\t\t    /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\t\treturn;\n\t\t}\n\t\tvar\n\t\t\t  doc = view.document\n\t\t\t  // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet\n\t\t\t, get_URL = function() {\n\t\t\t\treturn view.URL || view.webkitURL || view;\n\t\t\t}\n\t\t\t, URL = view.URL || view.webkitURL || view\n\t\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t\t, can_use_save_link = !view.externalHost && \"download\" in save_link\n\t\t\t, click = function(node) {\n\t\t\t\tvar event = doc.createEvent(\"MouseEvents\");\n\t\t\t\tevent.initMouseEvent(\n\t\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0\n\t\t\t\t\t, false, false, false, false, 0, null\n\t\t\t\t);\n\t\t\t\tnode.dispatchEvent(event);\n\t\t\t}\n\t\t\t, webkit_req_fs = view.webkitRequestFileSystem\n\t\t\t, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem\n\t\t\t, throw_outside = function(ex) {\n\t\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\t\tthrow ex;\n\t\t\t\t}, 0);\n\t\t\t}\n\t\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t\t, fs_min_size = 0\n\t\t\t, deletion_queue = []\n\t\t\t, process_deletion_queue = function() {\n\t\t\t\tvar i = deletion_queue.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tvar file = deletion_queue[i];\n\t\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\t\tURL.revokeObjectURL(file);\n\t\t\t\t\t} else { // file is a File\n\t\t\t\t\t\tfile.remove();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdeletion_queue.length = 0; // clear queue\n\t\t\t}\n\t\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\t\tevent_types = [].concat(event_types);\n\t\t\t\tvar i = event_types.length;\n\t\t\t\twhile (i--) {\n\t\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t, FileSaver = function(blob, name) {\n\t\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\t\tvar\n\t\t\t\t\t  filesaver = this\n\t\t\t\t\t, type = blob.type\n\t\t\t\t\t, blob_changed = false\n\t\t\t\t\t, object_url\n\t\t\t\t\t, target_view\n\t\t\t\t\t, get_object_url = function() {\n\t\t\t\t\t\tvar object_url = get_URL().createObjectURL(blob);\n\t\t\t\t\t\tdeletion_queue.push(object_url);\n\t\t\t\t\t\treturn object_url;\n\t\t\t\t\t}\n\t\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t\t}\n\t\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t\t, fs_error = function() {\n\t\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\t\tif (blob_changed || !object_url) {\n\t\t\t\t\t\t\tobject_url = get_object_url(blob);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (target_view) {\n\t\t\t\t\t\t\ttarget_view.location.href = object_url;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif(navigator.userAgent.match(/7\\.[\\d\\s\\.]+Safari/)\t// is Safari 7.x\n\t\t\t\t\t\t\t\t\t&& typeof window.FileReader !== \"undefined\"\t\t\t// can convert to base64\n\t\t\t\t\t\t\t\t\t&& blob.size <= 1024*1024*150\t\t\t\t\t\t\t\t\t\t// file size max 150MB\n\t\t\t\t\t\t\t\t\t) {\t\n\t\t\t\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\t\t\tvar frame = doc.createElement(\"iframe\");\n\t\t\t\t\t\t\t\t\tframe.src = reader.result;\n\t\t\t\t\t\t\t\t\tframe.style.display = \"none\";\n\t\t\t\t\t\t\t\t\tdoc.body.appendChild(frame);\n\t\t\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASUNKNOWN;\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\twindow.open(object_url, \"_blank\");\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASBLOB;\n\t\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t, abortable = function(func) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tif (filesaver.readyState !== filesaver.DONE) {\n\t\t\t\t\t\t\t\treturn func.apply(this, arguments);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t, create_if_not_found = {create: true, exclusive: false}\n\t\t\t\t\t, slice\n\t\t\t\t;\n\t\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\t\tif (!name) {\n\t\t\t\t\tname = \"download\";\n\t\t\t\t}\n\t\t\t\tif (can_use_save_link) {\n\t\t\t\t\tobject_url = get_object_url(blob);\n\t\t\t\t\t// FF for Android has a nasty garbage collection mechanism\n\t\t\t\t\t// that turns all objects that are not pure javascript into 'deadObject'\n\t\t\t\t\t// this means `doc` and `save_link` are unusable and need to be recreated\n\t\t\t\t\t// `view` is usable though:\n\t\t\t\t\tdoc = view.document;\n\t\t\t\t\tsave_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\");\n\t\t\t\t\tsave_link.href = object_url;\n\t\t\t\t\tsave_link.download = name;\n\t\t\t\t\tvar event = doc.createEvent(\"MouseEvents\");\n\t\t\t\t\tevent.initMouseEvent(\n\t\t\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0\n\t\t\t\t\t\t, false, false, false, false, 0, null\n\t\t\t\t\t);\n\t\t\t\t\tsave_link.dispatchEvent(event);\n\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASBLOB;\n\t\t\t\t\tdispatch_all();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Object and web filesystem URLs have a problem saving in Google Chrome when\n\t\t\t\t// viewed in a tab, so I force save with application/octet-stream\n\t\t\t\t// http://code.google.com/p/chromium/issues/detail?id=91158\n\t\t\t\tif (view.chrome && type && type !== force_saveable_type) {\n\t\t\t\t\tslice = blob.slice || blob.webkitSlice;\n\t\t\t\t\tblob = slice.call(blob, 0, blob.size, force_saveable_type);\n\t\t\t\t\tblob_changed = true;\n\t\t\t\t}\n\t\t\t\t// Since I can't be sure that the guessed media type will trigger a download\n\t\t\t\t// in WebKit, I append .download to the filename.\n\t\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=65440\n\t\t\t\tif (webkit_req_fs && name !== \"download\") {\n\t\t\t\t\tname += \".download\";\n\t\t\t\t}\n\t\t\t\tif (type === force_saveable_type || webkit_req_fs) {\n\t\t\t\t\ttarget_view = view;\n\t\t\t\t}\n\t\t\t\tif (!req_fs) {\n\t\t\t\t\tfs_error();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfs_min_size += blob.size;\n\t\t\t\treq_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {\n\t\t\t\t\tfs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {\n\t\t\t\t\t\tvar save = function() {\n\t\t\t\t\t\t\tdir.getFile(name, create_if_not_found, abortable(function(file) {\n\t\t\t\t\t\t\t\tfile.createWriter(abortable(function(writer) {\n\t\t\t\t\t\t\t\t\twriter.onwriteend = function(event) {\n\t\t\t\t\t\t\t\t\t\ttarget_view.location.href = file.toURL();\n\t\t\t\t\t\t\t\t\t\tdeletion_queue.push(file);\n\t\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASBLOB;\n\t\t\t\t\t\t\t\t\t\tdispatch(filesaver, \"writeend\", event);\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\twriter.onerror = function() {\n\t\t\t\t\t\t\t\t\t\tvar error = writer.error;\n\t\t\t\t\t\t\t\t\t\tif (error.code !== error.ABORT_ERR) {\n\t\t\t\t\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\t\"writestart progress write abort\".split(\" \").forEach(function(event) {\n\t\t\t\t\t\t\t\t\t\twriter[\"on\" + event] = filesaver[\"on\" + event];\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\twriter.write(blob);\n\t\t\t\t\t\t\t\t\tfilesaver.abort = function() {\n\t\t\t\t\t\t\t\t\t\twriter.abort();\n\t\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.FAILED;\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.WRITING;\n\t\t\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tdir.getFile(name, {create: false}, abortable(function(file) {\n\t\t\t\t\t\t\t// delete file if it already exists\n\t\t\t\t\t\t\tfile.remove();\n\t\t\t\t\t\t\tsave();\n\t\t\t\t\t\t}), abortable(function(ex) {\n\t\t\t\t\t\t\tif (ex.code === ex.NOT_FOUND_ERR) {\n\t\t\t\t\t\t\t\tsave();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t}), fs_error);\n\t\t\t\t}), fs_error);\n\t\t\t}\n\t\t\t, FS_proto = FileSaver.prototype\n\t\t\t, saveAs = function(blob, name) {\n\t\t\t\treturn new FileSaver(blob, name);\n\t\t\t}\n\t\t;\n\t\tFS_proto.abort = function() {\n\t\t\tvar filesaver = this;\n\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\tfilesaver.savedAs = filesaver.FAILED;\n\t\t\tdispatch(filesaver, \"abort\");\n\t\t};\n\t\tFS_proto.readyState = FS_proto.INIT = 0;\n\t\tFS_proto.WRITING = 1;\n\t\tFS_proto.DONE = 2;\n\t\tFS_proto.FAILED = -1;\n\t\tFS_proto.SAVEDASBLOB = 1;\n\t\tFS_proto.SAVEDASURI = 2;\n\t\tFS_proto.SAVEDASUNKNOWN = 3;\n\t\n\t\tFS_proto.error =\n\t\tFS_proto.onwritestart =\n\t\tFS_proto.onprogress =\n\t\tFS_proto.onwrite =\n\t\tFS_proto.onabort =\n\t\tFS_proto.onerror =\n\t\tFS_proto.onwriteend =\n\t\t\tnull;\n\t\n\t\tview.addEventListener(\"unload\", process_deletion_queue, false);\n\t\tsaveAs.unload = function() {\n\t\t\tprocess_deletion_queue();\n\t\t\tview.removeEventListener(\"unload\", process_deletion_queue, false);\n\t\t};\n\t\treturn saveAs;\n\t}(\n\t\t   typeof self !== \"undefined\" && self\n\t\t|| typeof window !== \"undefined\" && window\n\t\t|| this.content\n\t));\n\t// `self` is undefined in Firefox for Android content script context\n\t// while `this` is nsIContentFrameMessageManager\n\t// with an attribute `content` that corresponds to the window\n\t\n\tif (typeof module !== \"undefined\" && module !== null) {\n\t  module.exports = saveAs;\n\t} else if ((\"function\" !== \"undefined\" && __webpack_require__(68) !== null) && (__webpack_require__(69) != null)) {\n\t  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t    return saveAs;\n\t  }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if(typeof Meteor !== 'undefined') { // make it available for Meteor\n\t  Meteor.saveAs = saveAs;\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(67)(module)))\n\n/***/ },\n/* 67 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function(module) {\r\n\t\tif(!module.webpackPolyfill) {\r\n\t\t\tmodule.deprecate = function() {};\r\n\t\t\tmodule.paths = [];\r\n\t\t\t// module.parent = undefined by default\r\n\t\t\tmodule.children = [];\r\n\t\t\tmodule.webpackPolyfill = 1;\r\n\t\t}\r\n\t\treturn module;\r\n\t}\r\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, {}))\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** xlsx.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 53215f6fa62a168bd6c8\n **/","var XLSX = require('./lib/xlsx');\nvar Workbook = require('./lib/workbook');\nvar Blob = require('blob');\nvar saveAs = require('./lib/FileSaver');\n\nfunction streamToBuffer(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n  for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n  return buf;\n}\n\nfunction gerar(planilha, linhas, merge) {\n\n  var workbook = Workbook().addRowsToSheet(planilha, linhas).finalize();\n\n  (merge || []).map(function(merge) {\n    workbook.mergeCells(planilha, merge);\n  });\n\n  workbook.finalize();\n\n  var stream = XLSX.write(workbook, {bookType: 'xlsx', bookSST: true, type: 'binary'});\n  return (new Blob([streamToBuffer(stream)], {type: \"application/octet-stream\"}));\n}\n\nvar xlsx = {gerar: gerar, saveAs: saveAs};\nmodule.exports = xlsx;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./index.js\n ** module id = 0\n ** module chunks = 0\n **/","/* xlsx.js (C) 2013-2015 SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint -W041 */\n/*jshint funcscope:true, eqnull:true */\nvar XLSX = {};\n(function make_xlsx(XLSX){\nXLSX.version = '0.8.0';\nvar current_codepage = 1200, current_cptable;\n\nfunction reset_cp() { set_cp(1200); }\nvar set_cp = function(cp) { current_codepage = cp; };\n\nfunction char_codes(data) { var o = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }\nvar debom_xml = function(data) { return data; };\n\nvar _getchar = function _gc1(x) { return String.fromCharCode(x); };\nif(typeof cptable !== 'undefined') {\n\tset_cp = function(cp) { current_codepage = cp; current_cptable = cptable[cp]; };\n\tdebom_xml = function(data) {\n\t\tif(data.charCodeAt(0) === 0xFF && data.charCodeAt(1) === 0xFE) { return cptable.utils.decode(1200, char_codes(data.substr(2))); }\n\t\treturn data;\n\t};\n\t_getchar = function _gc2(x) {\n\t\tif(current_codepage === 1200) return String.fromCharCode(x);\n\t\treturn cptable.utils.decode(current_codepage, [x&255,x>>8])[0];\n\t};\n}\nvar Base64 = (function make_b64(){\n\tvar map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\treturn {\n\t\tencode: function(input, utf8) {\n\t\t\tvar o = \"\";\n\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\n\t\t\tfor(var i = 0; i < input.length; ) {\n\t\t\t\tc1 = input.charCodeAt(i++);\n\t\t\t\tc2 = input.charCodeAt(i++);\n\t\t\t\tc3 = input.charCodeAt(i++);\n\t\t\t\te1 = c1 >> 2;\n\t\t\t\te2 = (c1 & 3) << 4 | c2 >> 4;\n\t\t\t\te3 = (c2 & 15) << 2 | c3 >> 6;\n\t\t\t\te4 = c3 & 63;\n\t\t\t\tif (isNaN(c2)) { e3 = e4 = 64; }\n\t\t\t\telse if (isNaN(c3)) { e4 = 64; }\n\t\t\t\to += map.charAt(e1) + map.charAt(e2) + map.charAt(e3) + map.charAt(e4);\n\t\t\t}\n\t\t\treturn o;\n\t\t},\n\t\tdecode: function b64_decode(input, utf8) {\n\t\t\tvar o = \"\";\n\t\t\tvar c1, c2, c3;\n\t\t\tvar e1, e2, e3, e4;\n\t\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\t\t\tfor(var i = 0; i < input.length;) {\n\t\t\t\te1 = map.indexOf(input.charAt(i++));\n\t\t\t\te2 = map.indexOf(input.charAt(i++));\n\t\t\t\te3 = map.indexOf(input.charAt(i++));\n\t\t\t\te4 = map.indexOf(input.charAt(i++));\n\t\t\t\tc1 = e1 << 2 | e2 >> 4;\n\t\t\t\tc2 = (e2 & 15) << 4 | e3 >> 2;\n\t\t\t\tc3 = (e3 & 3) << 6 | e4;\n\t\t\t\to += String.fromCharCode(c1);\n\t\t\t\tif (e3 != 64) { o += String.fromCharCode(c2); }\n\t\t\t\tif (e4 != 64) { o += String.fromCharCode(c3); }\n\t\t\t}\n\t\t\treturn o;\n\t\t}\n\t};\n})();\nvar has_buf = (typeof Buffer !== 'undefined');\n\nfunction new_raw_buf(len) {\n\t/* jshint -W056 */\n\treturn new (has_buf ? Buffer : Array)(len);\n\t/* jshint +W056 */\n}\n\nfunction s2a(s) {\n\tif(has_buf) return new Buffer(s, \"binary\");\n\treturn s.split(\"\").map(function(x){ return x.charCodeAt(0) & 0xff; });\n}\n\nvar bconcat = function(bufs) { return [].concat.apply([], bufs); };\n\nvar chr0 = /\\u0000/g, chr1 = /[\\u0001-\\u0006]/;\n/* ssf.js (C) 2013-2014 SheetJS -- http://sheetjs.com */\n/*jshint -W041 */\nvar SSF = {};\nvar make_ssf = function make_ssf(SSF){\nSSF.version = '0.8.1';\nfunction _strrev(x) { var o = \"\", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }\nfunction fill(c,l) { var o = \"\"; while(o.length < l) o+=c; return o; }\nfunction pad0(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\nfunction pad_(v,d){var t=\"\"+v;return t.length>=d?t:fill(' ',d-t.length)+t;}\nfunction rpad_(v,d){var t=\"\"+v; return t.length>=d?t:t+fill(' ',d-t.length);}\nfunction pad0r1(v,d){var t=\"\"+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}\nfunction pad0r2(v,d){var t=\"\"+v; return t.length>=d?t:fill('0',d-t.length)+t;}\nvar p2_32 = Math.pow(2,32);\nfunction pad0r(v,d){if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }\nfunction isgeneral(s, i) { return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }\n/* Options */\nvar opts_fmt = [\n\t[\"date1904\", 0],\n\t[\"output\", \"\"],\n\t[\"WTF\", false]\n];\nfunction fixopts(o){\n\tfor(var y = 0; y != opts_fmt.length; ++y) if(o[opts_fmt[y][0]]===undefined) o[opts_fmt[y][0]]=opts_fmt[y][1];\n}\nSSF.opts = opts_fmt;\nvar table_fmt = {\n\t0:  'General',\n\t1:  '0',\n\t2:  '0.00',\n\t3:  '#,##0',\n\t4:  '#,##0.00',\n\t9:  '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t14: 'm/d/yy',\n\t15: 'd-mmm-yy',\n\t16: 'd-mmm',\n\t17: 'mmm-yy',\n\t18: 'h:mm AM/PM',\n\t19: 'h:mm:ss AM/PM',\n\t20: 'h:mm',\n\t21: 'h:mm:ss',\n\t22: 'm/d/yy h:mm',\n\t37: '#,##0 ;(#,##0)',\n\t38: '#,##0 ;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\t45: 'mm:ss',\n\t46: '[h]:mm:ss',\n\t47: 'mmss.0',\n\t48: '##0.0E+0',\n\t49: '@',\n\t56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"',\n\t65535: 'General'\n};\nvar days = [\n\t['Sun', 'Sunday'],\n\t['Mon', 'Monday'],\n\t['Tue', 'Tuesday'],\n\t['Wed', 'Wednesday'],\n\t['Thu', 'Thursday'],\n\t['Fri', 'Friday'],\n\t['Sat', 'Saturday']\n];\nvar months = [\n\t['J', 'Jan', 'January'],\n\t['F', 'Feb', 'February'],\n\t['M', 'Mar', 'March'],\n\t['A', 'Apr', 'April'],\n\t['M', 'May', 'May'],\n\t['J', 'Jun', 'June'],\n\t['J', 'Jul', 'July'],\n\t['A', 'Aug', 'August'],\n\t['S', 'Sep', 'September'],\n\t['O', 'Oct', 'October'],\n\t['N', 'Nov', 'November'],\n\t['D', 'Dec', 'December']\n];\nfunction frac(x, D, mixed) {\n\tvar sgn = x < 0 ? -1 : 1;\n\tvar B = x * sgn;\n\tvar P_2 = 0, P_1 = 1, P = 0;\n\tvar Q_2 = 1, Q_1 = 0, Q = 0;\n\tvar A = Math.floor(B);\n\twhile(Q_1 < D) {\n\t\tA = Math.floor(B);\n\t\tP = A * P_1 + P_2;\n\t\tQ = A * Q_1 + Q_2;\n\t\tif((B - A) < 0.0000000005) break;\n\t\tB = 1 / (B - A);\n\t\tP_2 = P_1; P_1 = P;\n\t\tQ_2 = Q_1; Q_1 = Q;\n\t}\n\tif(Q > D) { Q = Q_1; P = P_1; }\n\tif(Q > D) { Q = Q_2; P = P_2; }\n\tif(!mixed) return [0, sgn * P, Q];\n\tif(Q===0) throw \"Unexpected state: \"+P+\" \"+P_1+\" \"+P_2+\" \"+Q+\" \"+Q_1+\" \"+Q_2;\n\tvar q = Math.floor(sgn * P/Q);\n\treturn [q, sgn*P - q*Q, Q];\n}\nfunction general_fmt_int(v, opts) { return \"\"+v; }\nSSF._general_int = general_fmt_int;\nvar general_fmt_num = (function make_general_fmt_num() {\nvar gnr1 = /\\.(\\d*[1-9])0+$/, gnr2 = /\\.0*$/, gnr4 = /\\.(\\d*[1-9])0+/, gnr5 = /\\.0*[Ee]/, gnr6 = /(E[+-])(\\d)$/;\nfunction gfn2(v) {\n\tvar w = (v<0?12:11);\n\tvar o = gfn5(v.toFixed(12)); if(o.length <= w) return o;\n\to = v.toPrecision(10); if(o.length <= w) return o;\n\treturn v.toExponential(5);\n}\nfunction gfn3(v) {\n\tvar o = v.toFixed(11).replace(gnr1,\".$1\");\n\tif(o.length > (v<0?12:11)) o = v.toPrecision(6);\n\treturn o;\n}\nfunction gfn4(o) {\n\tfor(var i = 0; i != o.length; ++i) if((o.charCodeAt(i) | 0x20) === 101) return o.replace(gnr4,\".$1\").replace(gnr5,\"E\").replace(\"e\",\"E\").replace(gnr6,\"$10$2\");\n\treturn o;\n}\nfunction gfn5(o) {\n\t//for(var i = 0; i != o.length; ++i) if(o.charCodeAt(i) === 46) return o.replace(gnr2,\"\").replace(gnr1,\".$1\");\n\t//return o;\n\treturn o.indexOf(\".\") > -1 ? o.replace(gnr2,\"\").replace(gnr1,\".$1\") : o;\n}\nreturn function general_fmt_num(v, opts) {\n\tvar V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;\n\tif(V >= -4 && V <= -1) o = v.toPrecision(10+V);\n\telse if(Math.abs(V) <= 9) o = gfn2(v);\n\telse if(V === 10) o = v.toFixed(10).substr(0,12);\n\telse o = gfn3(v);\n\treturn gfn5(gfn4(o));\n};})();\nSSF._general_num = general_fmt_num;\nfunction general_fmt(v, opts) {\n\tswitch(typeof v) {\n\t\tcase 'string': return v;\n\t\tcase 'boolean': return v ? \"TRUE\" : \"FALSE\";\n\t\tcase 'number': return (v|0) === v ? general_fmt_int(v, opts) : general_fmt_num(v, opts);\n\t}\n\tthrow new Error(\"unsupported value in General format: \" + v);\n}\nSSF._general = general_fmt;\nfunction fix_hijri(date, o) { return 0; }\nfunction parse_date_code(v,opts,b2) {\n\tif(v > 2958465 || v < 0) return null;\n\tvar date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;\n\tvar dout=[];\n\tvar out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};\n\tif(Math.abs(out.u) < 1e-6) out.u = 0;\n\tfixopts(opts != null ? opts : (opts=[]));\n\tif(opts.date1904) date += 1462;\n\tif(out.u > 0.999) {\n\t\tout.u = 0;\n\t\tif(++time == 86400) { time = 0; ++date; }\n\t}\n\tif(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}\n\telse if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}\n\telse {\n\t\tif(date > 60) --date;\n\t\t/* 1 = Jan 1 1900 */\n\t\tvar d = new Date(1900,0,1);\n\t\td.setDate(d.getDate() + date - 1);\n\t\tdout = [d.getFullYear(), d.getMonth()+1,d.getDate()];\n\t\tdow = d.getDay();\n\t\tif(date < 60) dow = (dow + 6) % 7;\n\t\tif(b2) dow = fix_hijri(d, dout);\n\t}\n\tout.y = dout[0]; out.m = dout[1]; out.d = dout[2];\n\tout.S = time % 60; time = Math.floor(time / 60);\n\tout.M = time % 60; time = Math.floor(time / 60);\n\tout.H = time;\n\tout.q = dow;\n\treturn out;\n}\nSSF.parse_date_code = parse_date_code;\n/*jshint -W086 */\nfunction write_date(type, fmt, val, ss0) {\n\tvar o=\"\", ss=0, tt=0, y = val.y, out, outl = 0;\n\tswitch(type) {\n\t\tcase 98: /* 'b' buddhist year */\n\t\t\ty = val.y + 543;\n\t\t\t/* falls through */\n\t\tcase 121: /* 'y' year */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = y % 100; outl = 2; break;\n\t\t\tdefault: out = y % 10000; outl = 4; break;\n\t\t} break;\n\t\tcase 109: /* 'm' month */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.m; outl = fmt.length; break;\n\t\t\tcase 3: return months[val.m-1][1];\n\t\t\tcase 5: return months[val.m-1][0];\n\t\t\tdefault: return months[val.m-1][2];\n\t\t} break;\n\t\tcase 100: /* 'd' day */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.d; outl = fmt.length; break;\n\t\t\tcase 3: return days[val.q][0];\n\t\t\tdefault: return days[val.q][1];\n\t\t} break;\n\t\tcase 104: /* 'h' 12-hour */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t} break;\n\t\tcase 72: /* 'H' 24-hour */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.H; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad hour format: ' + fmt;\n\t\t} break;\n\t\tcase 77: /* 'M' minutes */\n\t\tswitch(fmt.length) {\n\t\t\tcase 1: case 2: out = val.M; outl = fmt.length; break;\n\t\t\tdefault: throw 'bad minute format: ' + fmt;\n\t\t} break;\n\t\tcase 115: /* 's' seconds */\n\t\tif(val.u === 0) switch(fmt) {\n\t\t\tcase 's': case 'ss': return pad0(val.S, fmt.length);\n\t\t\tcase '.0': case '.00': case '.000':\n\t\t}\n\t\tswitch(fmt) {\n\t\t\tcase 's': case 'ss': case '.0': case '.00': case '.000':\n\t\t\t\tif(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;\n\t\t\t\telse tt = ss0 === 1 ? 10 : 1;\n\t\t\t\tss = Math.round((tt)*(val.S + val.u));\n\t\t\t\tif(ss >= 60*tt) ss = 0;\n\t\t\t\tif(fmt === 's') return ss === 0 ? \"0\" : \"\"+ss/tt;\n\t\t\t\to = pad0(ss,2 + ss0);\n\t\t\t\tif(fmt === 'ss') return o.substr(0,2);\n\t\t\t\treturn \".\" + o.substr(2,fmt.length-1);\n\t\t\tdefault: throw 'bad second format: ' + fmt;\n\t\t}\n\t\tcase 90: /* 'Z' absolute time */\n\t\tswitch(fmt) {\n\t\t\tcase '[h]': case '[hh]': out = val.D*24+val.H; break;\n\t\t\tcase '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;\n\t\t\tcase '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;\n\t\t\tdefault: throw 'bad abstime format: ' + fmt;\n\t\t} outl = fmt.length === 3 ? 1 : 2; break;\n\t\tcase 101: /* 'e' era */\n\t\t\tout = y; outl = 1;\n\t}\n\tif(outl > 0) return pad0(out, outl); else return \"\";\n}\n/*jshint +W086 */\nfunction commaify(s) {\n\tif(s.length <= 3) return s;\n\tvar j = (s.length % 3), o = s.substr(0,j);\n\tfor(; j!=s.length; j+=3) o+=(o.length > 0 ? \",\" : \"\") + s.substr(j,3);\n\treturn o;\n}\nvar write_num = (function make_write_num(){\nvar pct1 = /%/g;\nfunction write_num_pct(type, fmt, val){\n\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n}\nfunction write_num_cm(type, fmt, val){\n\tvar idx = fmt.length - 1;\n\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n}\nfunction write_num_exp(fmt, val){\n\tvar o;\n\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\tvar ee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E)%period;\n\t\tif(ee < 0) ee += period;\n\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\tif(o.indexOf(\"e\") === -1) {\n\t\t\tvar fakee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E);\n\t\t\tif(o.indexOf(\".\") === -1) o = o[0] + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\twhile(o.substr(0,2) === \"0.\") {\n\t\t\t\to = o[0] + o.substr(2,period) + \".\" + o.substr(2+period);\n\t\t\t\to = o.replace(/^0+([1-9])/,\"$1\").replace(/^0+\\./,\"0.\");\n\t\t\t}\n\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t}\n\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t} else o = val.toExponential(idx);\n\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o[o.length-1];\n\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\treturn o.replace(\"e\",\"E\");\n}\nvar frac1 = /# (\\?+)( ?)\\/( ?)(\\d+)/;\nfunction write_num_f1(r, aval, sign) {\n\tvar den = parseInt(r[4]), rr = Math.round(aval * den), base = Math.floor(rr/den);\n\tvar myn = (rr - base*den), myd = den;\n\treturn sign + (base === 0 ? \"\" : \"\"+base) + \" \" + (myn === 0 ? fill(\" \", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + \"/\" + r[3] + pad0(myd,r[4].length));\n}\nfunction write_num_f2(r, aval, sign) {\n\treturn sign + (aval === 0 ? \"\" : \"\"+aval) + fill(\" \", r[1].length + 2 + r[4].length);\n}\nvar dec1 = /^#*0*\\.(0+)/;\nvar closeparen = /\\).*[0#]/;\nvar phone = /\\(###\\) ###\\\\?-####/;\nfunction hashq(str) {\n\tvar o = \"\", cc;\n\tfor(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {\n\t\tcase 35: break;\n\t\tcase 63: o+= \" \"; break;\n\t\tcase 48: o+= \"0\"; break;\n\t\tdefault: o+= String.fromCharCode(cc);\n\t}\n\treturn o;\n}\nfunction rnd(val, d) { var dd = Math.pow(10,d); return \"\"+(Math.round(val * dd)/dd); }\nfunction dec(val, d) { return Math.round((val-Math.floor(val))*Math.pow(10,d)); }\nfunction flr(val) { if(val < 2147483647 && val > -2147483648) return \"\"+(val >= 0 ? (val|0) : (val-1|0)); return \"\"+Math.floor(val); }\nfunction write_num_flt(type, fmt, val) {\n\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\tif(val >= 0) return write_num_flt('n', ffmt, val);\n\t\treturn '(' + write_num_flt('n', ffmt, -val) + ')';\n\t}\n\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);\n\tif(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);\n\tif(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);\n\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_flt(type,fmt.substr(fmt[1]==' '?2:1),val);\n\tvar o, oo;\n\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\tif(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);\n\tif(fmt.match(/^[#?]+$/)) {\n\t\to = pad0r(val,0); if(o === \"0\") o = \"\";\n\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(frac1)) !== null) return write_num_f1(r, aval, sign);\n\tif(fmt.match(/^#+0+$/) !== null) return sign + pad0r(aval,fmt.length - fmt.indexOf(\"0\"));\n\tif((r = fmt.match(dec1)) !== null) {\n\t\to = rnd(val, r[1].length).replace(/^([^\\.]+)$/,\"$1.\"+r[1]).replace(/\\.$/,\".\"+r[1]).replace(/\\.(\\d*)$/,function($$, $1) { return \".\" + $1 + fill(\"0\", r[1].length-$1.length); });\n\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t}\n\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\tif((r = fmt.match(/^(0*)\\.(#*)$/)) !== null) {\n\t\treturn sign + rnd(aval, r[2].length).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t}\n\tif((r = fmt.match(/^#,##0(\\.?)$/)) !== null) return sign + commaify(pad0r(aval,0));\n\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/)) !== null) {\n\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(\"\"+(Math.floor(val))) + \".\" + pad0(dec(val, r[1].length),r[1].length);\n\t}\n\tif((r = fmt.match(/^#,#*,#0/)) !== null) return write_num_flt(type,fmt.replace(/^#,#*,/,\"\"),val);\n\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) !== null) {\n\t\to = _strrev(write_num_flt(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\tri = 0;\n\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o[ri++]:x==='0'?'0':\"\";}));\n\t}\n\tif(fmt.match(phone) !== null) {\n\t\to = write_num_flt(type, \"##########\", val);\n\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t}\n\tvar oa = \"\";\n\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\tri = Math.min(r[4].length,7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\to = \"\" + sign;\n\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\tif(oa[oa.length-1] == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\to += oa + r[2] + \"/\" + r[3];\n\t\toa = rpad_(ff[2],ri);\n\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\to += oa;\n\t\treturn o;\n\t}\n\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t}\n\tif((r = fmt.match(/^[#0?]+$/)) !== null) {\n\t\to = pad0r(val, 0);\n\t\tif(fmt.length <= o.length) return o;\n\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n  if((r = fmt.match(/^([#0?]+)\\.([#0]+)$/)) !== null) {\n\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\tri = o.indexOf(\".\");\n\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t}\n\tif((r = fmt.match(/^00,000\\.([#0]*0)$/)) !== null) {\n\t\tri = dec(val, r[1].length);\n\t\treturn val < 0 ? \"-\" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(ri,r[1].length);\n\t}\n\tswitch(fmt) {\n\t\tcase \"#,###\": var x = commaify(pad0r(aval,0)); return x !== \"0\" ? sign + x : \"\";\n\t\tdefault:\n\t}\n\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n}\nfunction write_num_cm2(type, fmt, val){\n\tvar idx = fmt.length - 1;\n\twhile(fmt.charCodeAt(idx-1) === 44) --idx;\n\treturn write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));\n}\nfunction write_num_pct2(type, fmt, val){\n\tvar sfmt = fmt.replace(pct1,\"\"), mul = fmt.length - sfmt.length;\n\treturn write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill(\"%\",mul);\n}\nfunction write_num_exp2(fmt, val){\n\tvar o;\n\tvar idx = fmt.indexOf(\"E\") - fmt.indexOf(\".\") - 1;\n\tif(fmt.match(/^#+0.0E\\+0$/)) {\n\t\tvar period = fmt.indexOf(\".\"); if(period === -1) period=fmt.indexOf('E');\n\t\tvar ee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E)%period;\n\t\tif(ee < 0) ee += period;\n\t\to = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);\n\t\tif(!o.match(/[Ee]/)) {\n\t\t\tvar fakee = Math.floor(Math.log(Math.abs(val))*Math.LOG10E);\n\t\t\tif(o.indexOf(\".\") === -1) o = o[0] + \".\" + o.substr(1) + \"E+\" + (fakee - o.length+ee);\n\t\t\telse o += \"E+\" + (fakee - ee);\n\t\t\to = o.replace(/\\+-/,\"-\");\n\t\t}\n\t\to = o.replace(/^([+-]?)(\\d*)\\.(\\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + \".\" + $3.substr(ee) + \"E\"; });\n\t} else o = val.toExponential(idx);\n\tif(fmt.match(/E\\+00$/) && o.match(/e[+-]\\d$/)) o = o.substr(0,o.length-1) + \"0\" + o[o.length-1];\n\tif(fmt.match(/E\\-/) && o.match(/e\\+/)) o = o.replace(/e\\+/,\"e\");\n\treturn o.replace(\"e\",\"E\");\n}\nfunction write_num_int(type, fmt, val) {\n\tif(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {\n\t\tvar ffmt = fmt.replace(/\\( */,\"\").replace(/ \\)/,\"\").replace(/\\)/,\"\");\n\t\tif(val >= 0) return write_num_int('n', ffmt, val);\n\t\treturn '(' + write_num_int('n', ffmt, -val) + ')';\n\t}\n\tif(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);\n\tif(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);\n\tif(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);\n\tif(fmt.charCodeAt(0) === 36) return \"$\"+write_num_int(type,fmt.substr(fmt[1]==' '?2:1),val);\n\tvar o;\n\tvar r, ri, ff, aval = Math.abs(val), sign = val < 0 ? \"-\" : \"\";\n\tif(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);\n\tif(fmt.match(/^[#?]+$/)) {\n\t\to = (\"\"+val); if(val === 0) o = \"\";\n\t\treturn o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(frac1)) !== null) return write_num_f2(r, aval, sign);\n\tif(fmt.match(/^#+0+$/) !== null) return sign + pad0(aval,fmt.length - fmt.indexOf(\"0\"));\n\tif((r = fmt.match(dec1)) !== null) {\n\t\to = (\"\"+val).replace(/^([^\\.]+)$/,\"$1.\"+r[1]).replace(/\\.$/,\".\"+r[1]).replace(/\\.(\\d*)$/,function($$, $1) { return \".\" + $1 + fill(\"0\", r[1].length-$1.length); });\n\t\treturn fmt.indexOf(\"0.\") !== -1 ? o : o.replace(/^0\\./,\".\");\n\t}\n\tfmt = fmt.replace(/^#+([0.])/, \"$1\");\n\tif((r = fmt.match(/^(0*)\\.(#*)$/)) !== null) {\n\t\treturn sign + (\"\"+aval).replace(/\\.(\\d*[1-9])0*$/,\".$1\").replace(/^(-?\\d*)$/,\"$1.\").replace(/^0\\./,r[1].length?\"0.\":\".\");\n\t}\n\tif((r = fmt.match(/^#,##0(\\.?)$/)) !== null) return sign + commaify((\"\"+aval));\n\tif((r = fmt.match(/^#,##0\\.([#0]*0)$/)) !== null) {\n\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify((\"\"+val)) + \".\" + fill('0',r[1].length);\n\t}\n\tif((r = fmt.match(/^#,#*,#0/)) !== null) return write_num_int(type,fmt.replace(/^#,#*,/,\"\"),val);\n\tif((r = fmt.match(/^([0#]+)(\\\\?-([0#]+))+$/)) !== null) {\n\t\to = _strrev(write_num_int(type, fmt.replace(/[\\\\-]/g,\"\"), val));\n\t\tri = 0;\n\t\treturn _strrev(_strrev(fmt.replace(/\\\\/g,\"\")).replace(/[0#]/g,function(x){return ri<o.length?o[ri++]:x==='0'?'0':\"\";}));\n\t}\n\tif(fmt.match(phone) !== null) {\n\t\to = write_num_int(type, \"##########\", val);\n\t\treturn \"(\" + o.substr(0,3) + \") \" + o.substr(3, 3) + \"-\" + o.substr(6);\n\t}\n\tvar oa = \"\";\n\tif((r = fmt.match(/^([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\tri = Math.min(r[4].length,7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, false);\n\t\to = \"\" + sign;\n\t\toa = write_num(\"n\", r[1], ff[1]);\n\t\tif(oa[oa.length-1] == \" \") oa = oa.substr(0,oa.length-1) + \"0\";\n\t\to += oa + r[2] + \"/\" + r[3];\n\t\toa = rpad_(ff[2],ri);\n\t\tif(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;\n\t\to += oa;\n\t\treturn o;\n\t}\n\tif((r = fmt.match(/^# ([#0?]+)( ?)\\/( ?)([#0?]+)/)) !== null) {\n\t\tri = Math.min(Math.max(r[1].length, r[4].length),7);\n\t\tff = frac(aval, Math.pow(10,ri)-1, true);\n\t\treturn sign + (ff[0]||(ff[1] ? \"\" : \"0\")) + \" \" + (ff[1] ? pad_(ff[1],ri) + r[2] + \"/\" + r[3] + rpad_(ff[2],ri): fill(\" \", 2*ri+1 + r[2].length + r[3].length));\n\t}\n\tif((r = fmt.match(/^[#0?]+$/)) !== null) {\n\t\to = \"\" + val;\n\t\tif(fmt.length <= o.length) return o;\n\t\treturn hashq(fmt.substr(0,fmt.length-o.length)) + o;\n\t}\n\tif((r = fmt.match(/^([#0]+)\\.([#0]+)$/)) !== null) {\n\t\to = \"\" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,\"$1\");\n\t\tri = o.indexOf(\".\");\n\t\tvar lres = fmt.indexOf(\".\") - ri, rres = fmt.length - o.length - lres;\n\t\treturn hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));\n\t}\n\tif((r = fmt.match(/^00,000\\.([#0]*0)$/)) !== null) {\n\t\treturn val < 0 ? \"-\" + write_num_int(type, fmt, -val) : commaify(\"\"+val).replace(/^\\d,\\d{3}$/,\"0$&\").replace(/^\\d*$/,function($$) { return \"00,\" + ($$.length < 3 ? pad0(0,3-$$.length) : \"\") + $$; }) + \".\" + pad0(0,r[1].length);\n\t}\n\tswitch(fmt) {\n\t\tcase \"#,###\": var x = commaify(\"\"+aval); return x !== \"0\" ? sign + x : \"\";\n\t\tdefault:\n\t}\n\tthrow new Error(\"unsupported format |\" + fmt + \"|\");\n}\nreturn function write_num(type, fmt, val) {\n\treturn (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);\n};})();\nfunction split_fmt(fmt) {\n\tvar out = [];\n\tvar in_str = false, cc;\n\tfor(var i = 0, j = 0; i < fmt.length; ++i) switch((cc=fmt.charCodeAt(i))) {\n\t\tcase 34: /* '\"' */\n\t\t\tin_str = !in_str; break;\n\t\tcase 95: case 42: case 92: /* '_' '*' '\\\\' */\n\t\t\t++i; break;\n\t\tcase 59: /* ';' */\n\t\t\tout[out.length] = fmt.substr(j,i-j);\n\t\t\tj = i+1;\n\t}\n\tout[out.length] = fmt.substr(j);\n\tif(in_str === true) throw new Error(\"Format |\" + fmt + \"| unterminated string \");\n\treturn out;\n}\nSSF._split = split_fmt;\nvar abstime = /\\[[HhMmSs]*\\]/;\nfunction eval_fmt(fmt, v, opts, flen) {\n\tvar out = [], o = \"\", i = 0, c = \"\", lst='t', q, dt, j, cc;\n\tvar hr='H';\n\t/* Tokenize */\n\twhile(i < fmt.length) {\n\t\tswitch((c = fmt[i])) {\n\t\t\tcase 'G': /* General */\n\t\t\t\tif(!isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);\n\t\t\t\tout[out.length] = {t:'G', v:'General'}; i+=7; break;\n\t\t\tcase '\"': /* Literal text */\n\t\t\t\tfor(o=\"\";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);\n\t\t\t\tout[out.length] = {t:'t', v:o}; ++i; break;\n\t\t\tcase '\\\\': var w = fmt[++i], t = (w === \"(\" || w === \")\") ? w : 't';\n\t\t\t\tout[out.length] = {t:t, v:w}; ++i; break;\n\t\t\tcase '_': out[out.length] = {t:'t', v:\" \"}; i+=2; break;\n\t\t\tcase '@': /* Text Placeholder */\n\t\t\t\tout[out.length] = {t:'T', v:v}; ++i; break;\n\t\t\tcase 'B': case 'b':\n\t\t\t\tif(fmt[i+1] === \"1\" || fmt[i+1] === \"2\") {\n          if(dt==null) { dt=parse_date_code(v, opts, fmt[i+1] === \"2\"); if(dt==null) return \"\"; }\n\t\t\t\t\tout[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':\n\t\t\t\tc = c.toLowerCase();\n\t\t\t\t/* falls through */\n\t\t\tcase 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':\n\t\t\t\tif(v < 0) return \"\";\n\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\to = c; while(++i<fmt.length && fmt[i].toLowerCase() === c) o+=c;\n\t\t\t\tif(c === 'm' && lst.toLowerCase() === 'h') c = 'M'; /* m = minute */\n\t\t\t\tif(c === 'h') c = hr;\n\t\t\t\tout[out.length] = {t:c, v:o}; lst = c; break;\n\t\t\tcase 'A':\n\t\t\t\tq={t:c, v:\"A\"};\n\t\t\t\tif(dt==null) dt=parse_date_code(v, opts);\n        if(fmt.substr(i, 3) === \"A/P\") { if(dt!=null) q.v = dt.H >= 12 ? \"P\" : \"A\"; q.t = 'T'; hr='h';i+=3;}\n        else if(fmt.substr(i,5) === \"AM/PM\") { if(dt!=null) q.v = dt.H >= 12 ? \"PM\" : \"AM\"; q.t = 'T'; i+=5; hr='h'; }\n\t\t\t\telse { q.t = \"t\"; ++i; }\n\t\t\t\tif(dt==null && q.t === 'T') return \"\";\n\t\t\t\tout[out.length] = q; lst = c; break;\n\t\t\tcase '[':\n\t\t\t\to = c;\n\t\t\t\twhile(fmt[i++] !== ']' && i < fmt.length) o += fmt[i];\n\t\t\t\tif(o.substr(-1) !== ']') throw 'unterminated \"[\" block: |' + o + '|';\n\t\t\t\tif(o.match(abstime)) {\n\t\t\t\t\tif(dt==null) { dt=parse_date_code(v, opts); if(dt==null) return \"\"; }\n\t\t\t\t\tout[out.length] = {t:'Z', v:o.toLowerCase()};\n\t\t\t\t} else { o=\"\"; }\n\t\t\t\tbreak;\n\t\t\t/* Numbers */\n\t\t\tcase '.':\n\t\t\t\tif(dt != null) {\n\t\t\t\t\to = c; while((c=fmt[++i]) === \"0\") o += c;\n\t\t\t\t\tout[out.length] = {t:'s', v:o}; break;\n\t\t\t\t}\n\t\t\t\t/* falls through */\n\t\t\tcase '0': case '#':\n\t\t\t\to = c; while(\"0#?.,E+-%\".indexOf(c=fmt[++i]) > -1 || c=='\\\\' && fmt[i+1] == \"-\" && \"0#\".indexOf(fmt[i+2])>-1) o += c;\n\t\t\t\tout[out.length] = {t:'n', v:o}; break;\n\t\t\tcase '?':\n\t\t\t\to = c; while(fmt[++i] === c) o+=c;\n\t\t\t\tq={t:c, v:o}; out[out.length] = q; lst = c; break;\n\t\t\tcase '*': ++i; if(fmt[i] == ' ' || fmt[i] == '*') ++i; break; // **\n\t\t\tcase '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;\n\t\t\tcase '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':\n\t\t\t\to = c; while(\"0123456789\".indexOf(fmt[++i]) > -1) o+=fmt[i];\n\t\t\t\tout[out.length] = {t:'D', v:o}; break;\n\t\t\tcase ' ': out[out.length] = {t:c, v:c}; ++i; break;\n\t\t\tdefault:\n\t\t\t\tif(\",$-+/():!^&'~{}<>=€acfijklopqrtuvwxz\".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);\n\t\t\t\tout[out.length] = {t:'t', v:c}; ++i; break;\n\t\t}\n\t}\n\tvar bt = 0, ss0 = 0, ssm;\n\tfor(i=out.length-1, lst='t'; i >= 0; --i) {\n\t\tswitch(out[i].t) {\n\t\t\tcase 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;\n\t\t\tcase 's':\n\t\t\t\tif((ssm=out[i].v.match(/\\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);\n\t\t\t\tif(bt < 3) bt = 3;\n\t\t\t/* falls through */\n\t\t\tcase 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;\n\t\t\tcase 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;\n\t\t\tcase 'X': if(out[i].v === \"B2\");\n\t\t\t\tbreak;\n\t\t\tcase 'Z':\n\t\t\t\tif(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;\n\t\t\t\tif(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;\n\t\t\t\tif(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;\n\t\t}\n\t}\n\tswitch(bt) {\n\t\tcase 0: break;\n\t\tcase 1:\n\t\t\tif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\tif(dt.M >=  60) { dt.M = 0; ++dt.H; }\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tif(dt.u >= 0.5) { dt.u = 0; ++dt.S; }\n\t\t\tif(dt.S >=  60) { dt.S = 0; ++dt.M; }\n\t\t\tbreak;\n\t}\n\t/* replace fields */\n\tvar nstr = \"\", jj;\n\tfor(i=0; i < out.length; ++i) {\n\t\tswitch(out[i].t) {\n\t\t\tcase 't': case 'T': case ' ': case 'D': break;\n\t\t\tcase 'X': out[i] = undefined; break;\n\t\t\tcase 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':\n\t\t\t\tout[i].v = write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);\n\t\t\t\tout[i].t = 't'; break;\n\t\t\tcase 'n': case '(': case '?':\n\t\t\t\tjj = i+1;\n\t\t\t\twhile(out[jj] != null && (\n\t\t\t\t\t(c=out[jj].t) === \"?\" || c === \"D\" ||\n\t\t\t\t\t(c === \" \" || c === \"t\") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === \"t\" && out[jj+1].v === '/') ||\n\t\t\t\t\tout[i].t === '(' && (c === ' ' || c === 'n' || c === ')') ||\n\t\t\t\t\tc === 't' && (out[jj].v === '/' || '$€'.indexOf(out[jj].v) > -1 || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?')\n\t\t\t\t)) {\n\t\t\t\t\tout[i].v += out[jj].v;\n\t\t\t\t\tout[jj] = undefined; ++jj;\n\t\t\t\t}\n\t\t\t\tnstr += out[i].v;\n\t\t\t\ti = jj-1; break;\n\t\t\tcase 'G': out[i].t = 't'; out[i].v = general_fmt(v,opts); break;\n\t\t}\n\t}\n\tvar vv = \"\", myv, ostr;\n\tif(nstr.length > 0) {\n\t\tmyv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v); /* '-' */\n\t\tostr = write_num(nstr.charCodeAt(0) === 40 ? '(' : 'n', nstr, myv); /* '(' */\n\t\tjj=ostr.length-1;\n\t\tvar decpt = out.length;\n\t\tfor(i=0; i < out.length; ++i) if(out[i] != null && out[i].v.indexOf(\".\") > -1) { decpt = i; break; }\n\t\tvar lasti=out.length;\n\t\tif(decpt === out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\tfor(i=out.length-1; i>= 0;--i) {\n\t\t\t\tif(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;\n\t\t\t\tif(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }\n\t\t\t\telse if(jj < 0) out[i].v = \"\";\n\t\t\t\telse { out[i].v = ostr.substr(0, jj+1); jj = -1; }\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t}\n\t\telse if(decpt !== out.length && ostr.indexOf(\"E\") === -1) {\n\t\t\tjj = ostr.indexOf(\".\")-1;\n\t\t\tfor(i=decpt; i>= 0; --i) {\n\t\t\t\tif(out[i] == null || 'n?('.indexOf(out[i].t) === -1) continue;\n\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")-1:out[i].v.length-1;\n\t\t\t\tvv = out[i].v.substr(j+1);\n\t\t\t\tfor(; j>=0; --j) {\n\t\t\t\t\tif(jj>=0 && (out[i].v[j] === \"0\" || out[i].v[j] === \"#\")) vv = ostr[jj--] + vv;\n\t\t\t\t}\n\t\t\t\tout[i].v = vv;\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t\tif(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;\n\t\t\tjj = ostr.indexOf(\".\")+1;\n\t\t\tfor(i=decpt; i<out.length; ++i) {\n\t\t\t\tif(out[i] == null || 'n?('.indexOf(out[i].t) === -1 && i !== decpt ) continue;\n\t\t\t\tj=out[i].v.indexOf(\".\")>-1&&i===decpt?out[i].v.indexOf(\".\")+1:0;\n\t\t\t\tvv = out[i].v.substr(0,j);\n\t\t\t\tfor(; j<out[i].v.length; ++j) {\n\t\t\t\t\tif(jj<ostr.length) vv += ostr[jj++];\n\t\t\t\t}\n\t\t\t\tout[i].v = vv;\n\t\t\t\tout[i].t = 't';\n\t\t\t\tlasti = i;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0; i<out.length; ++i) if(out[i] != null && 'n(?'.indexOf(out[i].t)>-1) {\n\t\tmyv = (flen >1 && v < 0 && i>0 && out[i-1].v === \"-\" ? -v:v);\n\t\tout[i].v = write_num(out[i].t, out[i].v, myv);\n\t\tout[i].t = 't';\n\t}\n\tvar retval = \"\";\n\tfor(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;\n\treturn retval;\n}\nSSF._eval = eval_fmt;\nvar cfregex = /\\[[=<>]/;\nvar cfregex2 = /\\[([=<>]*)(-?\\d+\\.?\\d*)\\]/;\nfunction chkcond(v, rr) {\n\tif(rr == null) return false;\n\tvar thresh = parseFloat(rr[2]);\n\tswitch(rr[1]) {\n\t\tcase \"=\":  if(v == thresh) return true; break;\n\t\tcase \">\":  if(v >  thresh) return true; break;\n\t\tcase \"<\":  if(v <  thresh) return true; break;\n\t\tcase \"<>\": if(v != thresh) return true; break;\n\t\tcase \">=\": if(v >= thresh) return true; break;\n\t\tcase \"<=\": if(v <= thresh) return true; break;\n\t}\n\treturn false;\n}\nfunction choose_fmt(f, v) {\n\tvar fmt = split_fmt(f);\n\tvar l = fmt.length, lat = fmt[l-1].indexOf(\"@\");\n\tif(l<4 && lat>-1) --l;\n\tif(fmt.length > 4) throw \"cannot find right format for |\" + fmt + \"|\";\n\tif(typeof v !== \"number\") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:\"@\"];\n\tswitch(fmt.length) {\n\t\tcase 1: fmt = lat>-1 ? [\"General\", \"General\", \"General\", fmt[0]] : [fmt[0], fmt[0], fmt[0], \"@\"]; break;\n\t\tcase 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], \"@\"]; break;\n\t\tcase 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], \"@\"]; break;\n\t\tcase 4: break;\n\t}\n\tvar ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];\n\tif(fmt[0].indexOf(\"[\") === -1 && fmt[1].indexOf(\"[\") === -1) return [l, ff];\n\tif(fmt[0].match(cfregex) != null || fmt[1].match(cfregex) != null) {\n\t\tvar m1 = fmt[0].match(cfregex2);\n\t\tvar m2 = fmt[1].match(cfregex2);\n\t\treturn chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];\n\t}\n\treturn [l, ff];\n}\nfunction format(fmt,v,o) {\n\tfixopts(o != null ? o : (o=[]));\n\tvar sfmt = \"\";\n\tswitch(typeof fmt) {\n\t\tcase \"string\": sfmt = fmt; break;\n\t\tcase \"number\": sfmt = (o.table != null ? o.table : table_fmt)[fmt]; break;\n\t}\n\tif(isgeneral(sfmt,0)) return general_fmt(v, o);\n\tvar f = choose_fmt(sfmt, v);\n\tif(isgeneral(f[1])) return general_fmt(v, o);\n\tif(v === true) v = \"TRUE\"; else if(v === false) v = \"FALSE\";\n\telse if(v === \"\" || v == null) return \"\";\n\treturn eval_fmt(f[1], v, o, f[0]);\n}\nSSF._table = table_fmt;\nSSF.load = function load_entry(fmt, idx) { table_fmt[idx] = fmt; };\nSSF.format = format;\nSSF.get_table = function get_table() { return table_fmt; };\nSSF.load_table = function load_table(tbl) { for(var i=0; i!=0x0188; ++i) if(tbl[i] !== undefined) SSF.load(tbl[i], i); };\n};\nmake_ssf(SSF);\n/* map from xlml named formats to SSF TODO: localize */\nvar XLMLFormatMap = {\n\t\"General Number\": \"General\",\n\t\"General Date\": SSF._table[22],\n\t\"Long Date\": \"dddd, mmmm dd, yyyy\",\n\t\"Medium Date\": SSF._table[15],\n\t\"Short Date\": SSF._table[14],\n\t\"Long Time\": SSF._table[19],\n\t\"Medium Time\": SSF._table[18],\n\t\"Short Time\": SSF._table[20],\n\t\"Currency\": '\"$\"#,##0.00_);[Red]\\\\(\"$\"#,##0.00\\\\)',\n\t\"Fixed\": SSF._table[2],\n\t\"Standard\": SSF._table[4],\n\t\"Percent\": SSF._table[10],\n\t\"Scientific\": SSF._table[11],\n\t\"Yes/No\": '\"Yes\";\"Yes\";\"No\";@',\n\t\"True/False\": '\"True\";\"True\";\"False\";@',\n\t\"On/Off\": '\"Yes\";\"Yes\";\"No\";@'\n};\n\nvar DO_NOT_EXPORT_CFB = true;\n/* cfb.js (C) 2013-2014 SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*jshint eqnull:true */\n\n/* [MS-CFB] v20130118 */\nvar CFB = (function _CFB(){\nvar exports = {};\nexports.version = '0.10.2';\nfunction parse(file) {\nvar mver = 3; // major version\nvar ssz = 512; // sector size\nvar nmfs = 0; // number of mini FAT sectors\nvar ndfs = 0; // number of DIFAT sectors\nvar dir_start = 0; // first directory sector location\nvar minifat_start = 0; // first mini FAT sector location\nvar difat_start = 0; // first mini FAT sector location\n\nvar fat_addrs = []; // locations of FAT sectors\n\n/* [MS-CFB] 2.2 Compound File Header */\nvar blob = file.slice(0,512);\nprep_blob(blob, 0);\n\n/* major version */\nvar mv = check_get_mver(blob);\nmver = mv[0];\nswitch(mver) {\n\tcase 3: ssz = 512; break; case 4: ssz = 4096; break;\n\tdefault: throw \"Major Version: Expected 3 or 4 saw \" + mver;\n}\n\n/* reprocess header */\nif(ssz !== 512) { blob = file.slice(0,ssz); prep_blob(blob, 28 /* blob.l */); }\n/* Save header for final object */\nvar header = file.slice(0,ssz);\n\ncheck_shifts(blob, mver);\n\n// Number of Directory Sectors\nvar nds = blob.read_shift(4, 'i');\nif(mver === 3 && nds !== 0) throw '# Directory Sectors: Expected 0 saw ' + nds;\n\n// Number of FAT Sectors\n//var nfs = blob.read_shift(4, 'i');\nblob.l += 4;\n\n// First Directory Sector Location\ndir_start = blob.read_shift(4, 'i');\n\n// Transaction Signature\nblob.l += 4;\n\n// Mini Stream Cutoff Size\nblob.chk('00100000', 'Mini Stream Cutoff Size: ');\n\n// First Mini FAT Sector Location\nminifat_start = blob.read_shift(4, 'i');\n\n// Number of Mini FAT Sectors\nnmfs = blob.read_shift(4, 'i');\n\n// First DIFAT sector location\ndifat_start = blob.read_shift(4, 'i');\n\n// Number of DIFAT Sectors\nndfs = blob.read_shift(4, 'i');\n\n// Grab FAT Sector Locations\nfor(var q, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */\n\tq = blob.read_shift(4, 'i');\n\tif(q<0) break;\n\tfat_addrs[j] = q;\n}\n\n/** Break the file up into sectors */\nvar sectors = sectorify(file, ssz);\n\nsleuth_fat(difat_start, ndfs, sectors, ssz, fat_addrs);\n\n/** Chains */\nvar sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);\n\nsector_list[dir_start].name = \"!Directory\";\nif(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = \"!MiniFAT\";\nsector_list[fat_addrs[0]].name = \"!FAT\";\nsector_list.fat_addrs = fat_addrs;\nsector_list.ssz = ssz;\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nvar files = {}, Paths = [], FileIndex = [], FullPaths = [], FullPathDir = {};\nread_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex);\n\nbuild_full_paths(FileIndex, FullPathDir, FullPaths, Paths);\n\nvar root_name = Paths.shift();\nPaths.root = root_name;\n\n/* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */\nvar find_path = make_find_path(FullPaths, Paths, FileIndex, files, root_name);\n\nreturn {\n\traw: {header: header, sectors: sectors},\n\tFileIndex: FileIndex,\n\tFullPaths: FullPaths,\n\tFullPathDir: FullPathDir,\n\tfind: find_path\n};\n} // parse\n\n/* [MS-CFB] 2.2 Compound File Header -- read up to major version */\nfunction check_get_mver(blob) {\n\t// header signature 8\n\tblob.chk(HEADER_SIGNATURE, 'Header Signature: ');\n\n\t// clsid 16\n\tblob.chk(HEADER_CLSID, 'CLSID: ');\n\n\t// minor version 2\n\tvar mver = blob.read_shift(2, 'u');\n\n\treturn [blob.read_shift(2,'u'), mver];\n}\nfunction check_shifts(blob, mver) {\n\tvar shift = 0x09;\n\n\t// Byte Order\n\tblob.chk('feff', 'Byte Order: ');\n\n\t// Sector Shift\n\tswitch((shift = blob.read_shift(2))) {\n\t\tcase 0x09: if(mver !== 3) throw 'MajorVersion/SectorShift Mismatch'; break;\n\t\tcase 0x0c: if(mver !== 4) throw 'MajorVersion/SectorShift Mismatch'; break;\n\t\tdefault: throw 'Sector Shift: Expected 9 or 12 saw ' + shift;\n\t}\n\n\t// Mini Sector Shift\n\tblob.chk('0600', 'Mini Sector Shift: ');\n\n\t// Reserved\n\tblob.chk('000000000000', 'Reserved: ');\n}\n\n/** Break the file up into sectors */\nfunction sectorify(file, ssz) {\n\tvar nsectors = Math.ceil(file.length/ssz)-1;\n\tvar sectors = new Array(nsectors);\n\tfor(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);\n\tsectors[nsectors-1] = file.slice(nsectors*ssz);\n\treturn sectors;\n}\n\n/* [MS-CFB] 2.6.4 Red-Black Tree */\nfunction build_full_paths(FI, FPD, FP, Paths) {\n\tvar i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;\n\tvar dad = new Array(pl), q = new Array(pl);\n\n\tfor(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }\n\n\tfor(; j < q.length; ++j) {\n\t\ti = q[j];\n\t\tL = FI[i].L; R = FI[i].R; C = FI[i].C;\n\t\tif(dad[i] === i) {\n\t\t\tif(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];\n\t\t\tif(R !== -1 && dad[R] !== R) dad[i] = dad[R];\n\t\t}\n\t\tif(C !== -1 /*NOSTREAM*/) dad[C] = i;\n\t\tif(L !== -1) { dad[L] = dad[i]; q.push(L); }\n\t\tif(R !== -1) { dad[R] = dad[i]; q.push(R); }\n\t}\n\tfor(i=1; i !== pl; ++i) if(dad[i] === i) {\n\t\tif(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];\n\t\telse if(L !== -1 && dad[L] !== L) dad[i] = dad[L];\n\t}\n\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type === 0 /* unknown */) continue;\n\t\tj = dad[i];\n\t\tif(j === 0) FP[i] = FP[0] + \"/\" + FP[i];\n\t\telse while(j !== 0) {\n\t\t\tFP[i] = FP[j] + \"/\" + FP[i];\n\t\t\tj = dad[j];\n\t\t}\n\t\tdad[i] = 0;\n\t}\n\n\tFP[0] += \"/\";\n\tfor(i=1; i < pl; ++i) {\n\t\tif(FI[i].type !== 2 /* stream */) FP[i] += \"/\";\n\t\tFPD[FP[i]] = FI[i];\n\t}\n}\n\n/* [MS-CFB] 2.6.4 */\nfunction make_find_path(FullPaths, Paths, FileIndex, files, root_name) {\n\tvar UCFullPaths = new Array(FullPaths.length);\n\tvar UCPaths = new Array(Paths.length), i;\n\tfor(i = 0; i < FullPaths.length; ++i) UCFullPaths[i] = FullPaths[i].toUpperCase().replace(chr0,'').replace(chr1,'!');\n\tfor(i = 0; i < Paths.length; ++i) UCPaths[i] = Paths[i].toUpperCase().replace(chr0,'').replace(chr1,'!');\n\treturn function find_path(path) {\n\t\tvar k;\n\t\tif(path.charCodeAt(0) === 47 /* \"/\" */) { k=true; path = root_name + path; }\n\t\telse k = path.indexOf(\"/\") !== -1;\n\t\tvar UCPath = path.toUpperCase().replace(chr0,'').replace(chr1,'!');\n\t\tvar w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);\n\t\tif(w === -1) return null;\n\t\treturn k === true ? FileIndex[w] : files[Paths[w]];\n\t};\n}\n\n/** Chase down the rest of the DIFAT chain to build a comprehensive list\n    DIFAT chains by storing the next sector number as the last 32 bytes */\nfunction sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {\n\tvar q;\n\tif(idx === ENDOFCHAIN) {\n\t\tif(cnt !== 0) throw \"DIFAT chain shorter than expected\";\n\t} else if(idx !== -1 /*FREESECT*/) {\n\t\tvar sector = sectors[idx], m = (ssz>>>2)-1;\n\t\tfor(var i = 0; i < m; ++i) {\n\t\t\tif((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;\n\t\t\tfat_addrs.push(q);\n\t\t}\n\t\tsleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);\n\t}\n}\n\n/** Follow the linked list of sectors for a given starting point */\nfunction get_sector_list(sectors, start, fat_addrs, ssz, chkd) {\n\tvar sl = sectors.length;\n\tvar buf, buf_chain;\n\tif(!chkd) chkd = new Array(sl);\n\tvar modulus = ssz - 1, j, jj;\n\tbuf = [];\n\tbuf_chain = [];\n\tfor(j=start; j>=0;) {\n\t\tchkd[j] = true;\n\t\tbuf[buf.length] = j;\n\t\tbuf_chain.push(sectors[j]);\n\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\tjj = ((j*4) & modulus);\n\t\tif(ssz < 4 + jj) throw \"FAT boundary crossed: \" + j + \" 4 \"+ssz;\n\t\tj = __readInt32LE(sectors[addr], jj);\n\t}\n\treturn {nodes: buf, data:__toBuffer([buf_chain])};\n}\n\n/** Chase down the sector linked lists */\nfunction make_sector_list(sectors, dir_start, fat_addrs, ssz) {\n\tvar sl = sectors.length, sector_list = new Array(sl);\n\tvar chkd = new Array(sl), buf, buf_chain;\n\tvar modulus = ssz - 1, i, j, k, jj;\n\tfor(i=0; i < sl; ++i) {\n\t\tbuf = [];\n\t\tk = (i + dir_start); if(k >= sl) k-=sl;\n\t\tif(chkd[k] === true) continue;\n\t\tbuf_chain = [];\n\t\tfor(j=k; j>=0;) {\n\t\t\tchkd[j] = true;\n\t\t\tbuf[buf.length] = j;\n\t\t\tbuf_chain.push(sectors[j]);\n\t\t\tvar addr = fat_addrs[Math.floor(j*4/ssz)];\n\t\t\tjj = ((j*4) & modulus);\n\t\t\tif(ssz < 4 + jj) throw \"FAT boundary crossed: \" + j + \" 4 \"+ssz;\n\t\t\tj = __readInt32LE(sectors[addr], jj);\n\t\t}\n\t\tsector_list[k] = {nodes: buf, data:__toBuffer([buf_chain])};\n\t}\n\treturn sector_list;\n}\n\n/* [MS-CFB] 2.6.1 Compound File Directory Entry */\nfunction read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex) {\n\tvar blob;\n\tvar minifat_store = 0, pl = (Paths.length?2:0);\n\tvar sector = sector_list[dir_start].data;\n\tvar i = 0, namelen = 0, name, o, ctime, mtime;\n\tfor(; i < sector.length; i+= 128) {\n\t\tblob = sector.slice(i, i+128);\n\t\tprep_blob(blob, 64);\n\t\tnamelen = blob.read_shift(2);\n\t\tif(namelen === 0) continue;\n\t\tname = __utf16le(blob,0,namelen-pl);\n\t\tPaths.push(name);\n\t\to = {\n\t\t\tname:  name,\n\t\t\ttype:  blob.read_shift(1),\n\t\t\tcolor: blob.read_shift(1),\n\t\t\tL:     blob.read_shift(4, 'i'),\n\t\t\tR:     blob.read_shift(4, 'i'),\n\t\t\tC:     blob.read_shift(4, 'i'),\n\t\t\tclsid: blob.read_shift(16),\n\t\t\tstate: blob.read_shift(4, 'i')\n\t\t};\n\t\tctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(ctime !== 0) {\n\t\t\to.ctime = ctime; o.ct = read_date(blob, blob.l-8);\n\t\t}\n\t\tmtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);\n\t\tif(mtime !== 0) {\n\t\t\to.mtime = mtime; o.mt = read_date(blob, blob.l-8);\n\t\t}\n\t\to.start = blob.read_shift(4, 'i');\n\t\to.size = blob.read_shift(4, 'i');\n\t\tif(o.type === 5) { /* root */\n\t\t\tminifat_store = o.start;\n\t\t\tif(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = \"!StreamData\";\n\t\t\t/*minifat_size = o.size;*/\n\t\t} else if(o.size >= 4096 /* MSCSZ */) {\n\t\t\to.storage = 'fat';\n\t\t\tif(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);\n\t\t\tsector_list[o.start].name = o.name;\n\t\t\to.content = sector_list[o.start].data.slice(0,o.size);\n\t\t\tprep_blob(o.content, 0);\n\t\t} else {\n\t\t\to.storage = 'minifat';\n\t\t\tif(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN) {\n\t\t\t\to.content = sector_list[minifat_store].data.slice(o.start*MSSZ,o.start*MSSZ+o.size);\n\t\t\t\tprep_blob(o.content, 0);\n\t\t\t}\n\t\t}\n\t\tfiles[name] = o;\n\t\tFileIndex.push(o);\n\t}\n}\n\nfunction read_date(blob, offset) {\n\treturn new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);\n}\n\nvar fs;\nfunction readFileSync(filename, options) {\n\t//if(fs === undefined) fs = require('fs');\n\treturn parse(fs.readFileSync(filename), options);\n}\n\nfunction readSync(blob, options) {\n\tswitch(options !== undefined && options.type !== undefined ? options.type : \"base64\") {\n\t\tcase \"file\": return readFileSync(blob, options);\n\t\tcase \"base64\": return parse(s2a(Base64.decode(blob)), options);\n\t\tcase \"binary\": return parse(s2a(blob), options);\n\t}\n\treturn parse(blob);\n}\n\n/** CFB Constants */\nvar MSSZ = 64; /* Mini Sector Size = 1<<6 */\n//var MSCSZ = 4096; /* Mini Stream Cutoff Size */\n/* 2.1 Compound File Sector Numbers and Types */\nvar ENDOFCHAIN = -2;\n/* 2.2 Compound File Header */\nvar HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';\nvar HEADER_CLSID = '00000000000000000000000000000000';\nvar consts = {\n\t/* 2.1 Compund File Sector Numbers and Types */\n\tMAXREGSECT: -6,\n\tDIFSECT: -4,\n\tFATSECT: -3,\n\tENDOFCHAIN: ENDOFCHAIN,\n\tFREESECT: -1,\n\t/* 2.2 Compound File Header */\n\tHEADER_SIGNATURE: HEADER_SIGNATURE,\n\tHEADER_MINOR_VERSION: '3e00',\n\tMAXREGSID: -6,\n\tNOSTREAM: -1,\n\tHEADER_CLSID: HEADER_CLSID,\n\t/* 2.6.1 Compound File Directory Entry */\n\tEntryTypes: ['unknown','storage','stream','lockbytes','property','root']\n};\n\nexports.read = readSync;\nexports.parse = parse;\nexports.utils = {\n\tReadShift: ReadShift,\n\tCheckField: CheckField,\n\tprep_blob: prep_blob,\n\tbconcat: bconcat,\n\tconsts: consts\n};\n\nreturn exports;\n})();\n\nif(typeof require !== 'undefined' && typeof module !== 'undefined' && typeof DO_NOT_EXPORT_CFB === 'undefined') { module.exports = CFB; }\nfunction isval(x) { return x !== undefined && x !== null; }\n\nfunction keys(o) { return Object.keys(o); }\n\nfunction evert_key(obj, key) {\n\tvar o = [], K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]][key]] = K[i];\n\treturn o;\n}\n\nfunction evert(obj) {\n\tvar o = [], K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];\n\treturn o;\n}\n\nfunction evert_num(obj) {\n\tvar o = [], K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = parseInt(K[i],10);\n\treturn o;\n}\n\nfunction evert_arr(obj) {\n\tvar o = [], K = keys(obj);\n\tfor(var i = 0; i !== K.length; ++i) {\n\t\tif(o[obj[K[i]]] == null) o[obj[K[i]]] = [];\n\t\to[obj[K[i]]].push(K[i]);\n\t}\n\treturn o;\n}\n\n/* TODO: date1904 logic */\nfunction datenum(v, date1904) {\n\tif(date1904) v+=1462;\n\tvar epoch = Date.parse(v);\n\treturn (epoch + 2209161600000) / (24 * 60 * 60 * 1000);\n}\n\nfunction cc2str(arr) {\n\tvar o = \"\";\n\tfor(var i = 0; i != arr.length; ++i) o += String.fromCharCode(arr[i]);\n\treturn o;\n}\n\nfunction getdata(data) {\n\tif(!data) return null;\n\tif(data.name.substr(-4) === \".bin\") {\n\t\tif(data.data) return char_codes(data.data);\n\t\tif(data.asNodeBuffer && has_buf) return data.asNodeBuffer();\n\t\tif(data._data && data._data.getContent) return Array.prototype.slice.call(data._data.getContent());\n\t} else {\n\t\tif(data.data) return data.name.substr(-4) !== \".bin\" ? debom_xml(data.data) : char_codes(data.data);\n\t\tif(data.asNodeBuffer && has_buf) return debom_xml(data.asNodeBuffer().toString('binary'));\n\t\tif(data.asBinary) return debom_xml(data.asBinary());\n\t\tif(data._data && data._data.getContent) return debom_xml(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));\n\t}\n\treturn null;\n}\n\nfunction safegetzipfile(zip, file) {\n\tvar f = file; if(zip.files[f]) return zip.files[f];\n\tf = file.toLowerCase(); if(zip.files[f]) return zip.files[f];\n\tf = f.replace(/\\//g,'\\\\'); if(zip.files[f]) return zip.files[f];\n\treturn null;\n}\n\nfunction getzipfile(zip, file) {\n\tvar o = safegetzipfile(zip, file);\n\tif(o == null) throw new Error(\"Cannot find file \" + file + \" in zip\");\n\treturn o;\n}\n\nfunction getzipdata(zip, file, safe) {\n\tif(!safe) return getdata(getzipfile(zip, file));\n\tif(!file) return null;\n\ttry { return getzipdata(zip, file); } catch(e) { return null; }\n}\n\nvar _fs, jszip = require('jszip');\n\nvar attregexg=/([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\nvar tagregex=/<[^>]*>/g;\nvar nsregex=/<\\w*:/, nsregex2 = /<(\\/?)\\w+:/;\nfunction parsexmltag(tag, skip_root) {\n\tvar z = [];\n\tvar eq = 0, c = 0;\n\tfor(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;\n\tif(!skip_root) z[0] = tag.substr(0, eq);\n\tif(eq === tag.length) return z;\n\tvar m = tag.match(attregexg), j=0, w=\"\", v=\"\", i=0, q=\"\", cc=\"\";\n\tif(m) for(i = 0; i != m.length; ++i) {\n\t\tcc = m[i];\n\t\tfor(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;\n\t\tq = cc.substr(0,c); v = cc.substring(c+2, cc.length-1);\n\t\tfor(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;\n\t\tif(j===q.length) z[q] = v;\n\t\telse z[(j===5 && q.substr(0,5)===\"xmlns\"?\"xmlns\":\"\")+q.substr(j+1)] = v;\n\t}\n\treturn z;\n}\nfunction strip_ns(x) { return x.replace(nsregex2, \"<$1\"); }\n\nvar encodings = {\n\t'&quot;': '\"',\n\t'&apos;': \"'\",\n\t'&gt;': '>',\n\t'&lt;': '<',\n\t'&amp;': '&'\n};\nvar rencoding = evert(encodings);\nvar rencstr = \"&<>'\\\"\".split(\"\");\n\n// TODO: CP remap (need to read file version to determine OS)\nvar unescapexml = (function() {\n\tvar encregex = /&[a-z]*;/g, coderegex = /_x([\\da-fA-F]+)_/g;\n\treturn function unescapexml(text){\n\t\tvar s = text + '';\n\t\treturn s.replace(encregex, function($$) { return encodings[$$]; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});\n\t};\n})();\n\nvar decregex=/[&<>'\"]/g, charegex = /[\\u0000-\\u0008\\u000b-\\u001f]/g;\nfunction escapexml(text){\n\tvar s = text + '';\n\treturn s.replace(decregex, function(y) { return rencoding[y]; }).replace(charegex,function(s) { return \"_x\" + (\"000\"+s.charCodeAt(0).toString(16)).substr(-4) + \"_\";});\n}\n\n/* TODO: handle codepages */\nvar xlml_fixstr = (function() {\n\tvar entregex = /&#(\\d+);/g;\n\tfunction entrepl($$,$1) { return String.fromCharCode(parseInt($1,10)); }\n\treturn function xlml_fixstr(str) { return str.replace(entregex,entrepl); };\n})();\n\nfunction parsexmlbool(value, tag) {\n\tswitch(value) {\n\t\tcase '1': case 'true': case 'TRUE': return true;\n\t\t/* case '0': case 'false': case 'FALSE':*/\n\t\tdefault: return false;\n\t}\n}\n\nvar utf8read = function utf8reada(orig) {\n\tvar out = \"\", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;\n\twhile (i < orig.length) {\n\t\tc = orig.charCodeAt(i++);\n\t\tif (c < 128) { out += String.fromCharCode(c); continue; }\n\t\td = orig.charCodeAt(i++);\n\t\tif (c>191 && c<224) { out += String.fromCharCode(((c & 31) << 6) | (d & 63)); continue; }\n\t\te = orig.charCodeAt(i++);\n\t\tif (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }\n\t\tf = orig.charCodeAt(i++);\n\t\tw = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;\n\t\tout += String.fromCharCode(0xD800 + ((w>>>10)&1023));\n\t\tout += String.fromCharCode(0xDC00 + (w&1023));\n\t}\n\treturn out;\n};\n\n\nif(has_buf) {\n\tvar utf8readb = function utf8readb(data) {\n\t\tvar out = new Buffer(2*data.length), w, i, j = 1, k = 0, ww=0, c;\n\t\tfor(i = 0; i < data.length; i+=j) {\n\t\t\tj = 1;\n\t\t\tif((c=data.charCodeAt(i)) < 128) w = c;\n\t\t\telse if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }\n\t\t\telse if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }\n\t\t\telse { j = 4;\n\t\t\t\tw = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);\n\t\t\t\tw -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);\n\t\t\t}\n\t\t\tif(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }\n\t\t\tout[k++] = w%256; out[k++] = w>>>8;\n\t\t}\n\t\tout.length = k;\n\t\treturn out.toString('ucs2');\n\t};\n\tvar corpus = \"foo bar baz\\u00e2\\u0098\\u0083\\u00f0\\u009f\\u008d\\u00a3\";\n\tif(utf8read(corpus) == utf8readb(corpus)) utf8read = utf8readb;\n\tvar utf8readc = function utf8readc(data) { return Buffer(data, 'binary').toString('utf8'); };\n\tif(utf8read(corpus) == utf8readc(corpus)) utf8read = utf8readc;\n}\n\n// matches <foo>...</foo> extracts content\nvar matchtag = (function() {\n\tvar mtcache = {};\n\treturn function matchtag(f,g) {\n\t\tvar t = f+\"|\"+g;\n\t\tif(mtcache[t] !== undefined) return mtcache[t];\n\t\treturn (mtcache[t] = new RegExp('<(?:\\\\w+:)?'+f+'(?: xml:space=\"preserve\")?(?:[^>]*)>([^\\u2603]*)</(?:\\\\w+:)?'+f+'>',(g||\"\")));\n\t};\n})();\n\nvar vtregex = (function(){ var vt_cache = {};\n\treturn function vt_regex(bt) {\n\t\tif(vt_cache[bt] !== undefined) return vt_cache[bt];\n\t\treturn (vt_cache[bt] = new RegExp(\"<vt:\" + bt + \">(.*?)</vt:\" + bt + \">\", 'g') );\n};})();\nvar vtvregex = /<\\/?vt:variant>/g, vtmregex = /<vt:([^>]*)>(.*)</;\nfunction parseVector(data) {\n\tvar h = parsexmltag(data);\n\n\tvar matches = data.match(vtregex(h.baseType))||[];\n\tif(matches.length != h.size) throw \"unexpected vector length \" + matches.length + \" != \" + h.size;\n\tvar res = [];\n\tmatches.forEach(function(x) {\n\t\tvar v = x.replace(vtvregex,\"\").match(vtmregex);\n\t\tres.push({v:v[2], t:v[1]});\n\t});\n\treturn res;\n}\n\nvar wtregex = /(^\\s|\\s$|\\n)/;\nfunction writetag(f,g) {return '<' + f + (g.match(wtregex)?' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f + '>';}\n\nfunction wxt_helper(h) { return keys(h).map(function(k) { return \" \" + k + '=\"' + h[k] + '\"';}).join(\"\"); }\nfunction writextag(f,g,h) { return '<' + f + (isval(h) ? wxt_helper(h) : \"\") + (isval(g) ? (g.match(wtregex)?' xml:space=\"preserve\"' : \"\") + '>' + g + '</' + f : \"/\") + '>';}\n\nfunction write_w3cdtf(d, t) { try { return d.toISOString().replace(/\\.\\d*/,\"\"); } catch(e) { if(t) throw e; } }\n\nfunction write_vt(s) {\n\tswitch(typeof s) {\n\t\tcase 'string': return writextag('vt:lpwstr', s);\n\t\tcase 'number': return writextag((s|0)==s?'vt:i4':'vt:r8', String(s));\n\t\tcase 'boolean': return writextag('vt:bool',s?'true':'false');\n\t}\n\tif(s instanceof Date) return writextag('vt:filetime', write_w3cdtf(s));\n\tthrow new Error(\"Unable to serialize \" + s);\n}\n\nvar XML_HEADER = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\r\\n';\nvar XMLNS = {\n\t'dc': 'http://purl.org/dc/elements/1.1/',\n\t'dcterms': 'http://purl.org/dc/terms/',\n\t'dcmitype': 'http://purl.org/dc/dcmitype/',\n\t'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',\n\t'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n\t'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',\n\t'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\n\t'xsi': 'http://www.w3.org/2001/XMLSchema-instance',\n\t'xsd': 'http://www.w3.org/2001/XMLSchema'\n};\n\nXMLNS.main = [\n\t'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\n\t'http://purl.oclc.org/ooxml/spreadsheetml/main',\n\t'http://schemas.microsoft.com/office/excel/2006/main',\n\t'http://schemas.microsoft.com/office/excel/2006/2'\n];\n\nfunction readIEEE754(buf, idx, isLE, nl, ml) {\n\tif(isLE === undefined) isLE = true;\n\tif(!nl) nl = 8;\n\tif(!ml && nl === 8) ml = 52;\n\tvar e, m, el = nl * 8 - ml - 1, eMax = (1 << el) - 1, eBias = eMax >> 1;\n\tvar bits = -7, d = isLE ? -1 : 1, i = isLE ? (nl - 1) : 0, s = buf[idx + i];\n\n\ti += d;\n\te = s & ((1 << (-bits)) - 1); s >>>= (-bits); bits += el;\n\tfor (; bits > 0; e = e * 256 + buf[idx + i], i += d, bits -= 8);\n\tm = e & ((1 << (-bits)) - 1); e >>>= (-bits); bits += ml;\n\tfor (; bits > 0; m = m * 256 + buf[idx + i], i += d, bits -= 8);\n\tif (e === eMax) return m ? NaN : ((s ? -1 : 1) * Infinity);\n\telse if (e === 0) e = 1 - eBias;\n\telse { m = m + Math.pow(2, ml); e = e - eBias; }\n\treturn (s ? -1 : 1) * m * Math.pow(2, e - ml);\n}\n\nvar __toBuffer, ___toBuffer;\n__toBuffer = ___toBuffer = function toBuffer_(bufs) { var x = []; for(var i = 0; i < bufs[0].length; ++i) { x.push.apply(x, bufs[0][i]); } return x; };\nvar __utf16le, ___utf16le;\n__utf16le = ___utf16le = function utf16le_(b,s,e) { var ss=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join(\"\"); };\nvar __hexlify, ___hexlify;\n__hexlify = ___hexlify = function hexlify_(b,s,l) { return b.slice(s,(s+l)).map(function(x){return (x<16?\"0\":\"\") + x.toString(16);}).join(\"\"); };\nvar __utf8, ___utf8;\n__utf8 = ___utf8 = function(b,s,e) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(\"\"); };\nvar __lpstr, ___lpstr;\n__lpstr = ___lpstr = function lpstr_(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\nvar __lpwstr, ___lpwstr;\n__lpwstr = ___lpwstr = function lpwstr_(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : \"\";};\nvar __double, ___double;\n__double = ___double = function(b, idx) { return readIEEE754(b, idx);};\n\nvar is_buf = function is_buf_a(a) { return Array.isArray(a); };\nif(has_buf) {\n\t__utf16le = function utf16le_b(b,s,e) { if(!Buffer.isBuffer(b)) return ___utf16le(b,s,e); return b.toString('utf16le',s,e); };\n\t__hexlify = function(b,s,l) { return Buffer.isBuffer(b) ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); };\n\t__lpstr = function lpstr_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : \"\";};\n\t__lpwstr = function lpwstr_b(b,i) { if(!Buffer.isBuffer(b)) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};\n\t__utf8 = function utf8_b(s,e) { return this.toString('utf8',s,e); };\n\t__toBuffer = function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0]) : ___toBuffer(bufs);};\n\tbconcat = function(bufs) { return Buffer.isBuffer(bufs[0]) ? Buffer.concat(bufs) : [].concat.apply([], bufs); };\n\t__double = function double_(b,i) { if(Buffer.isBuffer(b)) return b.readDoubleLE(i); return ___double(b,i); };\n\tis_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a); };\n}\n\n/* from js-xls */\nif(typeof cptable !== 'undefined') {\n\t__utf16le = function(b,s,e) { return cptable.utils.decode(1200, b.slice(s,e)); };\n\t__utf8 = function(b,s,e) { return cptable.utils.decode(65001, b.slice(s,e)); };\n\t__lpstr = function(b,i) { var len = __readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(current_codepage, b.slice(i+4, i+4+len-1)) : \"\";};\n\t__lpwstr = function(b,i) { var len = 2*__readUInt32LE(b,i); return len > 0 ? cptable.utils.decode(1200, b.slice(i+4,i+4+len-1)) : \"\";};\n}\n\nvar __readUInt8 = function(b, idx) { return b[idx]; };\nvar __readUInt16LE = function(b, idx) { return b[idx+1]*(1<<8)+b[idx]; };\nvar __readInt16LE = function(b, idx) { var u = b[idx+1]*(1<<8)+b[idx]; return (u < 0x8000) ? u : (0xffff - u + 1) * -1; };\nvar __readUInt32LE = function(b, idx) { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };\nvar __readInt32LE = function(b, idx) { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };\n\nvar ___unhexlify = function(s) { return s.match(/../g).map(function(x) { return parseInt(x,16);}); };\nvar __unhexlify = typeof Buffer !== \"undefined\" ? function(s) { return Buffer.isBuffer(s) ? new Buffer(s, 'hex') : ___unhexlify(s); } : ___unhexlify;\n\nfunction ReadShift(size, t) {\n\tvar o=\"\", oI, oR, oo=[], w, vv, i, loc;\n\tswitch(t) {\n\t\tcase 'dbcs':\n\t\t\tloc = this.l;\n\t\t\tif(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString(\"utf16le\");\n\t\t\telse for(i = 0; i != size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }\n\t\t\tsize *= 2;\n\t\t\tbreak;\n\n\t\tcase 'utf8': o = __utf8(this, this.l, this.l + size); break;\n\t\tcase 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;\n\n\t\t/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */\n\t\tcase 'lpstr': o = __lpstr(this, this.l); size = 5 + o.length; break;\n\t\t/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */\n\t\tcase 'lpwstr': o = __lpwstr(this, this.l); size = 5 + o.length; if(o[o.length-1] == '\\u0000') size += 2; break;\n\n\t\tcase 'cstr': size = 0; o = \"\";\n\t\t\twhile((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));\n\t\t\to = oo.join(\"\"); break;\n\t\tcase 'wstr': size = 0; o = \"\";\n\t\t\twhile((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}\n\t\t\tsize+=2; o = oo.join(\"\"); break;\n\n\t\t/* sbcs and dbcs support continue records in the SST way TODO codepages */\n\t\tcase 'dbcs-cont': o = \"\"; loc = this.l;\n\t\t\tfor(i = 0; i != size; ++i) {\n\t\t\t\tif(this.lens && this.lens.indexOf(loc) !== -1) {\n\t\t\t\t\tw = __readUInt8(this, loc);\n\t\t\t\t\tthis.l = loc + 1;\n\t\t\t\t\tvv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');\n\t\t\t\t\treturn oo.join(\"\") + vv;\n\t\t\t\t}\n\t\t\t\too.push(_getchar(__readUInt16LE(this, loc)));\n\t\t\t\tloc+=2;\n\t\t\t} o = oo.join(\"\"); size *= 2; break;\n\n\t\tcase 'sbcs-cont': o = \"\"; loc = this.l;\n\t\t\tfor(i = 0; i != size; ++i) {\n\t\t\t\tif(this.lens && this.lens.indexOf(loc) !== -1) {\n\t\t\t\t\tw = __readUInt8(this, loc);\n\t\t\t\t\tthis.l = loc + 1;\n\t\t\t\t\tvv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');\n\t\t\t\t\treturn oo.join(\"\") + vv;\n\t\t\t\t}\n\t\t\t\too.push(_getchar(__readUInt8(this, loc)));\n\t\t\t\tloc+=1;\n\t\t\t} o = oo.join(\"\"); break;\n\n\t\tdefault:\n\tswitch(size) {\n\t\tcase 1: oI = __readUInt8(this, this.l); this.l++; return oI;\n\t\tcase 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;\n\t\tcase 4:\n\t\t\tif(t === 'i' || (this[this.l+3] & 0x80)===0) { oI = __readInt32LE(this, this.l); this.l += 4; return oI; }\n\t\t\telse { oR = __readUInt32LE(this, this.l); this.l += 4; return oR; } break;\n\t\tcase 8: if(t === 'f') { oR = __double(this, this.l); this.l += 8; return oR; }\n\t\t/* falls through */\n\t\tcase 16: o = __hexlify(this, this.l, size); break;\n\t}}\n\tthis.l+=size; return o;\n}\n\nfunction WriteShift(t, val, f) {\n\tvar size, i;\n\tif(f === 'dbcs') {\n\t\tfor(i = 0; i != val.length; ++i) this.writeUInt16LE(val.charCodeAt(i), this.l + 2 * i);\n\t\tsize = 2 * val.length;\n\t} else switch(t) {\n\t\tcase  1: size = 1; this[this.l] = val&255; break;\n\t\tcase  3: size = 3; this[this.l+2] = val & 255; val >>>= 8; this[this.l+1] = val&255; val >>>= 8; this[this.l] = val&255; break;\n\t\tcase  4: size = 4; this.writeUInt32LE(val, this.l); break;\n\t\tcase  8: size = 8; if(f === 'f') { this.writeDoubleLE(val, this.l); break; }\n\t\t/* falls through */\n\t\tcase 16: break;\n\t\tcase -4: size = 4; this.writeInt32LE(val, this.l); break;\n\t}\n\tthis.l += size; return this;\n}\n\nfunction CheckField(hexstr, fld) {\n\tvar m = __hexlify(this,this.l,hexstr.length>>1);\n\tif(m !== hexstr) throw fld + 'Expected ' + hexstr + ' saw ' + m;\n\tthis.l += hexstr.length>>1;\n}\n\nfunction prep_blob(blob, pos) {\n\tblob.l = pos;\n\tblob.read_shift = ReadShift;\n\tblob.chk = CheckField;\n\tblob.write_shift = WriteShift;\n}\n\nfunction parsenoop(blob, length) { blob.l += length; }\n\nfunction writenoop(blob, length) { blob.l += length; }\n\nfunction new_buf(sz) {\n\tvar o = new_raw_buf(sz);\n\tprep_blob(o, 0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.1.4 Record */\nfunction recordhopper(data, cb, opts) {\n\tvar tmpbyte, cntbyte, length;\n\tprep_blob(data, data.l || 0);\n\twhile(data.l < data.length) {\n\t\tvar RT = data.read_shift(1);\n\t\tif(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);\n\t\tvar R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];\n\t\ttmpbyte = data.read_shift(1);\n\t\tlength = tmpbyte & 0x7F;\n\t\tfor(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);\n\t\tvar d = R.f(data, length, opts);\n\t\tif(cb(d, R, RT)) return;\n\t}\n}\n\n/* control buffer usage for fixed-length buffers */\nfunction buf_array() {\n\tvar bufs = [], blksz = 2048;\n\tvar newblk = function ba_newblk(sz) {\n\t\tvar o = new_buf(sz);\n\t\tprep_blob(o, 0);\n\t\treturn o;\n\t};\n\n\tvar curbuf = newblk(blksz);\n\n\tvar endbuf = function ba_endbuf() {\n\t\tcurbuf.length = curbuf.l;\n\t\tif(curbuf.length > 0) bufs.push(curbuf);\n\t\tcurbuf = null;\n\t};\n\n\tvar next = function ba_next(sz) {\n\t\tif(sz < curbuf.length - curbuf.l) return curbuf;\n\t\tendbuf();\n\t\treturn (curbuf = newblk(Math.max(sz+1, blksz)));\n\t};\n\n\tvar end = function ba_end() {\n\t\tendbuf();\n\t\treturn __toBuffer([bufs]);\n\t};\n\n\tvar push = function ba_push(buf) { endbuf(); curbuf = buf; next(blksz); };\n\n\treturn { next:next, push:push, end:end, _bufs:bufs };\n}\n\nfunction write_record(ba, type, payload, length) {\n\tvar t = evert_RE[type], l;\n\tif(!length) length = XLSBRecordEnum[t].p || (payload||[]).length || 0;\n\tl = 1 + (t >= 0x80 ? 1 : 0) + 1 + length;\n\tif(length >= 0x80) ++l; if(length >= 0x4000) ++l; if(length >= 0x200000) ++l;\n\tvar o = ba.next(l);\n\tif(t <= 0x7F) o.write_shift(1, t);\n\telse {\n\t\to.write_shift(1, (t & 0x7F) + 0x80);\n\t\to.write_shift(1, (t >> 7));\n\t}\n\tfor(var i = 0; i != 4; ++i) {\n\t\tif(length >= 0x80) { o.write_shift(1, (length & 0x7F)+0x80); length >>= 7; }\n\t\telse { o.write_shift(1, length); break; }\n\t}\n\tif(length > 0 && is_buf(payload)) ba.push(payload);\n}\n/* XLS ranges enforced */\nfunction shift_cell_xls(cell, tgt) {\n\tif(tgt.s) {\n\t\tif(cell.cRel) cell.c += tgt.s.c;\n\t\tif(cell.rRel) cell.r += tgt.s.r;\n\t} else {\n\t\tcell.c += tgt.c;\n\t\tcell.r += tgt.r;\n\t}\n\tcell.cRel = cell.rRel = 0;\n\twhile(cell.c >= 0x100) cell.c -= 0x100;\n\twhile(cell.r >= 0x10000) cell.r -= 0x10000;\n\treturn cell;\n}\n\nfunction shift_range_xls(cell, range) {\n\tcell.s = shift_cell_xls(cell.s, range.s);\n\tcell.e = shift_cell_xls(cell.e, range.s);\n\treturn cell;\n}\n\nvar OFFCRYPTO = {};\nvar make_offcrypto = function(O, _crypto) {\n\tvar crypto;\n\tif(typeof _crypto !== 'undefined') crypto = _crypto;\n\telse if(typeof require !== 'undefined') {\n\t\ttry { crypto = require('cry'+'pto'); }\n\t\tcatch(e) { crypto = null; }\n\t}\n\n\tO.rc4 = function(key, data) {\n\t\tvar S = new Array(256);\n\t\tvar c = 0, i = 0, j = 0, t = 0;\n\t\tfor(i = 0; i != 256; ++i) S[i] = i;\n\t\tfor(i = 0; i != 256; ++i) {\n\t\t\tj = (j + S[i] + (key[i%key.length]).charCodeAt(0))&255;\n\t\t\tt = S[i]; S[i] = S[j]; S[j] = t;\n\t\t}\n\t\ti = j = 0; out = Buffer(data.length);\n\t\tfor(c = 0; c != data.length; ++c) {\n\t\t\ti = (i + 1)&255;\n\t\t\tj = (j + S[i])%256;\n\t\t\tt = S[i]; S[i] = S[j]; S[j] = t;\n\t\t\tout[c] = (data[c] ^ S[(S[i]+S[j])&255]);\n\t\t}\n\t\treturn out;\n\t};\n\n\tif(crypto) {\n\t\tO.md5 = function(hex) { return crypto.createHash('md5').update(hex).digest('hex'); };\n\t} else {\n\t\tO.md5 = function(hex) { throw \"unimplemented\"; };\n\t}\n};\nmake_offcrypto(OFFCRYPTO, typeof crypto !== \"undefined\" ? crypto : undefined);\n\n\n/* [MS-XLSB] 2.5.143 */\nfunction parse_StrRun(data, length) {\n\treturn { ich: data.read_shift(2), ifnt: data.read_shift(2) };\n}\n\n/* [MS-XLSB] 2.1.7.121 */\nfunction parse_RichStr(data, length) {\n\tvar start = data.l;\n\tvar flags = data.read_shift(1);\n\tvar str = parse_XLWideString(data);\n\tvar rgsStrRun = [];\n\tvar z = { t: str, h: str };\n\tif((flags & 1) !== 0) { /* fRichStr */\n\t\t/* TODO: formatted string */\n\t\tvar dwSizeStrRun = data.read_shift(4);\n\t\tfor(var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));\n\t\tz.r = rgsStrRun;\n\t}\n\telse z.r = \"<t>\" + escapexml(str) + \"</t>\";\n\tif((flags & 2) !== 0) { /* fExtStr */\n\t\t/* TODO: phonetic string */\n\t}\n\tdata.l = start + length;\n\treturn z;\n}\nfunction write_RichStr(str, o) {\n\t/* TODO: formatted string */\n\tif(o == null) o = new_buf(5+2*str.t.length);\n\to.write_shift(1,0);\n\twrite_XLWideString(str.t, o);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.9 */\nfunction parse_XLSBCell(data) {\n\tvar col = data.read_shift(4);\n\tvar iStyleRef = data.read_shift(2);\n\tiStyleRef += data.read_shift(1) <<16;\n\tvar fPhShow = data.read_shift(1);\n\treturn { c:col, iStyleRef: iStyleRef };\n}\nfunction write_XLSBCell(cell, o) {\n\tif(o == null) o = new_buf(8);\n\to.write_shift(-4, cell.c);\n\to.write_shift(3, cell.iStyleRef === undefined ? cell.iStyleRef : cell.s);\n\to.write_shift(1, 0); /* fPhShow */\n\treturn o;\n}\n\n\n/* [MS-XLSB] 2.5.21 */\nfunction parse_XLSBCodeName (data, length) { return parse_XLWideString(data, length); }\n\n/* [MS-XLSB] 2.5.166 */\nfunction parse_XLNullableWideString(data) {\n\tvar cchCharacters = data.read_shift(4);\n\treturn cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}\nfunction write_XLNullableWideString(data, o) {\n\tif(!o) o = new_buf(127);\n\to.write_shift(4, data.length > 0 ? data.length : 0xFFFFFFFF);\n\tif(data.length > 0) o.write_shift(0, data, 'dbcs');\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.168 */\nfunction parse_XLWideString(data) {\n\tvar cchCharacters = data.read_shift(4);\n\treturn cchCharacters === 0 ? \"\" : data.read_shift(cchCharacters, 'dbcs');\n}\nfunction write_XLWideString(data, o) {\n\tif(o == null) o = new_buf(4+2*data.length);\n\to.write_shift(4, data.length);\n\tif(data.length > 0) o.write_shift(0, data, 'dbcs');\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.114 */\nvar parse_RelID = parse_XLNullableWideString;\nvar write_RelID = write_XLNullableWideString;\n\n\n/* [MS-XLSB] 2.5.122 */\n/* [MS-XLS] 2.5.217 */\nfunction parse_RkNumber(data) {\n\tvar b = data.slice(data.l, data.l+4);\n\tvar fX100 = b[0] & 1, fInt = b[0] & 2;\n\tdata.l+=4;\n\tb[0] &= 0xFC; // b[0] &= ~3;\n\tvar RK = fInt === 0 ? __double([0,0,0,0,b[0],b[1],b[2],b[3]],0) : __readInt32LE(b,0)>>2;\n\treturn fX100 ? RK/100 : RK;\n}\n\n/* [MS-XLSB] 2.5.153 */\nfunction parse_UncheckedRfX(data) {\n\tvar cell = {s: {}, e: {}};\n\tcell.s.r = data.read_shift(4);\n\tcell.e.r = data.read_shift(4);\n\tcell.s.c = data.read_shift(4);\n\tcell.e.c = data.read_shift(4);\n\treturn cell;\n}\n\nfunction write_UncheckedRfX(r, o) {\n\tif(!o) o = new_buf(16);\n\to.write_shift(4, r.s.r);\n\to.write_shift(4, r.e.r);\n\to.write_shift(4, r.s.c);\n\to.write_shift(4, r.e.c);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.5.171 */\n/* [MS-XLS] 2.5.342 */\nfunction parse_Xnum(data, length) { return data.read_shift(8, 'f'); }\nfunction write_Xnum(data, o) { return (o || new_buf(8)).write_shift(8, 'f', data); }\n\n/* [MS-XLSB] 2.5.198.2 */\nvar BErr = {\n\t0x00: \"#NULL!\",\n\t0x07: \"#DIV/0!\",\n\t0x0F: \"#VALUE!\",\n\t0x17: \"#REF!\",\n\t0x1D: \"#NAME?\",\n\t0x24: \"#NUM!\",\n\t0x2A: \"#N/A\",\n\t0x2B: \"#GETTING_DATA\",\n\t0xFF: \"#WTF?\"\n};\nvar RBErr = evert_num(BErr);\n\n/* [MS-XLSB] 2.4.321 BrtColor */\nfunction parse_BrtColor(data, length) {\n\tvar out = {};\n\tvar d = data.read_shift(1);\n\tout.fValidRGB = d & 1;\n\tout.xColorType = d >>> 1;\n\tout.index = data.read_shift(1);\n\tout.nTintAndShade = data.read_shift(2, 'i');\n\tout.bRed   = data.read_shift(1);\n\tout.bGreen = data.read_shift(1);\n\tout.bBlue  = data.read_shift(1);\n\tout.bAlpha = data.read_shift(1);\n}\n\n/* [MS-XLSB] 2.5.52 */\nfunction parse_FontFlags(data, length) {\n\tvar d = data.read_shift(1);\n\tdata.l++;\n\tvar out = {\n\t\tfItalic: d & 0x2,\n\t\tfStrikeout: d & 0x8,\n\t\tfOutline: d & 0x10,\n\t\tfShadow: d & 0x20,\n\t\tfCondense: d & 0x40,\n\t\tfExtend: d & 0x80\n\t};\n\treturn out;\n}\n/* [MS-OLEPS] 2.2 PropertyType */\n{\n\tvar VT_EMPTY    = 0x0000;\n\tvar VT_NULL     = 0x0001;\n\tvar VT_I2       = 0x0002;\n\tvar VT_I4       = 0x0003;\n\tvar VT_R4       = 0x0004;\n\tvar VT_R8       = 0x0005;\n\tvar VT_CY       = 0x0006;\n\tvar VT_DATE     = 0x0007;\n\tvar VT_BSTR     = 0x0008;\n\tvar VT_ERROR    = 0x000A;\n\tvar VT_BOOL     = 0x000B;\n\tvar VT_VARIANT  = 0x000C;\n\tvar VT_DECIMAL  = 0x000E;\n\tvar VT_I1       = 0x0010;\n\tvar VT_UI1      = 0x0011;\n\tvar VT_UI2      = 0x0012;\n\tvar VT_UI4      = 0x0013;\n\tvar VT_I8       = 0x0014;\n\tvar VT_UI8      = 0x0015;\n\tvar VT_INT      = 0x0016;\n\tvar VT_UINT     = 0x0017;\n\tvar VT_LPSTR    = 0x001E;\n\tvar VT_LPWSTR   = 0x001F;\n\tvar VT_FILETIME = 0x0040;\n\tvar VT_BLOB     = 0x0041;\n\tvar VT_STREAM   = 0x0042;\n\tvar VT_STORAGE  = 0x0043;\n\tvar VT_STREAMED_Object  = 0x0044;\n\tvar VT_STORED_Object    = 0x0045;\n\tvar VT_BLOB_Object      = 0x0046;\n\tvar VT_CF       = 0x0047;\n\tvar VT_CLSID    = 0x0048;\n\tvar VT_VERSIONED_STREAM = 0x0049;\n\tvar VT_VECTOR   = 0x1000;\n\tvar VT_ARRAY    = 0x2000;\n\n\tvar VT_STRING   = 0x0050; // 2.3.3.1.11 VtString\n\tvar VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString\n\tvar VT_CUSTOM   = [VT_STRING, VT_USTR];\n}\n\n/* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */\nvar DocSummaryPIDDSI = {\n\t0x01: { n: 'CodePage', t: VT_I2 },\n\t0x02: { n: 'Category', t: VT_STRING },\n\t0x03: { n: 'PresentationFormat', t: VT_STRING },\n\t0x04: { n: 'ByteCount', t: VT_I4 },\n\t0x05: { n: 'LineCount', t: VT_I4 },\n\t0x06: { n: 'ParagraphCount', t: VT_I4 },\n\t0x07: { n: 'SlideCount', t: VT_I4 },\n\t0x08: { n: 'NoteCount', t: VT_I4 },\n\t0x09: { n: 'HiddenCount', t: VT_I4 },\n\t0x0a: { n: 'MultimediaClipCount', t: VT_I4 },\n\t0x0b: { n: 'Scale', t: VT_BOOL },\n\t0x0c: { n: 'HeadingPair', t: VT_VECTOR | VT_VARIANT },\n\t0x0d: { n: 'DocParts', t: VT_VECTOR | VT_LPSTR },\n\t0x0e: { n: 'Manager', t: VT_STRING },\n\t0x0f: { n: 'Company', t: VT_STRING },\n\t0x10: { n: 'LinksDirty', t: VT_BOOL },\n\t0x11: { n: 'CharacterCount', t: VT_I4 },\n\t0x13: { n: 'SharedDoc', t: VT_BOOL },\n\t0x16: { n: 'HLinksChanged', t: VT_BOOL },\n\t0x17: { n: 'AppVersion', t: VT_I4, p: 'version' },\n\t0x1A: { n: 'ContentType', t: VT_STRING },\n\t0x1B: { n: 'ContentStatus', t: VT_STRING },\n\t0x1C: { n: 'Language', t: VT_STRING },\n\t0x1D: { n: 'Version', t: VT_STRING },\n\t0xFF: {}\n};\n\n/* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */\nvar SummaryPIDSI = {\n\t0x01: { n: 'CodePage', t: VT_I2 },\n\t0x02: { n: 'Title', t: VT_STRING },\n\t0x03: { n: 'Subject', t: VT_STRING },\n\t0x04: { n: 'Author', t: VT_STRING },\n\t0x05: { n: 'Keywords', t: VT_STRING },\n\t0x06: { n: 'Comments', t: VT_STRING },\n\t0x07: { n: 'Template', t: VT_STRING },\n\t0x08: { n: 'LastAuthor', t: VT_STRING },\n\t0x09: { n: 'RevNumber', t: VT_STRING },\n\t0x0A: { n: 'EditTime', t: VT_FILETIME },\n\t0x0B: { n: 'LastPrinted', t: VT_FILETIME },\n\t0x0C: { n: 'CreatedDate', t: VT_FILETIME },\n\t0x0D: { n: 'ModifiedDate', t: VT_FILETIME },\n\t0x0E: { n: 'PageCount', t: VT_I4 },\n\t0x0F: { n: 'WordCount', t: VT_I4 },\n\t0x10: { n: 'CharCount', t: VT_I4 },\n\t0x11: { n: 'Thumbnail', t: VT_CF },\n\t0x12: { n: 'ApplicationName', t: VT_LPSTR },\n\t0x13: { n: 'DocumentSecurity', t: VT_I4 },\n\t0xFF: {}\n};\n\n/* [MS-OLEPS] 2.18 */\nvar SpecialProperties = {\n\t0x80000000: { n: 'Locale', t: VT_UI4 },\n\t0x80000003: { n: 'Behavior', t: VT_UI4 },\n\t0x72627262: {}\n};\n\n(function() {\n\tfor(var y in SpecialProperties) if(SpecialProperties.hasOwnProperty(y))\n\tDocSummaryPIDDSI[y] = SummaryPIDSI[y] = SpecialProperties[y];\n})();\n\n/* [MS-XLS] 2.4.63 Country/Region codes */\nvar CountryEnum = {\n\t0x0001: \"US\", // United States\n\t0x0002: \"CA\", // Canada\n\t0x0003: \"\", // Latin America (except Brazil)\n\t0x0007: \"RU\", // Russia\n\t0x0014: \"EG\", // Egypt\n\t0x001E: \"GR\", // Greece\n\t0x001F: \"NL\", // Netherlands\n\t0x0020: \"BE\", // Belgium\n\t0x0021: \"FR\", // France\n\t0x0022: \"ES\", // Spain\n\t0x0024: \"HU\", // Hungary\n\t0x0027: \"IT\", // Italy\n\t0x0029: \"CH\", // Switzerland\n\t0x002B: \"AT\", // Austria\n\t0x002C: \"GB\", // United Kingdom\n\t0x002D: \"DK\", // Denmark\n\t0x002E: \"SE\", // Sweden\n\t0x002F: \"NO\", // Norway\n\t0x0030: \"PL\", // Poland\n\t0x0031: \"DE\", // Germany\n\t0x0034: \"MX\", // Mexico\n\t0x0037: \"BR\", // Brazil\n\t0x003d: \"AU\", // Australia\n\t0x0040: \"NZ\", // New Zealand\n\t0x0042: \"TH\", // Thailand\n\t0x0051: \"JP\", // Japan\n\t0x0052: \"KR\", // Korea\n\t0x0054: \"VN\", // Viet Nam\n\t0x0056: \"CN\", // China\n\t0x005A: \"TR\", // Turkey\n\t0x0069: \"JS\", // Ramastan\n\t0x00D5: \"DZ\", // Algeria\n\t0x00D8: \"MA\", // Morocco\n\t0x00DA: \"LY\", // Libya\n\t0x015F: \"PT\", // Portugal\n\t0x0162: \"IS\", // Iceland\n\t0x0166: \"FI\", // Finland\n\t0x01A4: \"CZ\", // Czech Republic\n\t0x0376: \"TW\", // Taiwan\n\t0x03C1: \"LB\", // Lebanon\n\t0x03C2: \"JO\", // Jordan\n\t0x03C3: \"SY\", // Syria\n\t0x03C4: \"IQ\", // Iraq\n\t0x03C5: \"KW\", // Kuwait\n\t0x03C6: \"SA\", // Saudi Arabia\n\t0x03CB: \"AE\", // United Arab Emirates\n\t0x03CC: \"IL\", // Israel\n\t0x03CE: \"QA\", // Qatar\n\t0x03D5: \"IR\", // Iran\n\t0xFFFF: \"US\"  // United States\n};\n\n/* [MS-XLS] 2.5.127 */\nvar XLSFillPattern = [\n\tnull,\n\t'solid',\n\t'mediumGray',\n\t'darkGray',\n\t'lightGray',\n\t'darkHorizontal',\n\t'darkVertical',\n\t'darkDown',\n\t'darkUp',\n\t'darkGrid',\n\t'darkTrellis',\n\t'lightHorizontal',\n\t'lightVertical',\n\t'lightDown',\n\t'lightUp',\n\t'lightGrid',\n\t'lightTrellis',\n\t'gray125',\n\t'gray0625'\n];\n\nfunction rgbify(arr) { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }\n\n/* [MS-XLS] 2.5.161 */\nvar XLSIcv = rgbify([\n\t/* Color Constants */\n\t0x000000,\n\t0xFFFFFF,\n\t0xFF0000,\n\t0x00FF00,\n\t0x0000FF,\n\t0xFFFF00,\n\t0xFF00FF,\n\t0x00FFFF,\n\n\t/* Defaults */\n\t0x000000,\n\t0xFFFFFF,\n\t0xFF0000,\n\t0x00FF00,\n\t0x0000FF,\n\t0xFFFF00,\n\t0xFF00FF,\n\t0x00FFFF,\n\n\t0x800000,\n\t0x008000,\n\t0x000080,\n\t0x808000,\n\t0x800080,\n\t0x008080,\n\t0xC0C0C0,\n\t0x808080,\n\t0x9999FF,\n\t0x993366,\n\t0xFFFFCC,\n\t0xCCFFFF,\n\t0x660066,\n\t0xFF8080,\n\t0x0066CC,\n\t0xCCCCFF,\n\n\t0x000080,\n\t0xFF00FF,\n\t0xFFFF00,\n\t0x00FFFF,\n\t0x800080,\n\t0x800000,\n\t0x008080,\n\t0x0000FF,\n\t0x00CCFF,\n\t0xCCFFFF,\n\t0xCCFFCC,\n\t0xFFFF99,\n\t0x99CCFF,\n\t0xFF99CC,\n\t0xCC99FF,\n\t0xFFCC99,\n\n\t0x3366FF,\n\t0x33CCCC,\n\t0x99CC00,\n\t0xFFCC00,\n\t0xFF9900,\n\t0xFF6600,\n\t0x666699,\n\t0x969696,\n\t0x003366,\n\t0x339966,\n\t0x003300,\n\t0x333300,\n\t0x993300,\n\t0x993366,\n\t0x333399,\n\t0x333333,\n\n\t/* Sheet */\n\t0xFFFFFF,\n\t0x000000\n]);\n\n/* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */\n/* 12.3 Part Summary <SpreadsheetML> */\n/* 14.2 Part Summary <DrawingML> */\n/* [MS-XLSX] 2.1 Part Enumerations */\n/* [MS-XLSB] 2.1.7 Part Enumeration */\nvar ct2type = {\n\t/* Workbook */\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\": \"workbooks\",\n\n\t/* Worksheet */\n\t\"application/vnd.ms-excel.binIndexWs\": \"TODO\", /* Binary Index */\n\n\t/* Chartsheet */\n\t\"application/vnd.ms-excel.chartsheet\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml\": \"TODO\",\n\n\t/* Dialogsheet */\n\t\"application/vnd.ms-excel.dialogsheet\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml\": \"TODO\",\n\n\t/* Macrosheet */\n\t\"application/vnd.ms-excel.macrosheet\": \"TODO\",\n\t\"application/vnd.ms-excel.macrosheet+xml\": \"TODO\",\n\t\"application/vnd.ms-excel.intlmacrosheet\": \"TODO\",\n\t\"application/vnd.ms-excel.binIndexMs\": \"TODO\", /* Binary Index */\n\n\t/* File Properties */\n\t\"application/vnd.openxmlformats-package.core-properties+xml\": \"coreprops\",\n\t\"application/vnd.openxmlformats-officedocument.custom-properties+xml\": \"custprops\",\n\t\"application/vnd.openxmlformats-officedocument.extended-properties+xml\": \"extprops\",\n\n\t/* Custom Data Properties */\n\t\"application/vnd.openxmlformats-officedocument.customXmlProperties+xml\": \"TODO\",\n\n\t/* Comments */\n\t\"application/vnd.ms-excel.comments\": \"comments\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml\": \"comments\",\n\n\t/* PivotTable */\n\t\"application/vnd.ms-excel.pivotTable\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml\": \"TODO\",\n\n\t/* Calculation Chain */\n\t\"application/vnd.ms-excel.calcChain\": \"calcchains\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml\": \"calcchains\",\n\n\t/* Printer Settings */\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings\": \"TODO\",\n\n\t/* ActiveX */\n\t\"application/vnd.ms-office.activeX\": \"TODO\",\n\t\"application/vnd.ms-office.activeX+xml\": \"TODO\",\n\n\t/* Custom Toolbars */\n\t\"application/vnd.ms-excel.attachedToolbars\": \"TODO\",\n\n\t/* External Data Connections */\n\t\"application/vnd.ms-excel.connections\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml\": \"TODO\",\n\n\t/* External Links */\n\t\"application/vnd.ms-excel.externalLink\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml\": \"TODO\",\n\n\t/* Metadata */\n\t\"application/vnd.ms-excel.sheetMetadata\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml\": \"TODO\",\n\n\t/* PivotCache */\n\t\"application/vnd.ms-excel.pivotCacheDefinition\": \"TODO\",\n\t\"application/vnd.ms-excel.pivotCacheRecords\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml\": \"TODO\",\n\n\t/* Query Table */\n\t\"application/vnd.ms-excel.queryTable\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml\": \"TODO\",\n\n\t/* Shared Workbook */\n\t\"application/vnd.ms-excel.userNames\": \"TODO\",\n\t\"application/vnd.ms-excel.revisionHeaders\": \"TODO\",\n\t\"application/vnd.ms-excel.revisionLog\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml\": \"TODO\",\n\n\t/* Single Cell Table */\n\t\"application/vnd.ms-excel.tableSingleCells\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml\": \"TODO\",\n\n\t/* Slicer */\n\t\"application/vnd.ms-excel.slicer\": \"TODO\",\n\t\"application/vnd.ms-excel.slicerCache\": \"TODO\",\n\t\"application/vnd.ms-excel.slicer+xml\": \"TODO\",\n\t\"application/vnd.ms-excel.slicerCache+xml\": \"TODO\",\n\n\t/* Sort Map */\n\t\"application/vnd.ms-excel.wsSortMap\": \"TODO\",\n\n\t/* Table */\n\t\"application/vnd.ms-excel.table\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml\": \"TODO\",\n\n\t/* Themes */\n\t\"application/vnd.openxmlformats-officedocument.theme+xml\": \"themes\",\n\n\t/* Timeline */\n\t\"application/vnd.ms-excel.Timeline+xml\": \"TODO\", /* verify */\n\t\"application/vnd.ms-excel.TimelineCache+xml\": \"TODO\", /* verify */\n\n\t/* VBA */\n\t\"application/vnd.ms-office.vbaProject\": \"vba\",\n\t\"application/vnd.ms-office.vbaProjectSignature\": \"vba\",\n\n\t/* Volatile Dependencies */\n\t\"application/vnd.ms-office.volatileDependencies\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml\": \"TODO\",\n\n\t/* Control Properties */\n\t\"application/vnd.ms-excel.controlproperties+xml\": \"TODO\",\n\n\t/* Data Model */\n\t\"application/vnd.openxmlformats-officedocument.model+data\": \"TODO\",\n\n\t/* Survey */\n\t\"application/vnd.ms-excel.Survey+xml\": \"TODO\",\n\n\t/* Drawing */\n\t\"application/vnd.openxmlformats-officedocument.drawing+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.chart+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml\": \"TODO\",\n\t\"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml\": \"TODO\",\n\n\t/* VML */\n\t\"application/vnd.openxmlformats-officedocument.vmlDrawing\": \"TODO\",\n\n\t\"application/vnd.openxmlformats-package.relationships+xml\": \"rels\",\n\t\"application/vnd.openxmlformats-officedocument.oleObject\": \"TODO\",\n\n\t\"sheet\": \"js\"\n};\n\nvar CT_LIST = (function(){\n\tvar o = {\n\t\tworkbooks: {\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\",\n\t\t\txlsm: \"application/vnd.ms-excel.sheet.macroEnabled.main+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.sheet.binary.macroEnabled.main\",\n\t\t\txltx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml\"\n\t\t},\n\t\tstrs: { /* Shared Strings */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.sharedStrings\"\n\t\t},\n\t\tsheets: {\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.worksheet\"\n\t\t},\n\t\tstyles: {/* Styles */\n\t\t\txlsx: \"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\",\n\t\t\txlsb: \"application/vnd.ms-excel.styles\"\n\t\t}\n\t};\n\tkeys(o).forEach(function(k) { if(!o[k].xlsm) o[k].xlsm = o[k].xlsx; });\n\tkeys(o).forEach(function(k){ keys(o[k]).forEach(function(v) { ct2type[o[k][v]] = k; }); });\n\treturn o;\n})();\n\nvar type2ct = evert_arr(ct2type);\n\nXMLNS.CT = 'http://schemas.openxmlformats.org/package/2006/content-types';\n\nfunction parse_ct(data, opts) {\n\tvar ctext = {};\n\tif(!data || !data.match) return data;\n\tvar ct = { workbooks: [], sheets: [], calcchains: [], themes: [], styles: [],\n\t\tcoreprops: [], extprops: [], custprops: [], strs:[], comments: [], vba: [],\n\t\tTODO:[], rels:[], xmlns: \"\" };\n\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(y[0].replace(nsregex,\"<\")) {\n\t\t\tcase '<?xml': break;\n\t\t\tcase '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\\w+):/)||[\"\",\"\"])[1] ]; break;\n\t\t\tcase '<Default': ctext[y.Extension] = y.ContentType; break;\n\t\t\tcase '<Override':\n\t\t\t\tif(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);\n\t\t\t\telse if(opts.WTF) console.error(y);\n\t\t\t\tbreak;\n\t\t}\n\t});\n\tif(ct.xmlns !== XMLNS.CT) throw new Error(\"Unknown Namespace: \" + ct.xmlns);\n\tct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : \"\";\n\tct.sst = ct.strs.length > 0 ? ct.strs[0] : \"\";\n\tct.style = ct.styles.length > 0 ? ct.styles[0] : \"\";\n\tct.defaults = ctext;\n\tdelete ct.calcchains;\n\treturn ct;\n}\n\nvar CTYPE_XML_ROOT = writextag('Types', null, {\n\t'xmlns': XMLNS.CT,\n\t'xmlns:xsd': XMLNS.xsd,\n\t'xmlns:xsi': XMLNS.xsi\n});\n\nvar CTYPE_DEFAULTS = [\n\t['xml', 'application/xml'],\n\t['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],\n\t['rels', type2ct.rels[0]]\n].map(function(x) {\n\treturn writextag('Default', null, {'Extension':x[0], 'ContentType': x[1]});\n});\n\nfunction write_ct(ct, opts) {\n\tvar o = [], v;\n\to[o.length] = (XML_HEADER);\n\to[o.length] = (CTYPE_XML_ROOT);\n\to = o.concat(CTYPE_DEFAULTS);\n\tvar f1 = function(w) {\n\t\tif(ct[w] && ct[w].length > 0) {\n\t\t\tv = ct[w][0];\n\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n\t\t\t}));\n\t\t}\n\t};\n\tvar f2 = function(w) {\n\t\tct[w].forEach(function(v) {\n\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t'ContentType': CT_LIST[w][opts.bookType || 'xlsx']\n\t\t\t}));\n\t\t});\n\t};\n\tvar f3 = function(t) {\n\t\t(ct[t]||[]).forEach(function(v) {\n\t\t\to[o.length] = (writextag('Override', null, {\n\t\t\t\t'PartName': (v[0] == '/' ? \"\":\"/\") + v,\n\t\t\t\t'ContentType': type2ct[t][0]\n\t\t\t}));\n\t\t});\n\t};\n\tf1('workbooks');\n\tf2('sheets');\n\tf3('themes');\n\t['strs', 'styles'].forEach(f1);\n\t['coreprops', 'extprops', 'custprops'].forEach(f3);\n\tif(o.length>2){ o[o.length] = ('</Types>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* 9.3.2 OPC Relationships Markup */\nvar RELS = {\n\tWB: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n\tSHEET: \"http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument\"\n};\n\nfunction parse_rels(data, currentFilePath) {\n\tif (!data) return data;\n\tif (currentFilePath.charAt(0) !== '/') {\n\t\tcurrentFilePath = '/'+currentFilePath;\n\t}\n\tvar rels = {};\n\tvar hash = {};\n\tvar resolveRelativePathIntoAbsolute = function (to) {\n\t\tvar toksFrom = currentFilePath.split('/');\n\t\ttoksFrom.pop(); // folder path\n\t\tvar toksTo = to.split('/');\n\t\tvar reversed = [];\n\t\twhile (toksTo.length !== 0) {\n\t\t\tvar tokTo = toksTo.shift();\n\t\t\tif (tokTo === '..') {\n\t\t\t\ttoksFrom.pop();\n\t\t\t} else if (tokTo !== '.') {\n\t\t\t\ttoksFrom.push(tokTo);\n\t\t\t}\n\t\t}\n\t\treturn toksFrom.join('/');\n\t};\n\n\tdata.match(tagregex).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\t/* 9.3.2.2 OPC_Relationships */\n\t\tif (y[0] === '<Relationship') {\n\t\t\tvar rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; rel.TargetMode = y.TargetMode;\n\t\t\tvar canonictarget = y.TargetMode === 'External' ? y.Target : resolveRelativePathIntoAbsolute(y.Target);\n\t\t\trels[canonictarget] = rel;\n\t\t\thash[y.Id] = rel;\n\t\t}\n\t});\n\trels[\"!id\"] = hash;\n\treturn rels;\n}\n\nXMLNS.RELS = 'http://schemas.openxmlformats.org/package/2006/relationships';\n\nvar RELS_ROOT = writextag('Relationships', null, {\n\t//'xmlns:ns0': XMLNS.RELS,\n\t'xmlns': XMLNS.RELS\n});\n\n/* TODO */\nfunction write_rels(rels) {\n\tvar o = [];\n\to[o.length] = (XML_HEADER);\n\to[o.length] = (RELS_ROOT);\n\tkeys(rels['!id']).forEach(function(rid) { var rel = rels['!id'][rid];\n\t\to[o.length] = (writextag('Relationship', null, rel));\n\t});\n\tif(o.length>2){ o[o.length] = ('</Relationships>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* ECMA-376 Part II 11.1 Core Properties Part */\n/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\nvar CORE_PROPS = [\n\t[\"cp:category\", \"Category\"],\n\t[\"cp:contentStatus\", \"ContentStatus\"],\n\t[\"cp:keywords\", \"Keywords\"],\n\t[\"cp:lastModifiedBy\", \"LastAuthor\"],\n\t[\"cp:lastPrinted\", \"LastPrinted\"],\n\t[\"cp:revision\", \"RevNumber\"],\n\t[\"cp:version\", \"Version\"],\n\t[\"dc:creator\", \"Author\"],\n\t[\"dc:description\", \"Comments\"],\n\t[\"dc:identifier\", \"Identifier\"],\n\t[\"dc:language\", \"Language\"],\n\t[\"dc:subject\", \"Subject\"],\n\t[\"dc:title\", \"Title\"],\n\t[\"dcterms:created\", \"CreatedDate\", 'date'],\n\t[\"dcterms:modified\", \"ModifiedDate\", 'date']\n];\n\nXMLNS.CORE_PROPS = \"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\";\nRELS.CORE_PROPS  = 'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties';\n\nvar CORE_PROPS_REGEX = (function() {\n\tvar r = new Array(CORE_PROPS.length);\n\tfor(var i = 0; i < CORE_PROPS.length; ++i) {\n\t\tvar f = CORE_PROPS[i];\n\t\tvar g = \"(?:\"+ f[0].substr(0,f[0].indexOf(\":\")) +\":)\"+ f[0].substr(f[0].indexOf(\":\")+1);\n\t\tr[i] = new RegExp(\"<\" + g + \"[^>]*>(.*)<\\/\" + g + \">\");\n\t}\n\treturn r;\n})();\n\nfunction parse_core_props(data) {\n\tvar p = {};\n\n\tfor(var i = 0; i < CORE_PROPS.length; ++i) {\n\t\tvar f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);\n\t\tif(cur != null && cur.length > 0) p[f[1]] = cur[1];\n\t\tif(f[2] === 'date' && p[f[1]]) p[f[1]] = new Date(p[f[1]]);\n\t}\n\n\treturn p;\n}\n\nvar CORE_PROPS_XML_ROOT = writextag('cp:coreProperties', null, {\n\t//'xmlns': XMLNS.CORE_PROPS,\n\t'xmlns:cp': XMLNS.CORE_PROPS,\n\t'xmlns:dc': XMLNS.dc,\n\t'xmlns:dcterms': XMLNS.dcterms,\n\t'xmlns:dcmitype': XMLNS.dcmitype,\n\t'xmlns:xsi': XMLNS.xsi\n});\n\nfunction cp_doit(f, g, h, o, p) {\n\tif(p[f] != null || g == null || g === \"\") return;\n\tp[f] = g;\n\to[o.length] = (h ? writextag(f,g,h) : writetag(f,g));\n}\n\nfunction write_core_props(cp, opts) {\n\tvar o = [XML_HEADER, CORE_PROPS_XML_ROOT], p = {};\n\tif(!cp) return o.join(\"\");\n\n\n\tif(cp.CreatedDate != null) cp_doit(\"dcterms:created\", typeof cp.CreatedDate === \"string\" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), {\"xsi:type\":\"dcterms:W3CDTF\"}, o, p);\n\tif(cp.ModifiedDate != null) cp_doit(\"dcterms:modified\", typeof cp.ModifiedDate === \"string\" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), {\"xsi:type\":\"dcterms:W3CDTF\"}, o, p);\n\n\tfor(var i = 0; i != CORE_PROPS.length; ++i) { var f = CORE_PROPS[i]; cp_doit(f[0], cp[f[1]], null, o, p); }\n\tif(o.length>2){ o[o.length] = ('</cp:coreProperties>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* 15.2.12.3 Extended File Properties Part */\n/* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */\nvar EXT_PROPS = [\n\t[\"Application\", \"Application\", \"string\"],\n\t[\"AppVersion\", \"AppVersion\", \"string\"],\n\t[\"Company\", \"Company\", \"string\"],\n\t[\"DocSecurity\", \"DocSecurity\", \"string\"],\n\t[\"Manager\", \"Manager\", \"string\"],\n\t[\"HyperlinksChanged\", \"HyperlinksChanged\", \"bool\"],\n\t[\"SharedDoc\", \"SharedDoc\", \"bool\"],\n\t[\"LinksUpToDate\", \"LinksUpToDate\", \"bool\"],\n\t[\"ScaleCrop\", \"ScaleCrop\", \"bool\"],\n\t[\"HeadingPairs\", \"HeadingPairs\", \"raw\"],\n\t[\"TitlesOfParts\", \"TitlesOfParts\", \"raw\"]\n];\n\nXMLNS.EXT_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/extended-properties\";\nRELS.EXT_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties';\n\nfunction parse_ext_props(data, p) {\n\tvar q = {}; if(!p) p = {};\n\n\tEXT_PROPS.forEach(function(f) {\n\t\tswitch(f[2]) {\n\t\t\tcase \"string\": p[f[1]] = (data.match(matchtag(f[0]))||[])[1]; break;\n\t\t\tcase \"bool\": p[f[1]] = (data.match(matchtag(f[0]))||[])[1] === \"true\"; break;\n\t\t\tcase \"raw\":\n\t\t\t\tvar cur = data.match(new RegExp(\"<\" + f[0] + \"[^>]*>(.*)<\\/\" + f[0] + \">\"));\n\t\t\t\tif(cur && cur.length > 0) q[f[1]] = cur[1];\n\t\t\t\tbreak;\n\t\t}\n\t});\n\n\tif(q.HeadingPairs && q.TitlesOfParts) {\n\t\tvar v = parseVector(q.HeadingPairs);\n\t\tvar j = 0, widx = 0;\n\t\tfor(var i = 0; i !== v.length; ++i) {\n\t\t\tswitch(v[i].v) {\n\t\t\t\tcase \"Worksheets\": widx = j; p.Worksheets = +(v[++i].v); break;\n\t\t\t\tcase \"Named Ranges\": ++i; break; // TODO: Handle Named Ranges\n\t\t\t}\n\t\t}\n\t\tvar parts = parseVector(q.TitlesOfParts).map(function(x) { return utf8read(x.v); });\n\t\tp.SheetNames = parts.slice(widx, widx + p.Worksheets);\n\t}\n\treturn p;\n}\n\nvar EXT_PROPS_XML_ROOT = writextag('Properties', null, {\n\t'xmlns': XMLNS.EXT_PROPS,\n\t'xmlns:vt': XMLNS.vt\n});\n\nfunction write_ext_props(cp, opts) {\n\tvar o = [], p = {}, W = writextag;\n\tif(!cp) cp = {};\n\tcp.Application = \"SheetJS\";\n\to[o.length] = (XML_HEADER);\n\to[o.length] = (EXT_PROPS_XML_ROOT);\n\n\tEXT_PROPS.forEach(function(f) {\n\t\tif(cp[f[1]] === undefined) return;\n\t\tvar v;\n\t\tswitch(f[2]) {\n\t\t\tcase 'string': v = cp[f[1]]; break;\n\t\t\tcase 'bool': v = cp[f[1]] ? 'true' : 'false'; break;\n\t\t}\n\t\tif(v !== undefined) o[o.length] = (W(f[0], v));\n\t});\n\n\t/* TODO: HeadingPairs, TitlesOfParts */\n\to[o.length] = (W('HeadingPairs', W('vt:vector', W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>')+W('vt:variant', W('vt:i4', String(cp.Worksheets))), {size:2, baseType:\"variant\"})));\n\to[o.length] = (W('TitlesOfParts', W('vt:vector', cp.SheetNames.map(function(s) { return \"<vt:lpstr>\" + s + \"</vt:lpstr>\"; }).join(\"\"), {size: cp.Worksheets, baseType:\"lpstr\"})));\n\tif(o.length>2){ o[o.length] = ('</Properties>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* 15.2.12.2 Custom File Properties Part */\nXMLNS.CUST_PROPS = \"http://schemas.openxmlformats.org/officeDocument/2006/custom-properties\";\nRELS.CUST_PROPS  = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties';\n\nvar custregex = /<[^>]+>[^<]*/g;\nfunction parse_cust_props(data, opts) {\n\tvar p = {}, name;\n\tvar m = data.match(custregex);\n\tif(m) for(var i = 0; i != m.length; ++i) {\n\t\tvar x = m[i], y = parsexmltag(x);\n\t\tswitch(y[0]) {\n\t\t\tcase '<?xml': break;\n\t\t\tcase '<Properties':\n\t\t\t\tif(y.xmlns !== XMLNS.CUST_PROPS) throw \"unrecognized xmlns \" + y.xmlns;\n\t\t\t\tif(y.xmlnsvt && y.xmlnsvt !== XMLNS.vt) throw \"unrecognized vt \" + y.xmlnsvt;\n\t\t\t\tbreak;\n\t\t\tcase '<property': name = y.name; break;\n\t\t\tcase '</property>': name = null; break;\n\t\t\tdefault: if (x.indexOf('<vt:') === 0) {\n\t\t\t\tvar toks = x.split('>');\n\t\t\t\tvar type = toks[0].substring(4), text = toks[1];\n\t\t\t\t/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */\n\t\t\t\tswitch(type) {\n\t\t\t\t\tcase 'lpstr': case 'lpwstr': case 'bstr': case 'lpwstr':\n\t\t\t\t\t\tp[name] = unescapexml(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bool':\n\t\t\t\t\t\tp[name] = parsexmlbool(text, '<vt:bool>');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':\n\t\t\t\t\t\tp[name] = parseInt(text, 10);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'r4': case 'r8': case 'decimal':\n\t\t\t\t\t\tp[name] = parseFloat(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'filetime': case 'date':\n\t\t\t\t\t\tp[name] = new Date(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'cy': case 'error':\n\t\t\t\t\t\tp[name] = unescapexml(text);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif(typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);\n\t\t\t\t}\n\t\t\t} else if(x.substr(0,2) === \"</\") {\n\t\t\t} else if(opts.WTF) throw new Error(x);\n\t\t}\n\t}\n\treturn p;\n}\n\nvar CUST_PROPS_XML_ROOT = writextag('Properties', null, {\n\t'xmlns': XMLNS.CUST_PROPS,\n\t'xmlns:vt': XMLNS.vt\n});\n\nfunction write_cust_props(cp, opts) {\n\tvar o = [XML_HEADER, CUST_PROPS_XML_ROOT];\n\tif(!cp) return o.join(\"\");\n\tvar pid = 1;\n\tkeys(cp).forEach(function custprop(k) { ++pid;\n\t\to[o.length] = (writextag('property', write_vt(cp[k]), {\n\t\t\t'fmtid': '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',\n\t\t\t'pid': pid,\n\t\t\t'name': k\n\t\t}));\n\t});\n\tif(o.length>2){ o[o.length] = '</Properties>'; o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\nfunction xlml_set_prop(Props, tag, val) {\n\t/* TODO: Normalize the properties */\n\tswitch(tag) {\n\t\tcase 'Description': tag = 'Comments'; break;\n\t}\n\tProps[tag] = val;\n}\n\n/* [MS-DTYP] 2.3.3 FILETIME */\n/* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */\n/* [MS-OLEPS] 2.8 FILETIME (Packet Version) */\nfunction parse_FILETIME(blob) {\n\tvar dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);\n\treturn new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\\.000/,\"\");\n}\n\n/* [MS-OSHARED] 2.3.3.1.4 Lpstr */\nfunction parse_lpstr(blob, type, pad) {\n\tvar str = blob.read_shift(0, 'lpstr');\n\tif(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;\n\treturn str;\n}\n\n/* [MS-OSHARED] 2.3.3.1.6 Lpwstr */\nfunction parse_lpwstr(blob, type, pad) {\n\tvar str = blob.read_shift(0, 'lpwstr');\n\tif(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;\n\treturn str;\n}\n\n\n/* [MS-OSHARED] 2.3.3.1.11 VtString */\n/* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */\nfunction parse_VtStringBase(blob, stringType, pad) {\n\tif(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);\n\treturn parse_lpstr(blob, stringType, pad);\n}\n\nfunction parse_VtString(blob, t, pad) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }\nfunction parse_VtUnalignedString(blob, t) { if(!t) throw new Error(\"dafuq?\"); return parse_VtStringBase(blob, t, 0); }\n\n/* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */\nfunction parse_VtVecUnalignedLpstrValue(blob) {\n\tvar length = blob.read_shift(4);\n\tvar ret = [];\n\tfor(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr');\n\treturn ret;\n}\n\n/* [MS-OSHARED] 2.3.3.1.10 VtVecUnalignedLpstr */\nfunction parse_VtVecUnalignedLpstr(blob) {\n\treturn parse_VtVecUnalignedLpstrValue(blob);\n}\n\n/* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */\nfunction parse_VtHeadingPair(blob) {\n\tvar headingString = parse_TypedPropertyValue(blob, VT_USTR);\n\tvar headerParts = parse_TypedPropertyValue(blob, VT_I4);\n\treturn [headingString, headerParts];\n}\n\n/* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */\nfunction parse_VtVecHeadingPairValue(blob) {\n\tvar cElements = blob.read_shift(4);\n\tvar out = [];\n\tfor(var i = 0; i != cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));\n\treturn out;\n}\n\n/* [MS-OSHARED] 2.3.3.1.15 VtVecHeadingPair */\nfunction parse_VtVecHeadingPair(blob) {\n\t// NOTE: When invoked, wType & padding were already consumed\n\treturn parse_VtVecHeadingPairValue(blob);\n}\n\n/* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */\nfunction parse_dictionary(blob,CodePage) {\n\tvar cnt = blob.read_shift(4);\n\tvar dict = {};\n\tfor(var j = 0; j != cnt; ++j) {\n\t\tvar pid = blob.read_shift(4);\n\t\tvar len = blob.read_shift(4);\n\t\tdict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');\n\t}\n\tif(blob.l & 3) blob.l = (blob.l>>2+1)<<2;\n\treturn dict;\n}\n\n/* [MS-OLEPS] 2.9 BLOB */\nfunction parse_BLOB(blob) {\n\tvar size = blob.read_shift(4);\n\tvar bytes = blob.slice(blob.l,blob.l+size);\n\tif(size & 3 > 0) blob.l += (4 - (size & 3)) & 3;\n\treturn bytes;\n}\n\n/* [MS-OLEPS] 2.11 ClipboardData */\nfunction parse_ClipboardData(blob) {\n\t// TODO\n\tvar o = {};\n\to.Size = blob.read_shift(4);\n\t//o.Format = blob.read_shift(4);\n\tblob.l += o.Size;\n\treturn o;\n}\n\n/* [MS-OLEPS] 2.14 Vector and Array Property Types */\nfunction parse_VtVector(blob, cb) {\n\t/* [MS-OLEPS] 2.14.2 VectorHeader */\n/*\tvar Length = blob.read_shift(4);\n\tvar o = [];\n\tfor(var i = 0; i != Length; ++i) {\n\t\to.push(cb(blob));\n\t}\n\treturn o;*/\n}\n\n/* [MS-OLEPS] 2.15 TypedPropertyValue */\nfunction parse_TypedPropertyValue(blob, type, _opts) {\n\tvar t = blob.read_shift(2), ret, opts = _opts||{};\n\tblob.l += 2;\n\tif(type !== VT_VARIANT)\n\tif(t !== type && VT_CUSTOM.indexOf(type)===-1) throw new Error('Expected type ' + type + ' saw ' + t);\n\tswitch(type === VT_VARIANT ? t : type) {\n\t\tcase 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;\n\t\tcase 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;\n\t\tcase 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;\n\t\tcase 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;\n\t\tcase 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');\n\t\tcase 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);\n\t\tcase 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);\n\t\tcase 0x41 /*VT_BLOB*/: return parse_BLOB(blob);\n\t\tcase 0x47 /*VT_CF*/: return parse_ClipboardData(blob);\n\t\tcase 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw && 4).replace(chr0,'');\n\t\tcase 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t, 4).replace(chr0,'');\n\t\tcase 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPair(blob);\n\t\tcase 0x101E /*VT_LPSTR*/: return parse_VtVecUnalignedLpstr(blob);\n\t\tdefault: throw new Error(\"TypedPropertyValue unrecognized type \" + type + \" \" + t);\n\t}\n}\n/* [MS-OLEPS] 2.14.2 VectorHeader */\n/*function parse_VTVectorVariant(blob) {\n\tvar Length = blob.read_shift(4);\n\n\tif(Length & 1 !== 0) throw new Error(\"VectorHeader Length=\" + Length + \" must be even\");\n\tvar o = [];\n\tfor(var i = 0; i != Length; ++i) {\n\t\to.push(parse_TypedPropertyValue(blob, VT_VARIANT));\n\t}\n\treturn o;\n}*/\n\n/* [MS-OLEPS] 2.20 PropertySet */\nfunction parse_PropertySet(blob, PIDSI) {\n\tvar start_addr = blob.l;\n\tvar size = blob.read_shift(4);\n\tvar NumProps = blob.read_shift(4);\n\tvar Props = [], i = 0;\n\tvar CodePage = 0;\n\tvar Dictionary = -1, DictObj;\n\tfor(i = 0; i != NumProps; ++i) {\n\t\tvar PropID = blob.read_shift(4);\n\t\tvar Offset = blob.read_shift(4);\n\t\tProps[i] = [PropID, Offset + start_addr];\n\t}\n\tvar PropH = {};\n\tfor(i = 0; i != NumProps; ++i) {\n\t\tif(blob.l !== Props[i][1]) {\n\t\t\tvar fail = true;\n\t\t\tif(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {\n\t\t\t\tcase 0x02 /*VT_I2*/: if(blob.l +2 === Props[i][1]) { blob.l+=2; fail = false; } break;\n\t\t\t\tcase 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;\n\t\t\t\tcase 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;\n\t\t\t}\n\t\t\tif(!PIDSI && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }\n\t\t\tif(fail) throw new Error(\"Read Error: Expected address \" + Props[i][1] + ' at ' + blob.l + ' :' + i);\n\t\t}\n\t\tif(PIDSI) {\n\t\t\tvar piddsi = PIDSI[Props[i][0]];\n\t\t\tPropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});\n\t\t\tif(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + \".\" + String(PropH[piddsi.n] & 0xFFFF);\n\t\t\tif(piddsi.n == \"CodePage\") switch(PropH[piddsi.n]) {\n\t\t\t\tcase 0: PropH[piddsi.n] = 1252;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase 10000: // OSX Roman\n\t\t\t\tcase 1252: // Windows Latin\n\n\t\t\t\tcase 874: // SB Windows Thai\n\t\t\t\tcase 1250: // SB Windows Central Europe\n\t\t\t\tcase 1251: // SB Windows Cyrillic\n\t\t\t\tcase 1253: // SB Windows Greek\n\t\t\t\tcase 1254: // SB Windows Turkish\n\t\t\t\tcase 1255: // SB Windows Hebrew\n\t\t\t\tcase 1256: // SB Windows Arabic\n\t\t\t\tcase 1257: // SB Windows Baltic\n\t\t\t\tcase 1258: // SB Windows Vietnam\n\n\t\t\t\tcase 932: // DB Windows Japanese Shift-JIS\n\t\t\t\tcase 936: // DB Windows Simplified Chinese GBK\n\t\t\t\tcase 949: // DB Windows Korean\n\t\t\t\tcase 950: // DB Windows Traditional Chinese Big5\n\n\t\t\t\tcase 1200: // UTF16LE\n\t\t\t\tcase 1201: // UTF16BE\n\t\t\t\tcase 65000: case -536: // UTF-7\n\t\t\t\tcase 65001: case -535: // UTF-8\n\t\t\t\t\tset_cp(CodePage = PropH[piddsi.n]); break;\n\t\t\t\tdefault: throw new Error(\"Unsupported CodePage: \" + PropH[piddsi.n]);\n\t\t\t}\n\t\t} else {\n\t\t\tif(Props[i][0] === 0x1) {\n\t\t\t\tCodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);\n\t\t\t\tset_cp(CodePage);\n\t\t\t\tif(Dictionary !== -1) {\n\t\t\t\t\tvar oldpos = blob.l;\n\t\t\t\t\tblob.l = Props[Dictionary][1];\n\t\t\t\t\tDictObj = parse_dictionary(blob,CodePage);\n\t\t\t\t\tblob.l = oldpos;\n\t\t\t\t}\n\t\t\t} else if(Props[i][0] === 0) {\n\t\t\t\tif(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }\n\t\t\t\tDictObj = parse_dictionary(blob,CodePage);\n\t\t\t} else {\n\t\t\t\tvar name = DictObj[Props[i][0]];\n\t\t\t\tvar val;\n\t\t\t\t/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */\n\t\t\t\tswitch(blob[blob.l]) {\n\t\t\t\t\tcase 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;\n\t\t\t\t\tcase 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;\n\t\t\t\t\tcase 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]); break;\n\t\t\t\t\tcase 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;\n\t\t\t\t\tcase 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;\n\t\t\t\t\tcase 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;\n\t\t\t\t\tcase 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;\n\t\t\t\t\tcase 0x40 /*VT_FILETIME*/: blob.l += 4; val = new Date(parse_FILETIME(blob)); break;\n\t\t\t\t\tdefault: throw new Error(\"unparsed value: \" + blob[blob.l]);\n\t\t\t\t}\n\t\t\t\tPropH[name] = val;\n\t\t\t}\n\t\t}\n\t}\n\tblob.l = start_addr + size; /* step ahead to skip padding */\n\treturn PropH;\n}\n\n/* [MS-OLEPS] 2.21 PropertySetStream */\nfunction parse_PropertySetStream(file, PIDSI) {\n\tvar blob = file.content;\n\tprep_blob(blob, 0);\n\n\tvar NumSets, FMTID0, FMTID1, Offset0, Offset1;\n\tblob.chk('feff', 'Byte Order: ');\n\n\tvar vers = blob.read_shift(2); // TODO: check version\n\tvar SystemIdentifier = blob.read_shift(4);\n\tblob.chk(CFB.utils.consts.HEADER_CLSID, 'CLSID: ');\n\tNumSets = blob.read_shift(4);\n\tif(NumSets !== 1 && NumSets !== 2) throw \"Unrecognized #Sets: \" + NumSets;\n\tFMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);\n\n\tif(NumSets === 1 && Offset0 !== blob.l) throw \"Length mismatch\";\n\telse if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }\n\tvar PSet0 = parse_PropertySet(blob, PIDSI);\n\n\tvar rval = { SystemIdentifier: SystemIdentifier };\n\tfor(var y in PSet0) rval[y] = PSet0[y];\n\t//rval.blob = blob;\n\trval.FMTID = FMTID0;\n\t//rval.PSet0 = PSet0;\n\tif(NumSets === 1) return rval;\n\tif(blob.l !== Offset1) throw \"Length mismatch 2: \" + blob.l + \" !== \" + Offset1;\n\tvar PSet1;\n\ttry { PSet1 = parse_PropertySet(blob, null); } catch(e) { }\n\tfor(y in PSet1) rval[y] = PSet1[y];\n\trval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1\n\treturn rval;\n}\n\n\nfunction parsenoop2(blob, length) { blob.read_shift(length); return null; }\n\nfunction parslurp(blob, length, cb) {\n\tvar arr = [], target = blob.l + length;\n\twhile(blob.l < target) arr.push(cb(blob, target - blob.l));\n\tif(target !== blob.l) throw new Error(\"Slurp error\");\n\treturn arr;\n}\n\nfunction parslurp2(blob, length, cb) {\n\tvar arr = [], target = blob.l + length, len = blob.read_shift(2);\n\twhile(len-- !== 0) arr.push(cb(blob, target - blob.l));\n\tif(target !== blob.l) throw new Error(\"Slurp error\");\n\treturn arr;\n}\n\nfunction parsebool(blob, length) { return blob.read_shift(length) === 0x1; }\n\nfunction parseuint16(blob) { return blob.read_shift(2, 'u'); }\nfunction parseuint16a(blob, length) { return parslurp(blob,length,parseuint16);}\n\n/* --- 2.5 Structures --- */\n\n/* [MS-XLS] 2.5.14 Boolean */\nvar parse_Boolean = parsebool;\n\n/* [MS-XLS] 2.5.10 Bes (boolean or error) */\nfunction parse_Bes(blob) {\n\tvar v = blob.read_shift(1), t = blob.read_shift(1);\n\treturn t === 0x01 ? v : v === 0x01;\n}\n\n/* [MS-XLS] 2.5.240 ShortXLUnicodeString */\nfunction parse_ShortXLUnicodeString(blob, length, opts) {\n\tvar cch = blob.read_shift(1);\n\tvar width = 1, encoding = 'sbcs-cont';\n\tvar cp = current_codepage;\n\tif(opts && opts.biff >= 8) current_codepage = 1200;\n\tif(opts === undefined || opts.biff !== 5) {\n\t\tvar fHighByte = blob.read_shift(1);\n\t\tif(fHighByte) { width = 2; encoding = 'dbcs-cont'; }\n\t}\n\tvar o = cch ? blob.read_shift(cch, encoding) : \"\";\n\tcurrent_codepage = cp;\n\treturn o;\n}\n\n/* 2.5.293 XLUnicodeRichExtendedString */\nfunction parse_XLUnicodeRichExtendedString(blob) {\n\tvar cp = current_codepage;\n\tcurrent_codepage = 1200;\n\tvar cch = blob.read_shift(2), flags = blob.read_shift(1);\n\tvar fHighByte = flags & 0x1, fExtSt = flags & 0x4, fRichSt = flags & 0x8;\n\tvar width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs\n\tvar cRun, cbExtRst;\n\tvar z = {};\n\tif(fRichSt) cRun = blob.read_shift(2);\n\tif(fExtSt) cbExtRst = blob.read_shift(4);\n\tvar encoding = (flags & 0x1) ? 'dbcs-cont' : 'sbcs-cont';\n\tvar msg = cch === 0 ? \"\" : blob.read_shift(cch, encoding);\n\tif(fRichSt) blob.l += 4 * cRun; //TODO: parse this\n\tif(fExtSt) blob.l += cbExtRst; //TODO: parse this\n\tz.t = msg;\n\tif(!fRichSt) { z.raw = \"<t>\" + z.t + \"</t>\"; z.r = z.t; }\n\tcurrent_codepage = cp;\n\treturn z;\n}\n\n/* 2.5.296 XLUnicodeStringNoCch */\nfunction parse_XLUnicodeStringNoCch(blob, cch, opts) {\n\tvar retval;\n\tvar fHighByte = blob.read_shift(1);\n\tif(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }\n\telse { retval = blob.read_shift(cch, 'dbcs-cont'); }\n\treturn retval;\n}\n\n/* 2.5.294 XLUnicodeString */\nfunction parse_XLUnicodeString(blob, length, opts) {\n\tvar cch = blob.read_shift(opts !== undefined && opts.biff > 0 && opts.biff < 8 ? 1 : 2);\n\tif(cch === 0) { blob.l++; return \"\"; }\n\treturn parse_XLUnicodeStringNoCch(blob, cch, opts);\n}\n/* BIFF5 override */\nfunction parse_XLUnicodeString2(blob, length, opts) {\n\tif(opts.biff !== 5 && opts.biff !== 2) return parse_XLUnicodeString(blob, length, opts);\n\tvar cch = blob.read_shift(1);\n\tif(cch === 0) { blob.l++; return \"\"; }\n\treturn blob.read_shift(cch, 'sbcs-cont');\n}\n\n/* [MS-XLS] 2.5.61 ControlInfo */\nvar parse_ControlInfo = parsenoop;\n\n/* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */\nvar parse_URLMoniker = function(blob, length) {\n\tvar len = blob.read_shift(4), start = blob.l;\n\tvar extra = false;\n\tif(len > 24) {\n\t\t/* look ahead */\n\t\tblob.l += len - 24;\n\t\tif(blob.read_shift(16) === \"795881f43b1d7f48af2c825dc4852763\") extra = true;\n\t\tblob.l = start;\n\t}\n\tvar url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,\"\");\n\tif(extra) blob.l += 24;\n\treturn url;\n};\n\n/* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */\nvar parse_FileMoniker = function(blob, length) {\n\tvar cAnti = blob.read_shift(2);\n\tvar ansiLength = blob.read_shift(4);\n\tvar ansiPath = blob.read_shift(ansiLength, 'cstr');\n\tvar endServer = blob.read_shift(2);\n\tvar versionNumber = blob.read_shift(2);\n\tvar cbUnicodePathSize = blob.read_shift(4);\n\tif(cbUnicodePathSize === 0) return ansiPath.replace(/\\\\/g,\"/\");\n\tvar cbUnicodePathBytes = blob.read_shift(4);\n\tvar usKeyValue = blob.read_shift(2);\n\tvar unicodePath = blob.read_shift(cbUnicodePathBytes>>1, 'utf16le').replace(chr0,\"\");\n\treturn unicodePath;\n};\n\n/* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */\nvar parse_HyperlinkMoniker = function(blob, length) {\n\tvar clsid = blob.read_shift(16); length -= 16;\n\tswitch(clsid) {\n\t\tcase \"e0c9ea79f9bace118c8200aa004ba90b\": return parse_URLMoniker(blob, length);\n\t\tcase \"0303000000000000c000000000000046\": return parse_FileMoniker(blob, length);\n\t\tdefault: throw \"unsupported moniker \" + clsid;\n\t}\n};\n\n/* [MS-OSHARED] 2.3.7.9 HyperlinkString */\nvar parse_HyperlinkString = function(blob, length) {\n\tvar len = blob.read_shift(4);\n\tvar o = blob.read_shift(len, 'utf16le').replace(chr0, \"\");\n\treturn o;\n};\n\n/* [MS-OSHARED] 2.3.7.1 Hyperlink Object TODO: unify params with XLSX */\nvar parse_Hyperlink = function(blob, length) {\n\tvar end = blob.l + length;\n\tvar sVer = blob.read_shift(4);\n\tif(sVer !== 2) throw new Error(\"Unrecognized streamVersion: \" + sVer);\n\tvar flags = blob.read_shift(2);\n\tblob.l += 2;\n\tvar displayName, targetFrameName, moniker, oleMoniker, location, guid, fileTime;\n\tif(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);\n\tif(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);\n\tif((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);\n\tif((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);\n\tif(flags & 0x0008) location = parse_HyperlinkString(blob, end - blob.l);\n\tif(flags & 0x0020) guid = blob.read_shift(16);\n\tif(flags & 0x0040) fileTime = parse_FILETIME(blob, 8);\n\tblob.l = end;\n\tvar target = (targetFrameName||moniker||oleMoniker);\n\tif(location) target+=\"#\"+location;\n\treturn {Target: target};\n};\n\n/* 2.5.178 LongRGBA */\nfunction parse_LongRGBA(blob, length) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }\n\n/* 2.5.177 LongRGB */\nfunction parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob, length); x[3] = 0; return x; }\n\n\n/* --- MS-XLS --- */\n\n/* 2.5.19 */\nfunction parse_XLSCell(blob, length) {\n\tvar rw = blob.read_shift(2); // 0-indexed\n\tvar col = blob.read_shift(2);\n\tvar ixfe = blob.read_shift(2);\n\treturn {r:rw, c:col, ixfe:ixfe};\n}\n\n/* 2.5.134 */\nfunction parse_frtHeader(blob) {\n\tvar rt = blob.read_shift(2);\n\tvar flags = blob.read_shift(2); // TODO: parse these flags\n\tblob.l += 8;\n\treturn {type: rt, flags: flags};\n}\n\n\n\nfunction parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? \"\" : parse_XLUnicodeString2(blob, length, opts); }\n\n/* 2.5.158 */\nvar HIDEOBJENUM = ['SHOWALL', 'SHOWPLACEHOLDER', 'HIDEALL'];\nvar parse_HideObjEnum = parseuint16;\n\n/* 2.5.344 */\nfunction parse_XTI(blob, length) {\n\tvar iSupBook = blob.read_shift(2), itabFirst = blob.read_shift(2,'i'), itabLast = blob.read_shift(2,'i');\n\treturn [iSupBook, itabFirst, itabLast];\n}\n\n/* 2.5.218 */\nfunction parse_RkRec(blob, length) {\n\tvar ixfe = blob.read_shift(2);\n\tvar RK = parse_RkNumber(blob);\n\t//console.log(\"::\", ixfe, RK,\";;\");\n\treturn [ixfe, RK];\n}\n\n/* 2.5.1 */\nfunction parse_AddinUdf(blob, length) {\n\tblob.l += 4; length -= 4;\n\tvar l = blob.l + length;\n\tvar udfName = parse_ShortXLUnicodeString(blob, length);\n\tvar cb = blob.read_shift(2);\n\tl -= blob.l;\n\tif(cb !== l) throw \"Malformed AddinUdf: padding = \" + l + \" != \" + cb;\n\tblob.l += cb;\n\treturn udfName;\n}\n\n/* 2.5.209 TODO: Check sizes */\nfunction parse_Ref8U(blob, length) {\n\tvar rwFirst = blob.read_shift(2);\n\tvar rwLast = blob.read_shift(2);\n\tvar colFirst = blob.read_shift(2);\n\tvar colLast = blob.read_shift(2);\n\treturn {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};\n}\n\n/* 2.5.211 */\nfunction parse_RefU(blob, length) {\n\tvar rwFirst = blob.read_shift(2);\n\tvar rwLast = blob.read_shift(2);\n\tvar colFirst = blob.read_shift(1);\n\tvar colLast = blob.read_shift(1);\n\treturn {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};\n}\n\n/* 2.5.207 */\nvar parse_Ref = parse_RefU;\n\n/* 2.5.143 */\nfunction parse_FtCmo(blob, length) {\n\tblob.l += 4;\n\tvar ot = blob.read_shift(2);\n\tvar id = blob.read_shift(2);\n\tvar flags = blob.read_shift(2);\n\tblob.l+=12;\n\treturn [id, ot, flags];\n}\n\n/* 2.5.149 */\nfunction parse_FtNts(blob, length) {\n\tvar out = {};\n\tblob.l += 4;\n\tblob.l += 16; // GUID TODO\n\tout.fSharedNote = blob.read_shift(2);\n\tblob.l += 4;\n\treturn out;\n}\n\n/* 2.5.142 */\nfunction parse_FtCf(blob, length) {\n\tvar out = {};\n\tblob.l += 4;\n\tblob.cf = blob.read_shift(2);\n\treturn out;\n}\n\n/* 2.5.140 - 2.5.154 and friends */\nvar FtTab = {\n\t0x15: parse_FtCmo,\n\t0x13: parsenoop,                                /* FtLbsData */\n\t0x12: function(blob, length) { blob.l += 12; }, /* FtCblsData */\n\t0x11: function(blob, length) { blob.l += 8; },  /* FtRboData */\n\t0x10: parsenoop,                                /* FtEdoData */\n\t0x0F: parsenoop,                                /* FtGboData */\n\t0x0D: parse_FtNts,                              /* FtNts */\n\t0x0C: function(blob, length) { blob.l += 24; }, /* FtSbs */\n\t0x0B: function(blob, length) { blob.l += 10; }, /* FtRbo */\n\t0x0A: function(blob, length) { blob.l += 16; }, /* FtCbls */\n\t0x09: parsenoop,                                /* FtPictFmla */\n\t0x08: function(blob, length) { blob.l += 6; },  /* FtPioGrbit */\n\t0x07: parse_FtCf,                               /* FtCf */\n\t0x06: function(blob, length) { blob.l += 6; },  /* FtGmo */\n\t0x04: parsenoop,                                /* FtMacro */\n\t0x00: function(blob, length) { blob.l += 4; }   /* FtEnding */\n};\nfunction parse_FtArray(blob, length, ot) {\n\tvar s = blob.l;\n\tvar fts = [];\n\twhile(blob.l < s + length) {\n\t\tvar ft = blob.read_shift(2);\n\t\tblob.l-=2;\n\t\ttry {\n\t\t\tfts.push(FtTab[ft](blob, s + length - blob.l));\n\t\t} catch(e) { blob.l = s + length; return fts; }\n\t}\n\tif(blob.l != s + length) blob.l = s + length; //throw \"bad Object Ft-sequence\";\n\treturn fts;\n}\n\n/* 2.5.129 */\nvar parse_FontIndex = parseuint16;\n\n/* --- 2.4 Records --- */\n\n/* 2.4.21 */\nfunction parse_BOF(blob, length) {\n\tvar o = {};\n\to.BIFFVer = blob.read_shift(2); length -= 2;\n\tswitch(o.BIFFVer) {\n\t\tcase 0x0600: /* BIFF8 */\n\t\tcase 0x0500: /* BIFF5 */\n\t\tcase 0x0002: case 0x0007: /* BIFF2 */\n\t\t\tbreak;\n\t\tdefault: throw \"Unexpected BIFF Ver \" + o.BIFFVer;\n\t}\n\tblob.read_shift(length);\n\treturn o;\n}\n\n\n/* 2.4.146 */\nfunction parse_InterfaceHdr(blob, length) {\n\tif(length === 0) return 0x04b0;\n\tvar q;\n\tif((q=blob.read_shift(2))!==0x04b0) throw 'InterfaceHdr codePage ' + q;\n\treturn 0x04b0;\n}\n\n\n/* 2.4.349 */\nfunction parse_WriteAccess(blob, length, opts) {\n\tif(opts.enc) { blob.l += length; return \"\"; }\n\tvar l = blob.l;\n\t// TODO: make sure XLUnicodeString doesnt overrun\n\tvar UserName = parse_XLUnicodeString(blob, 0, opts);\n\tblob.read_shift(length + l - blob.l);\n\treturn UserName;\n}\n\n/* 2.4.28 */\nfunction parse_BoundSheet8(blob, length, opts) {\n\tvar pos = blob.read_shift(4);\n\tvar hidden = blob.read_shift(1) >> 6;\n\tvar dt = blob.read_shift(1);\n\tswitch(dt) {\n\t\tcase 0: dt = 'Worksheet'; break;\n\t\tcase 1: dt = 'Macrosheet'; break;\n\t\tcase 2: dt = 'Chartsheet'; break;\n\t\tcase 6: dt = 'VBAModule'; break;\n\t}\n\tvar name = parse_ShortXLUnicodeString(blob, 0, opts);\n\tif(name.length === 0) name = \"Sheet1\";\n\treturn { pos:pos, hs:hidden, dt:dt, name:name };\n}\n\n/* 2.4.265 TODO */\nfunction parse_SST(blob, length) {\n\tvar cnt = blob.read_shift(4);\n\tvar ucnt = blob.read_shift(4);\n\tvar strs = [];\n\tfor(var i = 0; i != ucnt; ++i) {\n\t\tstrs.push(parse_XLUnicodeRichExtendedString(blob));\n\t}\n\tstrs.Count = cnt; strs.Unique = ucnt;\n\treturn strs;\n}\n\n/* 2.4.107 */\nfunction parse_ExtSST(blob, length) {\n\tvar extsst = {};\n\textsst.dsst = blob.read_shift(2);\n\tblob.l += length-2;\n\treturn extsst;\n}\n\n\n/* 2.4.221 TODO*/\nfunction parse_Row(blob, length) {\n\tvar rw = blob.read_shift(2), col = blob.read_shift(2), Col = blob.read_shift(2), rht = blob.read_shift(2);\n\tblob.read_shift(4); // reserved(2), unused(2)\n\tvar flags = blob.read_shift(1); // various flags\n\tblob.read_shift(1); // reserved\n\tblob.read_shift(2); //ixfe, other flags\n\treturn {r:rw, c:col, cnt:Col-col};\n}\n\n\n/* 2.4.125 */\nfunction parse_ForceFullCalculation(blob, length) {\n\tvar header = parse_frtHeader(blob);\n\tif(header.type != 0x08A3) throw \"Invalid Future Record \" + header.type;\n\tvar fullcalc = blob.read_shift(4);\n\treturn fullcalc !== 0x0;\n}\n\n\nvar parse_CompressPictures = parsenoop2; /* 2.4.55 Not interesting */\n\n\n\n/* 2.4.215 rt */\nfunction parse_RecalcId(blob, length) {\n\tblob.read_shift(2);\n\treturn blob.read_shift(4);\n}\n\n/* 2.4.87 */\nfunction parse_DefaultRowHeight (blob, length) {\n\tvar f = blob.read_shift(2), miyRw;\n\tmiyRw = blob.read_shift(2); // flags & 0x02 -> hidden, else empty\n\tvar fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};\n\treturn [fl, miyRw];\n}\n\n/* 2.4.345 TODO */\nfunction parse_Window1(blob, length) {\n\tvar xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);\n\tvar flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);\n\tvar ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);\n\treturn { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,\n\t\tFirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };\n}\n\n/* 2.4.122 TODO */\nfunction parse_Font(blob, length, opts) {\n\tblob.l += 14;\n\tvar name = parse_ShortXLUnicodeString(blob, 0, opts);\n\treturn name;\n}\n\n/* 2.4.149 */\nfunction parse_LabelSst(blob, length) {\n\tvar cell = parse_XLSCell(blob);\n\tcell.isst = blob.read_shift(4);\n\treturn cell;\n}\n\n/* 2.4.148 */\nfunction parse_Label(blob, length, opts) {\n\tvar cell = parse_XLSCell(blob, 6);\n\tvar str = parse_XLUnicodeString(blob, length-6, opts);\n\tcell.val = str;\n\treturn cell;\n}\n\n/* 2.4.126 Number Formats */\nfunction parse_Format(blob, length, opts) {\n\tvar ifmt = blob.read_shift(2);\n\tvar fmtstr = parse_XLUnicodeString2(blob, 0, opts);\n\treturn [ifmt, fmtstr];\n}\n\n/* 2.4.90 */\nfunction parse_Dimensions(blob, length) {\n\tvar w = length === 10 ? 2 : 4;\n\tvar r = blob.read_shift(w), R = blob.read_shift(w),\n\t    c = blob.read_shift(2), C = blob.read_shift(2);\n\tblob.l += 2;\n\treturn {s: {r:r, c:c}, e: {r:R, c:C}};\n}\n\n/* 2.4.220 */\nfunction parse_RK(blob, length) {\n\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\tvar rkrec = parse_RkRec(blob);\n\treturn {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};\n}\n\n/* 2.4.175 */\nfunction parse_MulRk(blob, length) {\n\tvar target = blob.l + length - 2;\n\tvar rw = blob.read_shift(2), col = blob.read_shift(2);\n\tvar rkrecs = [];\n\twhile(blob.l < target) rkrecs.push(parse_RkRec(blob));\n\tif(blob.l !== target) throw \"MulRK read error\";\n\tvar lastcol = blob.read_shift(2);\n\tif(rkrecs.length != lastcol - col + 1) throw \"MulRK length mismatch\";\n\treturn {r:rw, c:col, C:lastcol, rkrec:rkrecs};\n}\n\n/* 2.5.20 2.5.249 TODO */\nfunction parse_CellStyleXF(blob, length, style) {\n\tvar o = {};\n\tvar a = blob.read_shift(4), b = blob.read_shift(4);\n\tvar c = blob.read_shift(4), d = blob.read_shift(2);\n\to.patternType = XLSFillPattern[c >> 26];\n\to.icvFore = d & 0x7F;\n\to.icvBack = (d >> 7) & 0x7F;\n\treturn o;\n}\nfunction parse_CellXF(blob, length) {return parse_CellStyleXF(blob,length,0);}\nfunction parse_StyleXF(blob, length) {return parse_CellStyleXF(blob,length,1);}\n\n/* 2.4.353 TODO: actually do this right */\nfunction parse_XF(blob, length) {\n\tvar o = {};\n\to.ifnt = blob.read_shift(2); o.ifmt = blob.read_shift(2); o.flags = blob.read_shift(2);\n\to.fStyle = (o.flags >> 2) & 0x01;\n\tlength -= 6;\n\to.data = parse_CellStyleXF(blob, length, o.fStyle);\n\treturn o;\n}\n\n/* 2.4.134 */\nfunction parse_Guts(blob, length) {\n\tblob.l += 4;\n\tvar out = [blob.read_shift(2), blob.read_shift(2)];\n\tif(out[0] !== 0) out[0]--;\n\tif(out[1] !== 0) out[1]--;\n\tif(out[0] > 7 || out[1] > 7) throw \"Bad Gutters: \" + out;\n\treturn out;\n}\n\n/* 2.4.24 */\nfunction parse_BoolErr(blob, length) {\n\tvar cell = parse_XLSCell(blob, 6);\n\tvar val = parse_Bes(blob, 2);\n\tcell.val = val;\n\tcell.t = (val === true || val === false) ? 'b' : 'e';\n\treturn cell;\n}\n\n/* 2.4.180 Number */\nfunction parse_Number(blob, length) {\n\tvar cell = parse_XLSCell(blob, 6);\n\tvar xnum = parse_Xnum(blob, 8);\n\tcell.val = xnum;\n\treturn cell;\n}\n\nvar parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136\n\n/* 2.4.271 */\nfunction parse_SupBook(blob, length, opts) {\n\tvar end = blob.l + length;\n\tvar ctab = blob.read_shift(2);\n\tvar cch = blob.read_shift(2);\n\tvar virtPath;\n\tif(cch >=0x01 && cch <=0xff) virtPath = parse_XLUnicodeStringNoCch(blob, cch);\n\tvar rgst = blob.read_shift(end - blob.l);\n\topts.sbcch = cch;\n\treturn [cch, ctab, virtPath, rgst];\n}\n\n/* 2.4.105 TODO */\nfunction parse_ExternName(blob, length, opts) {\n\tvar flags = blob.read_shift(2);\n\tvar body;\n\tvar o = {\n\t\tfBuiltIn: flags & 0x01,\n\t\tfWantAdvise: (flags >>> 1) & 0x01,\n\t\tfWantPict: (flags >>> 2) & 0x01,\n\t\tfOle: (flags >>> 3) & 0x01,\n\t\tfOleLink: (flags >>> 4) & 0x01,\n\t\tcf: (flags >>> 5) & 0x3FF,\n\t\tfIcon: flags >>> 15 & 0x01\n\t};\n\tif(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2);\n\t//else throw new Error(\"unsupported SupBook cch: \" + opts.sbcch);\n\to.body = body || blob.read_shift(length-2);\n\treturn o;\n}\n\n/* 2.4.150 TODO */\nfunction parse_Lbl(blob, length, opts) {\n\tif(opts.biff < 8) return parse_Label(blob, length, opts);\n\tvar target = blob.l + length;\n\tvar flags = blob.read_shift(2);\n\tvar chKey = blob.read_shift(1);\n\tvar cch = blob.read_shift(1);\n\tvar cce = blob.read_shift(2);\n\tblob.l += 2;\n\tvar itab = blob.read_shift(2);\n\tblob.l += 4;\n\tvar name = parse_XLUnicodeStringNoCch(blob, cch, opts);\n\tvar rgce = parse_NameParsedFormula(blob, target - blob.l, opts, cce);\n\treturn {\n\t\tchKey: chKey,\n\t\tName: name,\n\t\trgce: rgce\n\t};\n}\n\n/* 2.4.106 TODO: verify supbook manipulation */\nfunction parse_ExternSheet(blob, length, opts) {\n\tif(opts.biff < 8) return parse_ShortXLUnicodeString(blob, length, opts);\n\tvar o = parslurp2(blob,length,parse_XTI);\n\tvar oo = [];\n\tif(opts.sbcch === 0x0401) {\n\t\tfor(var i = 0; i != o.length; ++i) oo.push(opts.snames[o[i][1]]);\n\t\treturn oo;\n\t}\n\telse return o;\n}\n\n/* 2.4.260 */\nfunction parse_ShrFmla(blob, length, opts) {\n\tvar ref = parse_RefU(blob, 6);\n\tblob.l++;\n\tvar cUse = blob.read_shift(1);\n\tlength -= 8;\n\treturn [parse_SharedParsedFormula(blob, length, opts), cUse];\n}\n\n/* 2.4.4 TODO */\nfunction parse_Array(blob, length, opts) {\n\tvar ref = parse_Ref(blob, 6);\n\tblob.l += 6; length -= 12; /* TODO: fAlwaysCalc */\n\treturn [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];\n}\n\n/* 2.4.173 */\nfunction parse_MTRSettings(blob, length) {\n\tvar fMTREnabled = blob.read_shift(4) !== 0x00;\n\tvar fUserSetThreadCount = blob.read_shift(4) !== 0x00;\n\tvar cUserThreadCount = blob.read_shift(4);\n\treturn [fMTREnabled, fUserSetThreadCount, cUserThreadCount];\n}\n\n/* 2.5.186 TODO: BIFF5 */\nfunction parse_NoteSh(blob, length, opts) {\n\tif(opts.biff < 8) return;\n\tvar row = blob.read_shift(2), col = blob.read_shift(2);\n\tvar flags = blob.read_shift(2), idObj = blob.read_shift(2);\n\tvar stAuthor = parse_XLUnicodeString2(blob, 0, opts);\n\tif(opts.biff < 8) blob.read_shift(1);\n\treturn [{r:row,c:col}, stAuthor, idObj, flags];\n}\n\n/* 2.4.179 */\nfunction parse_Note(blob, length, opts) {\n\t/* TODO: Support revisions */\n\treturn parse_NoteSh(blob, length, opts);\n}\n\n/* 2.4.168 */\nfunction parse_MergeCells(blob, length) {\n\tvar merges = [];\n\tvar cmcs = blob.read_shift(2);\n\twhile (cmcs--) merges.push(parse_Ref8U(blob,length));\n\treturn merges;\n}\n\n/* 2.4.181 TODO: parse all the things! */\nfunction parse_Obj(blob, length) {\n\tvar cmo = parse_FtCmo(blob, 22); // id, ot, flags\n\tvar fts = parse_FtArray(blob, length-22, cmo[1]);\n\treturn { cmo: cmo, ft:fts };\n}\n\n/* 2.4.329 TODO: parse properly */\nfunction parse_TxO(blob, length, opts) {\n\tvar s = blob.l;\ntry {\n\tblob.l += 4;\n\tvar ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];\n\tvar controlInfo;\n\tif([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;\n\telse controlInfo = parse_ControlInfo(blob, 6, opts);\n\tvar cchText = blob.read_shift(2);\n\tvar cbRuns = blob.read_shift(2);\n\tvar ifntEmpty = parse_FontIndex(blob, 2);\n\tvar len = blob.read_shift(2);\n\tblob.l += len;\n\t//var fmla = parse_ObjFmla(blob, s + length - blob.l);\n\n\tvar texts = \"\";\n\tfor(var i = 1; i < blob.lens.length-1; ++i) {\n\t\tif(blob.l-s != blob.lens[i]) throw \"TxO: bad continue record\";\n\t\tvar hdr = blob[blob.l];\n\t\tvar t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);\n\t\ttexts += t;\n\t\tif(texts.length >= (hdr ? cchText : 2*cchText)) break;\n\t}\n\tif(texts.length !== cchText && texts.length !== cchText*2) {\n\t\tthrow \"cchText: \" + cchText + \" != \" + texts.length;\n\t}\n\n\tblob.l = s + length;\n\t/* 2.5.272 TxORuns */\n//\tvar rgTxoRuns = [];\n//\tfor(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;\n//\tvar cchText2 = blob.read_shift(2);\n//\tif(cchText2 !== cchText) throw \"TxOLastRun mismatch: \" + cchText2 + \" \" + cchText;\n//\tblob.l += 6;\n//\tif(s + length != blob.l) throw \"TxO \" + (s + length) + \", at \" + blob.l;\n\treturn { t: texts };\n} catch(e) { blob.l = s + length; return { t: texts||\"\" }; }\n}\n\n/* 2.4.140 */\nvar parse_HLink = function(blob, length) {\n\tvar ref = parse_Ref8U(blob, 8);\n\tblob.l += 16; /* CLSID */\n\tvar hlink = parse_Hyperlink(blob, length-24);\n\treturn [ref, hlink];\n};\n\n/* 2.4.141 */\nvar parse_HLinkTooltip = function(blob, length) {\n\tvar end = blob.l + length;\n\tblob.read_shift(2);\n\tvar ref = parse_Ref8U(blob, 8);\n\tvar wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');\n\twzTooltip = wzTooltip.replace(chr0,\"\");\n\treturn [ref, wzTooltip];\n};\n\n/* 2.4.63 */\nfunction parse_Country(blob, length) {\n\tvar o = [], d;\n\td = blob.read_shift(2); o[0] = CountryEnum[d] || d;\n\td = blob.read_shift(2); o[1] = CountryEnum[d] || d;\n\treturn o;\n}\n\n/* 2.4.50 ClrtClient */\nfunction parse_ClrtClient(blob, length) {\n\tvar ccv = blob.read_shift(2);\n\tvar o = [];\n\twhile(ccv-->0) o.push(parse_LongRGB(blob, 8));\n\treturn o;\n}\n\n/* 2.4.188 */\nfunction parse_Palette(blob, length) {\n\tvar ccv = blob.read_shift(2);\n\tvar o = [];\n\twhile(ccv-->0) o.push(parse_LongRGB(blob, 8));\n\treturn o;\n}\n\n/* 2.4.354 */\nfunction parse_XFCRC(blob, length) {\n\tblob.l += 2;\n\tvar o = {cxfs:0, crc:0};\n\to.cxfs = blob.read_shift(2);\n\to.crc = blob.read_shift(4);\n\treturn o;\n}\n\n\nvar parse_Style = parsenoop;\nvar parse_StyleExt = parsenoop;\n\nvar parse_ColInfo = parsenoop;\n\nvar parse_Window2 = parsenoop;\n\n\nvar parse_Backup = parsebool; /* 2.4.14 */\nvar parse_Blank = parse_XLSCell; /* 2.4.20 Just the cell */\nvar parse_BottomMargin = parse_Xnum; /* 2.4.27 */\nvar parse_BuiltInFnGroupCount = parseuint16; /* 2.4.30 0x0E or 0x10 but excel 2011 generates 0x11? */\nvar parse_CalcCount = parseuint16; /* 2.4.31 #Iterations */\nvar parse_CalcDelta = parse_Xnum; /* 2.4.32 */\nvar parse_CalcIter = parsebool;  /* 2.4.33 1=iterative calc */\nvar parse_CalcMode = parseuint16; /* 2.4.34 0=manual, 1=auto (def), 2=table */\nvar parse_CalcPrecision = parsebool; /* 2.4.35 */\nvar parse_CalcRefMode = parsenoop2; /* 2.4.36 */\nvar parse_CalcSaveRecalc = parsebool; /* 2.4.37 */\nvar parse_CodePage = parseuint16; /* 2.4.52 */\nvar parse_Compat12 = parsebool; /* 2.4.54 true = no compatibility check */\nvar parse_Date1904 = parsebool; /* 2.4.77 - 1=1904,0=1900 */\nvar parse_DefColWidth = parseuint16; /* 2.4.89 */\nvar parse_DSF = parsenoop2; /* 2.4.94 -- MUST be ignored */\nvar parse_EntExU2 = parsenoop2; /* 2.4.102 -- Explicitly says to ignore */\nvar parse_EOF = parsenoop2; /* 2.4.103 */\nvar parse_Excel9File = parsenoop2; /* 2.4.104 -- Optional and unused */\nvar parse_FeatHdr = parsenoop2; /* 2.4.112 */\nvar parse_FontX = parseuint16; /* 2.4.123 */\nvar parse_Footer = parse_XLHeaderFooter; /* 2.4.124 */\nvar parse_GridSet = parseuint16; /* 2.4.132, =1 */\nvar parse_HCenter = parsebool; /* 2.4.135 sheet centered horizontal on print */\nvar parse_Header = parse_XLHeaderFooter; /* 2.4.136 */\nvar parse_HideObj = parse_HideObjEnum; /* 2.4.139 */\nvar parse_InterfaceEnd = parsenoop2; /* 2.4.145 -- noop */\nvar parse_LeftMargin = parse_Xnum; /* 2.4.151 */\nvar parse_Mms = parsenoop2; /* 2.4.169 -- Explicitly says to ignore */\nvar parse_ObjProtect = parsebool; /* 2.4.183 -- must be 1 if present */\nvar parse_Password = parseuint16; /* 2.4.191 */\nvar parse_PrintGrid = parsebool; /* 2.4.202 */\nvar parse_PrintRowCol = parsebool; /* 2.4.203 */\nvar parse_PrintSize = parseuint16; /* 2.4.204 0:3 */\nvar parse_Prot4Rev = parsebool; /* 2.4.205 */\nvar parse_Prot4RevPass = parseuint16; /* 2.4.206 */\nvar parse_Protect = parsebool; /* 2.4.207 */\nvar parse_RefreshAll = parsebool; /* 2.4.217 -- must be 0 if not template */\nvar parse_RightMargin = parse_Xnum; /* 2.4.219 */\nvar parse_RRTabId = parseuint16a; /* 2.4.241 */\nvar parse_ScenarioProtect = parsebool; /* 2.4.245 */\nvar parse_Scl = parseuint16a; /* 2.4.247 num, den */\nvar parse_String = parse_XLUnicodeString; /* 2.4.268 */\nvar parse_SxBool = parsebool; /* 2.4.274 */\nvar parse_TopMargin = parse_Xnum; /* 2.4.328 */\nvar parse_UsesELFs = parsebool; /* 2.4.337 -- should be 0 */\nvar parse_VCenter = parsebool; /* 2.4.342 */\nvar parse_WinProtect = parsebool; /* 2.4.347 */\nvar parse_WriteProtect = parsenoop; /* 2.4.350 empty record */\n\n\n/* ---- */\nvar parse_VerticalPageBreaks = parsenoop;\nvar parse_HorizontalPageBreaks = parsenoop;\nvar parse_Selection = parsenoop;\nvar parse_Continue = parsenoop;\nvar parse_Pane = parsenoop;\nvar parse_Pls = parsenoop;\nvar parse_DCon = parsenoop;\nvar parse_DConRef = parsenoop;\nvar parse_DConName = parsenoop;\nvar parse_XCT = parsenoop;\nvar parse_CRN = parsenoop;\nvar parse_FileSharing = parsenoop;\nvar parse_Uncalced = parsenoop;\nvar parse_Template = parsenoop;\nvar parse_Intl = parsenoop;\nvar parse_WsBool = parsenoop;\nvar parse_Sort = parsenoop;\nvar parse_Sync = parsenoop;\nvar parse_LPr = parsenoop;\nvar parse_DxGCol = parsenoop;\nvar parse_FnGroupName = parsenoop;\nvar parse_FilterMode = parsenoop;\nvar parse_AutoFilterInfo = parsenoop;\nvar parse_AutoFilter = parsenoop;\nvar parse_Setup = parsenoop;\nvar parse_ScenMan = parsenoop;\nvar parse_SCENARIO = parsenoop;\nvar parse_SxView = parsenoop;\nvar parse_Sxvd = parsenoop;\nvar parse_SXVI = parsenoop;\nvar parse_SxIvd = parsenoop;\nvar parse_SXLI = parsenoop;\nvar parse_SXPI = parsenoop;\nvar parse_DocRoute = parsenoop;\nvar parse_RecipName = parsenoop;\nvar parse_MulBlank = parsenoop;\nvar parse_SXDI = parsenoop;\nvar parse_SXDB = parsenoop;\nvar parse_SXFDB = parsenoop;\nvar parse_SXDBB = parsenoop;\nvar parse_SXNum = parsenoop;\nvar parse_SxErr = parsenoop;\nvar parse_SXInt = parsenoop;\nvar parse_SXString = parsenoop;\nvar parse_SXDtr = parsenoop;\nvar parse_SxNil = parsenoop;\nvar parse_SXTbl = parsenoop;\nvar parse_SXTBRGIITM = parsenoop;\nvar parse_SxTbpg = parsenoop;\nvar parse_ObProj = parsenoop;\nvar parse_SXStreamID = parsenoop;\nvar parse_DBCell = parsenoop;\nvar parse_SXRng = parsenoop;\nvar parse_SxIsxoper = parsenoop;\nvar parse_BookBool = parsenoop;\nvar parse_DbOrParamQry = parsenoop;\nvar parse_OleObjectSize = parsenoop;\nvar parse_SXVS = parsenoop;\nvar parse_BkHim = parsenoop;\nvar parse_MsoDrawingGroup = parsenoop;\nvar parse_MsoDrawing = parsenoop;\nvar parse_MsoDrawingSelection = parsenoop;\nvar parse_PhoneticInfo = parsenoop;\nvar parse_SxRule = parsenoop;\nvar parse_SXEx = parsenoop;\nvar parse_SxFilt = parsenoop;\nvar parse_SxDXF = parsenoop;\nvar parse_SxItm = parsenoop;\nvar parse_SxName = parsenoop;\nvar parse_SxSelect = parsenoop;\nvar parse_SXPair = parsenoop;\nvar parse_SxFmla = parsenoop;\nvar parse_SxFormat = parsenoop;\nvar parse_SXVDEx = parsenoop;\nvar parse_SXFormula = parsenoop;\nvar parse_SXDBEx = parsenoop;\nvar parse_RRDInsDel = parsenoop;\nvar parse_RRDHead = parsenoop;\nvar parse_RRDChgCell = parsenoop;\nvar parse_RRDRenSheet = parsenoop;\nvar parse_RRSort = parsenoop;\nvar parse_RRDMove = parsenoop;\nvar parse_RRFormat = parsenoop;\nvar parse_RRAutoFmt = parsenoop;\nvar parse_RRInsertSh = parsenoop;\nvar parse_RRDMoveBegin = parsenoop;\nvar parse_RRDMoveEnd = parsenoop;\nvar parse_RRDInsDelBegin = parsenoop;\nvar parse_RRDInsDelEnd = parsenoop;\nvar parse_RRDConflict = parsenoop;\nvar parse_RRDDefName = parsenoop;\nvar parse_RRDRstEtxp = parsenoop;\nvar parse_LRng = parsenoop;\nvar parse_CUsr = parsenoop;\nvar parse_CbUsr = parsenoop;\nvar parse_UsrInfo = parsenoop;\nvar parse_UsrExcl = parsenoop;\nvar parse_FileLock = parsenoop;\nvar parse_RRDInfo = parsenoop;\nvar parse_BCUsrs = parsenoop;\nvar parse_UsrChk = parsenoop;\nvar parse_UserBView = parsenoop;\nvar parse_UserSViewBegin = parsenoop; // overloaded\nvar parse_UserSViewEnd = parsenoop;\nvar parse_RRDUserView = parsenoop;\nvar parse_Qsi = parsenoop;\nvar parse_CondFmt = parsenoop;\nvar parse_CF = parsenoop;\nvar parse_DVal = parsenoop;\nvar parse_DConBin = parsenoop;\nvar parse_Lel = parsenoop;\nvar parse_XLSCodeName = parse_XLUnicodeString;\nvar parse_SXFDBType = parsenoop;\nvar parse_ObNoMacros = parsenoop;\nvar parse_Dv = parsenoop;\nvar parse_Index = parsenoop;\nvar parse_Table = parsenoop;\nvar parse_BigName = parsenoop;\nvar parse_ContinueBigName = parsenoop;\nvar parse_WebPub = parsenoop;\nvar parse_QsiSXTag = parsenoop;\nvar parse_DBQueryExt = parsenoop;\nvar parse_ExtString = parsenoop;\nvar parse_TxtQry = parsenoop;\nvar parse_Qsir = parsenoop;\nvar parse_Qsif = parsenoop;\nvar parse_RRDTQSIF = parsenoop;\nvar parse_OleDbConn = parsenoop;\nvar parse_WOpt = parsenoop;\nvar parse_SXViewEx = parsenoop;\nvar parse_SXTH = parsenoop;\nvar parse_SXPIEx = parsenoop;\nvar parse_SXVDTEx = parsenoop;\nvar parse_SXViewEx9 = parsenoop;\nvar parse_ContinueFrt = parsenoop;\nvar parse_RealTimeData = parsenoop;\nvar parse_ChartFrtInfo = parsenoop;\nvar parse_FrtWrapper = parsenoop;\nvar parse_StartBlock = parsenoop;\nvar parse_EndBlock = parsenoop;\nvar parse_StartObject = parsenoop;\nvar parse_EndObject = parsenoop;\nvar parse_CatLab = parsenoop;\nvar parse_YMult = parsenoop;\nvar parse_SXViewLink = parsenoop;\nvar parse_PivotChartBits = parsenoop;\nvar parse_FrtFontList = parsenoop;\nvar parse_SheetExt = parsenoop;\nvar parse_BookExt = parsenoop;\nvar parse_SXAddl = parsenoop;\nvar parse_CrErr = parsenoop;\nvar parse_HFPicture = parsenoop;\nvar parse_Feat = parsenoop;\nvar parse_DataLabExt = parsenoop;\nvar parse_DataLabExtContents = parsenoop;\nvar parse_CellWatch = parsenoop;\nvar parse_FeatHdr11 = parsenoop;\nvar parse_Feature11 = parsenoop;\nvar parse_DropDownObjIds = parsenoop;\nvar parse_ContinueFrt11 = parsenoop;\nvar parse_DConn = parsenoop;\nvar parse_List12 = parsenoop;\nvar parse_Feature12 = parsenoop;\nvar parse_CondFmt12 = parsenoop;\nvar parse_CF12 = parsenoop;\nvar parse_CFEx = parsenoop;\nvar parse_AutoFilter12 = parsenoop;\nvar parse_ContinueFrt12 = parsenoop;\nvar parse_MDTInfo = parsenoop;\nvar parse_MDXStr = parsenoop;\nvar parse_MDXTuple = parsenoop;\nvar parse_MDXSet = parsenoop;\nvar parse_MDXProp = parsenoop;\nvar parse_MDXKPI = parsenoop;\nvar parse_MDB = parsenoop;\nvar parse_PLV = parsenoop;\nvar parse_DXF = parsenoop;\nvar parse_TableStyles = parsenoop;\nvar parse_TableStyle = parsenoop;\nvar parse_TableStyleElement = parsenoop;\nvar parse_NamePublish = parsenoop;\nvar parse_NameCmt = parsenoop;\nvar parse_SortData = parsenoop;\nvar parse_GUIDTypeLib = parsenoop;\nvar parse_FnGrp12 = parsenoop;\nvar parse_NameFnGrp12 = parsenoop;\nvar parse_HeaderFooter = parsenoop;\nvar parse_CrtLayout12 = parsenoop;\nvar parse_CrtMlFrt = parsenoop;\nvar parse_CrtMlFrtContinue = parsenoop;\nvar parse_ShapePropsStream = parsenoop;\nvar parse_TextPropsStream = parsenoop;\nvar parse_RichTextStream = parsenoop;\nvar parse_CrtLayout12A = parsenoop;\nvar parse_Units = parsenoop;\nvar parse_Chart = parsenoop;\nvar parse_Series = parsenoop;\nvar parse_DataFormat = parsenoop;\nvar parse_LineFormat = parsenoop;\nvar parse_MarkerFormat = parsenoop;\nvar parse_AreaFormat = parsenoop;\nvar parse_PieFormat = parsenoop;\nvar parse_AttachedLabel = parsenoop;\nvar parse_SeriesText = parsenoop;\nvar parse_ChartFormat = parsenoop;\nvar parse_Legend = parsenoop;\nvar parse_SeriesList = parsenoop;\nvar parse_Bar = parsenoop;\nvar parse_Line = parsenoop;\nvar parse_Pie = parsenoop;\nvar parse_Area = parsenoop;\nvar parse_Scatter = parsenoop;\nvar parse_CrtLine = parsenoop;\nvar parse_Axis = parsenoop;\nvar parse_Tick = parsenoop;\nvar parse_ValueRange = parsenoop;\nvar parse_CatSerRange = parsenoop;\nvar parse_AxisLine = parsenoop;\nvar parse_CrtLink = parsenoop;\nvar parse_DefaultText = parsenoop;\nvar parse_Text = parsenoop;\nvar parse_ObjectLink = parsenoop;\nvar parse_Frame = parsenoop;\nvar parse_Begin = parsenoop;\nvar parse_End = parsenoop;\nvar parse_PlotArea = parsenoop;\nvar parse_Chart3d = parsenoop;\nvar parse_PicF = parsenoop;\nvar parse_DropBar = parsenoop;\nvar parse_Radar = parsenoop;\nvar parse_Surf = parsenoop;\nvar parse_RadarArea = parsenoop;\nvar parse_AxisParent = parsenoop;\nvar parse_LegendException = parsenoop;\nvar parse_ShtProps = parsenoop;\nvar parse_SerToCrt = parsenoop;\nvar parse_AxesUsed = parsenoop;\nvar parse_SBaseRef = parsenoop;\nvar parse_SerParent = parsenoop;\nvar parse_SerAuxTrend = parsenoop;\nvar parse_IFmtRecord = parsenoop;\nvar parse_Pos = parsenoop;\nvar parse_AlRuns = parsenoop;\nvar parse_BRAI = parsenoop;\nvar parse_SerAuxErrBar = parsenoop;\nvar parse_SerFmt = parsenoop;\nvar parse_Chart3DBarShape = parsenoop;\nvar parse_Fbi = parsenoop;\nvar parse_BopPop = parsenoop;\nvar parse_AxcExt = parsenoop;\nvar parse_Dat = parsenoop;\nvar parse_PlotGrowth = parsenoop;\nvar parse_SIIndex = parsenoop;\nvar parse_GelFrame = parsenoop;\nvar parse_BopPopCustom = parsenoop;\nvar parse_Fbi2 = parsenoop;\n\n/* --- Specific to versions before BIFF8 --- */\nfunction parse_BIFF5String(blob) {\n\tvar len = blob.read_shift(1);\n\treturn blob.read_shift(len, 'sbcs-cont');\n}\n\n/* BIFF2_??? where ??? is the name from [XLS] */\nfunction parse_BIFF2STR(blob, length, opts) {\n\tvar cell = parse_XLSCell(blob, 6);\n\t++blob.l;\n\tvar str = parse_XLUnicodeString2(blob, length-7, opts);\n\tcell.val = str;\n\treturn cell;\n}\n\nfunction parse_BIFF2NUM(blob, length, opts) {\n\tvar cell = parse_XLSCell(blob, 6);\n\t++blob.l;\n\tvar num = parse_Xnum(blob, 8);\n\tcell.val = num;\n\treturn cell;\n}\n\n/* 18.4.1 charset to codepage mapping */\nvar CS2CP = {\n\t0:    1252, /* ANSI */\n\t1:   65001, /* DEFAULT */\n\t2:   65001, /* SYMBOL */\n\t77:  10000, /* MAC */\n\t128:   932, /* SHIFTJIS */\n\t129:   949, /* HANGUL */\n\t130:  1361, /* JOHAB */\n\t134:   936, /* GB2312 */\n\t136:   950, /* CHINESEBIG5 */\n\t161:  1253, /* GREEK */\n\t162:  1254, /* TURKISH */\n\t163:  1258, /* VIETNAMESE */\n\t177:  1255, /* HEBREW */\n\t178:  1256, /* ARABIC */\n\t186:  1257, /* BALTIC */\n\t204:  1251, /* RUSSIAN */\n\t222:   874, /* THAI */\n\t238:  1250, /* EASTEUROPE */\n\t255:  1252, /* OEM */\n\t69:   6969  /* MISC */\n};\n\n/* Parse a list of <r> tags */\nvar parse_rs = (function parse_rs_factory() {\n\tvar tregex = matchtag(\"t\"), rpregex = matchtag(\"rPr\"), rregex = /<r>/g, rend = /<\\/r>/, nlregex = /\\r\\n/g;\n\t/* 18.4.7 rPr CT_RPrElt */\n\tvar parse_rpr = function parse_rpr(rpr, intro, outro) {\n\t\tvar font = {}, cp = 65001;\n\t\tvar m = rpr.match(tagregex), i = 0;\n\t\tif(m) for(;i!=m.length; ++i) {\n\t\t\tvar y = parsexmltag(m[i]);\n\t\t\tswitch(y[0]) {\n\t\t\t\t/* 18.8.12 condense CT_BooleanProperty */\n\t\t\t\t/* ** not required . */\n\t\t\t\tcase '<condense': break;\n\t\t\t\t/* 18.8.17 extend CT_BooleanProperty */\n\t\t\t\t/* ** not required . */\n\t\t\t\tcase '<extend': break;\n\t\t\t\t/* 18.8.36 shadow CT_BooleanProperty */\n\t\t\t\t/* ** not required . */\n\t\t\t\tcase '<shadow':\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '<shadow/>': break;\n\n\t\t\t\t/* 18.4.1 charset CT_IntProperty TODO */\n\t\t\t\tcase '<charset':\n\t\t\t\t\tif(y.val == '1') break;\n\t\t\t\t\tcp = CS2CP[parseInt(y.val, 10)];\n\t\t\t\t\tbreak;\n\n\t\t\t\t/* 18.4.2 outline CT_BooleanProperty TODO */\n\t\t\t\tcase '<outline':\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '<outline/>': break;\n\n\t\t\t\t/* 18.4.5 rFont CT_FontName */\n\t\t\t\tcase '<rFont': font.name = y.val; break;\n\n\t\t\t\t/* 18.4.11 sz CT_FontSize */\n\t\t\t\tcase '<sz': font.sz = y.val; break;\n\n\t\t\t\t/* 18.4.10 strike CT_BooleanProperty */\n\t\t\t\tcase '<strike':\n\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '<strike/>': font.strike = 1; break;\n\t\t\t\tcase '</strike>': break;\n\n\t\t\t\t/* 18.4.13 u CT_UnderlineProperty */\n\t\t\t\tcase '<u':\n\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '<u/>': font.u = 1; break;\n\t\t\t\tcase '</u>': break;\n\n\t\t\t\t/* 18.8.2 b */\n\t\t\t\tcase '<b':\n\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '<b/>': font.b = 1; break;\n\t\t\t\tcase '</b>': break;\n\n\t\t\t\t/* 18.8.26 i */\n\t\t\t\tcase '<i':\n\t\t\t\t\tif(!y.val) break;\n\t\t\t\t\t/* falls through */\n\t\t\t\tcase '<i/>': font.i = 1; break;\n\t\t\t\tcase '</i>': break;\n\n\t\t\t\t/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */\n\t\t\t\tcase '<color':\n\t\t\t\t\tif(y.rgb) font.color = y.rgb.substr(2,6);\n\t\t\t\t\tbreak;\n\n\t\t\t\t/* 18.8.18 family ST_FontFamily */\n\t\t\t\tcase '<family': font.family = y.val; break;\n\n\t\t\t\t/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */\n\t\t\t\tcase '<vertAlign': break;\n\n\t\t\t\t/* 18.8.35 scheme CT_FontScheme TODO */\n\t\t\t\tcase '<scheme': break;\n\n\t\t\t\tdefault:\n\t\t\t\t\tif(y[0].charCodeAt(1) !== 47) throw 'Unrecognized rich format ' + y[0];\n\t\t\t}\n\t\t}\n\t\t/* TODO: These should be generated styles, not inline */\n\t\tvar style = [];\n\t\tif(font.b) style.push(\"font-weight: bold;\");\n\t\tif(font.i) style.push(\"font-style: italic;\");\n\t\tintro.push('<span style=\"' + style.join(\"\") + '\">');\n\t\toutro.push(\"</span>\");\n\t\treturn cp;\n\t};\n\n\t/* 18.4.4 r CT_RElt */\n\tfunction parse_r(r) {\n\t\tvar terms = [[],\"\",[]];\n\t\t/* 18.4.12 t ST_Xstring */\n\t\tvar t = r.match(tregex), cp = 65001;\n\t\tif(!isval(t)) return \"\";\n\t\tterms[1] = t[1];\n\n\t\tvar rpr = r.match(rpregex);\n\t\tif(isval(rpr)) cp = parse_rpr(rpr[1], terms[0], terms[2]);\n\n\t\treturn terms[0].join(\"\") + terms[1].replace(nlregex,'<br/>') + terms[2].join(\"\");\n\t}\n\treturn function parse_rs(rs) {\n\t\treturn rs.replace(rregex,\"\").split(rend).map(parse_r).join(\"\");\n\t};\n})();\n\n/* 18.4.8 si CT_Rst */\nvar sitregex = /<t[^>]*>([^<]*)<\\/t>/g, sirregex = /<r>/;\nfunction parse_si(x, opts) {\n\tvar html = opts ? opts.cellHTML : true;\n\tvar z = {};\n\tif(!x) return null;\n\tvar y;\n\t/* 18.4.12 t ST_Xstring (Plaintext String) */\n\tif(x.charCodeAt(1) === 116) {\n\t\tz.t = utf8read(unescapexml(x.substr(x.indexOf(\">\")+1).split(/<\\/t>/)[0]));\n\t\tz.r = x;\n\t\tif(html) z.h = z.t;\n\t}\n\t/* 18.4.4 r CT_RElt (Rich Text Run) */\n\telse if((y = x.match(sirregex))) {\n\t\tz.r = x;\n\t\tz.t = utf8read(unescapexml(x.match(sitregex).join(\"\").replace(tagregex,\"\")));\n\t\tif(html) z.h = parse_rs(x);\n\t}\n\t/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */\n\t/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */\n\treturn z;\n}\n\n/* 18.4 Shared String Table */\nvar sstr0 = /<sst([^>]*)>([\\s\\S]*)<\\/sst>/;\nvar sstr1 = /<(?:si|sstItem)>/g;\nvar sstr2 = /<\\/(?:si|sstItem)>/;\nfunction parse_sst_xml(data, opts) {\n\tvar s = [], ss;\n\t/* 18.4.9 sst CT_Sst */\n\tvar sst = data.match(sstr0);\n\tif(isval(sst)) {\n\t\tss = sst[2].replace(sstr1,\"\").split(sstr2);\n\t\tfor(var i = 0; i != ss.length; ++i) {\n\t\t\tvar o = parse_si(ss[i], opts);\n\t\t\tif(o != null) s[s.length] = o;\n\t\t}\n\t\tsst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;\n\t}\n\treturn s;\n}\n\nRELS.SST = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\";\nvar straywsregex = /^\\s|\\s$|[\\t\\n\\r]/;\nfunction write_sst_xml(sst, opts) {\n\tif(!opts.bookSST) return \"\";\n\tvar o = [XML_HEADER];\n\to[o.length] = (writextag('sst', null, {\n\t\txmlns: XMLNS.main[0],\n\t\tcount: sst.Count,\n\t\tuniqueCount: sst.Unique\n\t}));\n\tfor(var i = 0; i != sst.length; ++i) { if(sst[i] == null) continue;\n\t\tvar s = sst[i];\n\t\tvar sitag = \"<si>\";\n\t\tif(s.r) sitag += s.r;\n\t\telse {\n\t\t\tsitag += \"<t\";\n\t\t\tif(s.t.match(straywsregex)) sitag += ' xml:space=\"preserve\"';\n\t\t\tsitag += \">\" + escapexml(s.t) + \"</t>\";\n\t\t}\n\t\tsitag += \"</si>\";\n\t\to[o.length] = (sitag);\n\t}\n\tif(o.length>2){ o[o.length] = ('</sst>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* [MS-XLSB] 2.4.219 BrtBeginSst */\nfunction parse_BrtBeginSst(data, length) {\n\treturn [data.read_shift(4), data.read_shift(4)];\n}\n\n/* [MS-XLSB] 2.1.7.45 Shared Strings */\nfunction parse_sst_bin(data, opts) {\n\tvar s = [];\n\tvar pass = false;\n\trecordhopper(data, function hopper_sst(val, R, RT) {\n\t\tswitch(R.n) {\n\t\t\tcase 'BrtBeginSst': s.Count = val[0]; s.Unique = val[1]; break;\n\t\t\tcase 'BrtSSTItem': s.push(val); break;\n\t\t\tcase 'BrtEndSst': return true;\n\t\t\t/* TODO: produce a test case with a future record */\n\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t}\n\t});\n\treturn s;\n}\n\nfunction write_BrtBeginSst(sst, o) {\n\tif(!o) o = new_buf(8);\n\to.write_shift(4, sst.Count);\n\to.write_shift(4, sst.Unique);\n\treturn o;\n}\n\nvar write_BrtSSTItem = write_RichStr;\n\nfunction write_sst_bin(sst, opts) {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginSst\", write_BrtBeginSst(sst));\n\tfor(var i = 0; i < sst.length; ++i) write_record(ba, \"BrtSSTItem\", write_BrtSSTItem(sst[i]));\n\twrite_record(ba, \"BrtEndSst\");\n\treturn ba.end();\n}\nfunction _JS2ANSI(str) { if(typeof cptable !== 'undefined') return cptable.utils.encode(1252, str); return str.split(\"\").map(function(x) { return x.charCodeAt(0); }); }\n\n/* [MS-OFFCRYPTO] 2.1.4 Version */\nfunction parse_Version(blob, length) {\n\tvar o = {};\n\to.Major = blob.read_shift(2);\n\to.Minor = blob.read_shift(2);\n\treturn o;\n}\n/* [MS-OFFCRYPTO] 2.3.2 Encryption Header */\nfunction parse_EncryptionHeader(blob, length) {\n\tvar o = {};\n\to.Flags = blob.read_shift(4);\n\n\t// Check if SizeExtra is 0x00000000\n\tvar tmp = blob.read_shift(4);\n\tif(tmp !== 0) throw 'Unrecognized SizeExtra: ' + tmp;\n\n\to.AlgID = blob.read_shift(4);\n\tswitch(o.AlgID) {\n\t\tcase 0: case 0x6801: case 0x660E: case 0x660F: case 0x6610: break;\n\t\tdefault: throw 'Unrecognized encryption algorithm: ' + o.AlgID;\n\t}\n\tparsenoop(blob, length-12);\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */\nfunction parse_EncryptionVerifier(blob, length) {\n\treturn parsenoop(blob, length);\n}\n/* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */\nfunction parse_RC4CryptoHeader(blob, length) {\n\tvar o = {};\n\tvar vers = o.EncryptionVersionInfo = parse_Version(blob, 4); length -= 4;\n\tif(vers.Minor != 2) throw 'unrecognized minor version code: ' + vers.Minor;\n\tif(vers.Major > 4 || vers.Major < 2) throw 'unrecognized major version code: ' + vers.Major;\n\to.Flags = blob.read_shift(4); length -= 4;\n\tvar sz = blob.read_shift(4); length -= 4;\n\to.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;\n\to.EncryptionVerifier = parse_EncryptionVerifier(blob, length);\n\treturn o;\n}\n/* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */\nfunction parse_RC4Header(blob, length) {\n\tvar o = {};\n\tvar vers = o.EncryptionVersionInfo = parse_Version(blob, 4); length -= 4;\n\tif(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;\n\to.Salt = blob.read_shift(16);\n\to.EncryptedVerifier = blob.read_shift(16);\n\to.EncryptedVerifierHash = blob.read_shift(16);\n\treturn o;\n}\n\n/* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */\nfunction crypto_CreatePasswordVerifier_Method1(Password) {\n\tvar Verifier = 0x0000, PasswordArray;\n\tvar PasswordDecoded = _JS2ANSI(Password);\n\tvar len = PasswordDecoded.length + 1, i, PasswordByte;\n\tvar Intermediate1, Intermediate2, Intermediate3;\n\tPasswordArray = new_raw_buf(len);\n\tPasswordArray[0] = PasswordDecoded.length;\n\tfor(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];\n\tfor(i = len-1; i >= 0; --i) {\n\t\tPasswordByte = PasswordArray[i];\n\t\tIntermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;\n\t\tIntermediate2 = (Verifier << 1) & 0x7FFF;\n\t\tIntermediate3 = Intermediate1 | Intermediate2;\n\t\tVerifier = Intermediate3 ^ PasswordByte;\n\t}\n\treturn Verifier ^ 0xCE4B;\n}\n\n/* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */\nvar crypto_CreateXorArray_Method1 = (function() {\n\tvar PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];\n\tvar InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];\n\tvar XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];\n\tvar Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };\n\tvar XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };\n\tvar CreateXorKey_Method1 = function(Password) {\n\t\tvar XorKey = InitialCode[Password.length - 1];\n\t\tvar CurrentElement = 0x68;\n\t\tfor(var i = Password.length-1; i >= 0; --i) {\n\t\t\tvar Char = Password[i];\n\t\t\tfor(var j = 0; j != 7; ++j) {\n\t\t\t\tif(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];\n\t\t\t\tChar *= 2; --CurrentElement;\n\t\t\t}\n\t\t}\n\t\treturn XorKey;\n\t};\n\treturn function(password) {\n\t\tvar Password = _JS2ANSI(password);\n\t\tvar XorKey = CreateXorKey_Method1(Password);\n\t\tvar Index = Password.length;\n\t\tvar ObfuscationArray = new_raw_buf(16);\n\t\tfor(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;\n\t\tvar Temp, PasswordLastChar, PadIndex;\n\t\tif((Index & 1) === 1) {\n\t\t\tTemp = XorKey >> 8;\n\t\t\tObfuscationArray[Index] = XorRor(PadArray[0], Temp);\n\t\t\t--Index;\n\t\t\tTemp = XorKey & 0xFF;\n\t\t\tPasswordLastChar = Password[Password.length - 1];\n\t\t\tObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);\n\t\t}\n\t\twhile(Index > 0) {\n\t\t\t--Index;\n\t\t\tTemp = XorKey >> 8;\n\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t--Index;\n\t\t\tTemp = XorKey & 0xFF;\n\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t}\n\t\tIndex = 15;\n\t\tPadIndex = 15 - Password.length;\n\t\twhile(PadIndex > 0) {\n\t\t\tTemp = XorKey >> 8;\n\t\t\tObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);\n\t\t\t--Index;\n\t\t\t--PadIndex;\n\t\t\tTemp = XorKey & 0xFF;\n\t\t\tObfuscationArray[Index] = XorRor(Password[Index], Temp);\n\t\t\t--Index;\n\t\t\t--PadIndex;\n\t\t}\n\t\treturn ObfuscationArray;\n\t};\n})();\n\n/* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */\nvar crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O) {\n\t/* If XorArray is set, use it; if O is not set, make changes in-place */\n\tif(!O) O = Data;\n\tif(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);\n\tvar Index, Value;\n\tfor(Index = 0; Index != Data.length; ++Index) {\n\t\tValue = Data[Index];\n\t\tValue ^= XorArray[XorArrayIndex];\n\t\tValue = ((Value>>5) | (Value<<3)) & 0xFF;\n\t\tO[Index] = Value;\n\t\t++XorArrayIndex;\n\t}\n\treturn [O, XorArrayIndex, XorArray];\n};\n\nvar crypto_MakeXorDecryptor = function(password) {\n\tvar XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);\n\treturn function(Data) {\n\t\tvar O = crypto_DecryptData_Method1(null, Data, XorArrayIndex, XorArray);\n\t\tXorArrayIndex = O[1];\n\t\treturn O[0];\n\t};\n};\n\n/* 2.5.343 */\nfunction parse_XORObfuscation(blob, length, opts, out) {\n\tvar o = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };\n\tif(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);\n\tout.valid = o.verificationBytes === o.verifier;\n\tif(out.valid) out.insitu_decrypt = crypto_MakeXorDecryptor(opts.password);\n\treturn o;\n}\n\n/* 2.4.117 */\nfunction parse_FilePassHeader(blob, length, oo) {\n\tvar o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;\n\tif(o.Info === 1) o.Data = parse_RC4Header(blob, length);\n\telse o.Data = parse_RC4CryptoHeader(blob, length);\n\treturn o;\n}\nfunction parse_FilePass(blob, length, opts) {\n\tvar o = { Type: blob.read_shift(2) }; /* wEncryptionType */\n\tif(o.Type) parse_FilePassHeader(blob, length-2, o);\n\telse parse_XORObfuscation(blob, length-2, opts, o);\n\treturn o;\n}\n\n\nfunction hex2RGB(h) {\n\tvar o = h.substr(h[0]===\"#\"?1:0,6);\n\treturn [parseInt(o.substr(0,2),16),parseInt(o.substr(2,2),16),parseInt(o.substr(4,2),16)];\n}\nfunction rgb2Hex(rgb) {\n\tfor(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);\n\treturn o.toString(16).toUpperCase().substr(1);\n}\n\nfunction rgb2HSL(rgb) {\n\tvar R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;\n\tvar M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;\n\tif(C === 0) return [0, 0, R];\n\n\tvar H6 = 0, S = 0, L2 = (M + m);\n\tS = C / (L2 > 1 ? 2 - L2 : L2);\n\tswitch(M){\n\t\tcase R: H6 = ((G - B) / C + 6)%6; break;\n\t\tcase G: H6 = ((B - R) / C + 2); break;\n\t\tcase B: H6 = ((R - G) / C + 4); break;\n\t}\n\treturn [H6 / 6, S, L2 / 2];\n}\n\nfunction hsl2RGB(hsl){\n\tvar H = hsl[0], S = hsl[1], L = hsl[2];\n\tvar C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;\n\tvar rgb = [m,m,m], h6 = 6*H;\n\n\tvar X;\n\tif(S !== 0) switch(h6|0) {\n\t\tcase 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;\n\t\tcase 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;\n\t\tcase 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;\n\t\tcase 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;\n\t\tcase 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;\n\t\tcase 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;\n\t}\n\tfor(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);\n\treturn rgb;\n}\n\n/* 18.8.3 bgColor tint algorithm */\nfunction rgb_tint(hex, tint) {\n\tif(tint == 0) return hex;\n\tvar hsl = rgb2HSL(hex2RGB(hex));\n\tif (tint < 0) hsl[2] = hsl[2] * (1 + tint);\n\telse hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);\n  var rev =rgb2Hex(hsl2RGB(hsl))\n\treturn rev;\n}\n\n/* 18.3.1.13 width calculations */\nvar DEF_MDW = 7, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;\nfunction width2px(width) { return (( width + ((128/MDW)|0)/256 )* MDW )|0; }\nfunction px2char(px) { return (((px - 5)/MDW * 100 + 0.5)|0)/100; }\nfunction char2width(chr) { return (((chr * MDW + 5)/MDW*256)|0)/256; }\nfunction cycle_width(collw) { return char2width(px2char(width2px(collw))); }\nfunction find_mdw(collw, coll) {\n\tif(cycle_width(collw) != collw) {\n\t\tfor(MDW=DEF_MDW; MDW>MIN_MDW; --MDW) if(cycle_width(collw) === collw) break;\n\t\tif(MDW === MIN_MDW) for(MDW=DEF_MDW+1; MDW<MAX_MDW; ++MDW) if(cycle_width(collw) === collw) break;\n\t\tif(MDW === MAX_MDW) MDW = DEF_MDW;\n\t}\n}\n\n/* [MS-EXSPXML3] 2.4.54 ST_enmPattern */\nvar XLMLPatternTypeMap = {\n\t\"None\": \"none\",\n\t\"Solid\": \"solid\",\n\t\"Gray50\": \"mediumGray\",\n\t\"Gray75\": \"darkGray\",\n\t\"Gray25\": \"lightGray\",\n\t\"HorzStripe\": \"darkHorizontal\",\n\t\"VertStripe\": \"darkVertical\",\n\t\"ReverseDiagStripe\": \"darkDown\",\n\t\"DiagStripe\": \"darkUp\",\n\t\"DiagCross\": \"darkGrid\",\n\t\"ThickDiagCross\": \"darkTrellis\",\n\t\"ThinHorzStripe\": \"lightHorizontal\",\n\t\"ThinVertStripe\": \"lightVertical\",\n\t\"ThinReverseDiagStripe\": \"lightDown\",\n\t\"ThinHorzCross\": \"lightGrid\"\n};\n\nvar styles = {}; // shared styles\n\nvar themes = {}; // shared themes\n\n/* 18.8.21 fills CT_Fills */\nfunction parse_fills(t, opts) {\n  styles.Fills = [];\n  var fill = {};\n  t[0].match(tagregex).forEach(function (x) {\n    var y = parsexmltag(x);\n    switch (y[0]) {\n      case '<fills':\n      case '<fills>':\n      case '</fills>':\n        break;\n\n      /* 18.8.20 fill CT_Fill */\n      case '<fill>':\n        break;\n      case '</fill>':\n        styles.Fills.push(fill);\n        fill = {};\n        break;\n\n      /* 18.8.32 patternFill CT_PatternFill */\n      case '<patternFill':\n        if (y.patternType) fill.patternType = y.patternType;\n        break;\n      case '<patternFill/>':\n      case '</patternFill>':\n        break;\n\n      /* 18.8.3 bgColor CT_Color */\n      case '<bgColor':\n        if (!fill.bgColor) fill.bgColor = {};\n        if (y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);\n        if (y.theme) fill.bgColor.theme = parseInt(y.theme, 10);\n        if (y.tint) fill.bgColor.tint = parseFloat(y.tint);\n\n\n        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n          fill.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[fill.bgColor.theme].rgb, fill.bgColor.tint || 0);\n          if (opts.WTF) fill.bgColor.raw_rgb = rgb_tint(themes.themeElements.clrScheme[fill.bgColor.theme].rgb,0);\n        }\n        /* Excel uses ARGB strings */\n        if (y.rgb) fill.bgColor.rgb = y.rgb;//.substring(y.rgb.length - 6);\n        break;\n      case '<bgColor/>':\n      case '</bgColor>':\n        break;\n\n      /* 18.8.19 fgColor CT_Color */\n      case '<fgColor':\n        if (!fill.fgColor) fill.fgColor = {};\n        if (y.theme) fill.fgColor.theme = parseInt(y.theme, 10);\n        if (y.tint) fill.fgColor.tint = parseFloat(y.tint);\n\n        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n          fill.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[fill.fgColor.theme].rgb, fill.fgColor.tint || 0);\n          if (opts.WTF) fill.fgColor.raw_rgb = rgb_tint(themes.themeElements.clrScheme[fill.fgColor.theme].rgb,0);\n        }\n\n        /* Excel uses ARGB strings */\n        if (y.rgb) fill.fgColor.rgb = y.rgb;//.substring(y.rgb.length - 6);\n        break;\n      case '<fgColor/>':\n      case '</fgColor>':\n        break;\n\n      default:\n        if (opts.WTF) throw 'unrecognized ' + y[0] + ' in fills';\n    }\n  });\n}\n\nfunction parse_fonts(t, opts) {\n  styles.Fonts = [];\n  var font = {};\n  t[0].match(tagregex).forEach(function (x) {\n    var y = parsexmltag(x);\n    switch (y[0]) {\n\n      case '<fonts':\n      case  '<fonts>':\n      case '</fonts>':\n        break;\n      case '<font':\n        break;\n      case '</font>':\n        styles.Fonts.push(font);\n        ;\n        font = {};\n        break;\n\n      case '<name':\n        if (y.val) font.name = y.val;\n        break;\n      case '<name/>':\n      case '</name>':\n        break;\n\n\n      case '<b/>':\n        font.bold = true;\n        break;\n      case '<u/>':\n        font.underline = true;\n        break;\n      case '<i/>':\n        font.italic = true;\n        break;\n      case '<strike/>':\n        font.strike = true;\n        break;\n      case '<outline/>':\n        font.outline = true;\n        break;\n      case '<shadow/>':\n        font.shadow = true;\n        break;\n\n\n      case '<sz':\n        if (y.val) font.sz = y.val;\n        break;\n      case '<sz/>':\n      case '</sz>':\n        break;\n\n      case '<vertAlign':\n        if (y.val) font.vertAlign = y.val;\n        break;\n      case '<vertAlign/>':\n      case '</vertAlign>':\n        break;\n\n\n      case '<color':\n        if (!font.color) font.color = {};\n        if (y.theme) font.color.theme = y.theme;\n        if (y.tint) font.color.tint = y.tint;\n        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n          font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);\n        }\n        if (y.rgb) font.color.rgb = y.rgb;\n        break;\n      case '<color/>':\n      case '</color>':\n        break;\n    }\n  });\n}\n\nfunction parse_borders(t, opts) {\n  styles.Borders = [];\n  var border = {}, sub_border = {};\n  t[0].match(tagregex).forEach(function (x) {\n    var y = parsexmltag(x);\n    switch (y[0]) {\n      case '<borders':\n      case  '<borders>':\n      case '</borders>':\n        break;\n      case '<border':\n      case '<border>':\n        border = {};\n        if (y.diagonalUp) { border.diagonalUp = y.diagonalUp; }\n        if (y.diagonalDown) { border.diagonalDown = y.diagonalDown; }\n        styles.Borders.push(border);\n\n        break;\n        break;\n      case '</border>':\n        break;\n\n      case '<left':\n        sub_border = border.left = {};\n        if (y.style) {\n          sub_border.style = y.style;\n        }\n        break;\n      case '<right':\n        sub_border = border.right = {};\n        if (y.style) {\n          sub_border.style = y.style;\n        }\n        break;\n      case '<top':\n        sub_border = border.top = {};\n        if (y.style) {\n          sub_border.style = y.style;\n        }\n        break;\n      case '<bottom':\n        sub_border = border.bottom = {};\n        if (y.style) {\n          sub_border.style = y.style;\n        }\n        break;\n      case '<diagonal':\n        sub_border = border.diagonal = {};\n        if (y.style) {\n          sub_border.style = y.style;\n        }\n        break;\n\n      case '<color':\n        sub_border.color = {};\n        if (y.theme) sub_border.color.theme = y.theme;\n        if (y.theme && themes.themeElements && themes.themeElements.clrScheme) {\n          sub_border.color.rgb = rgb_tint(themes.themeElements.clrScheme[sub_border.color.theme].rgb, sub_border.color.tint || 0);\n        }\n\n        if (y.tint) sub_border.color.tint = y.tint;\n        if (y.rgb) sub_border.color.rgb = y.rgb;\n        if (y.auto) sub_border.color.auto = y.auto;\n        break;\n      case '<name/>':\n      case '</name>':\n        break;\n      default:\n        break;\n    }\n  });\n\n}\n\n/* 18.8.31 numFmts CT_NumFmts */\nfunction parse_numFmts(t, opts) {\n  styles.NumberFmt = [];\n  var k = keys(SSF._table);\n  for (var i = 0; i < k.length; ++i) styles.NumberFmt[k[i]] = SSF._table[k[i]];\n  var m = t[0].match(tagregex);\n  for (i = 0; i < m.length; ++i) {\n    var y = parsexmltag(m[i]);\n    switch (y[0]) {\n      case '<numFmts':\n      case '</numFmts>':\n      case '<numFmts/>':\n      case '<numFmts>':\n        break;\n      case '<numFmt':\n      {\n        var f = unescapexml(utf8read(y.formatCode)), j = parseInt(y.numFmtId, 10);\n        styles.NumberFmt[j] = f;\n        if (j > 0) SSF.load(f, j);\n      }\n        break;\n      default:\n        if (opts.WTF) throw 'unrecognized ' + y[0] + ' in numFmts';\n    }\n  }\n}\n\nfunction write_numFmts(NF, opts) {\n  var o = [\"<numFmts>\"];\n  [\n    [5, 8],\n    [23, 26],\n    [41, 44],\n    [63, 66],\n    [164, 392]\n  ].forEach(function (r) {\n    for (var i = r[0]; i <= r[1]; ++i) if (NF[i] !== undefined) o[o.length] = (writextag('numFmt', null, {numFmtId: i, formatCode: escapexml(NF[i])}));\n  });\n  if (o.length === 1) return \"\";\n  o[o.length] = (\"</numFmts>\");\n  o[0] = writextag('numFmts', null, { count: o.length - 2 }).replace(\"/>\", \">\");\n  return o.join(\"\");\n}\n\n/* 18.8.10 cellXfs CT_CellXfs */\nfunction parse_cellXfs(t, opts) {\n  styles.CellXf = [];\n  var xf;\n  t[0].match(tagregex).forEach(function (x) {\n    var y = parsexmltag(x);\n    switch (y[0]) {\n      case '<cellXfs':\n      case '<cellXfs>':\n      case '<cellXfs/>':\n      case '</cellXfs>':\n        break;\n\n      /* 18.8.45 xf CT_Xf */\n      case '<xf':\n          xf = y;\n          delete xf[0];\n        delete y[0];\n        if (xf.numFmtId) xf.numFmtId = parseInt(xf.numFmtId, 10);\n        if (xf.fillId) xf.fillId = parseInt(xf.fillId, 10);\n        styles.CellXf.push(xf);\n        break;\n      case '</xf>':\n        break;\n\n      /* 18.8.1 alignment CT_CellAlignment */\n      case '<alignment':\n      case '<alignment/>':\n        var alignment = {}\n          if (y.vertical) { alignment.vertical = y.vertical;}\n          if (y.horizontal) { alignment.horizontal = y.horizontal;}\n          if (y.textRotation != undefined) { alignment.textRotation = y.textRotation; }\n          if (y.indent) { alignment.indent = y.indent; }\n          if (y.wrapText) { alignment.wrapText = y.wrapText; }\n          xf.alignment = alignment;\n\n        break;\n\n      /* 18.8.33 protection CT_CellProtection */\n      case '<protection':\n      case '</protection>':\n      case '<protection/>':\n        break;\n\n      case '<extLst':\n      case '</extLst>':\n        break;\n      case '<ext':\n        break;\n      default:\n        if (opts.WTF) throw 'unrecognized ' + y[0] + ' in cellXfs';\n    }\n  });\n}\n\nfunction write_cellXfs(cellXfs) {\n  var o = [];\n  o[o.length] = (writextag('cellXfs', null));\n  cellXfs.forEach(function (c) {\n    o[o.length] = (writextag('xf', null, c));\n  });\n  o[o.length] = (\"</cellXfs>\");\n  if (o.length === 2) return \"\";\n  o[0] = writextag('cellXfs', null, {count: o.length - 2}).replace(\"/>\", \">\");\n  return o.join(\"\");\n}\n\n/* 18.8 Styles CT_Stylesheet*/\nvar parse_sty_xml = (function make_pstyx() {\n  var numFmtRegex = /<numFmts([^>]*)>.*<\\/numFmts>/;\n  var cellXfRegex = /<cellXfs([^>]*)>.*<\\/cellXfs>/;\n  var fillsRegex = /<fills([^>]*)>.*<\\/fills>/;\n  var bordersRegex = /<borders([^>]*)>.*<\\/borders>/;\n\n  return function parse_sty_xml(data, opts) {\n    /* 18.8.39 styleSheet CT_Stylesheet */\n    var t;\n\n    /* numFmts CT_NumFmts ? */\n    if ((t = data.match(numFmtRegex))) parse_numFmts(t, opts);\n\n    /* fonts CT_Fonts ? */\n    if ((t = data.match(/<fonts([^>]*)>.*<\\/fonts>/))) parse_fonts(t, opts)\n\n    /* fills CT_Fills */\n    if ((t = data.match(fillsRegex))) parse_fills(t, opts);\n\n    /* borders CT_Borders ? */\n    if ((t = data.match(bordersRegex))) parse_borders(t, opts);\n    /* cellStyleXfs CT_CellStyleXfs ? */\n\n    /* cellXfs CT_CellXfs ? */\n    if ((t = data.match(cellXfRegex))) parse_cellXfs(t, opts);\n\n    /* dxfs CT_Dxfs ? */\n    /* tableStyles CT_TableStyles ? */\n    /* colors CT_Colors ? */\n    /* extLst CT_ExtensionList ? */\n\n    return styles;\n  };\n})();\n\nvar STYLES_XML_ROOT = writextag('styleSheet', null, {\n  'xmlns': XMLNS.main[0],\n  'xmlns:vt': XMLNS.vt\n});\n\nRELS.STY = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\";\n\nfunction write_sty_xml(wb, opts) {\n\n  if (typeof style_builder != 'undefined' && typeof 'require' != 'undefined') {\n    return style_builder.toXml();\n  }\n\n  var o = [XML_HEADER, STYLES_XML_ROOT], w;\n  if ((w = write_numFmts(wb.SSF)) != null) o[o.length] = w;\n  o[o.length] = ('<fonts count=\"1\"><font><sz val=\"12\"/><color theme=\"1\"/><name val=\"Calibri\"/><family val=\"2\"/><scheme val=\"minor\"/></font></fonts>');\n  o[o.length] = ('<fills count=\"2\"><fill><patternFill patternType=\"none\"/></fill><fill><patternFill patternType=\"gray125\"/></fill></fills>');\n  o[o.length] = ('<borders count=\"1\"><border><left/><right/><top/><bottom/><diagonal/></border></borders>');\n  o[o.length] = ('<cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>');\n  if ((w = write_cellXfs(opts.cellXfs))) o[o.length] = (w);\n  o[o.length] = ('<cellStyles count=\"1\"><cellStyle name=\"Normal\" xfId=\"0\" builtinId=\"0\"/></cellStyles>');\n  o[o.length] = ('<dxfs count=\"0\"/>');\n  o[o.length] = ('<tableStyles count=\"0\" defaultTableStyle=\"TableStyleMedium9\" defaultPivotStyle=\"PivotStyleMedium4\"/>');\n\n  if (o.length > 2) {\n    o[o.length] = ('</styleSheet>');\n    o[1] = o[1].replace(\"/>\", \">\");\n  }\n  return o.join(\"\");\n}\n/* [MS-XLSB] 2.4.651 BrtFmt */\nfunction parse_BrtFmt(data, length) {\n\tvar ifmt = data.read_shift(2);\n\tvar stFmtCode = parse_XLWideString(data,length-2);\n\treturn [ifmt, stFmtCode];\n}\n\n/* [MS-XLSB] 2.4.653 BrtFont TODO */\nfunction parse_BrtFont(data, length) {\n\tvar out = {flags:{}};\n\tout.dyHeight = data.read_shift(2);\n\tout.grbit = parse_FontFlags(data, 2);\n\tout.bls = data.read_shift(2);\n\tout.sss = data.read_shift(2);\n\tout.uls = data.read_shift(1);\n\tout.bFamily = data.read_shift(1);\n\tout.bCharSet = data.read_shift(1);\n\tdata.l++;\n\tout.brtColor = parse_BrtColor(data, 8);\n\tout.bFontScheme = data.read_shift(1);\n\tout.name = parse_XLWideString(data, length - 21);\n\n\tout.flags.Bold = out.bls === 0x02BC;\n\tout.flags.Italic = out.grbit.fItalic;\n\tout.flags.Strikeout = out.grbit.fStrikeout;\n\tout.flags.Outline = out.grbit.fOutline;\n\tout.flags.Shadow = out.grbit.fShadow;\n\tout.flags.Condense = out.grbit.fCondense;\n\tout.flags.Extend = out.grbit.fExtend;\n\tout.flags.Sub = out.sss & 0x2;\n\tout.flags.Sup = out.sss & 0x1;\n\treturn out;\n}\n\n/* [MS-XLSB] 2.4.816 BrtXF */\nfunction parse_BrtXF(data, length) {\n\tvar ixfeParent = data.read_shift(2);\n\tvar ifmt = data.read_shift(2);\n\tparsenoop(data, length-4);\n\treturn {ixfe:ixfeParent, ifmt:ifmt };\n}\n\n/* [MS-XLSB] 2.1.7.50 Styles */\nfunction parse_sty_bin(data, opts) {\n\tstyles.NumberFmt = [];\n\tfor(var y in SSF._table) styles.NumberFmt[y] = SSF._table[y];\n\n\tstyles.CellXf = [];\n\tvar state = \"\"; /* TODO: this should be a stack */\n\tvar pass = false;\n\trecordhopper(data, function hopper_sty(val, R, RT) {\n\t\tswitch(R.n) {\n\t\t\tcase 'BrtFmt':\n\t\t\t\tstyles.NumberFmt[val[0]] = val[1]; SSF.load(val[1], val[0]);\n\t\t\t\tbreak;\n\t\t\tcase 'BrtFont': break; /* TODO */\n\t\t\tcase 'BrtKnownFonts': break; /* TODO */\n\t\t\tcase 'BrtFill': break; /* TODO */\n\t\t\tcase 'BrtBorder': break; /* TODO */\n\t\t\tcase 'BrtXF':\n\t\t\t\tif(state === \"CELLXFS\") {\n\t\t\t\t\tstyles.CellXf.push(val);\n\t\t\t\t}\n\t\t\t\tbreak; /* TODO */\n\t\t\tcase 'BrtStyle': break; /* TODO */\n\t\t\tcase 'BrtDXF': break; /* TODO */\n\t\t\tcase 'BrtMRUColor': break; /* TODO */\n\t\t\tcase 'BrtIndexedColor': break; /* TODO */\n\t\t\tcase 'BrtBeginStyleSheet': break;\n\t\t\tcase 'BrtEndStyleSheet': break;\n\t\t\tcase 'BrtBeginTableStyle': break;\n\t\t\tcase 'BrtTableStyleElement': break;\n\t\t\tcase 'BrtEndTableStyle': break;\n\t\t\tcase 'BrtBeginFmts': state = \"FMTS\"; break;\n\t\t\tcase 'BrtEndFmts': state = \"\"; break;\n\t\t\tcase 'BrtBeginFonts': state = \"FONTS\"; break;\n\t\t\tcase 'BrtEndFonts': state = \"\"; break;\n\t\t\tcase 'BrtACBegin': state = \"ACFONTS\"; break;\n\t\t\tcase 'BrtACEnd': state = \"\"; break;\n\t\t\tcase 'BrtBeginFills': state = \"FILLS\"; break;\n\t\t\tcase 'BrtEndFills': state = \"\"; break;\n\t\t\tcase 'BrtBeginBorders': state = \"BORDERS\"; break;\n\t\t\tcase 'BrtEndBorders': state = \"\"; break;\n\t\t\tcase 'BrtBeginCellStyleXFs': state = \"CELLSTYLEXFS\"; break;\n\t\t\tcase 'BrtEndCellStyleXFs': state = \"\"; break;\n\t\t\tcase 'BrtBeginCellXFs': state = \"CELLXFS\"; break;\n\t\t\tcase 'BrtEndCellXFs': state = \"\"; break;\n\t\t\tcase 'BrtBeginStyles': state = \"STYLES\"; break;\n\t\t\tcase 'BrtEndStyles': state = \"\"; break;\n\t\t\tcase 'BrtBeginDXFs': state = \"DXFS\"; break;\n\t\t\tcase 'BrtEndDXFs': state = \"\"; break;\n\t\t\tcase 'BrtBeginTableStyles': state = \"TABLESTYLES\"; break;\n\t\t\tcase 'BrtEndTableStyles': state = \"\"; break;\n\t\t\tcase 'BrtBeginColorPalette': state = \"COLORPALETTE\"; break;\n\t\t\tcase 'BrtEndColorPalette': state = \"\"; break;\n\t\t\tcase 'BrtBeginIndexedColors': state = \"INDEXEDCOLORS\"; break;\n\t\t\tcase 'BrtEndIndexedColors': state = \"\"; break;\n\t\t\tcase 'BrtBeginMRUColors': state = \"MRUCOLORS\"; break;\n\t\t\tcase 'BrtEndMRUColors': state = \"\"; break;\n\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\tcase 'BrtBeginStyleSheetExt14': break;\n\t\t\tcase 'BrtBeginSlicerStyles': break;\n\t\t\tcase 'BrtEndSlicerStyles': break;\n\t\t\tcase 'BrtBeginTimelineStylesheetExt15': break;\n\t\t\tcase 'BrtEndTimelineStylesheetExt15': break;\n\t\t\tcase 'BrtBeginTimelineStyles': break;\n\t\t\tcase 'BrtEndTimelineStyles': break;\n\t\t\tcase 'BrtEndStyleSheetExt14': break;\n\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t}\n\t});\n\treturn styles;\n}\n\n/* [MS-XLSB] 2.1.7.50 Styles */\nfunction write_sty_bin(data, opts) {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginStyleSheet\");\n\t/* [FMTS] */\n\t/* [FONTS] */\n\t/* [FILLS] */\n\t/* [BORDERS] */\n\t/* CELLSTYLEXFS */\n\t/* CELLXFS*/\n\t/* STYLES */\n\t/* DXFS */\n\t/* TABLESTYLES */\n\t/* [COLORPALETTE] */\n\t/* FRTSTYLESHEET*/\n\twrite_record(ba, \"BrtEndStyleSheet\");\n\treturn ba.end();\n}\nRELS.THEME = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\";\n\n/* 20.1.6.2 clrScheme CT_ColorScheme */\nfunction parse_clrScheme(t, opts) {\n\tthemes.themeElements.clrScheme = [];\n\tvar color = {};\n\tt[0].match(tagregex).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(y[0]) {\n\t\t\tcase '<a:clrScheme': case '</a:clrScheme>': break;\n\n\t\t\t/* 20.1.2.3.32 srgbClr CT_SRgbColor */\n\t\t\tcase '<a:srgbClr': color.rgb = y.val; break;\n\n\t\t\t/* 20.1.2.3.33 sysClr CT_SystemColor */\n\t\t\tcase '<a:sysClr': color.rgb = y.lastClr; break;\n\n\t\t\t/* 20.1.4.1.9 dk1 (Dark 1) */\n\t\t\tcase '<a:dk1>':\n\t\t\tcase '</a:dk1>':\n\t\t\t/* 20.1.4.1.10 dk2 (Dark 2) */\n\t\t\tcase '<a:dk2>':\n\t\t\tcase '</a:dk2>':\n\t\t\t/* 20.1.4.1.22 lt1 (Light 1) */\n\t\t\tcase '<a:lt1>':\n\t\t\tcase '</a:lt1>':\n\t\t\t/* 20.1.4.1.23 lt2 (Light 2) */\n\t\t\tcase '<a:lt2>':\n\t\t\tcase '</a:lt2>':\n\t\t\t/* 20.1.4.1.1 accent1 (Accent 1) */\n\t\t\tcase '<a:accent1>':\n\t\t\tcase '</a:accent1>':\n\t\t\t/* 20.1.4.1.2 accent2 (Accent 2) */\n\t\t\tcase '<a:accent2>':\n\t\t\tcase '</a:accent2>':\n\t\t\t/* 20.1.4.1.3 accent3 (Accent 3) */\n\t\t\tcase '<a:accent3>':\n\t\t\tcase '</a:accent3>':\n\t\t\t/* 20.1.4.1.4 accent4 (Accent 4) */\n\t\t\tcase '<a:accent4>':\n\t\t\tcase '</a:accent4>':\n\t\t\t/* 20.1.4.1.5 accent5 (Accent 5) */\n\t\t\tcase '<a:accent5>':\n\t\t\tcase '</a:accent5>':\n\t\t\t/* 20.1.4.1.6 accent6 (Accent 6) */\n\t\t\tcase '<a:accent6>':\n\t\t\tcase '</a:accent6>':\n\t\t\t/* 20.1.4.1.19 hlink (Hyperlink) */\n\t\t\tcase '<a:hlink>':\n\t\t\tcase '</a:hlink>':\n\t\t\t/* 20.1.4.1.15 folHlink (Followed Hyperlink) */\n\t\t\tcase '<a:folHlink>':\n\t\t\tcase '</a:folHlink>':\n\t\t\t\tif (y[0][1] === '/') {\n\t\t\t\t\tthemes.themeElements.clrScheme.push(color);\n\t\t\t\t\tcolor = {};\n\t\t\t\t} else {\n\t\t\t\t\tcolor.name = y[0].substring(3, y[0].length - 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tdefault: if(opts.WTF) throw 'unrecognized ' + y[0] + ' in clrScheme';\n\t\t}\n\t});\n}\n\n/* 20.1.4.1.18 fontScheme CT_FontScheme */\nfunction parse_fontScheme(t, opts) { }\n\n/* 20.1.4.1.15 fmtScheme CT_StyleMatrix */\nfunction parse_fmtScheme(t, opts) { }\n\nvar clrsregex = /<a:clrScheme([^>]*)>[^\\u2603]*<\\/a:clrScheme>/;\nvar fntsregex = /<a:fontScheme([^>]*)>[^\\u2603]*<\\/a:fontScheme>/;\nvar fmtsregex = /<a:fmtScheme([^>]*)>[^\\u2603]*<\\/a:fmtScheme>/;\n\n/* 20.1.6.10 themeElements CT_BaseStyles */\nfunction parse_themeElements(data, opts) {\n\tthemes.themeElements = {};\n\n\tvar t;\n\n\t[\n\t\t/* clrScheme CT_ColorScheme */\n\t\t['clrScheme', clrsregex, parse_clrScheme],\n\t\t/* fontScheme CT_FontScheme */\n\t\t['fontScheme', fntsregex, parse_fontScheme],\n\t\t/* fmtScheme CT_StyleMatrix */\n\t\t['fmtScheme', fmtsregex, parse_fmtScheme]\n\t].forEach(function(m) {\n\t\tif(!(t=data.match(m[1]))) throw m[0] + ' not found in themeElements';\n\t\tm[2](t, opts);\n\t});\n}\n\nvar themeltregex = /<a:themeElements([^>]*)>[^\\u2603]*<\\/a:themeElements>/;\n\n/* 14.2.7 Theme Part */\nfunction parse_theme_xml(data, opts) {\n\t/* 20.1.6.9 theme CT_OfficeStyleSheet */\n\tif(!data || data.length === 0) return themes;\n\n\tvar t;\n\n\t/* themeElements CT_BaseStyles */\n\tif(!(t=data.match(themeltregex))) throw 'themeElements not found in theme';\n\tparse_themeElements(t[0], opts);\n\n\treturn themes;\n}\n\n//function write_theme() { return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2><a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2><a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1><a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2><a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3><a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4><a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5><a:accent6><a:srgbClr val=\"F79646\"/></a:accent6><a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Cambria\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"1\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>'; }\nfunction write_theme(opts) {\n  if (opts.themeXml) { return opts.themeXml; }\n  return '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"><a:themeElements><a:clrScheme name=\"Office\"><a:dk1><a:sysClr val=\"windowText\" lastClr=\"000000\"/></a:dk1><a:lt1><a:sysClr val=\"window\" lastClr=\"FFFFFF\"/></a:lt1><a:dk2><a:srgbClr val=\"1F497D\"/></a:dk2><a:lt2><a:srgbClr val=\"EEECE1\"/></a:lt2><a:accent1><a:srgbClr val=\"4F81BD\"/></a:accent1><a:accent2><a:srgbClr val=\"C0504D\"/></a:accent2><a:accent3><a:srgbClr val=\"9BBB59\"/></a:accent3><a:accent4><a:srgbClr val=\"8064A2\"/></a:accent4><a:accent5><a:srgbClr val=\"4BACC6\"/></a:accent5><a:accent6><a:srgbClr val=\"F79646\"/></a:accent6><a:hlink><a:srgbClr val=\"0000FF\"/></a:hlink><a:folHlink><a:srgbClr val=\"800080\"/></a:folHlink></a:clrScheme><a:fontScheme name=\"Office\"><a:majorFont><a:latin typeface=\"Cambria\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Times New Roman\"/><a:font script=\"Hebr\" typeface=\"Times New Roman\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"MoolBoran\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Times New Roman\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:majorFont><a:minorFont><a:latin typeface=\"Calibri\"/><a:ea typeface=\"\"/><a:cs typeface=\"\"/><a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/><a:font script=\"Hang\" typeface=\"맑은 고딕\"/><a:font script=\"Hans\" typeface=\"宋体\"/><a:font script=\"Hant\" typeface=\"新細明體\"/><a:font script=\"Arab\" typeface=\"Arial\"/><a:font script=\"Hebr\" typeface=\"Arial\"/><a:font script=\"Thai\" typeface=\"Tahoma\"/><a:font script=\"Ethi\" typeface=\"Nyala\"/><a:font script=\"Beng\" typeface=\"Vrinda\"/><a:font script=\"Gujr\" typeface=\"Shruti\"/><a:font script=\"Khmr\" typeface=\"DaunPenh\"/><a:font script=\"Knda\" typeface=\"Tunga\"/><a:font script=\"Guru\" typeface=\"Raavi\"/><a:font script=\"Cans\" typeface=\"Euphemia\"/><a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/><a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/><a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/><a:font script=\"Thaa\" typeface=\"MV Boli\"/><a:font script=\"Deva\" typeface=\"Mangal\"/><a:font script=\"Telu\" typeface=\"Gautami\"/><a:font script=\"Taml\" typeface=\"Latha\"/><a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/><a:font script=\"Orya\" typeface=\"Kalinga\"/><a:font script=\"Mlym\" typeface=\"Kartika\"/><a:font script=\"Laoo\" typeface=\"DokChampa\"/><a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/><a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/><a:font script=\"Viet\" typeface=\"Arial\"/><a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/><a:font script=\"Geor\" typeface=\"Sylfaen\"/></a:minorFont></a:fontScheme><a:fmtScheme name=\"Office\"><a:fillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"35000\"><a:schemeClr val=\"phClr\"><a:tint val=\"37000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"15000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"1\"/></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"100000\"/><a:shade val=\"100000\"/><a:satMod val=\"130000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:tint val=\"50000\"/><a:shade val=\"100000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs></a:gsLst><a:lin ang=\"16200000\" scaled=\"0\"/></a:gradFill></a:fillStyleLst><a:lnStyleLst><a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"><a:shade val=\"95000\"/><a:satMod val=\"105000\"/></a:schemeClr></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln><a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:prstDash val=\"solid\"/></a:ln></a:lnStyleLst><a:effectStyleLst><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"38000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst></a:effectStyle><a:effectStyle><a:effectLst><a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"><a:srgbClr val=\"000000\"><a:alpha val=\"35000\"/></a:srgbClr></a:outerShdw></a:effectLst><a:scene3d><a:camera prst=\"orthographicFront\"><a:rot lat=\"0\" lon=\"0\" rev=\"0\"/></a:camera><a:lightRig rig=\"threePt\" dir=\"t\"><a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/></a:lightRig></a:scene3d><a:sp3d><a:bevelT w=\"63500\" h=\"25400\"/></a:sp3d></a:effectStyle></a:effectStyleLst><a:bgFillStyleLst><a:solidFill><a:schemeClr val=\"phClr\"/></a:solidFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"40000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"40000\"><a:schemeClr val=\"phClr\"><a:tint val=\"45000\"/><a:shade val=\"99000\"/><a:satMod val=\"350000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"20000\"/><a:satMod val=\"255000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/></a:path></a:gradFill><a:gradFill rotWithShape=\"1\"><a:gsLst><a:gs pos=\"0\"><a:schemeClr val=\"phClr\"><a:tint val=\"80000\"/><a:satMod val=\"300000\"/></a:schemeClr></a:gs><a:gs pos=\"100000\"><a:schemeClr val=\"phClr\"><a:shade val=\"30000\"/><a:satMod val=\"200000\"/></a:schemeClr></a:gs></a:gsLst><a:path path=\"circle\"><a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/></a:path></a:gradFill></a:bgFillStyleLst></a:fmtScheme></a:themeElements><a:objectDefaults><a:spDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"3\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"lt1\"/></a:fontRef></a:style></a:spDef><a:lnDef><a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx=\"2\"><a:schemeClr val=\"accent1\"/></a:lnRef><a:fillRef idx=\"0\"><a:schemeClr val=\"accent1\"/></a:fillRef><a:effectRef idx=\"1\"><a:schemeClr val=\"accent1\"/></a:effectRef><a:fontRef idx=\"minor\"><a:schemeClr val=\"tx1\"/></a:fontRef></a:style></a:lnDef></a:objectDefaults><a:extraClrSchemeLst/></a:theme>';\n}/* [MS-XLS] 2.4.326 TODO: payload is a zip file */\nfunction parse_Theme(blob, length) {\n\tvar dwThemeVersion = blob.read_shift(4);\n\tif(dwThemeVersion === 124226) return;\n\tblob.l += length-4;\n}\n\n/* 2.5.49 */\nfunction parse_ColorTheme(blob, length) { return blob.read_shift(4); }\n\n/* 2.5.155 */\nfunction parse_FullColorExt(blob, length) {\n\tvar o = {};\n\to.xclrType = blob.read_shift(2);\n\to.nTintShade = blob.read_shift(2);\n\tswitch(o.xclrType) {\n\t\tcase 0: blob.l += 4; break;\n\t\tcase 1: o.xclrValue = parse_IcvXF(blob, 4); break;\n\t\tcase 2: o.xclrValue = parse_LongRGBA(blob, 4); break;\n\t\tcase 3: o.xclrValue = parse_ColorTheme(blob, 4); break;\n\t\tcase 4: blob.l += 4; break;\n\t}\n\tblob.l += 8;\n\treturn o;\n}\n\n/* 2.5.164 TODO: read 7 bits*/\nfunction parse_IcvXF(blob, length) {\n\treturn parsenoop(blob, length);\n}\n\n/* 2.5.280 */\nfunction parse_XFExtGradient(blob, length) {\n\treturn parsenoop(blob, length);\n}\n\n/* 2.5.108 */\nfunction parse_ExtProp(blob, length) {\n\tvar extType = blob.read_shift(2);\n\tvar cb = blob.read_shift(2);\n\tvar o = [extType];\n\tswitch(extType) {\n\t\tcase 0x04: case 0x05: case 0x07: case 0x08:\n\t\tcase 0x09: case 0x0A: case 0x0B: case 0x0D:\n\t\t\to[1] = parse_FullColorExt(blob, cb); break;\n\t\tcase 0x06: o[1] = parse_XFExtGradient(blob, cb); break;\n\t\tcase 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 5 ? 1 : 2); break;\n\t\tdefault: throw new Error(\"Unrecognized ExtProp type: \" + extType + \" \" + cb);\n\t}\n\treturn o;\n}\n\n/* 2.4.355 */\nfunction parse_XFExt(blob, length) {\n\tvar end = blob.l + length;\n\tblob.l += 2;\n\tvar ixfe = blob.read_shift(2);\n\tblob.l += 2;\n\tvar cexts = blob.read_shift(2);\n\tvar ext = [];\n\twhile(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));\n\treturn {ixfe:ixfe, ext:ext};\n}\n\n/* xf is an XF, see parse_XFExt for xfext */\nfunction update_xfext(xf, xfext) {\n\txfext.forEach(function(xfe) {\n\t\tswitch(xfe[0]) { /* 2.5.108 extPropData */\n\t\t\tcase 0x04: break; /* foreground color */\n\t\t\tcase 0x05: break; /* background color */\n\t\t\tcase 0x07: case 0x08: case 0x09: case 0x0a: break;\n\t\t\tcase 0x0d: break; /* text color */\n\t\t\tcase 0x0e: break; /* font scheme */\n\t\t\tdefault: throw \"bafuq\" + xfe[0].toString(16);\n\t\t}\n\t});\n}\n\n/* 18.6 Calculation Chain */\nfunction parse_cc_xml(data, opts) {\n\tvar d = [];\n\tvar l = 0, i = 1;\n\t(data.match(tagregex)||[]).forEach(function(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(y[0]) {\n\t\t\tcase '<?xml': break;\n\t\t\t/* 18.6.2  calcChain CT_CalcChain 1 */\n\t\t\tcase '<calcChain': case '<calcChain>': case '</calcChain>': break;\n\t\t\t/* 18.6.1  c CT_CalcCell 1 */\n\t\t\tcase '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;\n\t\t}\n\t});\n\treturn d;\n}\n\nfunction write_cc_xml(data, opts) { }\n/* [MS-XLSB] 2.6.4.1 */\nfunction parse_BrtCalcChainItem$(data, length) {\n\tvar out = {};\n\tout.i = data.read_shift(4);\n\tvar cell = {};\n\tcell.r = data.read_shift(4);\n\tcell.c = data.read_shift(4);\n\tout.r = encode_cell(cell);\n\tvar flags = data.read_shift(1);\n\tif(flags & 0x2) out.l = '1';\n\tif(flags & 0x8) out.a = '1';\n\treturn out;\n}\n\n/* 18.6 Calculation Chain */\nfunction parse_cc_bin(data, opts) {\n\tvar out = [];\n\tvar pass = false;\n\trecordhopper(data, function hopper_cc(val, R, RT) {\n\t\tswitch(R.n) {\n\t\t\tcase 'BrtCalcChainItem$': out.push(val); break;\n\t\t\tcase 'BrtBeginCalcChain$': break;\n\t\t\tcase 'BrtEndCalcChain$': break;\n\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t}\n\t});\n\treturn out;\n}\n\nfunction write_cc_bin(data, opts) { }\n\nfunction parse_comments(zip, dirComments, sheets, sheetRels, opts) {\n\tfor(var i = 0; i != dirComments.length; ++i) {\n\t\tvar canonicalpath=dirComments[i];\n\t\tvar comments=parse_cmnt(getzipdata(zip, canonicalpath.replace(/^\\//,''), true), canonicalpath, opts);\n\t\tif(!comments || !comments.length) continue;\n\t\t// find the sheets targeted by these comments\n\t\tvar sheetNames = keys(sheets);\n\t\tfor(var j = 0; j != sheetNames.length; ++j) {\n\t\t\tvar sheetName = sheetNames[j];\n\t\t\tvar rels = sheetRels[sheetName];\n\t\t\tif(rels) {\n\t\t\t\tvar rel = rels[canonicalpath];\n\t\t\t\tif(rel) insertCommentsIntoSheet(sheetName, sheets[sheetName], comments);\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction insertCommentsIntoSheet(sheetName, sheet, comments) {\n\tcomments.forEach(function(comment) {\n\t\tvar cell = sheet[comment.ref];\n\t\tif (!cell) {\n\t\t\tcell = {};\n\t\t\tsheet[comment.ref] = cell;\n\t\t\tvar range = safe_decode_range(sheet[\"!ref\"]||\"BDWGO1000001:A1\");\n\t\t\tvar thisCell = decode_cell(comment.ref);\n\t\t\tif(range.s.r > thisCell.r) range.s.r = thisCell.r;\n\t\t\tif(range.e.r < thisCell.r) range.e.r = thisCell.r;\n\t\t\tif(range.s.c > thisCell.c) range.s.c = thisCell.c;\n\t\t\tif(range.e.c < thisCell.c) range.e.c = thisCell.c;\n\t\t\tvar encoded = encode_range(range);\n\t\t\tif (encoded !== sheet[\"!ref\"]) sheet[\"!ref\"] = encoded;\n\t\t}\n\n\t\tif (!cell.c) cell.c = [];\n\t\tvar o = {a: comment.author, t: comment.t, r: comment.r};\n\t\tif(comment.h) o.h = comment.h;\n\t\tcell.c.push(o);\n\t});\n}\n\n/* 18.7.3 CT_Comment */\nfunction parse_comments_xml(data, opts) {\n\tif(data.match(/<(?:\\w+:)?comments *\\/>/)) return [];\n\tvar authors = [];\n\tvar commentList = [];\n\tdata.match(/<(?:\\w+:)?authors>([^\\u2603]*)<\\/(?:\\w+:)?authors>/)[1].split(/<\\/\\w*:?author>/).forEach(function(x) {\n\t\tif(x === \"\" || x.trim() === \"\") return;\n\t\tauthors.push(x.match(/<(?:\\w+:)?author[^>]*>(.*)/)[1]);\n\t});\n\t(data.match(/<(?:\\w+:)?commentList>([^\\u2603]*)<\\/(?:\\w+:)?commentList>/)||[\"\",\"\"])[1].split(/<\\/\\w*:?comment>/).forEach(function(x, index) {\n\t\tif(x === \"\" || x.trim() === \"\") return;\n\t\tvar y = parsexmltag(x.match(/<(?:\\w+:)?comment[^>]*>/)[0]);\n\t\tvar comment = { author: y.authorId && authors[y.authorId] ? authors[y.authorId] : undefined, ref: y.ref, guid: y.guid };\n\t\tvar cell = decode_cell(y.ref);\n\t\tif(opts.sheetRows && opts.sheetRows <= cell.r) return;\n\t\tvar textMatch = x.match(/<text>([^\\u2603]*)<\\/text>/);\n\t\tif (!textMatch || !textMatch[1]) return; // a comment may contain an empty text tag.\n\t\tvar rt = parse_si(textMatch[1]);\n\t\tcomment.r = rt.r;\n\t\tcomment.t = rt.t;\n\t\tif(opts.cellHTML) comment.h = rt.h;\n\t\tcommentList.push(comment);\n\t});\n\treturn commentList;\n}\n\nfunction write_comments_xml(data, opts) { }\n/* [MS-XLSB] 2.4.28 BrtBeginComment */\nfunction parse_BrtBeginComment(data, length) {\n\tvar out = {};\n\tout.iauthor = data.read_shift(4);\n\tvar rfx = parse_UncheckedRfX(data, 16);\n\tout.rfx = rfx.s;\n\tout.ref = encode_cell(rfx.s);\n\tdata.l += 16; /*var guid = parse_GUID(data); */\n\treturn out;\n}\n\n/* [MS-XLSB] 2.4.324 BrtCommentAuthor */\nvar parse_BrtCommentAuthor = parse_XLWideString;\n\n/* [MS-XLSB] 2.4.325 BrtCommentText */\nvar parse_BrtCommentText = parse_RichStr;\n\n/* [MS-XLSB] 2.1.7.8 Comments */\nfunction parse_comments_bin(data, opts) {\n\tvar out = [];\n\tvar authors = [];\n\tvar c = {};\n\tvar pass = false;\n\trecordhopper(data, function hopper_cmnt(val, R, RT) {\n\t\tswitch(R.n) {\n\t\t\tcase 'BrtCommentAuthor': authors.push(val); break;\n\t\t\tcase 'BrtBeginComment': c = val; break;\n\t\t\tcase 'BrtCommentText': c.t = val.t; c.h = val.h; c.r = val.r; break;\n\t\t\tcase 'BrtEndComment':\n\t\t\t\tc.author = authors[c.iauthor];\n\t\t\t\tdelete c.iauthor;\n\t\t\t\tif(opts.sheetRows && opts.sheetRows <= c.rfx.r) break;\n\t\t\t\tdelete c.rfx; out.push(c); break;\n\t\t\tcase 'BrtBeginComments': break;\n\t\t\tcase 'BrtEndComments': break;\n\t\t\tcase 'BrtBeginCommentAuthors': break;\n\t\t\tcase 'BrtEndCommentAuthors': break;\n\t\t\tcase 'BrtBeginCommentList': break;\n\t\t\tcase 'BrtEndCommentList': break;\n\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + RT + \" \" + R.n);\n\t\t}\n\t});\n\treturn out;\n}\n\nfunction write_comments_bin(data, opts) { }\n/* TODO: it will be useful to parse the function str */\nvar rc_to_a1 = (function(){\n\tvar rcregex = /(^|[^A-Za-z])R(\\[?)(-?\\d+|)\\]?C(\\[?)(-?\\d+|)\\]?/g;\n\tvar rcbase;\n\tfunction rcfunc($$,$1,$2,$3,$4,$5) {\n\t\tvar R = $3.length>0?parseInt($3,10)|0:0, C = $5.length>0?parseInt($5,10)|0:0;\n\t\tif(C<0 && $4.length === 0) C=0;\n\t\tif($4.length > 0) C += rcbase.c;\n\t\tif($2.length > 0) R += rcbase.r;\n\t\treturn $1 + encode_col(C) + encode_row(R);\n\t}\n\treturn function rc_to_a1(fstr, base) {\n\t\trcbase = base;\n\t\treturn fstr.replace(rcregex, rcfunc);\n\t};\n})();\n\n/* --- formula references point to MS-XLS --- */\n/* Small helpers */\nfunction parseread(l) { return function(blob, length) { blob.l+=l; return; }; }\nfunction parseread1(blob, length) { blob.l+=1; return; }\n\n/* Rgce Helpers */\n\n/* 2.5.51 */\nfunction parse_ColRelU(blob, length) {\n\tvar c = blob.read_shift(2);\n\treturn [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];\n}\n\n/* 2.5.198.105 */\nfunction parse_RgceArea(blob, length) {\n\tvar r=blob.read_shift(2), R=blob.read_shift(2);\n\tvar c=parse_ColRelU(blob, 2);\n\tvar C=parse_ColRelU(blob, 2);\n\treturn { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };\n}\n\n/* 2.5.198.105 TODO */\nfunction parse_RgceAreaRel(blob, length) {\n\tvar r=blob.read_shift(2), R=blob.read_shift(2);\n\tvar c=parse_ColRelU(blob, 2);\n\tvar C=parse_ColRelU(blob, 2);\n\treturn { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };\n}\n\n/* 2.5.198.109 */\nfunction parse_RgceLoc(blob, length) {\n\tvar r = blob.read_shift(2);\n\tvar c = parse_ColRelU(blob, 2);\n\treturn {r:r, c:c[0], cRel:c[1], rRel:c[2]};\n}\n\n/* 2.5.198.111 */\nfunction parse_RgceLocRel(blob, length) {\n\tvar r = blob.read_shift(2);\n\tvar cl = blob.read_shift(2);\n\tvar cRel = (cl & 0x8000) >> 15, rRel = (cl & 0x4000) >> 14;\n\tcl &= 0x3FFF;\n\tif(cRel !== 0) while(cl >= 0x100) cl -= 0x100;\n\treturn {r:r,c:cl,cRel:cRel,rRel:rRel};\n}\n\n/* Ptg Tokens */\n\n/* 2.5.198.27 */\nfunction parse_PtgArea(blob, length) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar area = parse_RgceArea(blob, 8);\n\treturn [type, area];\n}\n\n/* 2.5.198.28 */\nfunction parse_PtgArea3d(blob, length) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar ixti = blob.read_shift(2);\n\tvar area = parse_RgceArea(blob, 8);\n\treturn [type, ixti, area];\n}\n\n/* 2.5.198.29 */\nfunction parse_PtgAreaErr(blob, length) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tblob.l += 8;\n\treturn [type];\n}\n/* 2.5.198.30 */\nfunction parse_PtgAreaErr3d(blob, length) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar ixti = blob.read_shift(2);\n\tblob.l += 8;\n\treturn [type, ixti];\n}\n\n/* 2.5.198.31 */\nfunction parse_PtgAreaN(blob, length) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tvar area = parse_RgceAreaRel(blob, 8);\n\treturn [type, area];\n}\n\n/* 2.5.198.32 -- ignore this and look in PtgExtraArray for shape + values */\nfunction parse_PtgArray(blob, length) {\n\tvar type = (blob[blob.l++] & 0x60) >> 5;\n\tblob.l += 7;\n\treturn [type];\n}\n\n/* 2.5.198.33 */\nfunction parse_PtgAttrBaxcel(blob, length) {\n\tvar bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */\n\tvar bitBaxcel = 1;\n\tblob.l += 4;\n\treturn [bitSemi, bitBaxcel];\n}\n\n/* 2.5.198.34 */\nfunction parse_PtgAttrChoose(blob, length) {\n\tblob.l +=2;\n\tvar offset = blob.read_shift(2);\n\tvar o = [];\n\t/* offset is 1 less than the number of elements */\n\tfor(var i = 0; i <= offset; ++i) o.push(blob.read_shift(2));\n\treturn o;\n}\n\n/* 2.5.198.35 */\nfunction parse_PtgAttrGoto(blob, length) {\n\tvar bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += 2;\n\treturn [bitGoto, blob.read_shift(2)];\n}\n\n/* 2.5.198.36 */\nfunction parse_PtgAttrIf(blob, length) {\n\tvar bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += 2;\n\treturn [bitIf, blob.read_shift(2)];\n}\n\n/* 2.5.198.37 */\nfunction parse_PtgAttrSemi(blob, length) {\n\tvar bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;\n\tblob.l += 4;\n\treturn [bitSemi];\n}\n\n/* 2.5.198.40 (used by PtgAttrSpace and PtgAttrSpaceSemi) */\nfunction parse_PtgAttrSpaceType(blob, length) {\n\tvar type = blob.read_shift(1), cch = blob.read_shift(1);\n\treturn [type, cch];\n}\n\n/* 2.5.198.38 */\nfunction parse_PtgAttrSpace(blob, length) {\n\tblob.read_shift(2);\n\treturn parse_PtgAttrSpaceType(blob, 2);\n}\n\n/* 2.5.198.39 */\nfunction parse_PtgAttrSpaceSemi(blob, length) {\n\tblob.read_shift(2);\n\treturn parse_PtgAttrSpaceType(blob, 2);\n}\n\n/* 2.5.198.84 TODO */\nfunction parse_PtgRef(blob, length) {\n\tvar ptg = blob[blob.l] & 0x1F;\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar loc = parse_RgceLoc(blob,4);\n\treturn [type, loc];\n}\n\n/* 2.5.198.88 TODO */\nfunction parse_PtgRefN(blob, length) {\n\tvar ptg = blob[blob.l] & 0x1F;\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar loc = parse_RgceLocRel(blob,4);\n\treturn [type, loc];\n}\n\n/* 2.5.198.85 TODO */\nfunction parse_PtgRef3d(blob, length) {\n\tvar ptg = blob[blob.l] & 0x1F;\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar ixti = blob.read_shift(2); // XtiIndex\n\tvar loc = parse_RgceLoc(blob,4);\n\treturn [type, ixti, loc];\n}\n\n\n/* 2.5.198.62 TODO */\nfunction parse_PtgFunc(blob, length) {\n\tvar ptg = blob[blob.l] & 0x1F;\n\tvar type = (blob[blob.l] & 0x60)>>5;\n\tblob.l += 1;\n\tvar iftab = blob.read_shift(2);\n\treturn [FtabArgc[iftab], Ftab[iftab]];\n}\n/* 2.5.198.63 TODO */\nfunction parse_PtgFuncVar(blob, length) {\n\tblob.l++;\n\tvar cparams = blob.read_shift(1), tab = parsetab(blob);\n\treturn [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];\n}\n\nfunction parsetab(blob, length) {\n\treturn [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];\n}\n\n/* 2.5.198.41 */\nvar parse_PtgAttrSum = parseread(4);\n/* 2.5.198.43 */\nvar parse_PtgConcat = parseread1;\n\n/* 2.5.198.58 */\nfunction parse_PtgExp(blob, length) {\n\tblob.l++;\n\tvar row = blob.read_shift(2);\n\tvar col = blob.read_shift(2);\n\treturn [row, col];\n}\n\n/* 2.5.198.57 */\nfunction parse_PtgErr(blob, length) { blob.l++; return BErr[blob.read_shift(1)]; }\n\n/* 2.5.198.66 TODO */\nfunction parse_PtgInt(blob, length) { blob.l++; return blob.read_shift(2); }\n\n/* 2.5.198.42 */\nfunction parse_PtgBool(blob, length) { blob.l++; return blob.read_shift(1)!==0;}\n\n/* 2.5.198.79 */\nfunction parse_PtgNum(blob, length) { blob.l++; return parse_Xnum(blob, 8); }\n\n/* 2.5.198.89 */\nfunction parse_PtgStr(blob, length) { blob.l++; return parse_ShortXLUnicodeString(blob); }\n\n/* 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */\nfunction parse_SerAr(blob) {\n\tvar val = [];\n\tswitch((val[0] = blob.read_shift(1))) {\n\t\t/* 2.5.192.113 */\n\t\tcase 0x04: /* SerBool -- boolean */\n\t\t\tval[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';\n\t\t\tblob.l += 7; break;\n\t\t/* 2.5.192.114 */\n\t\tcase 0x10: /* SerErr -- error */\n\t\t\tval[1] = BErr[blob[blob.l]];\n\t\t\tblob.l += 8; break;\n\t\t/* 2.5.192.115 */\n\t\tcase 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */\n\t\t\tblob.l += 8; break;\n\t\t/* 2.5.192.116 */\n\t\tcase 0x01: /* SerNum -- Xnum */\n\t\t\tval[1] = parse_Xnum(blob, 8); break;\n\t\t/* 2.5.192.117 */\n\t\tcase 0x02: /* SerStr -- XLUnicodeString (<256 chars) */\n\t\t\tval[1] = parse_XLUnicodeString(blob); break;\n\t\t// default: throw \"Bad SerAr: \" + val[0]; /* Unreachable */\n\t}\n\treturn val;\n}\n\n/* 2.5.198.61 */\nfunction parse_PtgExtraMem(blob, cce) {\n\tvar count = blob.read_shift(2);\n\tvar out = [];\n\tfor(var i = 0; i != count; ++i) out.push(parse_Ref8U(blob, 8));\n\treturn out;\n}\n\n/* 2.5.198.59 */\nfunction parse_PtgExtraArray(blob) {\n\tvar cols = 1 + blob.read_shift(1); //DColByteU\n\tvar rows = 1 + blob.read_shift(2); //DRw\n\tfor(var i = 0, o=[]; i != rows && (o[i] = []); ++i)\n\t\tfor(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob);\n\treturn o;\n}\n\n/* 2.5.198.76 */\nfunction parse_PtgName(blob, length) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar nameindex = blob.read_shift(4);\n\treturn [type, 0, nameindex];\n}\n\n/* 2.5.198.77 */\nfunction parse_PtgNameX(blob, length) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar ixti = blob.read_shift(2); // XtiIndex\n\tvar nameindex = blob.read_shift(4);\n\treturn [type, ixti, nameindex];\n}\n\n/* 2.5.198.70 */\nfunction parse_PtgMemArea(blob, length) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tblob.l += 4;\n\tvar cce = blob.read_shift(2);\n\treturn [type, cce];\n}\n\n/* 2.5.198.72 */\nfunction parse_PtgMemFunc(blob, length) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tvar cce = blob.read_shift(2);\n\treturn [type, cce];\n}\n\n\n/* 2.5.198.86 */\nfunction parse_PtgRefErr(blob, length) {\n\tvar type = (blob.read_shift(1) >>> 5) & 0x03;\n\tblob.l += 4;\n\treturn [type];\n}\n\n/* 2.5.198.26 */\nvar parse_PtgAdd = parseread1;\n/* 2.5.198.45 */\nvar parse_PtgDiv = parseread1;\n/* 2.5.198.56 */\nvar parse_PtgEq = parseread1;\n/* 2.5.198.64 */\nvar parse_PtgGe = parseread1;\n/* 2.5.198.65 */\nvar parse_PtgGt = parseread1;\n/* 2.5.198.67 */\nvar parse_PtgIsect = parseread1;\n/* 2.5.198.68 */\nvar parse_PtgLe = parseread1;\n/* 2.5.198.69 */\nvar parse_PtgLt = parseread1;\n/* 2.5.198.74 */\nvar parse_PtgMissArg = parseread1;\n/* 2.5.198.75 */\nvar parse_PtgMul = parseread1;\n/* 2.5.198.78 */\nvar parse_PtgNe = parseread1;\n/* 2.5.198.80 */\nvar parse_PtgParen = parseread1;\n/* 2.5.198.81 */\nvar parse_PtgPercent = parseread1;\n/* 2.5.198.82 */\nvar parse_PtgPower = parseread1;\n/* 2.5.198.83 */\nvar parse_PtgRange = parseread1;\n/* 2.5.198.90 */\nvar parse_PtgSub = parseread1;\n/* 2.5.198.93 */\nvar parse_PtgUminus = parseread1;\n/* 2.5.198.94 */\nvar parse_PtgUnion = parseread1;\n/* 2.5.198.95 */\nvar parse_PtgUplus = parseread1;\n\n/* 2.5.198.71 */\nvar parse_PtgMemErr = parsenoop;\n/* 2.5.198.73 */\nvar parse_PtgMemNoMem = parsenoop;\n/* 2.5.198.87 */\nvar parse_PtgRefErr3d = parsenoop;\n/* 2.5.198.92 */\nvar parse_PtgTbl = parsenoop;\n\n/* 2.5.198.25 */\nvar PtgTypes = {\n\t0x01: { n:'PtgExp', f:parse_PtgExp },\n\t0x02: { n:'PtgTbl', f:parse_PtgTbl },\n\t0x03: { n:'PtgAdd', f:parse_PtgAdd },\n\t0x04: { n:'PtgSub', f:parse_PtgSub },\n\t0x05: { n:'PtgMul', f:parse_PtgMul },\n\t0x06: { n:'PtgDiv', f:parse_PtgDiv },\n\t0x07: { n:'PtgPower', f:parse_PtgPower },\n\t0x08: { n:'PtgConcat', f:parse_PtgConcat },\n\t0x09: { n:'PtgLt', f:parse_PtgLt },\n\t0x0A: { n:'PtgLe', f:parse_PtgLe },\n\t0x0B: { n:'PtgEq', f:parse_PtgEq },\n\t0x0C: { n:'PtgGe', f:parse_PtgGe },\n\t0x0D: { n:'PtgGt', f:parse_PtgGt },\n\t0x0E: { n:'PtgNe', f:parse_PtgNe },\n\t0x0F: { n:'PtgIsect', f:parse_PtgIsect },\n\t0x10: { n:'PtgUnion', f:parse_PtgUnion },\n\t0x11: { n:'PtgRange', f:parse_PtgRange },\n\t0x12: { n:'PtgUplus', f:parse_PtgUplus },\n\t0x13: { n:'PtgUminus', f:parse_PtgUminus },\n\t0x14: { n:'PtgPercent', f:parse_PtgPercent },\n\t0x15: { n:'PtgParen', f:parse_PtgParen },\n\t0x16: { n:'PtgMissArg', f:parse_PtgMissArg },\n\t0x17: { n:'PtgStr', f:parse_PtgStr },\n\t0x1C: { n:'PtgErr', f:parse_PtgErr },\n\t0x1D: { n:'PtgBool', f:parse_PtgBool },\n\t0x1E: { n:'PtgInt', f:parse_PtgInt },\n\t0x1F: { n:'PtgNum', f:parse_PtgNum },\n\t0x20: { n:'PtgArray', f:parse_PtgArray },\n\t0x21: { n:'PtgFunc', f:parse_PtgFunc },\n\t0x22: { n:'PtgFuncVar', f:parse_PtgFuncVar },\n\t0x23: { n:'PtgName', f:parse_PtgName },\n\t0x24: { n:'PtgRef', f:parse_PtgRef },\n\t0x25: { n:'PtgArea', f:parse_PtgArea },\n\t0x26: { n:'PtgMemArea', f:parse_PtgMemArea },\n\t0x27: { n:'PtgMemErr', f:parse_PtgMemErr },\n\t0x28: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },\n\t0x29: { n:'PtgMemFunc', f:parse_PtgMemFunc },\n\t0x2A: { n:'PtgRefErr', f:parse_PtgRefErr },\n\t0x2B: { n:'PtgAreaErr', f:parse_PtgAreaErr },\n\t0x2C: { n:'PtgRefN', f:parse_PtgRefN },\n\t0x2D: { n:'PtgAreaN', f:parse_PtgAreaN },\n\t0x39: { n:'PtgNameX', f:parse_PtgNameX },\n\t0x3A: { n:'PtgRef3d', f:parse_PtgRef3d },\n\t0x3B: { n:'PtgArea3d', f:parse_PtgArea3d },\n\t0x3C: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },\n\t0x3D: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },\n\t0xFF: {}\n};\n/* These are duplicated in the PtgTypes table */\nvar PtgDupes = {\n\t0x40: 0x20, 0x60: 0x20,\n\t0x41: 0x21, 0x61: 0x21,\n\t0x42: 0x22, 0x62: 0x22,\n\t0x43: 0x23, 0x63: 0x23,\n\t0x44: 0x24, 0x64: 0x24,\n\t0x45: 0x25, 0x65: 0x25,\n\t0x46: 0x26, 0x66: 0x26,\n\t0x47: 0x27, 0x67: 0x27,\n\t0x48: 0x28, 0x68: 0x28,\n\t0x49: 0x29, 0x69: 0x29,\n\t0x4A: 0x2A, 0x6A: 0x2A,\n\t0x4B: 0x2B, 0x6B: 0x2B,\n\t0x4C: 0x2C, 0x6C: 0x2C,\n\t0x4D: 0x2D, 0x6D: 0x2D,\n\t0x59: 0x39, 0x79: 0x39,\n\t0x5A: 0x3A, 0x7A: 0x3A,\n\t0x5B: 0x3B, 0x7B: 0x3B,\n\t0x5C: 0x3C, 0x7C: 0x3C,\n\t0x5D: 0x3D, 0x7D: 0x3D\n};\n(function(){for(var y in PtgDupes) PtgTypes[y] = PtgTypes[PtgDupes[y]];})();\n\nvar Ptg18 = {};\nvar Ptg19 = {\n\t0x01: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },\n\t0x02: { n:'PtgAttrIf', f:parse_PtgAttrIf },\n\t0x04: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },\n\t0x08: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },\n\t0x10: { n:'PtgAttrSum', f:parse_PtgAttrSum },\n\t0x20: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },\n\t0x40: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },\n\t0x41: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },\n\t0xFF: {}\n};\n\n/* 2.4.127 TODO */\nfunction parse_Formula(blob, length, opts) {\n\tvar cell = parse_XLSCell(blob, 6);\n\tvar val = parse_FormulaValue(blob,8);\n\tvar flags = blob.read_shift(1);\n\tblob.read_shift(1);\n\tvar chn = blob.read_shift(4);\n\tvar cbf = \"\";\n\tif(opts.biff === 5) blob.l += length-20;\n\telse cbf = parse_XLSCellParsedFormula(blob, length-20, opts);\n\treturn {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};\n}\n\n/* 2.5.133 TODO: how to emit empty strings? */\nfunction parse_FormulaValue(blob) {\n\tvar b;\n\tif(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];\n\tswitch(blob[blob.l]) {\n\t\tcase 0x00: blob.l += 8; return [\"String\", 's'];\n\t\tcase 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];\n\t\tcase 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];\n\t\tcase 0x03: blob.l += 8; return [\"\",'s'];\n\t}\n}\n\n/* 2.5.198.103 */\nfunction parse_RgbExtra(blob, length, rgce, opts) {\n\tif(opts.biff < 8) return parsenoop(blob, length);\n\tvar target = blob.l + length;\n\tvar o = [];\n\tfor(var i = 0; i !== rgce.length; ++i) {\n\t\tswitch(rgce[i][0]) {\n\t\t\tcase 'PtgArray': /* PtgArray -> PtgExtraArray */\n\t\t\t\trgce[i][1] = parse_PtgExtraArray(blob);\n\t\t\t\to.push(rgce[i][1]);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */\n\t\t\t\trgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1]);\n\t\t\t\to.push(rgce[i][2]);\n\t\t\t\tbreak;\n\t\t\tdefault: break;\n\t\t}\n\t}\n\tlength = target - blob.l;\n\tif(length !== 0) o.push(parsenoop(blob, length));\n\treturn o;\n}\n\n/* 2.5.198.21 */\nfunction parse_NameParsedFormula(blob, length, opts, cce) {\n\tvar target = blob.l + length;\n\tvar rgce = parse_Rgce(blob, cce);\n\tvar rgcb;\n\tif(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);\n\treturn [rgce, rgcb];\n}\n\n/* 2.5.198.3 TODO */\nfunction parse_XLSCellParsedFormula(blob, length, opts) {\n\tvar target = blob.l + length;\n\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\tvar rgce = parse_Rgce(blob, cce);\n\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, length - cce - 2, rgce, opts);\n\treturn [rgce, rgcb];\n}\n\n/* 2.5.198.118 TODO */\nfunction parse_SharedParsedFormula(blob, length, opts) {\n\tvar target = blob.l + length;\n\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\tvar rgce = parse_Rgce(blob, cce);\n\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n\treturn [rgce, rgcb];\n}\n\n/* 2.5.198.1 TODO */\nfunction parse_ArrayParsedFormula(blob, length, opts, ref) {\n\tvar target = blob.l + length;\n\tvar rgcb, cce = blob.read_shift(2); // length of rgce\n\tif(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];\n\tvar rgce = parse_Rgce(blob, cce);\n\tif(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);\n\treturn [rgce, rgcb];\n}\n\n/* 2.5.198.104 */\nfunction parse_Rgce(blob, length) {\n\tvar target = blob.l + length;\n\tvar R, id, ptgs = [];\n\twhile(target != blob.l) {\n\t\tlength = target - blob.l;\n\t\tid = blob[blob.l];\n\t\tR = PtgTypes[id];\n\t\t//console.log(\"ptg\", id, R)\n\t\tif(id === 0x18 || id === 0x19) {\n\t\t\tid = blob[blob.l + 1];\n\t\t\tR = (id === 0x18 ? Ptg18 : Ptg19)[id];\n\t\t}\n\t\tif(!R || !R.f) { ptgs.push(parsenoop(blob, length)); }\n\t\telse { ptgs.push([R.n, R.f(blob, length)]); }\n\t}\n\treturn ptgs;\n}\n\nfunction mapper(x) { return x.map(function f2(y) { return y[1];}).join(\",\");}\n\n/* 2.2.2 + Magic TODO */\nfunction stringify_formula(formula, range, cell, supbooks, opts) {\n\tif(opts !== undefined && opts.biff === 5) return \"BIFF5??\";\n\tvar _range = range !== undefined ? range : {s:{c:0, r:0}};\n\tvar stack = [], e1, e2, type, c, ixti, nameidx, r;\n\tif(!formula[0] || !formula[0][0]) return \"\";\n\t//console.log(\"--\",cell,formula[0])\n\tfor(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {\n\t\tvar f = formula[0][ff];\n\t\t//console.log(\"++\",f, stack)\n\t\tswitch(f[0]) {\n\t\t/* 2.2.2.1 Unary Operator Tokens */\n\t\t\t/* 2.5.198.93 */\n\t\t\tcase 'PtgUminus': stack.push(\"-\" + stack.pop()); break;\n\t\t\t/* 2.5.198.95 */\n\t\t\tcase 'PtgUplus': stack.push(\"+\" + stack.pop()); break;\n\t\t\t/* 2.5.198.81 */\n\t\t\tcase 'PtgPercent': stack.push(stack.pop() + \"%\"); break;\n\n\t\t/* 2.2.2.1 Binary Value Operator Token */\n\t\t\t/* 2.5.198.26 */\n\t\t\tcase 'PtgAdd':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"+\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.90 */\n\t\t\tcase 'PtgSub':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"-\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.75 */\n\t\t\tcase 'PtgMul':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"*\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.45 */\n\t\t\tcase 'PtgDiv':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"/\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.82 */\n\t\t\tcase 'PtgPower':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"^\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.43 */\n\t\t\tcase 'PtgConcat':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"&\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.69 */\n\t\t\tcase 'PtgLt':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"<\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.68 */\n\t\t\tcase 'PtgLe':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"<=\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.56 */\n\t\t\tcase 'PtgEq':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"=\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.64 */\n\t\t\tcase 'PtgGe':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\">=\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.65 */\n\t\t\tcase 'PtgGt':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\">\"+e1);\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.78 */\n\t\t\tcase 'PtgNe':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\"<>\"+e1);\n\t\t\t\tbreak;\n\n\t\t/* 2.2.2.1 Binary Reference Operator Token */\n\t\t\t/* 2.5.198.67 */\n\t\t\tcase 'PtgIsect':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\" \"+e1);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgUnion':\n\t\t\t\te1 = stack.pop(); e2 = stack.pop();\n\t\t\t\tstack.push(e2+\",\"+e1);\n\t\t\t\tbreak;\n\t\t\tcase 'PtgRange': break;\n\n\t\t/* 2.2.2.3 Control Tokens \"can be ignored\" */\n\t\t\t/* 2.5.198.34 */\n\t\t\tcase 'PtgAttrChoose': break;\n\t\t\t/* 2.5.198.35 */\n\t\t\tcase 'PtgAttrGoto': break;\n\t\t\t/* 2.5.198.36 */\n\t\t\tcase 'PtgAttrIf': break;\n\n\n\t\t\t/* 2.5.198.84 */\n\t\t\tcase 'PtgRef':\n\t\t\t\ttype = f[1][0]; c = shift_cell_xls(decode_cell(encode_cell(f[1][1])), _range);\n\t\t\t\tstack.push(encode_cell(c));\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.88 */\n\t\t\tcase 'PtgRefN':\n\t\t\t\ttype = f[1][0]; c = shift_cell_xls(decode_cell(encode_cell(f[1][1])), cell);\n\t\t\t\tstack.push(encode_cell(c));\n\t\t\t\tbreak;\n\t\t\tcase 'PtgRef3d': // TODO: lots of stuff\n\t\t\t\ttype = f[1][0]; ixti = f[1][1]; c = shift_cell_xls(f[1][2], _range);\n\t\t\t\tstack.push(supbooks[1][ixti+1]+\"!\"+encode_cell(c));\n\t\t\t\tbreak;\n\n\t\t/* Function Call */\n\t\t\t/* 2.5.198.62 */\n\t\t\tcase 'PtgFunc':\n\t\t\t/* 2.5.198.63 */\n\t\t\tcase 'PtgFuncVar':\n\t\t\t\t/* f[1] = [argc, func] */\n\t\t\t\tvar argc = f[1][0], func = f[1][1];\n\t\t\t\tif(!argc) argc = 0;\n\t\t\t\tvar args = stack.slice(-argc);\n\t\t\t\tstack.length -= argc;\n\t\t\t\tif(func === 'User') func = args.shift();\n\t\t\t\tstack.push(func + \"(\" + args.join(\",\") + \")\");\n\t\t\t\tbreak;\n\n\t\t\t/* 2.5.198.42 */\n\t\t\tcase 'PtgBool': stack.push(f[1] ? \"TRUE\" : \"FALSE\"); break;\n\t\t\t/* 2.5.198.66 */\n\t\t\tcase 'PtgInt': stack.push(f[1]); break;\n\t\t\t/* 2.5.198.79 TODO: precision? */\n\t\t\tcase 'PtgNum': stack.push(String(f[1])); break;\n\t\t\t/* 2.5.198.89 */\n\t\t\tcase 'PtgStr': stack.push('\"' + f[1] + '\"'); break;\n\t\t\t/* 2.5.198.57 */\n\t\t\tcase 'PtgErr': stack.push(f[1]); break;\n\t\t\t/* 2.5.198.27 TODO: fixed points */\n\t\t\tcase 'PtgArea':\n\t\t\t\ttype = f[1][0]; r = shift_range_xls(f[1][1], _range);\n\t\t\t\tstack.push(encode_range(r));\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.28 */\n\t\t\tcase 'PtgArea3d': // TODO: lots of stuff\n\t\t\t\ttype = f[1][0]; ixti = f[1][1]; r = f[1][2];\n\t\t\t\tstack.push(supbooks[1][ixti+1]+\"!\"+encode_range(r));\n\t\t\t\tbreak;\n\t\t\t/* 2.5.198.41 */\n\t\t\tcase 'PtgAttrSum':\n\t\t\t\tstack.push(\"SUM(\" + stack.pop() + \")\");\n\t\t\t\tbreak;\n\n\t\t/* Expression Prefixes */\n\t\t\t/* 2.5.198.37 */\n\t\t\tcase 'PtgAttrSemi': break;\n\n\t\t\t/* 2.5.97.60 TODO: do something different for revisions */\n\t\t\tcase 'PtgName':\n\t\t\t\t/* f[1] = type, 0, nameindex */\n\t\t\t\tnameidx = f[1][2];\n\t\t\t\tvar lbl = supbooks[0][nameidx];\n\t\t\t\tvar name = lbl.Name;\n\t\t\t\tif(name in XLSXFutureFunctions) name = XLSXFutureFunctions[name];\n\t\t\t\tstack.push(name);\n\t\t\t\tbreak;\n\n\t\t\t/* 2.5.97.61 TODO: do something different for revisions */\n\t\t\tcase 'PtgNameX':\n\t\t\t\t/* f[1] = type, ixti, nameindex */\n\t\t\t\tvar bookidx = f[1][1]; nameidx = f[1][2]; var externbook;\n\t\t\t\t/* TODO: Properly handle missing values */\n\t\t\t\tif(supbooks[bookidx+1]) externbook = supbooks[bookidx+1][nameidx];\n\t\t\t\telse if(supbooks[bookidx-1]) externbook = supbooks[bookidx-1][nameidx];\n\t\t\t\tif(!externbook) externbook = {body: \"??NAMEX??\"};\n\t\t\t\tstack.push(externbook.body);\n\t\t\t\tbreak;\n\n\t\t/* 2.2.2.4 Display Tokens */\n\t\t\t/* 2.5.198.80 */\n\t\t\tcase 'PtgParen': stack.push('(' + stack.pop() + ')'); break;\n\n\t\t\t/* 2.5.198.86 */\n\t\t\tcase 'PtgRefErr': stack.push('#REF!'); break;\n\n\t\t/* */\n\t\t\t/* 2.5.198.58 TODO */\n\t\t\tcase 'PtgExp':\n\t\t\t\tc = {c:f[1][1],r:f[1][0]};\n\t\t\t\tvar q = {c: cell.c, r:cell.r};\n\t\t\t\tif(supbooks.sharedf[encode_cell(c)]) {\n\t\t\t\t\tvar parsedf = (supbooks.sharedf[encode_cell(c)]);\n\t\t\t\t\tstack.push(stringify_formula(parsedf, _range, q, supbooks, opts));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar fnd = false;\n\t\t\t\t\tfor(e1=0;e1!=supbooks.arrayf.length; ++e1) {\n\t\t\t\t\t\t/* TODO: should be something like range_has */\n\t\t\t\t\t\te2 = supbooks.arrayf[e1];\n\t\t\t\t\t\tif(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;\n\t\t\t\t\t\tif(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;\n\t\t\t\t\t\tstack.push(stringify_formula(e2[1], _range, q, supbooks, opts));\n\t\t\t\t\t}\n\t\t\t\t\tif(!fnd) stack.push(f[1]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\t/* 2.5.198.32 TODO */\n\t\t\tcase 'PtgArray':\n\t\t\t\tstack.push(\"{\" + f[1].map(mapper).join(\";\") + \"}\");\n\t\t\t\tbreak;\n\n\t\t/* 2.2.2.5 Mem Tokens */\n\t\t\t/* 2.5.198.70 TODO: confirm this is a non-display */\n\t\t\tcase 'PtgMemArea':\n\t\t\t\t//stack.push(\"(\" + f[2].map(encode_range).join(\",\") + \")\");\n\t\t\t\tbreak;\n\n\t\t\t/* 2.5.198.38 TODO */\n\t\t\tcase 'PtgAttrSpace': break;\n\n\t\t\t/* 2.5.198.92 TODO */\n\t\t\tcase 'PtgTbl': break;\n\n\t\t\t/* 2.5.198.71 */\n\t\t\tcase 'PtgMemErr': break;\n\n\t\t\t/* 2.5.198.74 */\n\t\t\tcase 'PtgMissArg':\n\t\t\t\tstack.push(\"\");\n\t\t\t\tbreak;\n\n\t\t\t/* 2.5.198.29 TODO */\n\t\t\tcase 'PtgAreaErr': break;\n\n\t\t\t/* 2.5.198.31 TODO */\n\t\t\tcase 'PtgAreaN': stack.push(\"\"); break;\n\n\t\t\t/* 2.5.198.87 TODO */\n\t\t\tcase 'PtgRefErr3d': break;\n\n\t\t\t/* 2.5.198.72 TODO */\n\t\t\tcase 'PtgMemFunc': break;\n\n\t\t\tdefault: throw 'Unrecognized Formula Token: ' + f;\n\t\t}\n\t\t//console.log(\"::\",f, stack)\n\t}\n\t//console.log(\"--\",stack);\n\treturn stack[0];\n}\n\n/* [MS-XLSB] 2.5.97.4 CellParsedFormula TODO: use similar logic to js-xls */\nfunction parse_XLSBCellParsedFormula(data, length) {\n\tvar cce = data.read_shift(4);\n\treturn parsenoop(data, length-4);\n}\n/* [MS-XLS] 2.5.198.44 */\nvar PtgDataType = {\n\t0x1: \"REFERENCE\", // reference to range\n\t0x2: \"VALUE\", // single value\n\t0x3: \"ARRAY\" // array of values\n};\n\n/* [MS-XLS] 2.5.198.4 */\nvar Cetab = {\n\t0x0000: 'BEEP',\n\t0x0001: 'OPEN',\n\t0x0002: 'OPEN.LINKS',\n\t0x0003: 'CLOSE.ALL',\n\t0x0004: 'SAVE',\n\t0x0005: 'SAVE.AS',\n\t0x0006: 'FILE.DELETE',\n\t0x0007: 'PAGE.SETUP',\n\t0x0008: 'PRINT',\n\t0x0009: 'PRINTER.SETUP',\n\t0x000A: 'QUIT',\n\t0x000B: 'NEW.WINDOW',\n\t0x000C: 'ARRANGE.ALL',\n\t0x000D: 'WINDOW.SIZE',\n\t0x000E: 'WINDOW.MOVE',\n\t0x000F: 'FULL',\n\t0x0010: 'CLOSE',\n\t0x0011: 'RUN',\n\t0x0016: 'SET.PRINT.AREA',\n\t0x0017: 'SET.PRINT.TITLES',\n\t0x0018: 'SET.PAGE.BREAK',\n\t0x0019: 'REMOVE.PAGE.BREAK',\n\t0x001A: 'FONT',\n\t0x001B: 'DISPLAY',\n\t0x001C: 'PROTECT.DOCUMENT',\n\t0x001D: 'PRECISION',\n\t0x001E: 'A1.R1C1',\n\t0x001F: 'CALCULATE.NOW',\n\t0x0020: 'CALCULATION',\n\t0x0022: 'DATA.FIND',\n\t0x0023: 'EXTRACT',\n\t0x0024: 'DATA.DELETE',\n\t0x0025: 'SET.DATABASE',\n\t0x0026: 'SET.CRITERIA',\n\t0x0027: 'SORT',\n\t0x0028: 'DATA.SERIES',\n\t0x0029: 'TABLE',\n\t0x002A: 'FORMAT.NUMBER',\n\t0x002B: 'ALIGNMENT',\n\t0x002C: 'STYLE',\n\t0x002D: 'BORDER',\n\t0x002E: 'CELL.PROTECTION',\n\t0x002F: 'COLUMN.WIDTH',\n\t0x0030: 'UNDO',\n\t0x0031: 'CUT',\n\t0x0032: 'COPY',\n\t0x0033: 'PASTE',\n\t0x0034: 'CLEAR',\n\t0x0035: 'PASTE.SPECIAL',\n\t0x0036: 'EDIT.DELETE',\n\t0x0037: 'INSERT',\n\t0x0038: 'FILL.RIGHT',\n\t0x0039: 'FILL.DOWN',\n\t0x003D: 'DEFINE.NAME',\n\t0x003E: 'CREATE.NAMES',\n\t0x003F: 'FORMULA.GOTO',\n\t0x0040: 'FORMULA.FIND',\n\t0x0041: 'SELECT.LAST.CELL',\n\t0x0042: 'SHOW.ACTIVE.CELL',\n\t0x0043: 'GALLERY.AREA',\n\t0x0044: 'GALLERY.BAR',\n\t0x0045: 'GALLERY.COLUMN',\n\t0x0046: 'GALLERY.LINE',\n\t0x0047: 'GALLERY.PIE',\n\t0x0048: 'GALLERY.SCATTER',\n\t0x0049: 'COMBINATION',\n\t0x004A: 'PREFERRED',\n\t0x004B: 'ADD.OVERLAY',\n\t0x004C: 'GRIDLINES',\n\t0x004D: 'SET.PREFERRED',\n\t0x004E: 'AXES',\n\t0x004F: 'LEGEND',\n\t0x0050: 'ATTACH.TEXT',\n\t0x0051: 'ADD.ARROW',\n\t0x0052: 'SELECT.CHART',\n\t0x0053: 'SELECT.PLOT.AREA',\n\t0x0054: 'PATTERNS',\n\t0x0055: 'MAIN.CHART',\n\t0x0056: 'OVERLAY',\n\t0x0057: 'SCALE',\n\t0x0058: 'FORMAT.LEGEND',\n\t0x0059: 'FORMAT.TEXT',\n\t0x005A: 'EDIT.REPEAT',\n\t0x005B: 'PARSE',\n\t0x005C: 'JUSTIFY',\n\t0x005D: 'HIDE',\n\t0x005E: 'UNHIDE',\n\t0x005F: 'WORKSPACE',\n\t0x0060: 'FORMULA',\n\t0x0061: 'FORMULA.FILL',\n\t0x0062: 'FORMULA.ARRAY',\n\t0x0063: 'DATA.FIND.NEXT',\n\t0x0064: 'DATA.FIND.PREV',\n\t0x0065: 'FORMULA.FIND.NEXT',\n\t0x0066: 'FORMULA.FIND.PREV',\n\t0x0067: 'ACTIVATE',\n\t0x0068: 'ACTIVATE.NEXT',\n\t0x0069: 'ACTIVATE.PREV',\n\t0x006A: 'UNLOCKED.NEXT',\n\t0x006B: 'UNLOCKED.PREV',\n\t0x006C: 'COPY.PICTURE',\n\t0x006D: 'SELECT',\n\t0x006E: 'DELETE.NAME',\n\t0x006F: 'DELETE.FORMAT',\n\t0x0070: 'VLINE',\n\t0x0071: 'HLINE',\n\t0x0072: 'VPAGE',\n\t0x0073: 'HPAGE',\n\t0x0074: 'VSCROLL',\n\t0x0075: 'HSCROLL',\n\t0x0076: 'ALERT',\n\t0x0077: 'NEW',\n\t0x0078: 'CANCEL.COPY',\n\t0x0079: 'SHOW.CLIPBOARD',\n\t0x007A: 'MESSAGE',\n\t0x007C: 'PASTE.LINK',\n\t0x007D: 'APP.ACTIVATE',\n\t0x007E: 'DELETE.ARROW',\n\t0x007F: 'ROW.HEIGHT',\n\t0x0080: 'FORMAT.MOVE',\n\t0x0081: 'FORMAT.SIZE',\n\t0x0082: 'FORMULA.REPLACE',\n\t0x0083: 'SEND.KEYS',\n\t0x0084: 'SELECT.SPECIAL',\n\t0x0085: 'APPLY.NAMES',\n\t0x0086: 'REPLACE.FONT',\n\t0x0087: 'FREEZE.PANES',\n\t0x0088: 'SHOW.INFO',\n\t0x0089: 'SPLIT',\n\t0x008A: 'ON.WINDOW',\n\t0x008B: 'ON.DATA',\n\t0x008C: 'DISABLE.INPUT',\n\t0x008E: 'OUTLINE',\n\t0x008F: 'LIST.NAMES',\n\t0x0090: 'FILE.CLOSE',\n\t0x0091: 'SAVE.WORKBOOK',\n\t0x0092: 'DATA.FORM',\n\t0x0093: 'COPY.CHART',\n\t0x0094: 'ON.TIME',\n\t0x0095: 'WAIT',\n\t0x0096: 'FORMAT.FONT',\n\t0x0097: 'FILL.UP',\n\t0x0098: 'FILL.LEFT',\n\t0x0099: 'DELETE.OVERLAY',\n\t0x009B: 'SHORT.MENUS',\n\t0x009F: 'SET.UPDATE.STATUS',\n\t0x00A1: 'COLOR.PALETTE',\n\t0x00A2: 'DELETE.STYLE',\n\t0x00A3: 'WINDOW.RESTORE',\n\t0x00A4: 'WINDOW.MAXIMIZE',\n\t0x00A6: 'CHANGE.LINK',\n\t0x00A7: 'CALCULATE.DOCUMENT',\n\t0x00A8: 'ON.KEY',\n\t0x00A9: 'APP.RESTORE',\n\t0x00AA: 'APP.MOVE',\n\t0x00AB: 'APP.SIZE',\n\t0x00AC: 'APP.MINIMIZE',\n\t0x00AD: 'APP.MAXIMIZE',\n\t0x00AE: 'BRING.TO.FRONT',\n\t0x00AF: 'SEND.TO.BACK',\n\t0x00B9: 'MAIN.CHART.TYPE',\n\t0x00BA: 'OVERLAY.CHART.TYPE',\n\t0x00BB: 'SELECT.END',\n\t0x00BC: 'OPEN.MAIL',\n\t0x00BD: 'SEND.MAIL',\n\t0x00BE: 'STANDARD.FONT',\n\t0x00BF: 'CONSOLIDATE',\n\t0x00C0: 'SORT.SPECIAL',\n\t0x00C1: 'GALLERY.3D.AREA',\n\t0x00C2: 'GALLERY.3D.COLUMN',\n\t0x00C3: 'GALLERY.3D.LINE',\n\t0x00C4: 'GALLERY.3D.PIE',\n\t0x00C5: 'VIEW.3D',\n\t0x00C6: 'GOAL.SEEK',\n\t0x00C7: 'WORKGROUP',\n\t0x00C8: 'FILL.GROUP',\n\t0x00C9: 'UPDATE.LINK',\n\t0x00CA: 'PROMOTE',\n\t0x00CB: 'DEMOTE',\n\t0x00CC: 'SHOW.DETAIL',\n\t0x00CE: 'UNGROUP',\n\t0x00CF: 'OBJECT.PROPERTIES',\n\t0x00D0: 'SAVE.NEW.OBJECT',\n\t0x00D1: 'SHARE',\n\t0x00D2: 'SHARE.NAME',\n\t0x00D3: 'DUPLICATE',\n\t0x00D4: 'APPLY.STYLE',\n\t0x00D5: 'ASSIGN.TO.OBJECT',\n\t0x00D6: 'OBJECT.PROTECTION',\n\t0x00D7: 'HIDE.OBJECT',\n\t0x00D8: 'SET.EXTRACT',\n\t0x00D9: 'CREATE.PUBLISHER',\n\t0x00DA: 'SUBSCRIBE.TO',\n\t0x00DB: 'ATTRIBUTES',\n\t0x00DC: 'SHOW.TOOLBAR',\n\t0x00DE: 'PRINT.PREVIEW',\n\t0x00DF: 'EDIT.COLOR',\n\t0x00E0: 'SHOW.LEVELS',\n\t0x00E1: 'FORMAT.MAIN',\n\t0x00E2: 'FORMAT.OVERLAY',\n\t0x00E3: 'ON.RECALC',\n\t0x00E4: 'EDIT.SERIES',\n\t0x00E5: 'DEFINE.STYLE',\n\t0x00F0: 'LINE.PRINT',\n\t0x00F3: 'ENTER.DATA',\n\t0x00F9: 'GALLERY.RADAR',\n\t0x00FA: 'MERGE.STYLES',\n\t0x00FB: 'EDITION.OPTIONS',\n\t0x00FC: 'PASTE.PICTURE',\n\t0x00FD: 'PASTE.PICTURE.LINK',\n\t0x00FE: 'SPELLING',\n\t0x0100: 'ZOOM',\n\t0x0103: 'INSERT.OBJECT',\n\t0x0104: 'WINDOW.MINIMIZE',\n\t0x0109: 'SOUND.NOTE',\n\t0x010A: 'SOUND.PLAY',\n\t0x010B: 'FORMAT.SHAPE',\n\t0x010C: 'EXTEND.POLYGON',\n\t0x010D: 'FORMAT.AUTO',\n\t0x0110: 'GALLERY.3D.BAR',\n\t0x0111: 'GALLERY.3D.SURFACE',\n\t0x0112: 'FILL.AUTO',\n\t0x0114: 'CUSTOMIZE.TOOLBAR',\n\t0x0115: 'ADD.TOOL',\n\t0x0116: 'EDIT.OBJECT',\n\t0x0117: 'ON.DOUBLECLICK',\n\t0x0118: 'ON.ENTRY',\n\t0x0119: 'WORKBOOK.ADD',\n\t0x011A: 'WORKBOOK.MOVE',\n\t0x011B: 'WORKBOOK.COPY',\n\t0x011C: 'WORKBOOK.OPTIONS',\n\t0x011D: 'SAVE.WORKSPACE',\n\t0x0120: 'CHART.WIZARD',\n\t0x0121: 'DELETE.TOOL',\n\t0x0122: 'MOVE.TOOL',\n\t0x0123: 'WORKBOOK.SELECT',\n\t0x0124: 'WORKBOOK.ACTIVATE',\n\t0x0125: 'ASSIGN.TO.TOOL',\n\t0x0127: 'COPY.TOOL',\n\t0x0128: 'RESET.TOOL',\n\t0x0129: 'CONSTRAIN.NUMERIC',\n\t0x012A: 'PASTE.TOOL',\n\t0x012E: 'WORKBOOK.NEW',\n\t0x0131: 'SCENARIO.CELLS',\n\t0x0132: 'SCENARIO.DELETE',\n\t0x0133: 'SCENARIO.ADD',\n\t0x0134: 'SCENARIO.EDIT',\n\t0x0135: 'SCENARIO.SHOW',\n\t0x0136: 'SCENARIO.SHOW.NEXT',\n\t0x0137: 'SCENARIO.SUMMARY',\n\t0x0138: 'PIVOT.TABLE.WIZARD',\n\t0x0139: 'PIVOT.FIELD.PROPERTIES',\n\t0x013A: 'PIVOT.FIELD',\n\t0x013B: 'PIVOT.ITEM',\n\t0x013C: 'PIVOT.ADD.FIELDS',\n\t0x013E: 'OPTIONS.CALCULATION',\n\t0x013F: 'OPTIONS.EDIT',\n\t0x0140: 'OPTIONS.VIEW',\n\t0x0141: 'ADDIN.MANAGER',\n\t0x0142: 'MENU.EDITOR',\n\t0x0143: 'ATTACH.TOOLBARS',\n\t0x0144: 'VBAActivate',\n\t0x0145: 'OPTIONS.CHART',\n\t0x0148: 'VBA.INSERT.FILE',\n\t0x014A: 'VBA.PROCEDURE.DEFINITION',\n\t0x0150: 'ROUTING.SLIP',\n\t0x0152: 'ROUTE.DOCUMENT',\n\t0x0153: 'MAIL.LOGON',\n\t0x0156: 'INSERT.PICTURE',\n\t0x0157: 'EDIT.TOOL',\n\t0x0158: 'GALLERY.DOUGHNUT',\n\t0x015E: 'CHART.TREND',\n\t0x0160: 'PIVOT.ITEM.PROPERTIES',\n\t0x0162: 'WORKBOOK.INSERT',\n\t0x0163: 'OPTIONS.TRANSITION',\n\t0x0164: 'OPTIONS.GENERAL',\n\t0x0172: 'FILTER.ADVANCED',\n\t0x0175: 'MAIL.ADD.MAILER',\n\t0x0176: 'MAIL.DELETE.MAILER',\n\t0x0177: 'MAIL.REPLY',\n\t0x0178: 'MAIL.REPLY.ALL',\n\t0x0179: 'MAIL.FORWARD',\n\t0x017A: 'MAIL.NEXT.LETTER',\n\t0x017B: 'DATA.LABEL',\n\t0x017C: 'INSERT.TITLE',\n\t0x017D: 'FONT.PROPERTIES',\n\t0x017E: 'MACRO.OPTIONS',\n\t0x017F: 'WORKBOOK.HIDE',\n\t0x0180: 'WORKBOOK.UNHIDE',\n\t0x0181: 'WORKBOOK.DELETE',\n\t0x0182: 'WORKBOOK.NAME',\n\t0x0184: 'GALLERY.CUSTOM',\n\t0x0186: 'ADD.CHART.AUTOFORMAT',\n\t0x0187: 'DELETE.CHART.AUTOFORMAT',\n\t0x0188: 'CHART.ADD.DATA',\n\t0x0189: 'AUTO.OUTLINE',\n\t0x018A: 'TAB.ORDER',\n\t0x018B: 'SHOW.DIALOG',\n\t0x018C: 'SELECT.ALL',\n\t0x018D: 'UNGROUP.SHEETS',\n\t0x018E: 'SUBTOTAL.CREATE',\n\t0x018F: 'SUBTOTAL.REMOVE',\n\t0x0190: 'RENAME.OBJECT',\n\t0x019C: 'WORKBOOK.SCROLL',\n\t0x019D: 'WORKBOOK.NEXT',\n\t0x019E: 'WORKBOOK.PREV',\n\t0x019F: 'WORKBOOK.TAB.SPLIT',\n\t0x01A0: 'FULL.SCREEN',\n\t0x01A1: 'WORKBOOK.PROTECT',\n\t0x01A4: 'SCROLLBAR.PROPERTIES',\n\t0x01A5: 'PIVOT.SHOW.PAGES',\n\t0x01A6: 'TEXT.TO.COLUMNS',\n\t0x01A7: 'FORMAT.CHARTTYPE',\n\t0x01A8: 'LINK.FORMAT',\n\t0x01A9: 'TRACER.DISPLAY',\n\t0x01AE: 'TRACER.NAVIGATE',\n\t0x01AF: 'TRACER.CLEAR',\n\t0x01B0: 'TRACER.ERROR',\n\t0x01B1: 'PIVOT.FIELD.GROUP',\n\t0x01B2: 'PIVOT.FIELD.UNGROUP',\n\t0x01B3: 'CHECKBOX.PROPERTIES',\n\t0x01B4: 'LABEL.PROPERTIES',\n\t0x01B5: 'LISTBOX.PROPERTIES',\n\t0x01B6: 'EDITBOX.PROPERTIES',\n\t0x01B7: 'PIVOT.REFRESH',\n\t0x01B8: 'LINK.COMBO',\n\t0x01B9: 'OPEN.TEXT',\n\t0x01BA: 'HIDE.DIALOG',\n\t0x01BB: 'SET.DIALOG.FOCUS',\n\t0x01BC: 'ENABLE.OBJECT',\n\t0x01BD: 'PUSHBUTTON.PROPERTIES',\n\t0x01BE: 'SET.DIALOG.DEFAULT',\n\t0x01BF: 'FILTER',\n\t0x01C0: 'FILTER.SHOW.ALL',\n\t0x01C1: 'CLEAR.OUTLINE',\n\t0x01C2: 'FUNCTION.WIZARD',\n\t0x01C3: 'ADD.LIST.ITEM',\n\t0x01C4: 'SET.LIST.ITEM',\n\t0x01C5: 'REMOVE.LIST.ITEM',\n\t0x01C6: 'SELECT.LIST.ITEM',\n\t0x01C7: 'SET.CONTROL.VALUE',\n\t0x01C8: 'SAVE.COPY.AS',\n\t0x01CA: 'OPTIONS.LISTS.ADD',\n\t0x01CB: 'OPTIONS.LISTS.DELETE',\n\t0x01CC: 'SERIES.AXES',\n\t0x01CD: 'SERIES.X',\n\t0x01CE: 'SERIES.Y',\n\t0x01CF: 'ERRORBAR.X',\n\t0x01D0: 'ERRORBAR.Y',\n\t0x01D1: 'FORMAT.CHART',\n\t0x01D2: 'SERIES.ORDER',\n\t0x01D3: 'MAIL.LOGOFF',\n\t0x01D4: 'CLEAR.ROUTING.SLIP',\n\t0x01D5: 'APP.ACTIVATE.MICROSOFT',\n\t0x01D6: 'MAIL.EDIT.MAILER',\n\t0x01D7: 'ON.SHEET',\n\t0x01D8: 'STANDARD.WIDTH',\n\t0x01D9: 'SCENARIO.MERGE',\n\t0x01DA: 'SUMMARY.INFO',\n\t0x01DB: 'FIND.FILE',\n\t0x01DC: 'ACTIVE.CELL.FONT',\n\t0x01DD: 'ENABLE.TIPWIZARD',\n\t0x01DE: 'VBA.MAKE.ADDIN',\n\t0x01E0: 'INSERTDATATABLE',\n\t0x01E1: 'WORKGROUP.OPTIONS',\n\t0x01E2: 'MAIL.SEND.MAILER',\n\t0x01E5: 'AUTOCORRECT',\n\t0x01E9: 'POST.DOCUMENT',\n\t0x01EB: 'PICKLIST',\n\t0x01ED: 'VIEW.SHOW',\n\t0x01EE: 'VIEW.DEFINE',\n\t0x01EF: 'VIEW.DELETE',\n\t0x01FD: 'SHEET.BACKGROUND',\n\t0x01FE: 'INSERT.MAP.OBJECT',\n\t0x01FF: 'OPTIONS.MENONO',\n\t0x0205: 'MSOCHECKS',\n\t0x0206: 'NORMAL',\n\t0x0207: 'LAYOUT',\n\t0x0208: 'RM.PRINT.AREA',\n\t0x0209: 'CLEAR.PRINT.AREA',\n\t0x020A: 'ADD.PRINT.AREA',\n\t0x020B: 'MOVE.BRK',\n\t0x0221: 'HIDECURR.NOTE',\n\t0x0222: 'HIDEALL.NOTES',\n\t0x0223: 'DELETE.NOTE',\n\t0x0224: 'TRAVERSE.NOTES',\n\t0x0225: 'ACTIVATE.NOTES',\n\t0x026C: 'PROTECT.REVISIONS',\n\t0x026D: 'UNPROTECT.REVISIONS',\n\t0x0287: 'OPTIONS.ME',\n\t0x028D: 'WEB.PUBLISH',\n\t0x029B: 'NEWWEBQUERY',\n\t0x02A1: 'PIVOT.TABLE.CHART',\n\t0x02F1: 'OPTIONS.SAVE',\n\t0x02F3: 'OPTIONS.SPELL',\n\t0x0328: 'HIDEALL.INKANNOTS'\n};\n\n/* [MS-XLS] 2.5.198.17 */\nvar Ftab = {\n\t0x0000: 'COUNT',\n\t0x0001: 'IF',\n\t0x0002: 'ISNA',\n\t0x0003: 'ISERROR',\n\t0x0004: 'SUM',\n\t0x0005: 'AVERAGE',\n\t0x0006: 'MIN',\n\t0x0007: 'MAX',\n\t0x0008: 'ROW',\n\t0x0009: 'COLUMN',\n\t0x000A: 'NA',\n\t0x000B: 'NPV',\n\t0x000C: 'STDEV',\n\t0x000D: 'DOLLAR',\n\t0x000E: 'FIXED',\n\t0x000F: 'SIN',\n\t0x0010: 'COS',\n\t0x0011: 'TAN',\n\t0x0012: 'ATAN',\n\t0x0013: 'PI',\n\t0x0014: 'SQRT',\n\t0x0015: 'EXP',\n\t0x0016: 'LN',\n\t0x0017: 'LOG10',\n\t0x0018: 'ABS',\n\t0x0019: 'INT',\n\t0x001A: 'SIGN',\n\t0x001B: 'ROUND',\n\t0x001C: 'LOOKUP',\n\t0x001D: 'INDEX',\n\t0x001E: 'REPT',\n\t0x001F: 'MID',\n\t0x0020: 'LEN',\n\t0x0021: 'VALUE',\n\t0x0022: 'TRUE',\n\t0x0023: 'FALSE',\n\t0x0024: 'AND',\n\t0x0025: 'OR',\n\t0x0026: 'NOT',\n\t0x0027: 'MOD',\n\t0x0028: 'DCOUNT',\n\t0x0029: 'DSUM',\n\t0x002A: 'DAVERAGE',\n\t0x002B: 'DMIN',\n\t0x002C: 'DMAX',\n\t0x002D: 'DSTDEV',\n\t0x002E: 'VAR',\n\t0x002F: 'DVAR',\n\t0x0030: 'TEXT',\n\t0x0031: 'LINEST',\n\t0x0032: 'TREND',\n\t0x0033: 'LOGEST',\n\t0x0034: 'GROWTH',\n\t0x0035: 'GOTO',\n\t0x0036: 'HALT',\n\t0x0037: 'RETURN',\n\t0x0038: 'PV',\n\t0x0039: 'FV',\n\t0x003A: 'NPER',\n\t0x003B: 'PMT',\n\t0x003C: 'RATE',\n\t0x003D: 'MIRR',\n\t0x003E: 'IRR',\n\t0x003F: 'RAND',\n\t0x0040: 'MATCH',\n\t0x0041: 'DATE',\n\t0x0042: 'TIME',\n\t0x0043: 'DAY',\n\t0x0044: 'MONTH',\n\t0x0045: 'YEAR',\n\t0x0046: 'WEEKDAY',\n\t0x0047: 'HOUR',\n\t0x0048: 'MINUTE',\n\t0x0049: 'SECOND',\n\t0x004A: 'NOW',\n\t0x004B: 'AREAS',\n\t0x004C: 'ROWS',\n\t0x004D: 'COLUMNS',\n\t0x004E: 'OFFSET',\n\t0x004F: 'ABSREF',\n\t0x0050: 'RELREF',\n\t0x0051: 'ARGUMENT',\n\t0x0052: 'SEARCH',\n\t0x0053: 'TRANSPOSE',\n\t0x0054: 'ERROR',\n\t0x0055: 'STEP',\n\t0x0056: 'TYPE',\n\t0x0057: 'ECHO',\n\t0x0058: 'SET.NAME',\n\t0x0059: 'CALLER',\n\t0x005A: 'DEREF',\n\t0x005B: 'WINDOWS',\n\t0x005C: 'SERIES',\n\t0x005D: 'DOCUMENTS',\n\t0x005E: 'ACTIVE.CELL',\n\t0x005F: 'SELECTION',\n\t0x0060: 'RESULT',\n\t0x0061: 'ATAN2',\n\t0x0062: 'ASIN',\n\t0x0063: 'ACOS',\n\t0x0064: 'CHOOSE',\n\t0x0065: 'HLOOKUP',\n\t0x0066: 'VLOOKUP',\n\t0x0067: 'LINKS',\n\t0x0068: 'INPUT',\n\t0x0069: 'ISREF',\n\t0x006A: 'GET.FORMULA',\n\t0x006B: 'GET.NAME',\n\t0x006C: 'SET.VALUE',\n\t0x006D: 'LOG',\n\t0x006E: 'EXEC',\n\t0x006F: 'CHAR',\n\t0x0070: 'LOWER',\n\t0x0071: 'UPPER',\n\t0x0072: 'PROPER',\n\t0x0073: 'LEFT',\n\t0x0074: 'RIGHT',\n\t0x0075: 'EXACT',\n\t0x0076: 'TRIM',\n\t0x0077: 'REPLACE',\n\t0x0078: 'SUBSTITUTE',\n\t0x0079: 'CODE',\n\t0x007A: 'NAMES',\n\t0x007B: 'DIRECTORY',\n\t0x007C: 'FIND',\n\t0x007D: 'CELL',\n\t0x007E: 'ISERR',\n\t0x007F: 'ISTEXT',\n\t0x0080: 'ISNUMBER',\n\t0x0081: 'ISBLANK',\n\t0x0082: 'T',\n\t0x0083: 'N',\n\t0x0084: 'FOPEN',\n\t0x0085: 'FCLOSE',\n\t0x0086: 'FSIZE',\n\t0x0087: 'FREADLN',\n\t0x0088: 'FREAD',\n\t0x0089: 'FWRITELN',\n\t0x008A: 'FWRITE',\n\t0x008B: 'FPOS',\n\t0x008C: 'DATEVALUE',\n\t0x008D: 'TIMEVALUE',\n\t0x008E: 'SLN',\n\t0x008F: 'SYD',\n\t0x0090: 'DDB',\n\t0x0091: 'GET.DEF',\n\t0x0092: 'REFTEXT',\n\t0x0093: 'TEXTREF',\n\t0x0094: 'INDIRECT',\n\t0x0095: 'REGISTER',\n\t0x0096: 'CALL',\n\t0x0097: 'ADD.BAR',\n\t0x0098: 'ADD.MENU',\n\t0x0099: 'ADD.COMMAND',\n\t0x009A: 'ENABLE.COMMAND',\n\t0x009B: 'CHECK.COMMAND',\n\t0x009C: 'RENAME.COMMAND',\n\t0x009D: 'SHOW.BAR',\n\t0x009E: 'DELETE.MENU',\n\t0x009F: 'DELETE.COMMAND',\n\t0x00A0: 'GET.CHART.ITEM',\n\t0x00A1: 'DIALOG.BOX',\n\t0x00A2: 'CLEAN',\n\t0x00A3: 'MDETERM',\n\t0x00A4: 'MINVERSE',\n\t0x00A5: 'MMULT',\n\t0x00A6: 'FILES',\n\t0x00A7: 'IPMT',\n\t0x00A8: 'PPMT',\n\t0x00A9: 'COUNTA',\n\t0x00AA: 'CANCEL.KEY',\n\t0x00AB: 'FOR',\n\t0x00AC: 'WHILE',\n\t0x00AD: 'BREAK',\n\t0x00AE: 'NEXT',\n\t0x00AF: 'INITIATE',\n\t0x00B0: 'REQUEST',\n\t0x00B1: 'POKE',\n\t0x00B2: 'EXECUTE',\n\t0x00B3: 'TERMINATE',\n\t0x00B4: 'RESTART',\n\t0x00B5: 'HELP',\n\t0x00B6: 'GET.BAR',\n\t0x00B7: 'PRODUCT',\n\t0x00B8: 'FACT',\n\t0x00B9: 'GET.CELL',\n\t0x00BA: 'GET.WORKSPACE',\n\t0x00BB: 'GET.WINDOW',\n\t0x00BC: 'GET.DOCUMENT',\n\t0x00BD: 'DPRODUCT',\n\t0x00BE: 'ISNONTEXT',\n\t0x00BF: 'GET.NOTE',\n\t0x00C0: 'NOTE',\n\t0x00C1: 'STDEVP',\n\t0x00C2: 'VARP',\n\t0x00C3: 'DSTDEVP',\n\t0x00C4: 'DVARP',\n\t0x00C5: 'TRUNC',\n\t0x00C6: 'ISLOGICAL',\n\t0x00C7: 'DCOUNTA',\n\t0x00C8: 'DELETE.BAR',\n\t0x00C9: 'UNREGISTER',\n\t0x00CC: 'USDOLLAR',\n\t0x00CD: 'FINDB',\n\t0x00CE: 'SEARCHB',\n\t0x00CF: 'REPLACEB',\n\t0x00D0: 'LEFTB',\n\t0x00D1: 'RIGHTB',\n\t0x00D2: 'MIDB',\n\t0x00D3: 'LENB',\n\t0x00D4: 'ROUNDUP',\n\t0x00D5: 'ROUNDDOWN',\n\t0x00D6: 'ASC',\n\t0x00D7: 'DBCS',\n\t0x00D8: 'RANK',\n\t0x00DB: 'ADDRESS',\n\t0x00DC: 'DAYS360',\n\t0x00DD: 'TODAY',\n\t0x00DE: 'VDB',\n\t0x00DF: 'ELSE',\n\t0x00E0: 'ELSE.IF',\n\t0x00E1: 'END.IF',\n\t0x00E2: 'FOR.CELL',\n\t0x00E3: 'MEDIAN',\n\t0x00E4: 'SUMPRODUCT',\n\t0x00E5: 'SINH',\n\t0x00E6: 'COSH',\n\t0x00E7: 'TANH',\n\t0x00E8: 'ASINH',\n\t0x00E9: 'ACOSH',\n\t0x00EA: 'ATANH',\n\t0x00EB: 'DGET',\n\t0x00EC: 'CREATE.OBJECT',\n\t0x00ED: 'VOLATILE',\n\t0x00EE: 'LAST.ERROR',\n\t0x00EF: 'CUSTOM.UNDO',\n\t0x00F0: 'CUSTOM.REPEAT',\n\t0x00F1: 'FORMULA.CONVERT',\n\t0x00F2: 'GET.LINK.INFO',\n\t0x00F3: 'TEXT.BOX',\n\t0x00F4: 'INFO',\n\t0x00F5: 'GROUP',\n\t0x00F6: 'GET.OBJECT',\n\t0x00F7: 'DB',\n\t0x00F8: 'PAUSE',\n\t0x00FB: 'RESUME',\n\t0x00FC: 'FREQUENCY',\n\t0x00FD: 'ADD.TOOLBAR',\n\t0x00FE: 'DELETE.TOOLBAR',\n\t0x00FF: 'User',\n\t0x0100: 'RESET.TOOLBAR',\n\t0x0101: 'EVALUATE',\n\t0x0102: 'GET.TOOLBAR',\n\t0x0103: 'GET.TOOL',\n\t0x0104: 'SPELLING.CHECK',\n\t0x0105: 'ERROR.TYPE',\n\t0x0106: 'APP.TITLE',\n\t0x0107: 'WINDOW.TITLE',\n\t0x0108: 'SAVE.TOOLBAR',\n\t0x0109: 'ENABLE.TOOL',\n\t0x010A: 'PRESS.TOOL',\n\t0x010B: 'REGISTER.ID',\n\t0x010C: 'GET.WORKBOOK',\n\t0x010D: 'AVEDEV',\n\t0x010E: 'BETADIST',\n\t0x010F: 'GAMMALN',\n\t0x0110: 'BETAINV',\n\t0x0111: 'BINOMDIST',\n\t0x0112: 'CHIDIST',\n\t0x0113: 'CHIINV',\n\t0x0114: 'COMBIN',\n\t0x0115: 'CONFIDENCE',\n\t0x0116: 'CRITBINOM',\n\t0x0117: 'EVEN',\n\t0x0118: 'EXPONDIST',\n\t0x0119: 'FDIST',\n\t0x011A: 'FINV',\n\t0x011B: 'FISHER',\n\t0x011C: 'FISHERINV',\n\t0x011D: 'FLOOR',\n\t0x011E: 'GAMMADIST',\n\t0x011F: 'GAMMAINV',\n\t0x0120: 'CEILING',\n\t0x0121: 'HYPGEOMDIST',\n\t0x0122: 'LOGNORMDIST',\n\t0x0123: 'LOGINV',\n\t0x0124: 'NEGBINOMDIST',\n\t0x0125: 'NORMDIST',\n\t0x0126: 'NORMSDIST',\n\t0x0127: 'NORMINV',\n\t0x0128: 'NORMSINV',\n\t0x0129: 'STANDARDIZE',\n\t0x012A: 'ODD',\n\t0x012B: 'PERMUT',\n\t0x012C: 'POISSON',\n\t0x012D: 'TDIST',\n\t0x012E: 'WEIBULL',\n\t0x012F: 'SUMXMY2',\n\t0x0130: 'SUMX2MY2',\n\t0x0131: 'SUMX2PY2',\n\t0x0132: 'CHITEST',\n\t0x0133: 'CORREL',\n\t0x0134: 'COVAR',\n\t0x0135: 'FORECAST',\n\t0x0136: 'FTEST',\n\t0x0137: 'INTERCEPT',\n\t0x0138: 'PEARSON',\n\t0x0139: 'RSQ',\n\t0x013A: 'STEYX',\n\t0x013B: 'SLOPE',\n\t0x013C: 'TTEST',\n\t0x013D: 'PROB',\n\t0x013E: 'DEVSQ',\n\t0x013F: 'GEOMEAN',\n\t0x0140: 'HARMEAN',\n\t0x0141: 'SUMSQ',\n\t0x0142: 'KURT',\n\t0x0143: 'SKEW',\n\t0x0144: 'ZTEST',\n\t0x0145: 'LARGE',\n\t0x0146: 'SMALL',\n\t0x0147: 'QUARTILE',\n\t0x0148: 'PERCENTILE',\n\t0x0149: 'PERCENTRANK',\n\t0x014A: 'MODE',\n\t0x014B: 'TRIMMEAN',\n\t0x014C: 'TINV',\n\t0x014E: 'MOVIE.COMMAND',\n\t0x014F: 'GET.MOVIE',\n\t0x0150: 'CONCATENATE',\n\t0x0151: 'POWER',\n\t0x0152: 'PIVOT.ADD.DATA',\n\t0x0153: 'GET.PIVOT.TABLE',\n\t0x0154: 'GET.PIVOT.FIELD',\n\t0x0155: 'GET.PIVOT.ITEM',\n\t0x0156: 'RADIANS',\n\t0x0157: 'DEGREES',\n\t0x0158: 'SUBTOTAL',\n\t0x0159: 'SUMIF',\n\t0x015A: 'COUNTIF',\n\t0x015B: 'COUNTBLANK',\n\t0x015C: 'SCENARIO.GET',\n\t0x015D: 'OPTIONS.LISTS.GET',\n\t0x015E: 'ISPMT',\n\t0x015F: 'DATEDIF',\n\t0x0160: 'DATESTRING',\n\t0x0161: 'NUMBERSTRING',\n\t0x0162: 'ROMAN',\n\t0x0163: 'OPEN.DIALOG',\n\t0x0164: 'SAVE.DIALOG',\n\t0x0165: 'VIEW.GET',\n\t0x0166: 'GETPIVOTDATA',\n\t0x0167: 'HYPERLINK',\n\t0x0168: 'PHONETIC',\n\t0x0169: 'AVERAGEA',\n\t0x016A: 'MAXA',\n\t0x016B: 'MINA',\n\t0x016C: 'STDEVPA',\n\t0x016D: 'VARPA',\n\t0x016E: 'STDEVA',\n\t0x016F: 'VARA',\n\t0x0170: 'BAHTTEXT',\n\t0x0171: 'THAIDAYOFWEEK',\n\t0x0172: 'THAIDIGIT',\n\t0x0173: 'THAIMONTHOFYEAR',\n\t0x0174: 'THAINUMSOUND',\n\t0x0175: 'THAINUMSTRING',\n\t0x0176: 'THAISTRINGLENGTH',\n\t0x0177: 'ISTHAIDIGIT',\n\t0x0178: 'ROUNDBAHTDOWN',\n\t0x0179: 'ROUNDBAHTUP',\n\t0x017A: 'THAIYEAR',\n\t0x017B: 'RTD'\n};\nvar FtabArgc = {\n\t0x0002: 1, /* ISNA */\n\t0x0003: 1, /* ISERROR */\n\t0x000F: 1, /* SIN */\n\t0x0010: 1, /* COS */\n\t0x0011: 1, /* TAN */\n\t0x0012: 1, /* ATAN */\n\t0x0014: 1, /* SQRT */\n\t0x0015: 1, /* EXP */\n\t0x0016: 1, /* LN */\n\t0x0017: 1, /* LOG10 */\n\t0x0018: 1, /* ABS */\n\t0x0019: 1, /* INT */\n\t0x001A: 1, /* SIGN */\n\t0x001B: 2, /* ROUND */\n\t0x001E: 2, /* REPT */\n\t0x001F: 3, /* MID */\n\t0x0020: 1, /* LEN */\n\t0x0021: 1, /* VALUE */\n\t0x0026: 1, /* NOT */\n\t0x0027: 2, /* MOD */\n\t0x0028: 3, /* DCOUNT */\n\t0x0029: 3, /* DSUM */\n\t0x002A: 3, /* DAVERAGE */\n\t0x002B: 3, /* DMIN */\n\t0x002C: 3, /* DMAX */\n\t0x002D: 3, /* DSTDEV */\n\t0x002F: 3, /* DVAR */\n\t0x0030: 2, /* TEXT */\n\t0x0035: 1, /* GOTO */\n\t0x003D: 3, /* MIRR */\n\t0x0041: 3, /* DATE */\n\t0x0042: 3, /* TIME */\n\t0x0043: 1, /* DAY */\n\t0x0044: 1, /* MONTH */\n\t0x0045: 1, /* YEAR */\n\t0x0047: 1, /* HOUR */\n\t0x0048: 1, /* MINUTE */\n\t0x0049: 1, /* SECOND */\n\t0x004B: 1, /* AREAS */\n\t0x004C: 1, /* ROWS */\n\t0x004D: 1, /* COLUMNS */\n\t0x004F: 2, /* ABSREF */\n\t0x0050: 2, /* RELREF */\n\t0x0053: 1, /* TRANSPOSE */\n\t0x0056: 1, /* TYPE */\n\t0x005A: 1, /* DEREF */\n\t0x0061: 2, /* ATAN2 */\n\t0x0062: 1, /* ASIN */\n\t0x0063: 1, /* ACOS */\n\t0x0069: 1, /* ISREF */\n\t0x006F: 1, /* CHAR */\n\t0x0070: 1, /* LOWER */\n\t0x0071: 1, /* UPPER */\n\t0x0072: 1, /* PROPER */\n\t0x0075: 2, /* EXACT */\n\t0x0076: 1, /* TRIM */\n\t0x0077: 4, /* REPLACE */\n\t0x0079: 1, /* CODE */\n\t0x007E: 1, /* ISERR */\n\t0x007F: 1, /* ISTEXT */\n\t0x0080: 1, /* ISNUMBER */\n\t0x0081: 1, /* ISBLANK */\n\t0x0082: 1, /* T */\n\t0x0083: 1, /* N */\n\t0x0085: 1, /* FCLOSE */\n\t0x0086: 1, /* FSIZE */\n\t0x0087: 1, /* FREADLN */\n\t0x0088: 2, /* FREAD */\n\t0x0089: 2, /* FWRITELN */\n\t0x008A: 2, /* FWRITE */\n\t0x008C: 1, /* DATEVALUE */\n\t0x008D: 1, /* TIMEVALUE */\n\t0x008E: 3, /* SLN */\n\t0x008F: 4, /* SYD */\n\t0x00A2: 1, /* CLEAN */\n\t0x00A3: 1, /* MDETERM */\n\t0x00A4: 1, /* MINVERSE */\n\t0x00A5: 2, /* MMULT */\n\t0x00AC: 1, /* WHILE */\n\t0x00AF: 2, /* INITIATE */\n\t0x00B0: 2, /* REQUEST */\n\t0x00B1: 3, /* POKE */\n\t0x00B2: 2, /* EXECUTE */\n\t0x00B3: 1, /* TERMINATE */\n\t0x00B8: 1, /* FACT */\n\t0x00BD: 3, /* DPRODUCT */\n\t0x00BE: 1, /* ISNONTEXT */\n\t0x00C3: 3, /* DSTDEVP */\n\t0x00C4: 3, /* DVARP */\n\t0x00C6: 1, /* ISLOGICAL */\n\t0x00C7: 3, /* DCOUNTA */\n\t0x00C9: 1, /* UNREGISTER */\n\t0x00CF: 4, /* REPLACEB */\n\t0x00D2: 3, /* MIDB */\n\t0x00D3: 1, /* LENB */\n\t0x00D4: 2, /* ROUNDUP */\n\t0x00D5: 2, /* ROUNDDOWN */\n\t0x00D6: 1, /* ASC */\n\t0x00D7: 1, /* DBCS */\n\t0x00E5: 1, /* SINH */\n\t0x00E6: 1, /* COSH */\n\t0x00E7: 1, /* TANH */\n\t0x00E8: 1, /* ASINH */\n\t0x00E9: 1, /* ACOSH */\n\t0x00EA: 1, /* ATANH */\n\t0x00EB: 3, /* DGET */\n\t0x00F4: 1, /* INFO */\n\t0x00FC: 2, /* FREQUENCY */\n\t0x0101: 1, /* EVALUATE */\n\t0x0105: 1, /* ERROR.TYPE */\n\t0x010F: 1, /* GAMMALN */\n\t0x0111: 4, /* BINOMDIST */\n\t0x0112: 2, /* CHIDIST */\n\t0x0113: 2, /* CHIINV */\n\t0x0114: 2, /* COMBIN */\n\t0x0115: 3, /* CONFIDENCE */\n\t0x0116: 3, /* CRITBINOM */\n\t0x0117: 1, /* EVEN */\n\t0x0118: 3, /* EXPONDIST */\n\t0x0119: 3, /* FDIST */\n\t0x011A: 3, /* FINV */\n\t0x011B: 1, /* FISHER */\n\t0x011C: 1, /* FISHERINV */\n\t0x011D: 2, /* FLOOR */\n\t0x011E: 4, /* GAMMADIST */\n\t0x011F: 3, /* GAMMAINV */\n\t0x0120: 2, /* CEILING */\n\t0x0121: 4, /* HYPGEOMDIST */\n\t0x0122: 3, /* LOGNORMDIST */\n\t0x0123: 3, /* LOGINV */\n\t0x0124: 3, /* NEGBINOMDIST */\n\t0x0125: 4, /* NORMDIST */\n\t0x0126: 1, /* NORMSDIST */\n\t0x0127: 3, /* NORMINV */\n\t0x0128: 1, /* NORMSINV */\n\t0x0129: 3, /* STANDARDIZE */\n\t0x012A: 1, /* ODD */\n\t0x012B: 2, /* PERMUT */\n\t0x012C: 3, /* POISSON */\n\t0x012D: 3, /* TDIST */\n\t0x012E: 4, /* WEIBULL */\n\t0x012F: 2, /* SUMXMY2 */\n\t0x0130: 2, /* SUMX2MY2 */\n\t0x0131: 2, /* SUMX2PY2 */\n\t0x0132: 2, /* CHITEST */\n\t0x0133: 2, /* CORREL */\n\t0x0134: 2, /* COVAR */\n\t0x0135: 3, /* FORECAST */\n\t0x0136: 2, /* FTEST */\n\t0x0137: 2, /* INTERCEPT */\n\t0x0138: 2, /* PEARSON */\n\t0x0139: 2, /* RSQ */\n\t0x013A: 2, /* STEYX */\n\t0x013B: 2, /* SLOPE */\n\t0x013C: 4, /* TTEST */\n\t0x0145: 2, /* LARGE */\n\t0x0146: 2, /* SMALL */\n\t0x0147: 2, /* QUARTILE */\n\t0x0148: 2, /* PERCENTILE */\n\t0x014B: 2, /* TRIMMEAN */\n\t0x014C: 2, /* TINV */\n\t0x0151: 2, /* POWER */\n\t0x0156: 1, /* RADIANS */\n\t0x0157: 1, /* DEGREES */\n\t0x015A: 2, /* COUNTIF */\n\t0x015B: 1, /* COUNTBLANK */\n\t0x015E: 4, /* ISPMT */\n\t0x015F: 3, /* DATEDIF */\n\t0x0160: 1, /* DATESTRING */\n\t0x0161: 2, /* NUMBERSTRING */\n\t0x0168: 1, /* PHONETIC */\n\t0x0170: 1, /* BAHTTEXT */\n\t0x0171: 1, /* THAIDAYOFWEEK */\n\t0x0172: 1, /* THAIDIGIT */\n\t0x0173: 1, /* THAIMONTHOFYEAR */\n\t0x0174: 1, /* THAINUMSOUND */\n\t0x0175: 1, /* THAINUMSTRING */\n\t0x0176: 1, /* THAISTRINGLENGTH */\n\t0x0177: 1, /* ISTHAIDIGIT */\n\t0x0178: 1, /* ROUNDBAHTDOWN */\n\t0x0179: 1, /* ROUNDBAHTUP */\n\t0x017A: 1, /* THAIYEAR */\n\t0xFFFF: 0\n};\n/* [MS-XLSX] 2.2.3 Functions */\nvar XLSXFutureFunctions = {\n\t\"_xlfn.ACOT\": \"ACOT\",\n\t\"_xlfn.ACOTH\": \"ACOTH\",\n\t\"_xlfn.AGGREGATE\": \"AGGREGATE\",\n\t\"_xlfn.ARABIC\": \"ARABIC\",\n\t\"_xlfn.AVERAGEIF\": \"AVERAGEIF\",\n\t\"_xlfn.AVERAGEIFS\": \"AVERAGEIFS\",\n\t\"_xlfn.BASE\": \"BASE\",\n\t\"_xlfn.BETA.DIST\": \"BETA.DIST\",\n\t\"_xlfn.BETA.INV\": \"BETA.INV\",\n\t\"_xlfn.BINOM.DIST\": \"BINOM.DIST\",\n\t\"_xlfn.BINOM.DIST.RANGE\": \"BINOM.DIST.RANGE\",\n\t\"_xlfn.BINOM.INV\": \"BINOM.INV\",\n\t\"_xlfn.BITAND\": \"BITAND\",\n\t\"_xlfn.BITLSHIFT\": \"BITLSHIFT\",\n\t\"_xlfn.BITOR\": \"BITOR\",\n\t\"_xlfn.BITRSHIFT\": \"BITRSHIFT\",\n\t\"_xlfn.BITXOR\": \"BITXOR\",\n\t\"_xlfn.CEILING.MATH\": \"CEILING.MATH\",\n\t\"_xlfn.CEILING.PRECISE\": \"CEILING.PRECISE\",\n\t\"_xlfn.CHISQ.DIST\": \"CHISQ.DIST\",\n\t\"_xlfn.CHISQ.DIST.RT\": \"CHISQ.DIST.RT\",\n\t\"_xlfn.CHISQ.INV\": \"CHISQ.INV\",\n\t\"_xlfn.CHISQ.INV.RT\": \"CHISQ.INV.RT\",\n\t\"_xlfn.CHISQ.TEST\": \"CHISQ.TEST\",\n\t\"_xlfn.COMBINA\": \"COMBINA\",\n\t\"_xlfn.CONFIDENCE.NORM\": \"CONFIDENCE.NORM\",\n\t\"_xlfn.CONFIDENCE.T\": \"CONFIDENCE.T\",\n\t\"_xlfn.COT\": \"COT\",\n\t\"_xlfn.COTH\": \"COTH\",\n\t\"_xlfn.COUNTIFS\": \"COUNTIFS\",\n\t\"_xlfn.COVARIANCE.P\": \"COVARIANCE.P\",\n\t\"_xlfn.COVARIANCE.S\": \"COVARIANCE.S\",\n\t\"_xlfn.CSC\": \"CSC\",\n\t\"_xlfn.CSCH\": \"CSCH\",\n\t\"_xlfn.DAYS\": \"DAYS\",\n\t\"_xlfn.DECIMAL\": \"DECIMAL\",\n\t\"_xlfn.ECMA.CEILING\": \"ECMA.CEILING\",\n\t\"_xlfn.ERF.PRECISE\": \"ERF.PRECISE\",\n\t\"_xlfn.ERFC.PRECISE\": \"ERFC.PRECISE\",\n\t\"_xlfn.EXPON.DIST\": \"EXPON.DIST\",\n\t\"_xlfn.F.DIST\": \"F.DIST\",\n\t\"_xlfn.F.DIST.RT\": \"F.DIST.RT\",\n\t\"_xlfn.F.INV\": \"F.INV\",\n\t\"_xlfn.F.INV.RT\": \"F.INV.RT\",\n\t\"_xlfn.F.TEST\": \"F.TEST\",\n\t\"_xlfn.FILTERXML\": \"FILTERXML\",\n\t\"_xlfn.FLOOR.MATH\": \"FLOOR.MATH\",\n\t\"_xlfn.FLOOR.PRECISE\": \"FLOOR.PRECISE\",\n\t\"_xlfn.FORMULATEXT\": \"FORMULATEXT\",\n\t\"_xlfn.GAMMA\": \"GAMMA\",\n\t\"_xlfn.GAMMA.DIST\": \"GAMMA.DIST\",\n\t\"_xlfn.GAMMA.INV\": \"GAMMA.INV\",\n\t\"_xlfn.GAMMALN.PRECISE\": \"GAMMALN.PRECISE\",\n\t\"_xlfn.GAUSS\": \"GAUSS\",\n\t\"_xlfn.HYPGEOM.DIST\": \"HYPGEOM.DIST\",\n\t\"_xlfn.IFNA\": \"IFNA\",\n\t\"_xlfn.IFERROR\": \"IFERROR\",\n\t\"_xlfn.IMCOSH\": \"IMCOSH\",\n\t\"_xlfn.IMCOT\": \"IMCOT\",\n\t\"_xlfn.IMCSC\": \"IMCSC\",\n\t\"_xlfn.IMCSCH\": \"IMCSCH\",\n\t\"_xlfn.IMSEC\": \"IMSEC\",\n\t\"_xlfn.IMSECH\": \"IMSECH\",\n\t\"_xlfn.IMSINH\": \"IMSINH\",\n\t\"_xlfn.IMTAN\": \"IMTAN\",\n\t\"_xlfn.ISFORMULA\": \"ISFORMULA\",\n\t\"_xlfn.ISO.CEILING\": \"ISO.CEILING\",\n\t\"_xlfn.ISOWEEKNUM\": \"ISOWEEKNUM\",\n\t\"_xlfn.LOGNORM.DIST\": \"LOGNORM.DIST\",\n\t\"_xlfn.LOGNORM.INV\": \"LOGNORM.INV\",\n\t\"_xlfn.MODE.MULT\": \"MODE.MULT\",\n\t\"_xlfn.MODE.SNGL\": \"MODE.SNGL\",\n\t\"_xlfn.MUNIT\": \"MUNIT\",\n\t\"_xlfn.NEGBINOM.DIST\": \"NEGBINOM.DIST\",\n\t\"_xlfn.NETWORKDAYS.INTL\": \"NETWORKDAYS.INTL\",\n\t\"_xlfn.NIGBINOM\": \"NIGBINOM\",\n\t\"_xlfn.NORM.DIST\": \"NORM.DIST\",\n\t\"_xlfn.NORM.INV\": \"NORM.INV\",\n\t\"_xlfn.NORM.S.DIST\": \"NORM.S.DIST\",\n\t\"_xlfn.NORM.S.INV\": \"NORM.S.INV\",\n\t\"_xlfn.NUMBERVALUE\": \"NUMBERVALUE\",\n\t\"_xlfn.PDURATION\": \"PDURATION\",\n\t\"_xlfn.PERCENTILE.EXC\": \"PERCENTILE.EXC\",\n\t\"_xlfn.PERCENTILE.INC\": \"PERCENTILE.INC\",\n\t\"_xlfn.PERCENTRANK.EXC\": \"PERCENTRANK.EXC\",\n\t\"_xlfn.PERCENTRANK.INC\": \"PERCENTRANK.INC\",\n\t\"_xlfn.PERMUTATIONA\": \"PERMUTATIONA\",\n\t\"_xlfn.PHI\": \"PHI\",\n\t\"_xlfn.POISSON.DIST\": \"POISSON.DIST\",\n\t\"_xlfn.QUARTILE.EXC\": \"QUARTILE.EXC\",\n\t\"_xlfn.QUARTILE.INC\": \"QUARTILE.INC\",\n\t\"_xlfn.QUERYSTRING\": \"QUERYSTRING\",\n\t\"_xlfn.RANK.AVG\": \"RANK.AVG\",\n\t\"_xlfn.RANK.EQ\": \"RANK.EQ\",\n\t\"_xlfn.RRI\": \"RRI\",\n\t\"_xlfn.SEC\": \"SEC\",\n\t\"_xlfn.SECH\": \"SECH\",\n\t\"_xlfn.SHEET\": \"SHEET\",\n\t\"_xlfn.SHEETS\": \"SHEETS\",\n\t\"_xlfn.SKEW.P\": \"SKEW.P\",\n\t\"_xlfn.STDEV.P\": \"STDEV.P\",\n\t\"_xlfn.STDEV.S\": \"STDEV.S\",\n\t\"_xlfn.SUMIFS\": \"SUMIFS\",\n\t\"_xlfn.T.DIST\": \"T.DIST\",\n\t\"_xlfn.T.DIST.2T\": \"T.DIST.2T\",\n\t\"_xlfn.T.DIST.RT\": \"T.DIST.RT\",\n\t\"_xlfn.T.INV\": \"T.INV\",\n\t\"_xlfn.T.INV.2T\": \"T.INV.2T\",\n\t\"_xlfn.T.TEST\": \"T.TEST\",\n\t\"_xlfn.UNICHAR\": \"UNICHAR\",\n\t\"_xlfn.UNICODE\": \"UNICODE\",\n\t\"_xlfn.VAR.P\": \"VAR.P\",\n\t\"_xlfn.VAR.S\": \"VAR.S\",\n\t\"_xlfn.WEBSERVICE\": \"WEBSERVICE\",\n\t\"_xlfn.WEIBULL.DIST\": \"WEIBULL.DIST\",\n\t\"_xlfn.WORKDAY.INTL\": \"WORKDAY.INTL\",\n\t\"_xlfn.XOR\": \"XOR\",\n\t\"_xlfn.Z.TEST\": \"Z.TEST\"\n};\n\nvar strs = {}; // shared strings\nvar _ssfopts = {}; // spreadsheet formatting options\n\nRELS.WS = \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\";\n\nfunction get_sst_id(sst, str) {\n\tfor(var i = 0, len = sst.length; i < len; ++i) if(sst[i].t === str) { sst.Count ++; return i; }\n\tsst[len] = {t:str}; sst.Count ++; sst.Unique ++; return len;\n}\n\nfunction get_cell_style(styles, cell, opts) {\n  if (typeof style_builder != 'undefined') {\n    if (/^\\d+$/.exec(cell.s)) { return cell.s}  // if its already an integer index, let it be\n    if (cell.s && (cell.s == +cell.s)) { return cell.s}  // if its already an integer index, let it be\n    var s = cell.s || {};\n    if (cell.z) s.numFmt = cell.z;\n    return style_builder.addStyle(s);\n  }\n  else {\n    var z = opts.revssf[cell.z != null ? cell.z : \"General\"];\n    for(var i = 0, len = styles.length; i != len; ++i) if(styles[i].numFmtId === z) return i;\n    styles[len] = {\n      numFmtId:z,\n      fontId:0,\n      fillId:0,\n      borderId:0,\n      xfId:0,\n      applyNumberFormat:1\n    };\n    return len;\n  }\n}\n\nfunction get_cell_style_csf(cellXf) {\n\n  if (cellXf) {\n\n    var s = {}\n\n    if (typeof cellXf.numFmtId != undefined)  {\n      s.numFmt = SSF._table[cellXf.numFmtId];\n    }\n\n    if(cellXf.fillId)  {\n      s.fill =  styles.Fills[cellXf.fillId];\n    }\n\n    if (cellXf.fontId) {\n      s.font = styles.Fonts[cellXf.fontId];\n    }\n    if (cellXf.borderId) {\n      s.border = styles.Borders[cellXf.borderId];\n    }\n    if (cellXf.applyAlignment==1) {\n      s.alignment = cellXf.alignment;\n    }\n\n\n    return s;\n  }\n  return null;\n}\n\nfunction safe_format(p, fmtid, fillid, opts) {\n\ttry {\n\t\tif(p.t === 'e') p.w = p.w || BErr[p.v];\n\t\telse if(fmtid === 0) {\n\t\t\tif(p.t === 'n') {\n\t\t\t\tif((p.v|0) === p.v) p.w = SSF._general_int(p.v,_ssfopts);\n\t\t\t\telse p.w = SSF._general_num(p.v,_ssfopts);\n\t\t\t}\n\t\t\telse if(p.t === 'd') {\n\t\t\t\tvar dd = datenum(p.v);\n\t\t\t\tif((dd|0) === dd) p.w = SSF._general_int(dd,_ssfopts);\n\t\t\t\telse p.w = SSF._general_num(dd,_ssfopts);\n\t\t\t}\n\t\t\telse if(p.v === undefined) return \"\";\n\t\t\telse p.w = SSF._general(p.v,_ssfopts);\n\t\t}\n\t\telse if(p.t === 'd') p.w = SSF.format(fmtid,datenum(p.v),_ssfopts);\n\t\telse p.w = SSF.format(fmtid,p.v,_ssfopts);\n\t\tif(opts.cellNF) p.z = SSF._table[fmtid];\n\t} catch(e) { if(opts.WTF) throw e; }\n}\nfunction parse_ws_xml_dim(ws, s) {\n\tvar d = safe_decode_range(s);\n\tif(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws[\"!ref\"] = encode_range(d);\n}\nvar mergecregex = /<mergeCell ref=\"[A-Z0-9:]+\"\\s*\\/>/g;\nvar sheetdataregex = /<(?:\\w+:)?sheetData>([^\\u2603]*)<\\/(?:\\w+:)?sheetData>/;\nvar hlinkregex = /<hyperlink[^>]*\\/>/g;\nvar dimregex = /\"(\\w*:\\w*)\"/;\nvar colregex = /<col[^>]*\\/>/g;\n/* 18.3 Worksheets */\nfunction parse_ws_xml(data, opts, rels) {\n\tif(!data) return data;\n\t/* 18.3.1.99 worksheet CT_Worksheet */\n\tvar s = {};\n\n\t/* 18.3.1.35 dimension CT_SheetDimension ? */\n\tvar ridx = data.indexOf(\"<dimension\");\n\tif(ridx > 0) {\n\t\tvar ref = data.substr(ridx,50).match(dimregex);\n\t\tif(ref != null) parse_ws_xml_dim(s, ref[1]);\n\t}\n\n\t/* 18.3.1.55 mergeCells CT_MergeCells */\n\tvar mergecells = [];\n\tif(data.indexOf(\"</mergeCells>\")!==-1) {\n\t\tvar merges = data.match(mergecregex);\n\t\tfor(ridx = 0; ridx != merges.length; ++ridx)\n\t\t\tmergecells[ridx] = safe_decode_range(merges[ridx].substr(merges[ridx].indexOf(\"\\\"\")+1));\n\t}\n\n\t/* 18.3.1.17 cols CT_Cols */\n\tvar columns = [];\n\tif(opts.cellStyles && data.indexOf(\"</cols>\")!==-1) {\n\t\t/* 18.3.1.13 col CT_Col */\n\t\tvar cols = data.match(colregex);\n\t\tparse_ws_xml_cols(columns, cols);\n\t}\n\n\tvar refguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\n\t/* 18.3.1.80 sheetData CT_SheetData ? */\n\tvar mtch=data.match(sheetdataregex);\n\tif(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess);\n\n\t/* 18.3.1.48 hyperlinks CT_Hyperlinks */\n\tif(data.indexOf(\"</hyperlinks>\")!==-1) parse_ws_xml_hlinks(s, data.match(hlinkregex), rels);\n\n\tif(!s[\"!ref\"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s[\"!ref\"] = encode_range(refguess);\n\tif(opts.sheetRows > 0 && s[\"!ref\"]) {\n\t\tvar tmpref = safe_decode_range(s[\"!ref\"]);\n\t\tif(opts.sheetRows < +tmpref.e.r) {\n\t\t\ttmpref.e.r = opts.sheetRows - 1;\n\t\t\tif(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n\t\t\tif(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n\t\t\tif(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n\t\t\tif(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n\t\t\ts[\"!fullref\"] = s[\"!ref\"];\n\t\t\ts[\"!ref\"] = encode_range(tmpref);\n\t\t}\n\t}\n\tif(mergecells.length > 0) s[\"!merges\"] = mergecells;\n\tif(columns.length > 0) s[\"!cols\"] = columns;\n\treturn s;\n}\n\nfunction write_ws_xml_merges(merges) {\n\tif(merges.length == 0) return \"\";\n\tvar o = '<mergeCells count=\"' + merges.length + '\">';\n\tfor(var i = 0; i != merges.length; ++i) o += '<mergeCell ref=\"' + encode_range(merges[i]) + '\"/>';\n\treturn o + '</mergeCells>';\n}\n\nfunction parse_ws_xml_hlinks(s, data, rels) {\n\tfor(var i = 0; i != data.length; ++i) {\n\t\tvar val = parsexmltag(data[i], true);\n\t\tif(!val.ref) return;\n\t\tvar rel = rels ? rels['!id'][val.id] : null;\n\t\tif(rel) {\n\t\t\tval.Target = rel.Target;\n\t\t\tif(val.location) val.Target += \"#\"+val.location;\n\t\t\tval.Rel = rel;\n\t\t} else {\n\t\t\tval.Target = val.location;\n\t\t\trel = {Target: val.location, TargetMode: 'Internal'};\n\t\t\tval.Rel = rel;\n\t\t}\n\t\tvar rng = safe_decode_range(val.ref);\n\t\tfor(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {\n\t\t\tvar addr = encode_cell({c:C,r:R});\n\t\t\tif(!s[addr]) s[addr] = {t:\"stub\",v:undefined};\n\t\t\ts[addr].l = val;\n\t\t}\n\t}\n}\n\nfunction parse_ws_xml_cols(columns, cols) {\n\tvar seencol = false;\n\tfor(var coli = 0; coli != cols.length; ++coli) {\n\t\tvar coll = parsexmltag(cols[coli], true);\n\t\tvar colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;\n\t\tdelete coll.min; delete coll.max;\n\t\tif(!seencol && coll.width) { seencol = true; find_mdw(+coll.width, coll); }\n\t\tif(coll.width) {\n\t\t\tcoll.wpx = width2px(+coll.width);\n\t\t\tcoll.wch = px2char(coll.wpx);\n\t\t\tcoll.MDW = MDW;\n\t\t}\n\t\twhile(colm <= colM) columns[colm++] = coll;\n\t}\n}\n\nfunction write_ws_xml_cols(ws, cols) {\n\tvar o = [\"<cols>\"], col, width;\n\tfor(var i = 0; i != cols.length; ++i) {\n\t\tif(!(col = cols[i])) continue;\n\t\tvar p = {min:i+1,max:i+1};\n\t\t/* wch (chars), wpx (pixels) */\n\t\twidth = -1;\n\t\tif(col.wpx) width = px2char(col.wpx);\n\t\telse if(col.wch) width = col.wch;\n\t\tif(width > -1) { p.width = char2width(width); p.customWidth= 1; }\n\t\to[o.length] = (writextag('col', null, p));\n\t}\n\to[o.length] = \"</cols>\";\n\treturn o.join(\"\");\n}\n\nfunction write_ws_xml_cell(cell, ref, ws, opts, idx, wb) {\n\tif(cell.v === undefined) return \"\";\n\tvar vv = \"\";\n\tvar oldt = cell.t, oldv = cell.v;\n\tswitch(cell.t) {\n\t\tcase 'b': vv = cell.v ? \"1\" : \"0\"; break;\n\t\tcase 'n': vv = ''+cell.v; break;\n\t\tcase 'e': vv = BErr[cell.v]; break;\n\t\tcase 'd':\n\t\t\tif(opts.cellDates) vv = new Date(cell.v).toISOString();\n\t\t\telse {\n\t\t\t\tcell.t = 'n';\n\t\t\t\tvv = ''+(cell.v = datenum(cell.v));\n\t\t\t\tif(typeof cell.z === 'undefined') cell.z = SSF._table[14];\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault: vv = cell.v; break;\n\t}\n\tvar v = writetag('v', escapexml(vv)), o = {r:ref};\n\t/* TODO: cell style */\n\tvar os = get_cell_style(opts.cellXfs, cell, opts);\n\tif(os !== 0) o.s = os;\n\tswitch(cell.t) {\n\t\tcase 'n': break;\n\t\tcase 'd': o.t = \"d\"; break;\n\t\tcase 'b': o.t = \"b\"; break;\n\t\tcase 'e': o.t = \"e\"; break;\n\t\tdefault:\n\t\t\tif(opts.bookSST) {\n\t\t\t\tv = writetag('v', ''+get_sst_id(opts.Strings, cell.v));\n\t\t\t\to.t = \"s\"; break;\n\t\t\t}\n\t\t\to.t = \"str\"; break;\n\t}\n\tif(cell.t != oldt) { cell.t = oldt; cell.v = oldv; }\n\treturn writextag('c', v, o);\n}\n\nvar parse_ws_xml_data = (function parse_ws_xml_data_factory() {\n\tvar cellregex = /<(?:\\w+:)?c[ >]/, rowregex = /<\\/(?:\\w+:)?row>/;\n\tvar rregex = /r=[\"']([^\"']*)[\"']/, isregex = /<is>([\\S\\s]*?)<\\/is>/;\n\tvar match_v = matchtag(\"v\"), match_f = matchtag(\"f\");\n\nreturn function parse_ws_xml_data(sdata, s, opts, guess) {\n\tvar ri = 0, x = \"\", cells = [], cref = [], idx = 0, i=0, cc=0, d=\"\", p;\n\tvar tag, tagr = 0, tagc = 0;\n\tvar sstr;\n\tvar fmtid = 0, fillid = 0, do_format = Array.isArray(styles.CellXf), cf;\n\tfor(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {\n\t\tx = marr[mt].trim();\n\t\tvar xlen = x.length;\n\t\tif(xlen === 0) continue;\n\n\t\t/* 18.3.1.73 row CT_Row */\n\t\tfor(ri = 0; ri < xlen; ++ri) if(x.charCodeAt(ri) === 62) break; ++ri;\n\t\ttag = parsexmltag(x.substr(0,ri), true);\n\t\t/* SpreadSheetGear uses implicit r/c */\n\t\ttagr = typeof tag.r !== 'undefined' ? parseInt(tag.r, 10) : tagr+1; tagc = -1;\n\t\tif(opts.sheetRows && opts.sheetRows < tagr) continue;\n\t\tif(guess.s.r > tagr - 1) guess.s.r = tagr - 1;\n\t\tif(guess.e.r < tagr - 1) guess.e.r = tagr - 1;\n\n\t\t/* 18.3.1.4 c CT_Cell */\n\t\tcells = x.substr(ri).split(cellregex);\n\t\tfor(ri = typeof tag.r === 'undefined' ? 0 : 1; ri != cells.length; ++ri) {\n\t\t\tx = cells[ri].trim();\n\t\t\tif(x.length === 0) continue;\n\t\t\tcref = x.match(rregex); idx = ri; i=0; cc=0;\n\t\t\tx = \"<c \" + (x.substr(0,1)==\"<\"?\">\":\"\") + x;\n\t\t\tif(cref !== null && cref.length === 2) {\n\t\t\t\tidx = 0; d=cref[1];\n\t\t\t\tfor(i=0; i != d.length; ++i) {\n\t\t\t\t\tif((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\t\t\t\tidx = 26*idx + cc;\n\t\t\t\t}\n\t\t\t\t--idx;\n\t\t\t\ttagc = idx;\n\t\t\t} else ++tagc;\n\t\t\tfor(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;\n\t\t\ttag = parsexmltag(x.substr(0,i), true);\n\t\t\tif(!tag.r) tag.r = utils.encode_cell({r:tagr-1, c:tagc});\n\t\t\td = x.substr(i);\n\t\t\tp = {t:\"\"};\n\n\t\t\tif((cref=d.match(match_v))!== null && cref[1] !== '') p.v=unescapexml(cref[1]);\n\t\t\tif(opts.cellFormula && (cref=d.match(match_f))!== null) p.f=unescapexml(cref[1]);\n\n\t\t\t/* SCHEMA IS ACTUALLY INCORRECT HERE.  IF A CELL HAS NO T, EMIT \"\" */\n\t\t\tif(tag.t === undefined && p.v === undefined) {\n\t\t\t\tif(!opts.sheetStubs) continue;\n\t\t\t\tp.t = \"stub\";\n\t\t\t}\n\t\t\telse p.t = tag.t || \"n\";\n\t\t\tif(guess.s.c > idx) guess.s.c = idx;\n\t\t\tif(guess.e.c < idx) guess.e.c = idx;\n\t\t\t/* 18.18.11 t ST_CellType */\n\t\t\tswitch(p.t) {\n\t\t\t\tcase 'n': p.v = parseFloat(p.v); break;\n\t\t\t\tcase 's':\n\t\t\t\t\tsstr = strs[parseInt(p.v, 10)];\n\t\t\t\t\tp.v = sstr.t;\n\t\t\t\t\tp.r = sstr.r;\n\t\t\t\t\tif(opts.cellHTML) p.h = sstr.h;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'str':\n\t\t\t\t\tp.t = \"s\";\n\t\t\t\t\tp.v = (p.v!=null) ? utf8read(p.v) : '';\n\t\t\t\t\tif(opts.cellHTML) p.h = p.v;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'inlineStr':\n\t\t\t\t\tcref = d.match(isregex);\n\t\t\t\t\tp.t = 's';\n\t\t\t\t\tif(cref !== null) { sstr = parse_si(cref[1]); p.v = sstr.t; } else p.v = \"\";\n\t\t\t\t\tbreak; // inline string\n\t\t\t\tcase 'b': p.v = parsexmlbool(p.v); break;\n\t\t\t\tcase 'd':\n\t\t\t\t\tif(!opts.cellDates) { p.v = datenum(p.v); p.t = 'n'; }\n\t\t\t\t\tbreak;\n\t\t\t\t/* error string in .v, number in .v */\n\t\t\t\tcase 'e': p.w = p.v; p.v = RBErr[p.v]; break;\n\t\t\t}\n            /* formatting */\n            fmtid = fillid = 0;\n            if(do_format && tag.s !== undefined) {\n              cf = styles.CellXf[tag.s];\n              if (opts.cellStyles) {\n                p.s = get_cell_style_csf(cf)\n              }\n              if(cf != null) {\n                if(cf.numFmtId != null) fmtid = cf.numFmtId;\n                if(opts.cellStyles && cf.fillId != null) fillid = cf.fillId;\n              }\n            }\n            safe_format(p, fmtid, fillid, opts);\n            s[tag.r] = p;\n      }\n\t}\n}; })();\n\nfunction write_ws_xml_data(ws, opts, idx, wb) {\n\tvar o = [], r = [], range = safe_decode_range(ws['!ref']), cell, ref, rr = \"\", cols = [], R, C;\n\tfor(C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);\n\tfor(R = range.s.r; R <= range.e.r; ++R) {\n\t\tr = [];\n\t\trr = encode_row(R);\n\t\tfor(C = range.s.c; C <= range.e.c; ++C) {\n\t\t\tref = cols[C] + rr;\n\t\t\tif(ws[ref] === undefined) continue;\n\t\t\tif((cell = write_ws_xml_cell(ws[ref], ref, ws, opts, idx, wb)) != null) r.push(cell);\n\t\t}\n\t\tif(r.length > 0) o[o.length] = (writextag('row', r.join(\"\"), {r:rr}));\n\t}\n\treturn o.join(\"\");\n}\n\nvar WS_XML_ROOT = writextag('worksheet', null, {\n\t'xmlns': XMLNS.main[0],\n\t'xmlns:r': XMLNS.r\n});\n\nfunction write_ws_xml(idx, opts, wb) {\n\tvar o = [XML_HEADER, WS_XML_ROOT];\n\tvar s = wb.SheetNames[idx], sidx = 0, rdata = \"\";\n\tvar ws = wb.Sheets[s];\n\tif(ws === undefined) ws = {};\n\tvar ref = ws['!ref']; if(ref === undefined) ref = 'A1';\n\to[o.length] = (writextag('dimension', null, {'ref': ref}));\n\n\tif(ws['!cols'] !== undefined && ws['!cols'].length > 0) o[o.length] = (write_ws_xml_cols(ws, ws['!cols']));\n\to[sidx = o.length] = '<sheetData/>';\n\tif(ws['!ref'] !== undefined) {\n\t\trdata = write_ws_xml_data(ws, opts, idx, wb);\n\t\tif(rdata.length > 0) o[o.length] = (rdata);\n\t}\n\tif(o.length>sidx+1) { o[o.length] = ('</sheetData>'); o[sidx]=o[sidx].replace(\"/>\",\">\"); }\n\n\tif(ws['!merges'] !== undefined && ws['!merges'].length > 0) o[o.length] = (write_ws_xml_merges(ws['!merges']));\n\n\tif(o.length>2) { o[o.length] = ('</worksheet>'); o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n\n/* [MS-XLSB] 2.4.718 BrtRowHdr */\nfunction parse_BrtRowHdr(data, length) {\n\tvar z = [];\n\tz.r = data.read_shift(4);\n\tdata.l += length-4;\n\treturn z;\n}\n\n/* [MS-XLSB] 2.4.812 BrtWsDim */\nvar parse_BrtWsDim = parse_UncheckedRfX;\nvar write_BrtWsDim = write_UncheckedRfX;\n\n/* [MS-XLSB] 2.4.815 BrtWsProp */\nfunction parse_BrtWsProp(data, length) {\n\tvar z = {};\n\t/* TODO: pull flags */\n\tdata.l += 19;\n\tz.name = parse_XLSBCodeName(data, length - 19);\n\treturn z;\n}\n\n/* [MS-XLSB] 2.4.303 BrtCellBlank */\nfunction parse_BrtCellBlank(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\treturn [cell];\n}\nfunction write_BrtCellBlank(cell, val, o) {\n\tif(o == null) o = new_buf(8);\n\treturn write_XLSBCell(val, o);\n}\n\n\n/* [MS-XLSB] 2.4.304 BrtCellBool */\nfunction parse_BrtCellBool(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\tvar fBool = data.read_shift(1);\n\treturn [cell, fBool, 'b'];\n}\n\n/* [MS-XLSB] 2.4.305 BrtCellError */\nfunction parse_BrtCellError(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\tvar fBool = data.read_shift(1);\n\treturn [cell, fBool, 'e'];\n}\n\n/* [MS-XLSB] 2.4.308 BrtCellIsst */\nfunction parse_BrtCellIsst(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\tvar isst = data.read_shift(4);\n\treturn [cell, isst, 's'];\n}\n\n/* [MS-XLSB] 2.4.310 BrtCellReal */\nfunction parse_BrtCellReal(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_Xnum(data);\n\treturn [cell, value, 'n'];\n}\n\n/* [MS-XLSB] 2.4.311 BrtCellRk */\nfunction parse_BrtCellRk(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_RkNumber(data);\n\treturn [cell, value, 'n'];\n}\n\n/* [MS-XLSB] 2.4.314 BrtCellSt */\nfunction parse_BrtCellSt(data, length) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_XLWideString(data);\n\treturn [cell, value, 'str'];\n}\n\n/* [MS-XLSB] 2.4.647 BrtFmlaBool */\nfunction parse_BrtFmlaBool(data, length, opts) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = data.read_shift(1);\n\tvar o = [cell, value, 'b'];\n\tif(opts.cellFormula) {\n\t\tvar formula = parse_XLSBCellParsedFormula(data, length-9);\n\t\to[3] = \"\"; /* TODO */\n\t}\n\telse data.l += length-9;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.648 BrtFmlaError */\nfunction parse_BrtFmlaError(data, length, opts) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = data.read_shift(1);\n\tvar o = [cell, value, 'e'];\n\tif(opts.cellFormula) {\n\t\tvar formula = parse_XLSBCellParsedFormula(data, length-9);\n\t\to[3] = \"\"; /* TODO */\n\t}\n\telse data.l += length-9;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.649 BrtFmlaNum */\nfunction parse_BrtFmlaNum(data, length, opts) {\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_Xnum(data);\n\tvar o = [cell, value, 'n'];\n\tif(opts.cellFormula) {\n\t\tvar formula = parse_XLSBCellParsedFormula(data, length - 16);\n\t\to[3] = \"\"; /* TODO */\n\t}\n\telse data.l += length-16;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.650 BrtFmlaString */\nfunction parse_BrtFmlaString(data, length, opts) {\n\tvar start = data.l;\n\tvar cell = parse_XLSBCell(data);\n\tvar value = parse_XLWideString(data);\n\tvar o = [cell, value, 'str'];\n\tif(opts.cellFormula) {\n\t\tvar formula = parse_XLSBCellParsedFormula(data, start + length - data.l);\n\t}\n\telse data.l = start + length;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.676 BrtMergeCell */\nvar parse_BrtMergeCell = parse_UncheckedRfX;\n\n/* [MS-XLSB] 2.4.656 BrtHLink */\nfunction parse_BrtHLink(data, length, opts) {\n\tvar end = data.l + length;\n\tvar rfx = parse_UncheckedRfX(data, 16);\n\tvar relId = parse_XLNullableWideString(data);\n\tvar loc = parse_XLWideString(data);\n\tvar tooltip = parse_XLWideString(data);\n\tvar display = parse_XLWideString(data);\n\tdata.l = end;\n\treturn {rfx:rfx, relId:relId, loc:loc, tooltip:tooltip, display:display};\n}\n\n/* [MS-XLSB] 2.1.7.61 Worksheet */\nfunction parse_ws_bin(data, opts, rels) {\n\tif(!data) return data;\n\tif(!rels) rels = {'!id':{}};\n\tvar s = {};\n\n\tvar ref;\n\tvar refguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\n\tvar pass = false, end = false;\n\tvar row, p, cf, R, C, addr, sstr, rr;\n\tvar mergecells = [];\n\trecordhopper(data, function ws_parse(val, R) {\n\t\tif(end) return;\n\t\tswitch(R.n) {\n\t\t\tcase 'BrtWsDim': ref = val; break;\n\t\t\tcase 'BrtRowHdr':\n\t\t\t\trow = val;\n\t\t\t\tif(opts.sheetRows && opts.sheetRows <= row.r) end=true;\n\t\t\t\trr = encode_row(row.r);\n\t\t\t\tbreak;\n\n\t\t\tcase 'BrtFmlaBool':\n\t\t\tcase 'BrtFmlaError':\n\t\t\tcase 'BrtFmlaNum':\n\t\t\tcase 'BrtFmlaString':\n\t\t\tcase 'BrtCellBool':\n\t\t\tcase 'BrtCellError':\n\t\t\tcase 'BrtCellIsst':\n\t\t\tcase 'BrtCellReal':\n\t\t\tcase 'BrtCellRk':\n\t\t\tcase 'BrtCellSt':\n\t\t\t\tp = {t:val[2]};\n\t\t\t\tswitch(val[2]) {\n\t\t\t\t\tcase 'n': p.v = val[1]; break;\n\t\t\t\t\tcase 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;\n\t\t\t\t\tcase 'b': p.v = val[1] ? true : false; break;\n\t\t\t\t\tcase 'e': p.v = val[1]; p.w = BErr[p.v]; break;\n\t\t\t\t\tcase 'str': p.t = 's'; p.v = utf8read(val[1]); break;\n\t\t\t\t}\n\t\t\t\tif(opts.cellFormula && val.length > 3) p.f = val[3];\n\t\t\t\tif((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.ifmt,null,opts);\n\t\t\t\ts[encode_col(C=val[0].c) + rr] = p;\n\t\t\t\tif(refguess.s.r > row.r) refguess.s.r = row.r;\n\t\t\t\tif(refguess.s.c > C) refguess.s.c = C;\n\t\t\t\tif(refguess.e.r < row.r) refguess.e.r = row.r;\n\t\t\t\tif(refguess.e.c < C) refguess.e.c = C;\n\t\t\t\tbreak;\n\n\t\t\tcase 'BrtCellBlank': if(!opts.sheetStubs) break;\n\t\t\t\tp = {t:'s',v:undefined};\n\t\t\t\ts[encode_col(C=val[0].c) + rr] = p;\n\t\t\t\tif(refguess.s.r > row.r) refguess.s.r = row.r;\n\t\t\t\tif(refguess.s.c > C) refguess.s.c = C;\n\t\t\t\tif(refguess.e.r < row.r) refguess.e.r = row.r;\n\t\t\t\tif(refguess.e.c < C) refguess.e.c = C;\n\t\t\t\tbreak;\n\n\t\t\t/* Merge Cells */\n\t\t\tcase 'BrtBeginMergeCells': break;\n\t\t\tcase 'BrtEndMergeCells': break;\n\t\t\tcase 'BrtMergeCell': mergecells.push(val); break;\n\n\t\t\tcase 'BrtHLink':\n\t\t\t\tvar rel = rels['!id'][val.relId];\n\t\t\t\tif(rel) {\n\t\t\t\t\tval.Target = rel.Target;\n\t\t\t\t\tif(val.loc) val.Target += \"#\"+val.loc;\n\t\t\t\t\tval.Rel = rel;\n\t\t\t\t}\n\t\t\t\tfor(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {\n\t\t\t\t\taddr = encode_cell({c:C,r:R});\n\t\t\t\t\tif(!s[addr]) s[addr] = {t:'s',v:undefined};\n\t\t\t\t\ts[addr].l = val;\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'BrtArrFmla': break; // TODO\n\t\t\tcase 'BrtShrFmla': break; // TODO\n\t\t\tcase 'BrtBeginSheet': break;\n\t\t\tcase 'BrtWsProp': break; // TODO\n\t\t\tcase 'BrtSheetCalcProp': break; // TODO\n\t\t\tcase 'BrtBeginWsViews': break; // TODO\n\t\t\tcase 'BrtBeginWsView': break; // TODO\n\t\t\tcase 'BrtPane': break; // TODO\n\t\t\tcase 'BrtSel': break; // TODO\n\t\t\tcase 'BrtEndWsView': break; // TODO\n\t\t\tcase 'BrtEndWsViews': break; // TODO\n\t\t\tcase 'BrtACBegin': break; // TODO\n\t\t\tcase 'BrtRwDescent': break; // TODO\n\t\t\tcase 'BrtACEnd': break; // TODO\n\t\t\tcase 'BrtWsFmtInfoEx14': break; // TODO\n\t\t\tcase 'BrtWsFmtInfo': break; // TODO\n\t\t\tcase 'BrtBeginColInfos': break; // TODO\n\t\t\tcase 'BrtColInfo': break; // TODO\n\t\t\tcase 'BrtEndColInfos': break; // TODO\n\t\t\tcase 'BrtBeginSheetData': break; // TODO\n\t\t\tcase 'BrtEndSheetData': break; // TODO\n\t\t\tcase 'BrtSheetProtection': break; // TODO\n\t\t\tcase 'BrtPrintOptions': break; // TODO\n\t\t\tcase 'BrtMargins': break; // TODO\n\t\t\tcase 'BrtPageSetup': break; // TODO\n\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\tcase 'BrtEndSheet': break; // TODO\n\t\t\tcase 'BrtDrawing': break; // TODO\n\t\t\tcase 'BrtLegacyDrawing': break; // TODO\n\t\t\tcase 'BrtLegacyDrawingHF': break; // TODO\n\t\t\tcase 'BrtPhoneticInfo': break; // TODO\n\t\t\tcase 'BrtBeginHeaderFooter': break; // TODO\n\t\t\tcase 'BrtEndHeaderFooter': break; // TODO\n\t\t\tcase 'BrtBrk': break; // TODO\n\t\t\tcase 'BrtBeginRwBrk': break; // TODO\n\t\t\tcase 'BrtEndRwBrk': break; // TODO\n\t\t\tcase 'BrtBeginColBrk': break; // TODO\n\t\t\tcase 'BrtEndColBrk': break; // TODO\n\t\t\tcase 'BrtBeginUserShViews': break; // TODO\n\t\t\tcase 'BrtBeginUserShView': break; // TODO\n\t\t\tcase 'BrtEndUserShView': break; // TODO\n\t\t\tcase 'BrtEndUserShViews': break; // TODO\n\t\t\tcase 'BrtBkHim': break; // TODO\n\t\t\tcase 'BrtBeginOleObjects': break; // TODO\n\t\t\tcase 'BrtOleObject': break; // TODO\n\t\t\tcase 'BrtEndOleObjects': break; // TODO\n\t\t\tcase 'BrtBeginListParts': break; // TODO\n\t\t\tcase 'BrtListPart': break; // TODO\n\t\t\tcase 'BrtEndListParts': break; // TODO\n\t\t\tcase 'BrtBeginSortState': break; // TODO\n\t\t\tcase 'BrtBeginSortCond': break; // TODO\n\t\t\tcase 'BrtEndSortCond': break; // TODO\n\t\t\tcase 'BrtEndSortState': break; // TODO\n\t\t\tcase 'BrtBeginConditionalFormatting': break; // TODO\n\t\t\tcase 'BrtEndConditionalFormatting': break; // TODO\n\t\t\tcase 'BrtBeginCFRule': break; // TODO\n\t\t\tcase 'BrtEndCFRule': break; // TODO\n\t\t\tcase 'BrtBeginDVals': break; // TODO\n\t\t\tcase 'BrtDVal': break; // TODO\n\t\t\tcase 'BrtEndDVals': break; // TODO\n\t\t\tcase 'BrtRangeProtection': break; // TODO\n\t\t\tcase 'BrtBeginDCon': break; // TODO\n\t\t\tcase 'BrtEndDCon': break; // TODO\n\t\t\tcase 'BrtBeginDRefs': break;\n\t\t\tcase 'BrtDRef': break;\n\t\t\tcase 'BrtEndDRefs': break;\n\n\t\t\t/* ActiveX */\n\t\t\tcase 'BrtBeginActiveXControls': break;\n\t\t\tcase 'BrtActiveX': break;\n\t\t\tcase 'BrtEndActiveXControls': break;\n\n\t\t\t/* AutoFilter */\n\t\t\tcase 'BrtBeginAFilter': break;\n\t\t\tcase 'BrtEndAFilter': break;\n\t\t\tcase 'BrtBeginFilterColumn': break;\n\t\t\tcase 'BrtBeginFilters': break;\n\t\t\tcase 'BrtFilter': break;\n\t\t\tcase 'BrtEndFilters': break;\n\t\t\tcase 'BrtEndFilterColumn': break;\n\t\t\tcase 'BrtDynamicFilter': break;\n\t\t\tcase 'BrtTop10Filter': break;\n\t\t\tcase 'BrtBeginCustomFilters': break;\n\t\t\tcase 'BrtCustomFilter': break;\n\t\t\tcase 'BrtEndCustomFilters': break;\n\n\t\t\t/* Smart Tags */\n\t\t\tcase 'BrtBeginSmartTags': break;\n\t\t\tcase 'BrtBeginCellSmartTags': break;\n\t\t\tcase 'BrtBeginCellSmartTag': break;\n\t\t\tcase 'BrtCellSmartTagProperty': break;\n\t\t\tcase 'BrtEndCellSmartTag': break;\n\t\t\tcase 'BrtEndCellSmartTags': break;\n\t\t\tcase 'BrtEndSmartTags': break;\n\n\t\t\t/* Cell Watch */\n\t\t\tcase 'BrtBeginCellWatches': break;\n\t\t\tcase 'BrtCellWatch': break;\n\t\t\tcase 'BrtEndCellWatches': break;\n\n\t\t\t/* Table */\n\t\t\tcase 'BrtTable': break;\n\n\t\t\t/* Ignore Cell Errors */\n\t\t\tcase 'BrtBeginCellIgnoreECs': break;\n\t\t\tcase 'BrtCellIgnoreEC': break;\n\t\t\tcase 'BrtEndCellIgnoreECs': break;\n\n\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + R.n);\n\t\t}\n\t}, opts);\n\tif(!s[\"!ref\"] && (refguess.s.r < 1000000 || ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)) s[\"!ref\"] = encode_range(ref);\n\tif(opts.sheetRows && s[\"!ref\"]) {\n\t\tvar tmpref = safe_decode_range(s[\"!ref\"]);\n\t\tif(opts.sheetRows < +tmpref.e.r) {\n\t\t\ttmpref.e.r = opts.sheetRows - 1;\n\t\t\tif(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;\n\t\t\tif(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;\n\t\t\tif(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;\n\t\t\tif(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;\n\t\t\ts[\"!fullref\"] = s[\"!ref\"];\n\t\t\ts[\"!ref\"] = encode_range(tmpref);\n\t\t}\n\t}\n\tif(mergecells.length > 0) s[\"!merges\"] = mergecells;\n\treturn s;\n}\n\n/* TODO: something useful -- this is a stub */\nfunction write_ws_bin_cell(ba, cell, R, C, opts) {\n\tif(cell.v === undefined) return \"\";\n\tvar vv = \"\";\n\tswitch(cell.t) {\n\t\tcase 'b': vv = cell.v ? \"1\" : \"0\"; break;\n\t\tcase 'n': case 'e': vv = ''+cell.v; break;\n\t\tdefault: vv = cell.v; break;\n\t}\n\tvar o = {r:R, c:C};\n\t/* TODO: cell style */\n\to.s = get_cell_style(opts.cellXfs, cell, opts);\n\tswitch(cell.t) {\n\t\tcase 's': case 'str':\n\t\t\tif(opts.bookSST) {\n\t\t\t\tvv = get_sst_id(opts.Strings, cell.v);\n\t\t\t\to.t = \"s\"; break;\n\t\t\t}\n\t\t\to.t = \"str\"; break;\n\t\tcase 'n': break;\n\t\tcase 'b': o.t = \"b\"; break;\n\t\tcase 'e': o.t = \"e\"; break;\n\t}\n\twrite_record(ba, \"BrtCellBlank\", write_BrtCellBlank(cell, o));\n}\n\nfunction write_CELLTABLE(ba, ws, idx, opts, wb) {\n\tvar range = safe_decode_range(ws['!ref'] || \"A1\"), ref, rr = \"\", cols = [];\n\twrite_record(ba, 'BrtBeginSheetData');\n\tfor(var R = range.s.r; R <= range.e.r; ++R) {\n\t\trr = encode_row(R);\n\t\t/* [ACCELLTABLE] */\n\t\t/* BrtRowHdr */\n\t\tfor(var C = range.s.c; C <= range.e.c; ++C) {\n\t\t\t/* *16384CELL */\n\t\t\tif(R === range.s.r) cols[C] = encode_col(C);\n\t\t\tref = cols[C] + rr;\n\t\t\tif(!ws[ref]) continue;\n\t\t\t/* write cell */\n\t\t\twrite_ws_bin_cell(ba, ws[ref], R, C, opts);\n\t\t}\n\t}\n\twrite_record(ba, 'BrtEndSheetData');\n}\n\nfunction write_ws_bin(idx, opts, wb) {\n\tvar ba = buf_array();\n\tvar s = wb.SheetNames[idx], ws = wb.Sheets[s] || {};\n\tvar r = safe_decode_range(ws['!ref'] || \"A1\");\n\twrite_record(ba, \"BrtBeginSheet\");\n\t/* [BrtWsProp] */\n\twrite_record(ba, \"BrtWsDim\", write_BrtWsDim(r));\n\t/* [WSVIEWS2] */\n\t/* [WSFMTINFO] */\n\t/* *COLINFOS */\n\twrite_CELLTABLE(ba, ws, idx, opts, wb);\n\t/* [BrtSheetCalcProp] */\n\t/* [[BrtSheetProtectionIso] BrtSheetProtection] */\n\t/* *([BrtRangeProtectionIso] BrtRangeProtection) */\n\t/* [SCENMAN] */\n\t/* [AUTOFILTER] */\n\t/* [SORTSTATE] */\n\t/* [DCON] */\n\t/* [USERSHVIEWS] */\n\t/* [MERGECELLS] */\n\t/* [BrtPhoneticInfo] */\n\t/* *CONDITIONALFORMATTING */\n\t/* [DVALS] */\n\t/* *BrtHLink */\n\t/* [BrtPrintOptions] */\n\t/* [BrtMargins] */\n\t/* [BrtPageSetup] */\n\t/* [HEADERFOOTER] */\n\t/* [RWBRK] */\n\t/* [COLBRK] */\n\t/* *BrtBigName */\n\t/* [CELLWATCHES] */\n\t/* [IGNOREECS] */\n\t/* [SMARTTAGS] */\n\t/* [BrtDrawing] */\n\t/* [BrtLegacyDrawing] */\n\t/* [BrtLegacyDrawingHF] */\n\t/* [BrtBkHim] */\n\t/* [OLEOBJECTS] */\n\t/* [ACTIVEXCONTROLS] */\n\t/* [WEBPUBITEMS] */\n\t/* [LISTPARTS] */\n\t/* FRTWORKSHEET */\n\twrite_record(ba, \"BrtEndSheet\");\n\treturn ba.end();\n}\n/* 18.2.28 (CT_WorkbookProtection) Defaults */\nvar WBPropsDef = [\n\t['allowRefreshQuery', '0'],\n\t['autoCompressPictures', '1'],\n\t['backupFile', '0'],\n\t['checkCompatibility', '0'],\n\t['codeName', ''],\n\t['date1904', '0'],\n\t['dateCompatibility', '1'],\n\t//['defaultThemeVersion', '0'],\n\t['filterPrivacy', '0'],\n\t['hidePivotFieldList', '0'],\n\t['promptedSolutions', '0'],\n\t['publishItems', '0'],\n\t['refreshAllConnections', false],\n\t['saveExternalLinkValues', '1'],\n\t['showBorderUnselectedTables', '1'],\n\t['showInkAnnotation', '1'],\n\t['showObjects', 'all'],\n\t['showPivotChartFilter', '0']\n\t//['updateLinks', 'userSet']\n];\n\n/* 18.2.30 (CT_BookView) Defaults */\nvar WBViewDef = [\n\t['activeTab', '0'],\n\t['autoFilterDateGrouping', '1'],\n\t['firstSheet', '0'],\n\t['minimized', '0'],\n\t['showHorizontalScroll', '1'],\n\t['showSheetTabs', '1'],\n\t['showVerticalScroll', '1'],\n\t['tabRatio', '600'],\n\t['visibility', 'visible']\n\t//window{Height,Width}, {x,y}Window\n];\n\n/* 18.2.19 (CT_Sheet) Defaults */\nvar SheetDef = [\n\t['state', 'visible']\n];\n\n/* 18.2.2  (CT_CalcPr) Defaults */\nvar CalcPrDef = [\n\t['calcCompleted', 'true'],\n\t['calcMode', 'auto'],\n\t['calcOnSave', 'true'],\n\t['concurrentCalc', 'true'],\n\t['fullCalcOnLoad', 'false'],\n\t['fullPrecision', 'true'],\n\t['iterate', 'false'],\n\t['iterateCount', '100'],\n\t['iterateDelta', '0.001'],\n\t['refMode', 'A1']\n];\n\n/* 18.2.3 (CT_CustomWorkbookView) Defaults */\nvar CustomWBViewDef = [\n\t['autoUpdate', 'false'],\n\t['changesSavedWin', 'false'],\n\t['includeHiddenRowCol', 'true'],\n\t['includePrintSettings', 'true'],\n\t['maximized', 'false'],\n\t['minimized', 'false'],\n\t['onlySync', 'false'],\n\t['personalView', 'false'],\n\t['showComments', 'commIndicator'],\n\t['showFormulaBar', 'true'],\n\t['showHorizontalScroll', 'true'],\n\t['showObjects', 'all'],\n\t['showSheetTabs', 'true'],\n\t['showStatusbar', 'true'],\n\t['showVerticalScroll', 'true'],\n\t['tabRatio', '600'],\n\t['xWindow', '0'],\n\t['yWindow', '0']\n];\n\nfunction push_defaults_array(target, defaults) {\n\tfor(var j = 0; j != target.length; ++j) { var w = target[j];\n\t\tfor(var i=0; i != defaults.length; ++i) { var z = defaults[i];\n\t\t\tif(w[z[0]] == null) w[z[0]] = z[1];\n\t\t}\n\t}\n}\nfunction push_defaults(target, defaults) {\n\tfor(var i = 0; i != defaults.length; ++i) { var z = defaults[i];\n\t\tif(target[z[0]] == null) target[z[0]] = z[1];\n\t}\n}\n\nfunction parse_wb_defaults(wb) {\n\tpush_defaults(wb.WBProps, WBPropsDef);\n\tpush_defaults(wb.CalcPr, CalcPrDef);\n\n\tpush_defaults_array(wb.WBView, WBViewDef);\n\tpush_defaults_array(wb.Sheets, SheetDef);\n\n\t_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904, 'date1904');\n}\n/* 18.2 Workbook */\nvar wbnsregex = /<\\w+:workbook/;\nfunction parse_wb_xml(data, opts) {\n\tvar wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: \"\" };\n\tvar pass = false, xmlns = \"xmlns\";\n\tdata.match(tagregex).forEach(function xml_wb(x) {\n\t\tvar y = parsexmltag(x);\n\t\tswitch(strip_ns(y[0])) {\n\t\t\tcase '<?xml': break;\n\n\t\t\t/* 18.2.27 workbook CT_Workbook 1 */\n\t\t\tcase '<workbook':\n\t\t\t\tif(x.match(wbnsregex)) xmlns = \"xmlns\" + x.match(/<(\\w+):/)[1];\n\t\t\t\twb.xmlns = y[xmlns];\n\t\t\t\tbreak;\n\t\t\tcase '</workbook>': break;\n\n\t\t\t/* 18.2.13 fileVersion CT_FileVersion ? */\n\t\t\tcase '<fileVersion': delete y[0]; wb.AppVersion = y; break;\n\t\t\tcase '<fileVersion/>': break;\n\n\t\t\t/* 18.2.12 fileSharing CT_FileSharing ? */\n\t\t\tcase '<fileSharing': case '<fileSharing/>': break;\n\n\t\t\t/* 18.2.28 workbookPr CT_WorkbookPr ? */\n\t\t\tcase '<workbookPr': delete y[0]; wb.WBProps = y; break;\n\t\t\tcase '<workbookPr/>': delete y[0]; wb.WBProps = y; break;\n\n\t\t\t/* 18.2.29 workbookProtection CT_WorkbookProtection ? */\n\t\t\tcase '<workbookProtection': break;\n\t\t\tcase '<workbookProtection/>': break;\n\n\t\t\t/* 18.2.1  bookViews CT_BookViews ? */\n\t\t\tcase '<bookViews>': case '</bookViews>': break;\n\t\t\t/* 18.2.30   workbookView CT_BookView + */\n\t\t\tcase '<workbookView': delete y[0]; wb.WBView.push(y); break;\n\n\t\t\t/* 18.2.20 sheets CT_Sheets 1 */\n\t\t\tcase '<sheets>': case '</sheets>': break; // aggregate sheet\n\t\t\t/* 18.2.19   sheet CT_Sheet + */\n\t\t\tcase '<sheet': delete y[0]; y.name = utf8read(y.name); wb.Sheets.push(y); break;\n\n\t\t\t/* 18.2.15 functionGroups CT_FunctionGroups ? */\n\t\t\tcase '<functionGroups': case '<functionGroups/>': break;\n\t\t\t/* 18.2.14   functionGroup CT_FunctionGroup + */\n\t\t\tcase '<functionGroup': break;\n\n\t\t\t/* 18.2.9  externalReferences CT_ExternalReferences ? */\n\t\t\tcase '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;\n\t\t\t/* 18.2.8    externalReference CT_ExternalReference + */\n\t\t\tcase '<externalReference': break;\n\n\t\t\t/* 18.2.6  definedNames CT_DefinedNames ? */\n\t\t\tcase '<definedNames/>': break;\n\t\t\tcase '<definedNames>': case '<definedNames': pass=true; break;\n\t\t\tcase '</definedNames>': pass=false; break;\n\t\t\t/* 18.2.5    definedName CT_DefinedName + */\n\t\t\tcase '<definedName': case '<definedName/>': case '</definedName>': break;\n\n\t\t\t/* 18.2.2  calcPr CT_CalcPr ? */\n\t\t\tcase '<calcPr': delete y[0]; wb.CalcPr = y; break;\n\t\t\tcase '<calcPr/>': delete y[0]; wb.CalcPr = y; break;\n\n\t\t\t/* 18.2.16 oleSize CT_OleSize ? (ref required) */\n\t\t\tcase '<oleSize': break;\n\n\t\t\t/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */\n\t\t\tcase '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;\n\t\t\t/* 18.2.3    customWorkbookView CT_CustomWorkbookView + */\n\t\t\tcase '<customWorkbookView': case '</customWorkbookView>': break;\n\n\t\t\t/* 18.2.18 pivotCaches CT_PivotCaches ? */\n\t\t\tcase '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;\n\t\t\t/* 18.2.17 pivotCache CT_PivotCache ? */\n\t\t\tcase '<pivotCache': break;\n\n\t\t\t/* 18.2.21 smartTagPr CT_SmartTagPr ? */\n\t\t\tcase '<smartTagPr': case '<smartTagPr/>': break;\n\n\t\t\t/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */\n\t\t\tcase '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;\n\t\t\t/* 18.2.22   smartTagType CT_SmartTagType ? */\n\t\t\tcase '<smartTagType': break;\n\n\t\t\t/* 18.2.24 webPublishing CT_WebPublishing ? */\n\t\t\tcase '<webPublishing': case '<webPublishing/>': break;\n\n\t\t\t/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */\n\t\t\tcase '<fileRecoveryPr': case '<fileRecoveryPr/>': break;\n\n\t\t\t/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */\n\t\t\tcase '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;\n\t\t\t/* 18.2.25 webPublishObject CT_WebPublishObject ? */\n\t\t\tcase '<webPublishObject': break;\n\n\t\t\t/* 18.2.10 extLst CT_ExtensionList ? */\n\t\t\tcase '<extLst>': case '</extLst>': case '<extLst/>': break;\n\t\t\t/* 18.2.7    ext CT_Extension + */\n\t\t\tcase '<ext': pass=true; break; //TODO: check with versions of excel\n\t\t\tcase '</ext>': pass=false; break;\n\n\t\t\t/* Others */\n\t\t\tcase '<ArchID': break;\n\t\t\tcase '<AlternateContent': pass=true; break;\n\t\t\tcase '</AlternateContent>': pass=false; break;\n\n\t\t\tdefault: if(!pass && opts.WTF) throw 'unrecognized ' + y[0] + ' in workbook';\n\t\t}\n\t});\n\tif(XMLNS.main.indexOf(wb.xmlns) === -1) throw new Error(\"Unknown Namespace: \" + wb.xmlns);\n\n\tparse_wb_defaults(wb);\n\n\treturn wb;\n}\n\nvar WB_XML_ROOT = writextag('workbook', null, {\n\t'xmlns': XMLNS.main[0],\n\t//'xmlns:mx': XMLNS.mx,\n\t//'xmlns:s': XMLNS.main[0],\n\t'xmlns:r': XMLNS.r\n});\n\nfunction safe1904(wb) {\n\t/* TODO: store date1904 somewhere else */\n\ttry { return parsexmlbool(wb.Workbook.WBProps.date1904) ? \"true\" : \"false\"; } catch(e) { return \"false\"; }\n}\n\nfunction write_wb_xml(wb, opts) {\n\tvar o = [XML_HEADER];\n\to[o.length] = WB_XML_ROOT;\n\to[o.length] = (writextag('workbookPr', null, {date1904:safe1904(wb)}));\n\to[o.length] = \"<sheets>\";\n\tfor(var i = 0; i != wb.SheetNames.length; ++i)\n\t\to[o.length] = (writextag('sheet',null,{name:wb.SheetNames[i].substr(0,31), sheetId:\"\"+(i+1), \"r:id\":\"rId\"+(i+1)}));\n\to[o.length] = \"</sheets>\";\n\tif(o.length>2){ o[o.length] = '</workbook>'; o[1]=o[1].replace(\"/>\",\">\"); }\n\treturn o.join(\"\");\n}\n/* [MS-XLSB] 2.4.301 BrtBundleSh */\nfunction parse_BrtBundleSh(data, length) {\n\tvar z = {};\n\tz.hsState = data.read_shift(4); //ST_SheetState\n\tz.iTabID = data.read_shift(4);\n\tz.strRelID = parse_RelID(data,length-8);\n\tz.name = parse_XLWideString(data);\n\treturn z;\n}\nfunction write_BrtBundleSh(data, o) {\n\tif(!o) o = new_buf(127);\n\to.write_shift(4, data.hsState);\n\to.write_shift(4, data.iTabID);\n\twrite_RelID(data.strRelID, o);\n\twrite_XLWideString(data.name.substr(0,31), o);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.4.807 BrtWbProp */\nfunction parse_BrtWbProp(data, length) {\n\tdata.read_shift(4);\n\tvar dwThemeVersion = data.read_shift(4);\n\tvar strName = (length > 8) ? parse_XLWideString(data) : \"\";\n\treturn [dwThemeVersion, strName];\n}\nfunction write_BrtWbProp(data, o) {\n\tif(!o) o = new_buf(8);\n\to.write_shift(4, 0);\n\to.write_shift(4, 0);\n\treturn o;\n}\n\nfunction parse_BrtFRTArchID$(data, length) {\n\tvar o = {};\n\tdata.read_shift(4);\n\to.ArchID = data.read_shift(4);\n\tdata.l += length - 8;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.1.7.60 Workbook */\nfunction parse_wb_bin(data, opts) {\n\tvar wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: \"\" };\n\tvar pass = false, z;\n\n\trecordhopper(data, function hopper_wb(val, R) {\n\t\tswitch(R.n) {\n\t\t\tcase 'BrtBundleSh': wb.Sheets.push(val); break;\n\n\t\t\tcase 'BrtBeginBook': break;\n\t\t\tcase 'BrtFileVersion': break;\n\t\t\tcase 'BrtWbProp': break;\n\t\t\tcase 'BrtACBegin': break;\n\t\t\tcase 'BrtAbsPath15': break;\n\t\t\tcase 'BrtACEnd': break;\n\t\t\tcase 'BrtWbFactoid': break;\n\t\t\t/*case 'BrtBookProtectionIso': break;*/\n\t\t\tcase 'BrtBookProtection': break;\n\t\t\tcase 'BrtBeginBookViews': break;\n\t\t\tcase 'BrtBookView': break;\n\t\t\tcase 'BrtEndBookViews': break;\n\t\t\tcase 'BrtBeginBundleShs': break;\n\t\t\tcase 'BrtEndBundleShs': break;\n\t\t\tcase 'BrtBeginFnGroup': break;\n\t\t\tcase 'BrtEndFnGroup': break;\n\t\t\tcase 'BrtBeginExternals': break;\n\t\t\tcase 'BrtSupSelf': break;\n\t\t\tcase 'BrtSupBookSrc': break;\n\t\t\tcase 'BrtExternSheet': break;\n\t\t\tcase 'BrtEndExternals': break;\n\t\t\tcase 'BrtName': break;\n\t\t\tcase 'BrtCalcProp': break;\n\t\t\tcase 'BrtUserBookView': break;\n\t\t\tcase 'BrtBeginPivotCacheIDs': break;\n\t\t\tcase 'BrtBeginPivotCacheID': break;\n\t\t\tcase 'BrtEndPivotCacheID': break;\n\t\t\tcase 'BrtEndPivotCacheIDs': break;\n\t\t\tcase 'BrtWebOpt': break;\n\t\t\tcase 'BrtFileRecover': break;\n\t\t\tcase 'BrtFileSharing': break;\n\t\t\t/*case 'BrtBeginWebPubItems': break;\n\t\t\tcase 'BrtBeginWebPubItem': break;\n\t\t\tcase 'BrtEndWebPubItem': break;\n\t\t\tcase 'BrtEndWebPubItems': break;*/\n\n\t\t\t/* Smart Tags */\n\t\t\tcase 'BrtBeginSmartTagTypes': break;\n\t\t\tcase 'BrtSmartTagType': break;\n\t\t\tcase 'BrtEndSmartTagTypes': break;\n\n\t\t\tcase 'BrtFRTBegin': pass = true; break;\n\t\t\tcase 'BrtFRTArchID$': break;\n\t\t\tcase 'BrtWorkBookPr15': break;\n\t\t\tcase 'BrtFRTEnd': pass = false; break;\n\t\t\tcase 'BrtEndBook': break;\n\t\t\tdefault: if(!pass || opts.WTF) throw new Error(\"Unexpected record \" + R.n);\n\t\t}\n\t});\n\n\tparse_wb_defaults(wb);\n\n\treturn wb;\n}\n\n/* [MS-XLSB] 2.1.7.60 Workbook */\nfunction write_BUNDLESHS(ba, wb, opts) {\n\twrite_record(ba, \"BrtBeginBundleShs\");\n\tfor(var idx = 0; idx != wb.SheetNames.length; ++idx) {\n\t\tvar d = { hsState: 0, iTabID: idx+1, strRelID: 'rId' + (idx+1), name: wb.SheetNames[idx] };\n\t\twrite_record(ba, \"BrtBundleSh\", write_BrtBundleSh(d));\n\t}\n\twrite_record(ba, \"BrtEndBundleShs\");\n}\n\n/* [MS-XLSB] 2.4.643 BrtFileVersion */\nfunction write_BrtFileVersion(data, o) {\n\tif(!o) o = new_buf(127);\n\tfor(var i = 0; i != 4; ++i) o.write_shift(4, 0);\n\twrite_XLWideString(\"SheetJS\", o);\n\twrite_XLWideString(XLSX.version, o);\n\twrite_XLWideString(XLSX.version, o);\n\twrite_XLWideString(\"7262\", o);\n\to.length = o.l;\n\treturn o;\n}\n\n/* [MS-XLSB] 2.1.7.60 Workbook */\nfunction write_BOOKVIEWS(ba, wb, opts) {\n\twrite_record(ba, \"BrtBeginBookViews\");\n\t/* 1*(BrtBookView *FRT) */\n\twrite_record(ba, \"BrtEndBookViews\");\n}\n\n/* [MS-XLSB] 2.4.302 BrtCalcProp */\nfunction write_BrtCalcProp(data, o) {\n\tif(!o) o = new_buf(26);\n\to.write_shift(4,0); /* force recalc */\n\to.write_shift(4,1);\n\to.write_shift(4,0);\n\twrite_Xnum(0, o);\n\to.write_shift(-4, 1023);\n\to.write_shift(1, 0x33);\n\to.write_shift(1, 0x00);\n\treturn o;\n}\n\nfunction write_BrtFileRecover(data, o) {\n\tif(!o) o = new_buf(1);\n\to.write_shift(1,0);\n\treturn o;\n}\n\n/* [MS-XLSB] 2.1.7.60 Workbook */\nfunction write_wb_bin(wb, opts) {\n\tvar ba = buf_array();\n\twrite_record(ba, \"BrtBeginBook\");\n\twrite_record(ba, \"BrtFileVersion\", write_BrtFileVersion());\n\t/* [[BrtFileSharingIso] BrtFileSharing] */\n\twrite_record(ba, \"BrtWbProp\", write_BrtWbProp());\n\t/* [ACABSPATH] */\n\t/* [[BrtBookProtectionIso] BrtBookProtection] */\n\twrite_BOOKVIEWS(ba, wb, opts);\n\twrite_BUNDLESHS(ba, wb, opts);\n\t/* [FNGROUP] */\n\t/* [EXTERNALS] */\n\t/* *BrtName */\n\twrite_record(ba, \"BrtCalcProp\", write_BrtCalcProp());\n\t/* [BrtOleSize] */\n\t/* *(BrtUserBookView *FRT) */\n\t/* [PIVOTCACHEIDS] */\n\t/* [BrtWbFactoid] */\n\t/* [SMARTTAGTYPES] */\n\t/* [BrtWebOpt] */\n\twrite_record(ba, \"BrtFileRecover\", write_BrtFileRecover());\n\t/* [WEBPUBITEMS] */\n\t/* [CRERRS] */\n\t/* FRTWORKBOOK */\n\twrite_record(ba, \"BrtEndBook\");\n\n\treturn ba.end();\n}\nfunction parse_wb(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? parse_wb_bin : parse_wb_xml)(data, opts);\n}\n\nfunction parse_ws(data, name, opts, rels) {\n\treturn (name.substr(-4)===\".bin\" ? parse_ws_bin : parse_ws_xml)(data, opts, rels);\n}\n\nfunction parse_sty(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? parse_sty_bin : parse_sty_xml)(data, opts);\n}\n\nfunction parse_theme(data, name, opts) {\n\treturn parse_theme_xml(data, opts);\n}\n\nfunction parse_sst(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? parse_sst_bin : parse_sst_xml)(data, opts);\n}\n\nfunction parse_cmnt(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? parse_comments_bin : parse_comments_xml)(data, opts);\n}\n\nfunction parse_cc(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? parse_cc_bin : parse_cc_xml)(data, opts);\n}\n\nfunction write_wb(wb, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? write_wb_bin : write_wb_xml)(wb, opts);\n}\n\nfunction write_ws(data, name, opts, wb) {\n\treturn (name.substr(-4)===\".bin\" ? write_ws_bin : write_ws_xml)(data, opts, wb);\n}\n\nfunction write_sty(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? write_sty_bin : write_sty_xml)(data, opts);\n}\n\nfunction write_sst(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? write_sst_bin : write_sst_xml)(data, opts);\n}\n/*\nfunction write_cmnt(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? write_comments_bin : write_comments_xml)(data, opts);\n}\n\nfunction write_cc(data, name, opts) {\n\treturn (name.substr(-4)===\".bin\" ? write_cc_bin : write_cc_xml)(data, opts);\n}\n*/\nvar attregexg2=/([\\w:]+)=((?:\")([^\"]*)(?:\")|(?:')([^']*)(?:'))/g;\nvar attregex2=/([\\w:]+)=((?:\")(?:[^\"]*)(?:\")|(?:')(?:[^']*)(?:'))/;\nvar _chr = function(c) { return String.fromCharCode(c); };\nfunction xlml_parsexmltag(tag, skip_root) {\n\tvar words = tag.split(/\\s+/);\n\tvar z = []; if(!skip_root) z[0] = words[0];\n\tif(words.length === 1) return z;\n\tvar m = tag.match(attregexg2), y, j, w, i;\n\tif(m) for(i = 0; i != m.length; ++i) {\n\t\ty = m[i].match(attregex2);\n\t\tif((j=y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);\n\t\telse {\n\t\t\tif(y[1].substr(0,6) === \"xmlns:\") w = \"xmlns\"+y[1].substr(6);\n\t\t\telse w = y[1].substr(j+1);\n\t\t\tz[w] = y[2].substr(1,y[2].length-2);\n\t\t}\n\t}\n\treturn z;\n}\nfunction xlml_parsexmltagobj(tag) {\n\tvar words = tag.split(/\\s+/);\n\tvar z = {};\n\tif(words.length === 1) return z;\n\tvar m = tag.match(attregexg2), y, j, w, i;\n\tif(m) for(i = 0; i != m.length; ++i) {\n\t\ty = m[i].match(attregex2);\n\t\tif((j=y[1].indexOf(\":\")) === -1) z[y[1]] = y[2].substr(1,y[2].length-2);\n\t\telse {\n\t\t\tif(y[1].substr(0,6) === \"xmlns:\") w = \"xmlns\"+y[1].substr(6);\n\t\t\telse w = y[1].substr(j+1);\n\t\t\tz[w] = y[2].substr(1,y[2].length-2);\n\t\t}\n\t}\n\treturn z;\n}\n\n// ----\n\nfunction xlml_format(format, value) {\n\tvar fmt = XLMLFormatMap[format] || unescapexml(format);\n\tif(fmt === \"General\") return SSF._general(value);\n\treturn SSF.format(fmt, value);\n}\n\nfunction xlml_set_custprop(Custprops, Rn, cp, val) {\n\tswitch((cp[0].match(/dt:dt=\"([\\w.]+)\"/)||[\"\",\"\"])[1]) {\n\t\tcase \"boolean\": val = parsexmlbool(val); break;\n\t\tcase \"i2\": case \"int\": val = parseInt(val, 10); break;\n\t\tcase \"r4\": case \"float\": val = parseFloat(val); break;\n\t\tcase \"date\": case \"dateTime.tz\": val = new Date(val); break;\n\t\tcase \"i8\": case \"string\": case \"fixed\": case \"uuid\": case \"bin.base64\": break;\n\t\tdefault: throw \"bad custprop:\" + cp[0];\n\t}\n\tCustprops[unescapexml(Rn[3])] = val;\n}\n\nfunction safe_format_xlml(cell, nf, o) {\n\ttry {\n\t\tif(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }\n\t\telse if(nf === \"General\") {\n\t\t\tif(cell.t === 'n') {\n\t\t\t\tif((cell.v|0) === cell.v) cell.w = SSF._general_int(cell.v);\n\t\t\t\telse cell.w = SSF._general_num(cell.v);\n\t\t\t}\n\t\t\telse cell.w = SSF._general(cell.v);\n\t\t}\n\t\telse cell.w = xlml_format(nf||\"General\", cell.v);\n\t\tif(o.cellNF) cell.z = XLMLFormatMap[nf]||nf||\"General\";\n\t} catch(e) { if(o.WTF) throw e; }\n}\n\nfunction process_style_xlml(styles, stag, opts) {\n\tif(opts.cellStyles) {\n\t\tif(stag.Interior) {\n\t\t\tvar I = stag.Interior;\n\t\t\tif(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;\n\t\t}\n\t}\n\tstyles[stag.ID] = stag;\n}\n\n/* TODO: there must exist some form of OSP-blessed spec */\nfunction parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, o) {\n\tvar nf = \"General\", sid = cell.StyleID, S = {}; o = o || {};\n\tvar interiors = [];\n\tif(sid === undefined && row) sid = row.StyleID;\n\tif(sid === undefined && csty) sid = csty.StyleID;\n\twhile(styles[sid] !== undefined) {\n\t\tif(styles[sid].nf) nf = styles[sid].nf;\n\t\tif(styles[sid].Interior) interiors.push(styles[sid].Interior);\n\t\tif(!styles[sid].Parent) break;\n\t\tsid = styles[sid].Parent;\n\t}\n\tswitch(data.Type) {\n\t\tcase 'Boolean':\n\t\t\tcell.t = 'b';\n\t\t\tcell.v = parsexmlbool(xml);\n\t\t\tbreak;\n\t\tcase 'String':\n\t\t\tcell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));\n\t\t\tcell.v = xml.indexOf(\"<\") > -1 ? ss : cell.r;\n\t\t\tbreak;\n\t\tcase 'DateTime':\n\t\t\tcell.v = (Date.parse(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n\t\t\tif(cell.v !== cell.v) cell.v = unescapexml(xml);\n\t\t\telse if(cell.v >= 1 && cell.v<60) cell.v = cell.v -1;\n\t\t\tif(!nf || nf == \"General\") nf = \"yyyy-mm-dd\";\n\t\t\t/* falls through */\n\t\tcase 'Number':\n\t\t\tif(cell.v === undefined) cell.v=+xml;\n\t\t\tif(!cell.t) cell.t = 'n';\n\t\t\tbreak;\n\t\tcase 'Error': cell.t = 'e'; cell.v = RBErr[xml]; cell.w = xml; break;\n\t\tdefault: cell.t = 's'; cell.v = xlml_fixstr(ss); break;\n\t}\n\tsafe_format_xlml(cell, nf, o);\n\tif(o.cellFormula != null && cell.Formula) {\n\t\tcell.f = rc_to_a1(unescapexml(cell.Formula), base);\n\t\tcell.Formula = undefined;\n\t}\n\tif(o.cellStyles) {\n\t\tinteriors.forEach(function(x) {\n\t\t\tif(!S.patternType && x.patternType) S.patternType = x.patternType;\n\t\t});\n\t\tcell.s = S;\n\t}\n\tcell.ixfe = cell.StyleID !== undefined ? cell.StyleID : 'Default';\n}\n\nfunction xlml_clean_comment(comment) {\n\tcomment.t = comment.v;\n\tcomment.v = comment.w = comment.ixfe = undefined;\n}\n\nfunction xlml_normalize(d) {\n\tif(has_buf && Buffer.isBuffer(d)) return d.toString('utf8');\n\tif(typeof d === 'string') return d;\n\tthrow \"badf\";\n}\n\n/* TODO: Everything */\nvar xlmlregex = /<(\\/?)([a-z0-9]*:|)(\\w+)[^>]*>/mg;\nfunction parse_xlml_xml(d, opts) {\n\tvar str = xlml_normalize(d);\n\tvar Rn;\n\tvar state = [], tmp;\n\tvar sheets = {}, sheetnames = [], cursheet = {}, sheetname = \"\";\n\tvar table = {}, cell = {}, row = {}, dtag, didx;\n\tvar c = 0, r = 0;\n\tvar refguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\tvar styles = {}, stag = {};\n\tvar ss = \"\", fidx = 0;\n\tvar mergecells = [];\n\tvar Props = {}, Custprops = {}, pidx = 0, cp = {};\n\tvar comments = [], comment = {};\n\tvar cstys = [], csty;\n\txlmlregex.lastIndex = 0;\n\twhile((Rn = xlmlregex.exec(str))) switch(Rn[3]) {\n\t\tcase 'Data':\n\t\t\tif(state[state.length-1][1]) break;\n\t\t\tif(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]==\"Comment\"?comment:cell, {c:c,r:r}, styles, cstys[c], row, opts);\n\t\t\telse { ss = \"\"; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }\n\t\t\tbreak;\n\t\tcase 'Cell':\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif(comments.length > 0) cell.c = comments;\n\t\t\t\tif((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) cursheet[encode_col(c) + encode_row(r)] = cell;\n\t\t\t\tif(cell.HRef) {\n\t\t\t\t\tcell.l = {Target:cell.HRef, tooltip:cell.HRefScreenTip};\n\t\t\t\t\tcell.HRef = cell.HRefScreenTip = undefined;\n\t\t\t\t}\n\t\t\t\tif(cell.MergeAcross || cell.MergeDown) {\n\t\t\t\t\tvar cc = c + (parseInt(cell.MergeAcross,10)|0);\n\t\t\t\t\tvar rr = r + (parseInt(cell.MergeDown,10)|0);\n\t\t\t\t\tmergecells.push({s:{c:c,r:r},e:{c:cc,r:rr}});\n\t\t\t\t}\n\t\t\t\t++c;\n\t\t\t\tif(cell.MergeAcross) c += +cell.MergeAcross;\n\t\t\t} else {\n\t\t\t\tcell = xlml_parsexmltagobj(Rn[0]);\n\t\t\t\tif(cell.Index) c = +cell.Index - 1;\n\t\t\t\tif(c < refguess.s.c) refguess.s.c = c;\n\t\t\t\tif(c > refguess.e.c) refguess.e.c = c;\n\t\t\t\tif(Rn[0].substr(-2) === \"/>\") ++c;\n\t\t\t\tcomments = [];\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Row':\n\t\t\tif(Rn[1]==='/' || Rn[0].substr(-2) === \"/>\") {\n\t\t\t\tif(r < refguess.s.r) refguess.s.r = r;\n\t\t\t\tif(r > refguess.e.r) refguess.e.r = r;\n\t\t\t\tif(Rn[0].substr(-2) === \"/>\") {\n\t\t\t\t\trow = xlml_parsexmltag(Rn[0]);\n\t\t\t\t\tif(row.Index) r = +row.Index - 1;\n\t\t\t\t}\n\t\t\t\tc = 0; ++r;\n\t\t\t} else {\n\t\t\t\trow = xlml_parsexmltag(Rn[0]);\n\t\t\t\tif(row.Index) r = +row.Index - 1;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Worksheet': /* TODO: read range from FullRows/FullColumns */\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n\t\t\t\tsheetnames.push(sheetname);\n\t\t\t\tif(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) cursheet[\"!ref\"] = encode_range(refguess);\n\t\t\t\tif(mergecells.length) cursheet[\"!merges\"] = mergecells;\n\t\t\t\tsheets[sheetname] = cursheet;\n\t\t\t} else {\n\t\t\t\trefguess = {s: {r:1000000, c:1000000}, e: {r:0, c:0} };\n\t\t\t\tr = c = 0;\n\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\ttmp = xlml_parsexmltag(Rn[0]);\n\t\t\t\tsheetname = tmp.Name;\n\t\t\t\tcursheet = {};\n\t\t\t\tmergecells = [];\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'Table':\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\telse if(Rn[0].slice(-2) == \"/>\") break;\n\t\t\telse {\n\t\t\t\ttable = xlml_parsexmltag(Rn[0]);\n\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\tcstys = [];\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Style':\n\t\t\tif(Rn[1]==='/') process_style_xlml(styles, stag, opts);\n\t\t\telse stag = xlml_parsexmltag(Rn[0]);\n\t\t\tbreak;\n\n\t\tcase 'NumberFormat':\n\t\t\tstag.nf = xlml_parsexmltag(Rn[0]).Format || \"General\";\n\t\t\tbreak;\n\n\t\tcase 'Column':\n\t\t\tif(state[state.length-1][0] !== 'Table') break;\n\t\t\tcsty = xlml_parsexmltag(Rn[0]);\n\t\t\tcstys[(csty.Index-1||cstys.length)] = csty;\n\t\t\tfor(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = csty;\n\t\t\tbreak;\n\n\t\tcase 'NamedRange': break;\n\t\tcase 'NamedCell': break;\n\t\tcase 'B': break;\n\t\tcase 'I': break;\n\t\tcase 'U': break;\n\t\tcase 'S': break;\n\t\tcase 'Sub': break;\n\t\tcase 'Sup': break;\n\t\tcase 'Span': break;\n\t\tcase 'Border': break;\n\t\tcase 'Alignment': break;\n\t\tcase 'Borders': break;\n\t\tcase 'Font':\n\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n\t\t\telse if(Rn[1]===\"/\") ss += str.slice(fidx, Rn.index);\n\t\t\telse fidx = Rn.index + Rn[0].length;\n\t\t\tbreak;\n\t\tcase 'Interior':\n\t\t\tif(!opts.cellStyles) break;\n\t\t\tstag.Interior = xlml_parsexmltag(Rn[0]);\n\t\t\tbreak;\n\t\tcase 'Protection': break;\n\n\t\tcase 'Author':\n\t\tcase 'Title':\n\t\tcase 'Description':\n\t\tcase 'Created':\n\t\tcase 'Keywords':\n\t\tcase 'Subject':\n\t\tcase 'Category':\n\t\tcase 'Company':\n\t\tcase 'LastAuthor':\n\t\tcase 'LastSaved':\n\t\tcase 'LastPrinted':\n\t\tcase 'Version':\n\t\tcase 'Revision':\n\t\tcase 'TotalTime':\n\t\tcase 'HyperlinkBase':\n\t\tcase 'Manager':\n\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n\t\t\telse if(Rn[1]===\"/\") xlml_set_prop(Props, Rn[3], str.slice(pidx, Rn.index));\n\t\t\telse pidx = Rn.index + Rn[0].length;\n\t\t\tbreak;\n\t\tcase 'Paragraphs': break;\n\n\t\tcase 'Styles':\n\t\tcase 'Workbook':\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\telse state.push([Rn[3], false]);\n\t\t\tbreak;\n\n\t\tcase 'Comment':\n\t\t\tif(Rn[1]==='/'){\n\t\t\t\tif((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;\n\t\t\t\txlml_clean_comment(comment);\n\t\t\t\tcomments.push(comment);\n\t\t\t} else {\n\t\t\t\tstate.push([Rn[3], false]);\n\t\t\t\ttmp = xlml_parsexmltag(Rn[0]);\n\t\t\t\tcomment = {a:tmp.Author};\n\t\t\t}\n\t\t\tbreak;\n\n\t\tcase 'Name': break;\n\n\t\tcase 'ComponentOptions':\n\t\tcase 'DocumentProperties':\n\t\tcase 'CustomDocumentProperties':\n\t\tcase 'OfficeDocumentSettings':\n\t\tcase 'PivotTable':\n\t\tcase 'PivotCache':\n\t\tcase 'Names':\n\t\tcase 'MapInfo':\n\t\tcase 'PageBreaks':\n\t\tcase 'QueryTable':\n\t\tcase 'DataValidation':\n\t\tcase 'AutoFilter':\n\t\tcase 'Sorting':\n\t\tcase 'Schema':\n\t\tcase 'data':\n\t\tcase 'ConditionalFormatting':\n\t\tcase 'SmartTagType':\n\t\tcase 'SmartTags':\n\t\tcase 'ExcelWorkbook':\n\t\tcase 'WorkbookOptions':\n\t\tcase 'WorksheetOptions':\n\t\t\tif(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw \"Bad state: \"+tmp;}\n\t\t\telse if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tvar seen = true;\n\t\t\tswitch(state[state.length-1][0]) {\n\t\t\t\t/* OfficeDocumentSettings */\n\t\t\t\tcase 'OfficeDocumentSettings': switch(Rn[3]) {\n\t\t\t\t\tcase 'AllowPNG': break;\n\t\t\t\t\tcase 'RemovePersonalInformation': break;\n\t\t\t\t\tcase 'DownloadComponents': break;\n\t\t\t\t\tcase 'LocationOfComponents': break;\n\t\t\t\t\tcase 'Colors': break;\n\t\t\t\t\tcase 'Color': break;\n\t\t\t\t\tcase 'Index': break;\n\t\t\t\t\tcase 'RGB': break;\n\t\t\t\t\tcase 'PixelsPerInch': break;\n\t\t\t\t\tcase 'TargetScreenSize': break;\n\t\t\t\t\tcase 'ReadOnlyRecommended': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* ComponentOptions */\n\t\t\t\tcase 'ComponentOptions': switch(Rn[3]) {\n\t\t\t\t\tcase 'Toolbar': break;\n\t\t\t\t\tcase 'HideOfficeLogo': break;\n\t\t\t\t\tcase 'SpreadsheetAutoFit': break;\n\t\t\t\t\tcase 'Label': break;\n\t\t\t\t\tcase 'Caption': break;\n\t\t\t\t\tcase 'MaxHeight': break;\n\t\t\t\t\tcase 'MaxWidth': break;\n\t\t\t\t\tcase 'NextSheetNumber': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* ExcelWorkbook */\n\t\t\t\tcase 'ExcelWorkbook': switch(Rn[3]) {\n\t\t\t\t\tcase 'WindowHeight': break;\n\t\t\t\t\tcase 'WindowWidth': break;\n\t\t\t\t\tcase 'WindowTopX': break;\n\t\t\t\t\tcase 'WindowTopY': break;\n\t\t\t\t\tcase 'TabRatio': break;\n\t\t\t\t\tcase 'ProtectStructure': break;\n\t\t\t\t\tcase 'ProtectWindows': break;\n\t\t\t\t\tcase 'ActiveSheet': break;\n\t\t\t\t\tcase 'DisplayInkNotes': break;\n\t\t\t\t\tcase 'FirstVisibleSheet': break;\n\t\t\t\t\tcase 'SupBook': break;\n\t\t\t\t\tcase 'SheetName': break;\n\t\t\t\t\tcase 'SheetIndex': break;\n\t\t\t\t\tcase 'SheetIndexFirst': break;\n\t\t\t\t\tcase 'SheetIndexLast': break;\n\t\t\t\t\tcase 'Dll': break;\n\t\t\t\t\tcase 'AcceptLabelsInFormulas': break;\n\t\t\t\t\tcase 'DoNotSaveLinkValues': break;\n\t\t\t\t\tcase 'Date1904': break;\n\t\t\t\t\tcase 'Iteration': break;\n\t\t\t\t\tcase 'MaxIterations': break;\n\t\t\t\t\tcase 'MaxChange': break;\n\t\t\t\t\tcase 'Path': break;\n\t\t\t\t\tcase 'Xct': break;\n\t\t\t\t\tcase 'Count': break;\n\t\t\t\t\tcase 'SelectedSheets': break;\n\t\t\t\t\tcase 'Calculation': break;\n\t\t\t\t\tcase 'Uncalced': break;\n\t\t\t\t\tcase 'StartupPrompt': break;\n\t\t\t\t\tcase 'Crn': break;\n\t\t\t\t\tcase 'ExternName': break;\n\t\t\t\t\tcase 'Formula': break;\n\t\t\t\t\tcase 'ColFirst': break;\n\t\t\t\t\tcase 'ColLast': break;\n\t\t\t\t\tcase 'WantAdvise': break;\n\t\t\t\t\tcase 'Boolean': break;\n\t\t\t\t\tcase 'Error': break;\n\t\t\t\t\tcase 'Text': break;\n\t\t\t\t\tcase 'OLE': break;\n\t\t\t\t\tcase 'NoAutoRecover': break;\n\t\t\t\t\tcase 'PublishObjects': break;\n\t\t\t\t\tcase 'DoNotCalculateBeforeSave': break;\n\t\t\t\t\tcase 'Number': break;\n\t\t\t\t\tcase 'RefModeR1C1': break;\n\t\t\t\t\tcase 'EmbedSaveSmartTags': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* WorkbookOptions */\n\t\t\t\tcase 'WorkbookOptions': switch(Rn[3]) {\n\t\t\t\t\tcase 'OWCVersion': break;\n\t\t\t\t\tcase 'Height': break;\n\t\t\t\t\tcase 'Width': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* WorksheetOptions */\n\t\t\t\tcase 'WorksheetOptions': switch(Rn[3]) {\n\t\t\t\t\tcase 'Unsynced': break;\n\t\t\t\t\tcase 'Visible': break;\n\t\t\t\t\tcase 'Print': break;\n\t\t\t\t\tcase 'Panes': break;\n\t\t\t\t\tcase 'Scale': break;\n\t\t\t\t\tcase 'Pane': break;\n\t\t\t\t\tcase 'Number': break;\n\t\t\t\t\tcase 'Layout': break;\n\t\t\t\t\tcase 'Header': break;\n\t\t\t\t\tcase 'Footer': break;\n\t\t\t\t\tcase 'PageSetup': break;\n\t\t\t\t\tcase 'PageMargins': break;\n\t\t\t\t\tcase 'Selected': break;\n\t\t\t\t\tcase 'ProtectObjects': break;\n\t\t\t\t\tcase 'EnableSelection': break;\n\t\t\t\t\tcase 'ProtectScenarios': break;\n\t\t\t\t\tcase 'ValidPrinterInfo': break;\n\t\t\t\t\tcase 'HorizontalResolution': break;\n\t\t\t\t\tcase 'VerticalResolution': break;\n\t\t\t\t\tcase 'NumberofCopies': break;\n\t\t\t\t\tcase 'ActiveRow': break;\n\t\t\t\t\tcase 'ActiveCol': break;\n\t\t\t\t\tcase 'ActivePane': break;\n\t\t\t\t\tcase 'TopRowVisible': break;\n\t\t\t\t\tcase 'TopRowBottomPane': break;\n\t\t\t\t\tcase 'LeftColumnVisible': break;\n\t\t\t\t\tcase 'LeftColumnRightPane': break;\n\t\t\t\t\tcase 'FitToPage': break;\n\t\t\t\t\tcase 'RangeSelection': break;\n\t\t\t\t\tcase 'PaperSizeIndex': break;\n\t\t\t\t\tcase 'PageLayoutZoom': break;\n\t\t\t\t\tcase 'PageBreakZoom': break;\n\t\t\t\t\tcase 'FilterOn': break;\n\t\t\t\t\tcase 'DoNotDisplayGridlines': break;\n\t\t\t\t\tcase 'SplitHorizontal': break;\n\t\t\t\t\tcase 'SplitVertical': break;\n\t\t\t\t\tcase 'FreezePanes': break;\n\t\t\t\t\tcase 'FrozenNoSplit': break;\n\t\t\t\t\tcase 'FitWidth': break;\n\t\t\t\t\tcase 'FitHeight': break;\n\t\t\t\t\tcase 'CommentsLayout': break;\n\t\t\t\t\tcase 'Zoom': break;\n\t\t\t\t\tcase 'LeftToRight': break;\n\t\t\t\t\tcase 'Gridlines': break;\n\t\t\t\t\tcase 'AllowSort': break;\n\t\t\t\t\tcase 'AllowFilter': break;\n\t\t\t\t\tcase 'AllowInsertRows': break;\n\t\t\t\t\tcase 'AllowDeleteRows': break;\n\t\t\t\t\tcase 'AllowInsertCols': break;\n\t\t\t\t\tcase 'AllowDeleteCols': break;\n\t\t\t\t\tcase 'AllowInsertHyperlinks': break;\n\t\t\t\t\tcase 'AllowFormatCells': break;\n\t\t\t\t\tcase 'AllowSizeCols': break;\n\t\t\t\t\tcase 'AllowSizeRows': break;\n\t\t\t\t\tcase 'NoSummaryRowsBelowDetail': break;\n\t\t\t\t\tcase 'TabColorIndex': break;\n\t\t\t\t\tcase 'DoNotDisplayHeadings': break;\n\t\t\t\t\tcase 'ShowPageLayoutZoom': break;\n\t\t\t\t\tcase 'NoSummaryColumnsRightDetail': break;\n\t\t\t\t\tcase 'BlackAndWhite': break;\n\t\t\t\t\tcase 'DoNotDisplayZeros': break;\n\t\t\t\t\tcase 'DisplayPageBreak': break;\n\t\t\t\t\tcase 'RowColHeadings': break;\n\t\t\t\t\tcase 'DoNotDisplayOutline': break;\n\t\t\t\t\tcase 'NoOrientation': break;\n\t\t\t\t\tcase 'AllowUsePivotTables': break;\n\t\t\t\t\tcase 'ZeroHeight': break;\n\t\t\t\t\tcase 'ViewableRange': break;\n\t\t\t\t\tcase 'Selection': break;\n\t\t\t\t\tcase 'ProtectContents': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* PivotTable */\n\t\t\t\tcase 'PivotTable': case 'PivotCache': switch(Rn[3]) {\n\t\t\t\t\tcase 'ImmediateItemsOnDrop': break;\n\t\t\t\t\tcase 'ShowPageMultipleItemLabel': break;\n\t\t\t\t\tcase 'CompactRowIndent': break;\n\t\t\t\t\tcase 'Location': break;\n\t\t\t\t\tcase 'PivotField': break;\n\t\t\t\t\tcase 'Orientation': break;\n\t\t\t\t\tcase 'LayoutForm': break;\n\t\t\t\t\tcase 'LayoutSubtotalLocation': break;\n\t\t\t\t\tcase 'LayoutCompactRow': break;\n\t\t\t\t\tcase 'Position': break;\n\t\t\t\t\tcase 'PivotItem': break;\n\t\t\t\t\tcase 'DataType': break;\n\t\t\t\t\tcase 'DataField': break;\n\t\t\t\t\tcase 'SourceName': break;\n\t\t\t\t\tcase 'ParentField': break;\n\t\t\t\t\tcase 'PTLineItems': break;\n\t\t\t\t\tcase 'PTLineItem': break;\n\t\t\t\t\tcase 'CountOfSameItems': break;\n\t\t\t\t\tcase 'Item': break;\n\t\t\t\t\tcase 'ItemType': break;\n\t\t\t\t\tcase 'PTSource': break;\n\t\t\t\t\tcase 'CacheIndex': break;\n\t\t\t\t\tcase 'ConsolidationReference': break;\n\t\t\t\t\tcase 'FileName': break;\n\t\t\t\t\tcase 'Reference': break;\n\t\t\t\t\tcase 'NoColumnGrand': break;\n\t\t\t\t\tcase 'NoRowGrand': break;\n\t\t\t\t\tcase 'BlankLineAfterItems': break;\n\t\t\t\t\tcase 'Hidden': break;\n\t\t\t\t\tcase 'Subtotal': break;\n\t\t\t\t\tcase 'BaseField': break;\n\t\t\t\t\tcase 'MapChildItems': break;\n\t\t\t\t\tcase 'Function': break;\n\t\t\t\t\tcase 'RefreshOnFileOpen': break;\n\t\t\t\t\tcase 'PrintSetTitles': break;\n\t\t\t\t\tcase 'MergeLabels': break;\n\t\t\t\t\tcase 'DefaultVersion': break;\n\t\t\t\t\tcase 'RefreshName': break;\n\t\t\t\t\tcase 'RefreshDate': break;\n\t\t\t\t\tcase 'RefreshDateCopy': break;\n\t\t\t\t\tcase 'VersionLastRefresh': break;\n\t\t\t\t\tcase 'VersionLastUpdate': break;\n\t\t\t\t\tcase 'VersionUpdateableMin': break;\n\t\t\t\t\tcase 'VersionRefreshableMin': break;\n\t\t\t\t\tcase 'Calculation': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* PageBreaks */\n\t\t\t\tcase 'PageBreaks': switch(Rn[3]) {\n\t\t\t\t\tcase 'ColBreaks': break;\n\t\t\t\t\tcase 'ColBreak': break;\n\t\t\t\t\tcase 'RowBreaks': break;\n\t\t\t\t\tcase 'RowBreak': break;\n\t\t\t\t\tcase 'ColStart': break;\n\t\t\t\t\tcase 'ColEnd': break;\n\t\t\t\t\tcase 'RowEnd': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* AutoFilter */\n\t\t\t\tcase 'AutoFilter': switch(Rn[3]) {\n\t\t\t\t\tcase 'AutoFilterColumn': break;\n\t\t\t\t\tcase 'AutoFilterCondition': break;\n\t\t\t\t\tcase 'AutoFilterAnd': break;\n\t\t\t\t\tcase 'AutoFilterOr': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* QueryTable */\n\t\t\t\tcase 'QueryTable': switch(Rn[3]) {\n\t\t\t\t\tcase 'Id': break;\n\t\t\t\t\tcase 'AutoFormatFont': break;\n\t\t\t\t\tcase 'AutoFormatPattern': break;\n\t\t\t\t\tcase 'QuerySource': break;\n\t\t\t\t\tcase 'QueryType': break;\n\t\t\t\t\tcase 'EnableRedirections': break;\n\t\t\t\t\tcase 'RefreshedInXl9': break;\n\t\t\t\t\tcase 'URLString': break;\n\t\t\t\t\tcase 'HTMLTables': break;\n\t\t\t\t\tcase 'Connection': break;\n\t\t\t\t\tcase 'CommandText': break;\n\t\t\t\t\tcase 'RefreshInfo': break;\n\t\t\t\t\tcase 'NoTitles': break;\n\t\t\t\t\tcase 'NextId': break;\n\t\t\t\t\tcase 'ColumnInfo': break;\n\t\t\t\t\tcase 'OverwriteCells': break;\n\t\t\t\t\tcase 'DoNotPromptForFile': break;\n\t\t\t\t\tcase 'TextWizardSettings': break;\n\t\t\t\t\tcase 'Source': break;\n\t\t\t\t\tcase 'Number': break;\n\t\t\t\t\tcase 'Decimal': break;\n\t\t\t\t\tcase 'ThousandSeparator': break;\n\t\t\t\t\tcase 'TrailingMinusNumbers': break;\n\t\t\t\t\tcase 'FormatSettings': break;\n\t\t\t\t\tcase 'FieldType': break;\n\t\t\t\t\tcase 'Delimiters': break;\n\t\t\t\t\tcase 'Tab': break;\n\t\t\t\t\tcase 'Comma': break;\n\t\t\t\t\tcase 'AutoFormatName': break;\n\t\t\t\t\tcase 'VersionLastEdit': break;\n\t\t\t\t\tcase 'VersionLastRefresh': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* Sorting */\n\t\t\t\tcase 'Sorting':\n\t\t\t\t/* ConditionalFormatting */\n\t\t\t\tcase 'ConditionalFormatting':\n\t\t\t\t/* DataValidation */\n\t\t\t\tcase 'DataValidation': switch(Rn[3]) {\n\t\t\t\t\tcase 'Range': break;\n\t\t\t\t\tcase 'Type': break;\n\t\t\t\t\tcase 'Min': break;\n\t\t\t\t\tcase 'Max': break;\n\t\t\t\t\tcase 'Sort': break;\n\t\t\t\t\tcase 'Descending': break;\n\t\t\t\t\tcase 'Order': break;\n\t\t\t\t\tcase 'CaseSensitive': break;\n\t\t\t\t\tcase 'Value': break;\n\t\t\t\t\tcase 'ErrorStyle': break;\n\t\t\t\t\tcase 'ErrorMessage': break;\n\t\t\t\t\tcase 'ErrorTitle': break;\n\t\t\t\t\tcase 'CellRangeList': break;\n\t\t\t\t\tcase 'InputMessage': break;\n\t\t\t\t\tcase 'InputTitle': break;\n\t\t\t\t\tcase 'ComboHide': break;\n\t\t\t\t\tcase 'InputHide': break;\n\t\t\t\t\tcase 'Condition': break;\n\t\t\t\t\tcase 'Qualifier': break;\n\t\t\t\t\tcase 'UseBlank': break;\n\t\t\t\t\tcase 'Value1': break;\n\t\t\t\t\tcase 'Value2': break;\n\t\t\t\t\tcase 'Format': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* MapInfo (schema) */\n\t\t\t\tcase 'MapInfo': case 'Schema': case 'data': switch(Rn[3]) {\n\t\t\t\t\tcase 'Map': break;\n\t\t\t\t\tcase 'Entry': break;\n\t\t\t\t\tcase 'Range': break;\n\t\t\t\t\tcase 'XPath': break;\n\t\t\t\t\tcase 'Field': break;\n\t\t\t\t\tcase 'XSDType': break;\n\t\t\t\t\tcase 'FilterOn': break;\n\t\t\t\t\tcase 'Aggregate': break;\n\t\t\t\t\tcase 'ElementType': break;\n\t\t\t\t\tcase 'AttributeType': break;\n\t\t\t\t/* These are from xsd (XML Schema Definition) */\n\t\t\t\t\tcase 'schema':\n\t\t\t\t\tcase 'element':\n\t\t\t\t\tcase 'complexType':\n\t\t\t\t\tcase 'datatype':\n\t\t\t\t\tcase 'all':\n\t\t\t\t\tcase 'attribute':\n\t\t\t\t\tcase 'extends': break;\n\n\t\t\t\t\tcase 'row': break;\n\t\t\t\t\tdefault: seen = false;\n\t\t\t\t} break;\n\n\t\t\t\t/* SmartTags (can be anything) */\n\t\t\t\tcase 'SmartTags': break;\n\n\t\t\t\tdefault: seen = false; break;\n\t\t\t}\n\t\t\tif(seen) break;\n\t\t\t/* CustomDocumentProperties */\n\t\t\tif(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\t\t\tif(state[state.length-1][0]==='CustomDocumentProperties') {\n\t\t\t\tif(Rn[0].substr(-2) === \"/>\") break;\n\t\t\t\telse if(Rn[1]===\"/\") xlml_set_custprop(Custprops, Rn, cp, str.slice(pidx, Rn.index));\n\t\t\t\telse { cp = Rn; pidx = Rn.index + Rn[0].length; }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + \"|\" + state.join(\"|\");\n\t}\n\tvar out = {};\n\tif(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;\n\tout.SheetNames = sheetnames;\n\tout.SSF = SSF.get_table();\n\tout.Props = Props;\n\tout.Custprops = Custprops;\n\treturn out;\n}\n\nfunction parse_xlml(data, opts) {\n\tfix_read_opts(opts=opts||{});\n\tswitch(opts.type||\"base64\") {\n\t\tcase \"base64\": return parse_xlml_xml(Base64.decode(data), opts);\n\t\tcase \"binary\": case \"buffer\": case \"file\": return parse_xlml_xml(data, opts);\n\t\tcase \"array\": return parse_xlml_xml(data.map(_chr).join(\"\"), opts);\n\t}\n}\n\nfunction write_xlml(wb, opts) { }\n\n/* [MS-OLEDS] 2.3.8 CompObjStream */\nfunction parse_compobj(obj) {\n\tvar v = {};\n\tvar o = obj.content;\n\n\t/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */\n\tvar l = 28, m;\n\tm = __lpstr(o, l);\n\tl += 4 + __readUInt32LE(o,l);\n\tv.UserType = m;\n\n\t/* [MS-OLEDS] 2.3.1 ClipboardFormatOrAnsiString */\n\tm = __readUInt32LE(o,l); l+= 4;\n\tswitch(m) {\n\t\tcase 0x00000000: break;\n\t\tcase 0xffffffff: case 0xfffffffe: l+=4; break;\n\t\tdefault:\n\t\t\tif(m > 0x190) throw new Error(\"Unsupported Clipboard: \" + m.toString(16));\n\t\t\tl += m;\n\t}\n\n\tm = __lpstr(o, l); l += m.length === 0 ? 0 : 5 + m.length; v.Reserved1 = m;\n\n\tif((m = __readUInt32LE(o,l)) !== 0x71b2e9f4) return v;\n\tthrow \"Unsupported Unicode Extension\";\n}\n\n/* 2.4.58 Continue logic */\nfunction slurp(R, blob, length, opts) {\n\tvar l = length;\n\tvar bufs = [];\n\tvar d = blob.slice(blob.l,blob.l+l);\n\tif(opts && opts.enc && opts.enc.insitu_decrypt) switch(R.n) {\n\tcase 'BOF': case 'FilePass': case 'FileLock': case 'InterfaceHdr': case 'RRDInfo': case 'RRDHead': case 'UsrExcl': break;\n\tdefault:\n\t\tif(d.length === 0) break;\n\t\topts.enc.insitu_decrypt(d);\n\t}\n\tbufs.push(d);\n\tblob.l += l;\n\tvar next = (XLSRecordEnum[__readUInt16LE(blob,blob.l)]);\n\twhile(next != null && next.n === 'Continue') {\n\t\tl = __readUInt16LE(blob,blob.l+2);\n\t\tbufs.push(blob.slice(blob.l+4,blob.l+4+l));\n\t\tblob.l += 4+l;\n\t\tnext = (XLSRecordEnum[__readUInt16LE(blob, blob.l)]);\n\t}\n\tvar b = bconcat(bufs);\n\tprep_blob(b, 0);\n\tvar ll = 0; b.lens = [];\n\tfor(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }\n\treturn R.f(b, b.length, opts);\n}\n\nfunction safe_format_xf(p, opts, date1904) {\n\tif(!p.XF) return;\n\ttry {\n\t\tvar fmtid = p.XF.ifmt||0;\n\t\tif(p.t === 'e') { p.w = p.w || BErr[p.v]; }\n\t\telse if(fmtid === 0) {\n\t\t\tif(p.t === 'n') {\n\t\t\t\tif((p.v|0) === p.v) p.w = SSF._general_int(p.v);\n\t\t\t\telse p.w = SSF._general_num(p.v);\n\t\t\t}\n\t\t\telse p.w = SSF._general(p.v);\n\t\t}\n\t\telse p.w = SSF.format(fmtid,p.v, {date1904:date1904||false});\n\t\tif(opts.cellNF) p.z = SSF._table[fmtid];\n\t} catch(e) { if(opts.WTF) throw e; }\n}\n\nfunction make_cell(val, ixfe, t) {\n\treturn {v:val, ixfe:ixfe, t:t};\n}\n\n// 2.3.2\nfunction parse_workbook(blob, options) {\n\tvar wb = {opts:{}};\n\tvar Sheets = {};\n\tvar out = {};\n\tvar Directory = {};\n\tvar found_sheet = false;\n\tvar range = {};\n\tvar last_formula = null;\n\tvar sst = [];\n\tvar cur_sheet = \"\";\n\tvar Preamble = {};\n\tvar lastcell, last_cell, cc, cmnt, rng, rngC, rngR;\n\tvar shared_formulae = {};\n\tvar array_formulae = []; /* TODO: something more clever */\n\tvar temp_val;\n\tvar country;\n\tvar cell_valid = true;\n\tvar XFs = []; /* XF records */\n\tvar palette = [];\n\tvar get_rgb = function getrgb(icv) {\n\t\tif(icv < 8) return XLSIcv[icv];\n\t\tif(icv < 64) return palette[icv-8] || XLSIcv[icv];\n\t\treturn XLSIcv[icv];\n\t};\n\tvar process_cell_style = function pcs(cell, line) {\n\t\tvar xfd = line.XF.data;\n\t\tif(!xfd || !xfd.patternType) return;\n\t\tline.s = {};\n\t\tline.s.patternType = xfd.patternType;\n\t\tvar t;\n\t\tif((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }\n\t\tif((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }\n\t};\n\tvar addcell = function addcell(cell, line, options) {\n\t\tif(!cell_valid) return;\n\t\tif(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line);\n\t\tlastcell = cell;\n\t\tlast_cell = encode_cell(cell);\n\t\tif(range.s) {\n\t\t\tif(cell.r < range.s.r) range.s.r = cell.r;\n\t\t\tif(cell.c < range.s.c) range.s.c = cell.c;\n\t\t}\n\t\tif(range.e) {\n\t\t\tif(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;\n\t\t\tif(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;\n\t\t}\n\t\tif(options.sheetRows && lastcell.r >= options.sheetRows) cell_valid = false;\n\t\telse out[last_cell] = line;\n\t};\n\tvar opts = {\n\t\tenc: false, // encrypted\n\t\tsbcch: 0, // cch in the preceding SupBook\n\t\tsnames: [], // sheetnames\n\t\tsharedf: shared_formulae, // shared formulae by address\n\t\tarrayf: array_formulae, // array formulae array\n\t\trrtabid: [], // RRTabId\n\t\tlastuser: \"\", // Last User from WriteAccess\n\t\tbiff: 8, // BIFF version\n\t\tcodepage: 0, // CP from CodePage record\n\t\twinlocked: 0, // fLockWn from WinProtect\n\t\twtf: false\n\t};\n\tif(options.password) opts.password = options.password;\n\tvar mergecells = [];\n\tvar objects = [];\n\tvar supbooks = [[]]; // 1-indexed, will hold extern names\n\tvar sbc = 0, sbci = 0, sbcli = 0;\n\tsupbooks.SheetNames = opts.snames;\n\tsupbooks.sharedf = opts.sharedf;\n\tsupbooks.arrayf = opts.arrayf;\n\tvar last_Rn = '';\n\tvar file_depth = 0; /* TODO: make a real stack */\n\n\t/* explicit override for some broken writers */\n\topts.codepage = 1200;\n\tset_cp(1200);\n\n\twhile(blob.l < blob.length - 1) {\n\t\tvar s = blob.l;\n\t\tvar RecordType = blob.read_shift(2);\n\t\tif(RecordType === 0 && last_Rn === 'EOF') break;\n\t\tvar length = (blob.l === blob.length ? 0 : blob.read_shift(2)), y;\n\t\tvar R = XLSRecordEnum[RecordType];\n\t\tif(R && R.f) {\n\t\t\tif(options.bookSheets) {\n\t\t\t\tif(last_Rn === 'BoundSheet8' && R.n !== 'BoundSheet8') break;\n\t\t\t}\n\t\t\tlast_Rn = R.n;\n\t\t\tif(R.r === 2 || R.r == 12) {\n\t\t\t\tvar rt = blob.read_shift(2); length -= 2;\n\t\t\t\tif(!opts.enc && rt !== RecordType) throw \"rt mismatch\";\n\t\t\t\tif(R.r == 12){ blob.l += 10; length -= 10; } // skip FRT\n\t\t\t}\n\t\t\t//console.error(R,blob.l,length,blob.length);\n\t\t\tvar val;\n\t\t\tif(R.n === 'EOF') val = R.f(blob, length, opts);\n\t\t\telse val = slurp(R, blob, length, opts);\n\t\t\tvar Rn = R.n;\n\t\t\t/* BIFF5 overrides */\n\t\t\tif(opts.biff === 5 || opts.biff === 2) switch(Rn) {\n\t\t\t\tcase 'Lbl': Rn = 'Label'; break;\n\t\t\t}\n\t\t\t/* nested switch statements to workaround V8 128 limit */\n\t\t\tswitch(Rn) {\n\t\t\t\t/* Workbook Options */\n\t\t\t\tcase 'Date1904': wb.opts.Date1904 = val; break;\n\t\t\t\tcase 'WriteProtect': wb.opts.WriteProtect = true; break;\n\t\t\t\tcase 'FilePass':\n\t\t\t\t\tif(!opts.enc) blob.l = 0;\n\t\t\t\t\topts.enc = val;\n\t\t\t\t\tif(opts.WTF) console.error(val);\n\t\t\t\t\tif(!options.password) throw new Error(\"File is password-protected\");\n\t\t\t\t\tif(val.Type !== 0) throw new Error(\"Encryption scheme unsupported\");\n\t\t\t\t\tif(!val.valid) throw new Error(\"Password is incorrect\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'WriteAccess': opts.lastuser = val; break;\n\t\t\t\tcase 'FileSharing': break; //TODO\n\t\t\t\tcase 'CodePage':\n\t\t\t\t\t/* overrides based on test cases */\n\t\t\t\t\tif(val === 0x5212) val = 1200;\n\t\t\t\t\telse if(val === 0x8001) val = 1252;\n\t\t\t\t\topts.codepage = val;\n\t\t\t\t\tset_cp(val);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'RRTabId': opts.rrtabid = val; break;\n\t\t\t\tcase 'WinProtect': opts.winlocked = val; break;\n\t\t\t\tcase 'Template': break; // TODO\n\t\t\t\tcase 'RefreshAll': wb.opts.RefreshAll = val; break;\n\t\t\t\tcase 'BookBool': break; // TODO\n\t\t\t\tcase 'UsesELFs': /* if(val) console.error(\"Unsupported ELFs\"); */ break;\n\t\t\t\tcase 'MTRSettings': {\n\t\t\t\t\tif(val[0] && val[1]) throw \"Unsupported threads: \" + val;\n\t\t\t\t} break; // TODO: actually support threads\n\t\t\t\tcase 'CalcCount': wb.opts.CalcCount = val; break;\n\t\t\t\tcase 'CalcDelta': wb.opts.CalcDelta = val; break;\n\t\t\t\tcase 'CalcIter': wb.opts.CalcIter = val; break;\n\t\t\t\tcase 'CalcMode': wb.opts.CalcMode = val; break;\n\t\t\t\tcase 'CalcPrecision': wb.opts.CalcPrecision = val; break;\n\t\t\t\tcase 'CalcSaveRecalc': wb.opts.CalcSaveRecalc = val; break;\n\t\t\t\tcase 'CalcRefMode': opts.CalcRefMode = val; break; // TODO: implement R1C1\n\t\t\t\tcase 'Uncalced': break;\n\t\t\t\tcase 'ForceFullCalculation': wb.opts.FullCalc = val; break;\n\t\t\t\tcase 'WsBool': break; // TODO\n\t\t\t\tcase 'XF': XFs.push(val); break;\n\t\t\t\tcase 'ExtSST': break; // TODO\n\t\t\t\tcase 'BookExt': break; // TODO\n\t\t\t\tcase 'RichTextStream': break;\n\t\t\t\tcase 'BkHim': break;\n\n\t\t\t\tcase 'SupBook': supbooks[++sbc] = [val]; sbci = 0; break;\n\t\t\t\tcase 'ExternName': supbooks[sbc][++sbci] = val; break;\n\t\t\t\tcase 'Index': break; // TODO\n\t\t\t\tcase 'Lbl': supbooks[0][++sbcli] = val; break;\n\t\t\t\tcase 'ExternSheet': supbooks[sbc] = supbooks[sbc].concat(val); sbci += val.length; break;\n\n\t\t\t\tcase 'Protect': out[\"!protect\"] = val; break; /* for sheet or book */\n\t\t\t\tcase 'Password': if(val !== 0 && opts.WTF) console.error(\"Password verifier: \" + val); break;\n\t\t\t\tcase 'Prot4Rev': case 'Prot4RevPass': break; /*TODO: Revision Control*/\n\n\t\t\t\tcase 'BoundSheet8': {\n\t\t\t\t\tDirectory[val.pos] = val;\n\t\t\t\t\topts.snames.push(val.name);\n\t\t\t\t} break;\n\t\t\t\tcase 'EOF': {\n\t\t\t\t\tif(--file_depth) break;\n\t\t\t\t\tif(range.e) {\n\t\t\t\t\t\tout[\"!range\"] = range;\n\t\t\t\t\t\tif(range.e.r > 0 && range.e.c > 0) {\n\t\t\t\t\t\t\trange.e.r--; range.e.c--;\n\t\t\t\t\t\t\tout[\"!ref\"] = encode_range(range);\n\t\t\t\t\t\t\trange.e.r++; range.e.c++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(mergecells.length > 0) out[\"!merges\"] = mergecells;\n\t\t\t\t\t\tif(objects.length > 0) out[\"!objects\"] = objects;\n\t\t\t\t\t}\n\t\t\t\t\tif(cur_sheet === \"\") Preamble = out; else Sheets[cur_sheet] = out;\n\t\t\t\t\tout = {};\n\t\t\t\t} break;\n\t\t\t\tcase 'BOF': {\n\t\t\t\t\tif(opts.biff !== 8);\n\t\t\t\t\telse if(val.BIFFVer === 0x0500) opts.biff = 5;\n\t\t\t\t\telse if(val.BIFFVer === 0x0002) opts.biff = 2;\n\t\t\t\t\telse if(val.BIFFVer === 0x0007) opts.biff = 2;\n\t\t\t\t\tif(file_depth++) break;\n\t\t\t\t\tcell_valid = true;\n\t\t\t\t\tout = {};\n\t\t\t\t\tif(opts.biff === 2) {\n\t\t\t\t\t\tif(cur_sheet === \"\") cur_sheet = \"Sheet1\";\n\t\t\t\t\t\trange = {s:{r:0,c:0},e:{r:0,c:0}};\n\t\t\t\t\t}\n\t\t\t\t\telse cur_sheet = (Directory[s] || {name:\"\"}).name;\n\t\t\t\t\tmergecells = [];\n\t\t\t\t\tobjects = [];\n\t\t\t\t} break;\n\t\t\t\tcase 'Number': case 'BIFF2NUM': {\n\t\t\t\t\ttemp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:'n'};\n\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'BoolErr': {\n\t\t\t\t\ttemp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t};\n\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'RK': {\n\t\t\t\t\ttemp_val = {ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'};\n\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t} break;\n\t\t\t\tcase 'MulRk': {\n\t\t\t\t\tfor(var j = val.c; j <= val.C; ++j) {\n\t\t\t\t\t\tvar ixfe = val.rkrec[j-val.c][0];\n\t\t\t\t\t\ttemp_val= {ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'};\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell({c:j, r:val.r}, temp_val, options);\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'Formula': {\n\t\t\t\t\tswitch(val.val) {\n\t\t\t\t\t\tcase 'String': last_formula = val; break;\n\t\t\t\t\t\tcase 'Array Formula': throw \"Array Formula unsupported\";\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\ttemp_val = {v:val.val, ixfe:val.cell.ixfe, t:val.tt};\n\t\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\t\tif(options.cellFormula) temp_val.f = \"=\"+stringify_formula(val.formula,range,val.cell,supbooks, opts);\n\t\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\t\taddcell(val.cell, temp_val, options);\n\t\t\t\t\t\t\tlast_formula = val;\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'String': {\n\t\t\t\t\tif(last_formula) {\n\t\t\t\t\t\tlast_formula.val = val;\n\t\t\t\t\t\ttemp_val = {v:last_formula.val, ixfe:last_formula.cell.ixfe, t:'s'};\n\t\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\t\tif(options.cellFormula) temp_val.f = \"=\"+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);\n\t\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\t\taddcell(last_formula.cell, temp_val, options);\n\t\t\t\t\t\tlast_formula = null;\n\t\t\t\t\t}\n\t\t\t\t} break;\n\t\t\t\tcase 'Array': {\n\t\t\t\t\tarray_formulae.push(val);\n\t\t\t\t} break;\n\t\t\t\tcase 'ShrFmla': {\n\t\t\t\t\tif(!cell_valid) break;\n\t\t\t\t\t//if(options.cellFormula) out[last_cell].f = stringify_formula(val[0], range, lastcell, supbooks, opts);\n\t\t\t\t\t/* TODO: capture range */\n\t\t\t\t\tshared_formulae[encode_cell(last_formula.cell)]= val[0];\n\t\t\t\t} break;\n\t\t\t\tcase 'LabelSst':\n\t\t\t\t\t//temp_val={v:sst[val.isst].t, ixfe:val.ixfe, t:'s'};\n\t\t\t\t\ttemp_val=make_cell(sst[val.isst].t, val.ixfe, 's');\n\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Label': case 'BIFF2STR':\n\t\t\t\t\t/* Some writers erroneously write Label */\n\t\t\t\t\ttemp_val=make_cell(val.val, val.ixfe, 's');\n\t\t\t\t\ttemp_val.XF = XFs[temp_val.ixfe];\n\t\t\t\t\tif(temp_val.XF) safe_format_xf(temp_val, options, wb.opts.Date1904);\n\t\t\t\t\taddcell({c:val.c, r:val.r}, temp_val, options);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Dimensions': {\n\t\t\t\t\tif(file_depth === 1) range = val; /* TODO: stack */\n\t\t\t\t} break;\n\t\t\t\tcase 'SST': {\n\t\t\t\t\tsst = val;\n\t\t\t\t} break;\n\t\t\t\tcase 'Format': { /* val = [id, fmt] */\n\t\t\t\t\tSSF.load(val[1], val[0]);\n\t\t\t\t} break;\n\n\t\t\t\tcase 'MergeCells': mergecells = mergecells.concat(val); break;\n\n\t\t\t\tcase 'Obj': objects[val.cmo[0]] = opts.lastobj = val; break;\n\t\t\t\tcase 'TxO': opts.lastobj.TxO = val; break;\n\n\t\t\t\tcase 'HLink': {\n\t\t\t\t\tfor(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)\n\t\t\t\t\t\tfor(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC)\n\t\t\t\t\t\t\tif(out[encode_cell({c:rngC,r:rngR})])\n\t\t\t\t\t\t\t\tout[encode_cell({c:rngC,r:rngR})].l = val[1];\n\t\t\t\t} break;\n\t\t\t\tcase 'HLinkTooltip': {\n\t\t\t\t\tfor(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)\n\t\t\t\t\t\tfor(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC)\n\t\t\t\t\t\t\tif(out[encode_cell({c:rngC,r:rngR})])\n\t\t\t\t\t\t\t\tout[encode_cell({c:rngC,r:rngR})].l.tooltip = val[1];\n\t\t\t\t} break;\n\n\t\t\t\t/* Comments */\n\t\t\t\tcase 'Note': {\n\t\t\t\t\tif(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */\n\t\t\t\t\tcc = out[encode_cell(val[0])];\n\t\t\t\t\tvar noteobj = objects[val[2]];\n\t\t\t\t\tif(!cc) break;\n\t\t\t\t\tif(!cc.c) cc.c = [];\n\t\t\t\t\tcmnt = {a:val[1],t:noteobj.TxO.t};\n\t\t\t\t\tcc.c.push(cmnt);\n\t\t\t\t} break;\n\n\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\tcase 'ClrtClient': break;\n\t\t\t\tcase 'XFExt': update_xfext(XFs[val.ixfe], val.ext); break;\n\n\t\t\t\tcase 'NameCmt': break;\n\t\t\t\tcase 'Header': break; // TODO\n\t\t\t\tcase 'Footer': break; // TODO\n\t\t\t\tcase 'HCenter': break; // TODO\n\t\t\t\tcase 'VCenter': break; // TODO\n\t\t\t\tcase 'Pls': break; // TODO\n\t\t\t\tcase 'Setup': break; // TODO\n\t\t\t\tcase 'DefColWidth': break; // TODO\n\t\t\t\tcase 'GCW': break;\n\t\t\t\tcase 'LHRecord': break;\n\t\t\t\tcase 'ColInfo': break; // TODO\n\t\t\t\tcase 'Row': break; // TODO\n\t\t\t\tcase 'DBCell': break; // TODO\n\t\t\t\tcase 'MulBlank': break; // TODO\n\t\t\t\tcase 'EntExU2': break; // TODO\n\t\t\t\tcase 'SxView': break; // TODO\n\t\t\t\tcase 'Sxvd': break; // TODO\n\t\t\t\tcase 'SXVI': break; // TODO\n\t\t\t\tcase 'SXVDEx': break; // TODO\n\t\t\t\tcase 'SxIvd': break; // TODO\n\t\t\t\tcase 'SXDI': break; // TODO\n\t\t\t\tcase 'SXLI': break; // TODO\n\t\t\t\tcase 'SXEx': break; // TODO\n\t\t\t\tcase 'QsiSXTag': break; // TODO\n\t\t\t\tcase 'Selection': break;\n\t\t\t\tcase 'Feat': break;\n\t\t\t\tcase 'FeatHdr': case 'FeatHdr11': break;\n\t\t\t\tcase 'Feature11': case 'Feature12': case 'List12': break;\n\t\t\t\tcase 'Blank': break;\n\t\t\t\tcase 'Country': country = val; break;\n\t\t\t\tcase 'RecalcId': break;\n\t\t\t\tcase 'DefaultRowHeight': case 'DxGCol': break; // TODO: htmlify\n\t\t\t\tcase 'Fbi': case 'Fbi2': case 'GelFrame': break;\n\t\t\t\tcase 'Font': break; // TODO\n\t\t\t\tcase 'XFCRC': break; // TODO\n\t\t\t\tcase 'Style': break; // TODO\n\t\t\t\tcase 'StyleExt': break; // TODO\n\t\t\t\tcase 'Palette': palette = val; break; // TODO\n\t\t\t\tcase 'Theme': break; // TODO\n\t\t\t\t/* Protection */\n\t\t\t\tcase 'ScenarioProtect': break;\n\t\t\t\tcase 'ObjProtect': break;\n\n\t\t\t\t/* Conditional Formatting */\n\t\t\t\tcase 'CondFmt12': break;\n\n\t\t\t\t/* Table */\n\t\t\t\tcase 'Table': break; // TODO\n\t\t\t\tcase 'TableStyles': break; // TODO\n\t\t\t\tcase 'TableStyle': break; // TODO\n\t\t\t\tcase 'TableStyleElement': break; // TODO\n\n\t\t\t\t/* PivotTable */\n\t\t\t\tcase 'SXStreamID': break; // TODO\n\t\t\t\tcase 'SXVS': break; // TODO\n\t\t\t\tcase 'DConRef': break; // TODO\n\t\t\t\tcase 'SXAddl': break; // TODO\n\t\t\t\tcase 'DConBin': break; // TODO\n\t\t\t\tcase 'DConName': break; // TODO\n\t\t\t\tcase 'SXPI': break; // TODO\n\t\t\t\tcase 'SxFormat': break; // TODO\n\t\t\t\tcase 'SxSelect': break; // TODO\n\t\t\t\tcase 'SxRule': break; // TODO\n\t\t\t\tcase 'SxFilt': break; // TODO\n\t\t\t\tcase 'SxItm': break; // TODO\n\t\t\t\tcase 'SxDXF': break; // TODO\n\n\t\t\t\t/* Scenario Manager */\n\t\t\t\tcase 'ScenMan': break;\n\n\t\t\t\t/* Data Consolidation */\n\t\t\t\tcase 'DCon': break;\n\n\t\t\t\t/* Watched Cell */\n\t\t\t\tcase 'CellWatch': break;\n\n\t\t\t\t/* Print Settings */\n\t\t\t\tcase 'PrintRowCol': break;\n\t\t\t\tcase 'PrintGrid': break;\n\t\t\t\tcase 'PrintSize': break;\n\n\t\t\t\tcase 'XCT': break;\n\t\t\t\tcase 'CRN': break;\n\n\t\t\t\tcase 'Scl': {\n\t\t\t\t\t//console.log(\"Zoom Level:\", val[0]/val[1],val);\n\t\t\t\t} break;\n\t\t\t\tcase 'SheetExt': {\n\n\t\t\t\t} break;\n\t\t\t\tcase 'SheetExtOptional': {\n\n\t\t\t\t} break;\n\n\t\t\t\t/* VBA */\n\t\t\t\tcase 'ObNoMacros': {\n\n\t\t\t\t} break;\n\t\t\t\tcase 'ObProj': {\n\n\t\t\t\t} break;\n\t\t\t\tcase 'CodeName': {\n\n\t\t\t\t} break;\n\t\t\t\tcase 'GUIDTypeLib': {\n\n\t\t\t\t} break;\n\n\t\t\t\tcase 'WOpt': break; // TODO: WTF?\n\t\t\t\tcase 'PhoneticInfo': break;\n\n\t\t\t\tcase 'OleObjectSize': break;\n\n\t\t\t\t/* Differential Formatting */\n\t\t\t\tcase 'DXF': case 'DXFN': case 'DXFN12': case 'DXFN12List': case 'DXFN12NoCB': break;\n\n\t\t\t\t/* Data Validation */\n\t\t\t\tcase 'Dv': case 'DVal': break;\n\n\t\t\t\t/* Data Series */\n\t\t\t\tcase 'BRAI': case 'Series': case 'SeriesText': break;\n\n\t\t\t\t/* Data Connection */\n\t\t\t\tcase 'DConn': break;\n\t\t\t\tcase 'DbOrParamQry': break;\n\t\t\t\tcase 'DBQueryExt': break;\n\n\t\t\t\t/* Formatting */\n\t\t\t\tcase 'IFmtRecord': break;\n\t\t\t\tcase 'CondFmt': case 'CF': case 'CF12': case 'CFEx': break;\n\n\t\t\t\t/* Explicitly Ignored */\n\t\t\t\tcase 'Excel9File': break;\n\t\t\t\tcase 'Units': break;\n\t\t\t\tcase 'InterfaceHdr': case 'Mms': case 'InterfaceEnd': case 'DSF': case 'BuiltInFnGroupCount':\n\t\t\t\t/* View Stuff */\n\t\t\t\tcase 'Window1': case 'Window2': case 'HideObj': case 'GridSet': case 'Guts':\n\t\t\t\tcase 'UserBView': case 'UserSViewBegin': case 'UserSViewEnd':\n\t\t\t\tcase 'Pane': break;\n\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t/* Chart */\n\t\t\t\tcase 'Dat':\n\t\t\t\tcase 'Begin': case 'End':\n\t\t\t\tcase 'StartBlock': case 'EndBlock':\n\t\t\t\tcase 'Frame': case 'Area':\n\t\t\t\tcase 'Axis': case 'AxisLine': case 'Tick': break;\n\t\t\t\tcase 'AxesUsed':\n\t\t\t\tcase 'CrtLayout12': case 'CrtLayout12A': case 'CrtLink': case 'CrtLine': case 'CrtMlFrt': case 'CrtMlFrtContinue': break;\n\t\t\t\tcase 'LineFormat': case 'AreaFormat':\n\t\t\t\tcase 'Chart': case 'Chart3d': case 'Chart3DBarShape': case 'ChartFormat': case 'ChartFrtInfo': break;\n\t\t\t\tcase 'PlotArea': case 'PlotGrowth': break;\n\t\t\t\tcase 'SeriesList': case 'SerParent': case 'SerAuxTrend': break;\n\t\t\t\tcase 'DataFormat': case 'SerToCrt': case 'FontX': break;\n\t\t\t\tcase 'CatSerRange': case 'AxcExt': case 'SerFmt': break;\n\t\t\t\tcase 'ShtProps': break;\n\t\t\t\tcase 'DefaultText': case 'Text': case 'CatLab': break;\n\t\t\t\tcase 'DataLabExtContents': break;\n\t\t\t\tcase 'Legend': case 'LegendException': break;\n\t\t\t\tcase 'Pie': case 'Scatter': break;\n\t\t\t\tcase 'PieFormat': case 'MarkerFormat': break;\n\t\t\t\tcase 'StartObject': case 'EndObject': break;\n\t\t\t\tcase 'AlRuns': case 'ObjectLink': break;\n\t\t\t\tcase 'SIIndex': break;\n\t\t\t\tcase 'AttachedLabel': case 'YMult': break;\n\n\t\t\t\t/* Chart Group */\n\t\t\t\tcase 'Line': case 'Bar': break;\n\t\t\t\tcase 'Surf': break;\n\n\t\t\t\t/* Axis Group */\n\t\t\t\tcase 'AxisParent': break;\n\t\t\t\tcase 'Pos': break;\n\t\t\t\tcase 'ValueRange': break;\n\n\t\t\t\t/* Pivot Chart */\n\t\t\t\tcase 'SXViewEx9': break; // TODO\n\t\t\t\tcase 'SXViewLink': break;\n\t\t\t\tcase 'PivotChartBits': break;\n\t\t\t\tcase 'SBaseRef': break;\n\t\t\t\tcase 'TextPropsStream': break;\n\n\t\t\t\t/* Chart Misc */\n\t\t\t\tcase 'LnExt': break;\n\t\t\t\tcase 'MkrExt': break;\n\t\t\t\tcase 'CrtCoopt': break;\n\n\t\t\t\t/* Query Table */\n\t\t\t\tcase 'Qsi': case 'Qsif': case 'Qsir': case 'QsiSXTag': break;\n\t\t\t\tcase 'TxtQry': break;\n\n\t\t\t\t/* Filter */\n\t\t\t\tcase 'FilterMode': break;\n\t\t\t\tcase 'AutoFilter': case 'AutoFilterInfo': break;\n\t\t\t\tcase 'AutoFilter12': break;\n\t\t\t\tcase 'DropDownObjIds': break;\n\t\t\t\tcase 'Sort': break;\n\t\t\t\tcase 'SortData': break;\n\n\t\t\t\t/* Drawing */\n\t\t\t\tcase 'ShapePropsStream': break;\n\t\t\t\tcase 'MsoDrawing': case 'MsoDrawingGroup': case 'MsoDrawingSelection': break;\n\t\t\t\tcase 'ImData': break;\n\t\t\t\t/* Pub Stuff */\n\t\t\t\tcase 'WebPub': case 'AutoWebPub':\n\n\t\t\t\t/* Print Stuff */\n\t\t\t\tcase 'RightMargin': case 'LeftMargin': case 'TopMargin': case 'BottomMargin':\n\t\t\t\tcase 'HeaderFooter': case 'HFPicture': case 'PLV':\n\t\t\t\tcase 'HorizontalPageBreaks': case 'VerticalPageBreaks':\n\t\t\t\t/* Behavioral */\n\t\t\t\tcase 'Backup': case 'CompressPictures': case 'Compat12': break;\n\n\t\t\t\t/* Should not Happen */\n\t\t\t\tcase 'Continue': case 'ContinueFrt12': break;\n\n\t\t\t\t/* Future Records */\n\t\t\t\tcase 'FrtFontList': case 'FrtWrapper': break;\n\n\t\t\t\t/* BIFF5 records */\n\t\t\t\tcase 'ExternCount': break;\n\t\t\t\tcase 'RString': break;\n\t\t\t\tcase 'TabIdConf': case 'Radar': case 'RadarArea': case 'DropBar': case 'Intl': case 'CoordList': case 'SerAuxErrBar': break;\n\n\t\t\t\tdefault: switch(R.n) { /* nested */\n\t\t\t\t/* Miscellaneous */\n\t\t\t\tcase 'SCENARIO': case 'DConBin': case 'PicF': case 'DataLabExt':\n\t\t\t\tcase 'Lel': case 'BopPop': case 'BopPopCustom': case 'RealTimeData':\n\t\t\t\tcase 'Name': break;\n\t\t\t\tdefault: if(options.WTF) throw 'Unrecognized Record ' + R.n;\n\t\t\t}}}}\n\t\t} else blob.l += length;\n\t}\n\tvar sheetnamesraw = opts.biff === 2 ? ['Sheet1'] : Object.keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});\n\tvar sheetnames = sheetnamesraw.slice();\n\twb.Directory=sheetnamesraw;\n\twb.SheetNames=sheetnamesraw;\n\tif(!options.bookSheets) wb.Sheets=Sheets;\n\twb.Preamble=Preamble;\n\twb.Strings = sst;\n\twb.SSF = SSF.get_table();\n\tif(opts.enc) wb.Encryption = opts.enc;\n\twb.Metadata = {};\n\tif(country !== undefined) wb.Metadata.Country = country;\n\treturn wb;\n}\n\nfunction parse_xlscfb(cfb, options) {\nif(!options) options = {};\nfix_read_opts(options);\nreset_cp();\nvar CompObj, Summary, Workbook;\nif(cfb.find) {\n\tCompObj = cfb.find('!CompObj');\n\tSummary = cfb.find('!SummaryInformation');\n\tWorkbook = cfb.find('/Workbook');\n} else {\n\tprep_blob(cfb, 0);\n\tWorkbook = {content: cfb};\n}\n\nif(!Workbook) Workbook = cfb.find('/Book');\nvar CompObjP, SummaryP, WorkbookP;\n\nif(CompObj) CompObjP = parse_compobj(CompObj);\nif(options.bookProps && !options.bookSheets) WorkbookP = {};\nelse {\n\tif(Workbook) WorkbookP = parse_workbook(Workbook.content, options, !!Workbook.find);\n\telse throw new Error(\"Cannot find Workbook stream\");\n}\n\nif(cfb.find) parse_props(cfb);\n\nvar props = {};\nfor(var y in cfb.Summary) props[y] = cfb.Summary[y];\nfor(y in cfb.DocSummary) props[y] = cfb.DocSummary[y];\nWorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */\nif(options.bookFiles) WorkbookP.cfb = cfb;\nWorkbookP.CompObjP = CompObjP;\nreturn WorkbookP;\n}\n\n/* TODO: WTF */\nfunction parse_props(cfb) {\n\t/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */\n\tvar DSI = cfb.find('!DocumentSummaryInformation');\n\tif(DSI) try { cfb.DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI); } catch(e) {}\n\n\t/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/\n\tvar SI = cfb.find('!SummaryInformation');\n\tif(SI) try { cfb.Summary = parse_PropertySetStream(SI, SummaryPIDSI); } catch(e) {}\n}\n\n/* [MS-XLSB] 2.3 Record Enumeration */\nvar XLSBRecordEnum = {\n\t0x0000: { n:\"BrtRowHdr\", f:parse_BrtRowHdr },\n\t0x0001: { n:\"BrtCellBlank\", f:parse_BrtCellBlank },\n\t0x0002: { n:\"BrtCellRk\", f:parse_BrtCellRk },\n\t0x0003: { n:\"BrtCellError\", f:parse_BrtCellError },\n\t0x0004: { n:\"BrtCellBool\", f:parse_BrtCellBool },\n\t0x0005: { n:\"BrtCellReal\", f:parse_BrtCellReal },\n\t0x0006: { n:\"BrtCellSt\", f:parse_BrtCellSt },\n\t0x0007: { n:\"BrtCellIsst\", f:parse_BrtCellIsst },\n\t0x0008: { n:\"BrtFmlaString\", f:parse_BrtFmlaString },\n\t0x0009: { n:\"BrtFmlaNum\", f:parse_BrtFmlaNum },\n\t0x000A: { n:\"BrtFmlaBool\", f:parse_BrtFmlaBool },\n\t0x000B: { n:\"BrtFmlaError\", f:parse_BrtFmlaError },\n\t0x0010: { n:\"BrtFRTArchID$\", f:parse_BrtFRTArchID$ },\n\t0x0013: { n:\"BrtSSTItem\", f:parse_RichStr },\n\t0x0014: { n:\"BrtPCDIMissing\", f:parsenoop },\n\t0x0015: { n:\"BrtPCDINumber\", f:parsenoop },\n\t0x0016: { n:\"BrtPCDIBoolean\", f:parsenoop },\n\t0x0017: { n:\"BrtPCDIError\", f:parsenoop },\n\t0x0018: { n:\"BrtPCDIString\", f:parsenoop },\n\t0x0019: { n:\"BrtPCDIDatetime\", f:parsenoop },\n\t0x001A: { n:\"BrtPCDIIndex\", f:parsenoop },\n\t0x001B: { n:\"BrtPCDIAMissing\", f:parsenoop },\n\t0x001C: { n:\"BrtPCDIANumber\", f:parsenoop },\n\t0x001D: { n:\"BrtPCDIABoolean\", f:parsenoop },\n\t0x001E: { n:\"BrtPCDIAError\", f:parsenoop },\n\t0x001F: { n:\"BrtPCDIAString\", f:parsenoop },\n\t0x0020: { n:\"BrtPCDIADatetime\", f:parsenoop },\n\t0x0021: { n:\"BrtPCRRecord\", f:parsenoop },\n\t0x0022: { n:\"BrtPCRRecordDt\", f:parsenoop },\n\t0x0023: { n:\"BrtFRTBegin\", f:parsenoop },\n\t0x0024: { n:\"BrtFRTEnd\", f:parsenoop },\n\t0x0025: { n:\"BrtACBegin\", f:parsenoop },\n\t0x0026: { n:\"BrtACEnd\", f:parsenoop },\n\t0x0027: { n:\"BrtName\", f:parsenoop },\n\t0x0028: { n:\"BrtIndexRowBlock\", f:parsenoop },\n\t0x002A: { n:\"BrtIndexBlock\", f:parsenoop },\n\t0x002B: { n:\"BrtFont\", f:parse_BrtFont },\n\t0x002C: { n:\"BrtFmt\", f:parse_BrtFmt },\n\t0x002D: { n:\"BrtFill\", f:parsenoop },\n\t0x002E: { n:\"BrtBorder\", f:parsenoop },\n\t0x002F: { n:\"BrtXF\", f:parse_BrtXF },\n\t0x0030: { n:\"BrtStyle\", f:parsenoop },\n\t0x0031: { n:\"BrtCellMeta\", f:parsenoop },\n\t0x0032: { n:\"BrtValueMeta\", f:parsenoop },\n\t0x0033: { n:\"BrtMdb\", f:parsenoop },\n\t0x0034: { n:\"BrtBeginFmd\", f:parsenoop },\n\t0x0035: { n:\"BrtEndFmd\", f:parsenoop },\n\t0x0036: { n:\"BrtBeginMdx\", f:parsenoop },\n\t0x0037: { n:\"BrtEndMdx\", f:parsenoop },\n\t0x0038: { n:\"BrtBeginMdxTuple\", f:parsenoop },\n\t0x0039: { n:\"BrtEndMdxTuple\", f:parsenoop },\n\t0x003A: { n:\"BrtMdxMbrIstr\", f:parsenoop },\n\t0x003B: { n:\"BrtStr\", f:parsenoop },\n\t0x003C: { n:\"BrtColInfo\", f:parsenoop },\n\t0x003E: { n:\"BrtCellRString\", f:parsenoop },\n\t0x003F: { n:\"BrtCalcChainItem$\", f:parse_BrtCalcChainItem$ },\n\t0x0040: { n:\"BrtDVal\", f:parsenoop },\n\t0x0041: { n:\"BrtSxvcellNum\", f:parsenoop },\n\t0x0042: { n:\"BrtSxvcellStr\", f:parsenoop },\n\t0x0043: { n:\"BrtSxvcellBool\", f:parsenoop },\n\t0x0044: { n:\"BrtSxvcellErr\", f:parsenoop },\n\t0x0045: { n:\"BrtSxvcellDate\", f:parsenoop },\n\t0x0046: { n:\"BrtSxvcellNil\", f:parsenoop },\n\t0x0080: { n:\"BrtFileVersion\", f:parsenoop },\n\t0x0081: { n:\"BrtBeginSheet\", f:parsenoop },\n\t0x0082: { n:\"BrtEndSheet\", f:parsenoop },\n\t0x0083: { n:\"BrtBeginBook\", f:parsenoop, p:0 },\n\t0x0084: { n:\"BrtEndBook\", f:parsenoop },\n\t0x0085: { n:\"BrtBeginWsViews\", f:parsenoop },\n\t0x0086: { n:\"BrtEndWsViews\", f:parsenoop },\n\t0x0087: { n:\"BrtBeginBookViews\", f:parsenoop },\n\t0x0088: { n:\"BrtEndBookViews\", f:parsenoop },\n\t0x0089: { n:\"BrtBeginWsView\", f:parsenoop },\n\t0x008A: { n:\"BrtEndWsView\", f:parsenoop },\n\t0x008B: { n:\"BrtBeginCsViews\", f:parsenoop },\n\t0x008C: { n:\"BrtEndCsViews\", f:parsenoop },\n\t0x008D: { n:\"BrtBeginCsView\", f:parsenoop },\n\t0x008E: { n:\"BrtEndCsView\", f:parsenoop },\n\t0x008F: { n:\"BrtBeginBundleShs\", f:parsenoop },\n\t0x0090: { n:\"BrtEndBundleShs\", f:parsenoop },\n\t0x0091: { n:\"BrtBeginSheetData\", f:parsenoop },\n\t0x0092: { n:\"BrtEndSheetData\", f:parsenoop },\n\t0x0093: { n:\"BrtWsProp\", f:parse_BrtWsProp },\n\t0x0094: { n:\"BrtWsDim\", f:parse_BrtWsDim, p:16 },\n\t0x0097: { n:\"BrtPane\", f:parsenoop },\n\t0x0098: { n:\"BrtSel\", f:parsenoop },\n\t0x0099: { n:\"BrtWbProp\", f:parse_BrtWbProp },\n\t0x009A: { n:\"BrtWbFactoid\", f:parsenoop },\n\t0x009B: { n:\"BrtFileRecover\", f:parsenoop },\n\t0x009C: { n:\"BrtBundleSh\", f:parse_BrtBundleSh },\n\t0x009D: { n:\"BrtCalcProp\", f:parsenoop },\n\t0x009E: { n:\"BrtBookView\", f:parsenoop },\n\t0x009F: { n:\"BrtBeginSst\", f:parse_BrtBeginSst },\n\t0x00A0: { n:\"BrtEndSst\", f:parsenoop },\n\t0x00A1: { n:\"BrtBeginAFilter\", f:parsenoop },\n\t0x00A2: { n:\"BrtEndAFilter\", f:parsenoop },\n\t0x00A3: { n:\"BrtBeginFilterColumn\", f:parsenoop },\n\t0x00A4: { n:\"BrtEndFilterColumn\", f:parsenoop },\n\t0x00A5: { n:\"BrtBeginFilters\", f:parsenoop },\n\t0x00A6: { n:\"BrtEndFilters\", f:parsenoop },\n\t0x00A7: { n:\"BrtFilter\", f:parsenoop },\n\t0x00A8: { n:\"BrtColorFilter\", f:parsenoop },\n\t0x00A9: { n:\"BrtIconFilter\", f:parsenoop },\n\t0x00AA: { n:\"BrtTop10Filter\", f:parsenoop },\n\t0x00AB: { n:\"BrtDynamicFilter\", f:parsenoop },\n\t0x00AC: { n:\"BrtBeginCustomFilters\", f:parsenoop },\n\t0x00AD: { n:\"BrtEndCustomFilters\", f:parsenoop },\n\t0x00AE: { n:\"BrtCustomFilter\", f:parsenoop },\n\t0x00AF: { n:\"BrtAFilterDateGroupItem\", f:parsenoop },\n\t0x00B0: { n:\"BrtMergeCell\", f:parse_BrtMergeCell },\n\t0x00B1: { n:\"BrtBeginMergeCells\", f:parsenoop },\n\t0x00B2: { n:\"BrtEndMergeCells\", f:parsenoop },\n\t0x00B3: { n:\"BrtBeginPivotCacheDef\", f:parsenoop },\n\t0x00B4: { n:\"BrtEndPivotCacheDef\", f:parsenoop },\n\t0x00B5: { n:\"BrtBeginPCDFields\", f:parsenoop },\n\t0x00B6: { n:\"BrtEndPCDFields\", f:parsenoop },\n\t0x00B7: { n:\"BrtBeginPCDField\", f:parsenoop },\n\t0x00B8: { n:\"BrtEndPCDField\", f:parsenoop },\n\t0x00B9: { n:\"BrtBeginPCDSource\", f:parsenoop },\n\t0x00BA: { n:\"BrtEndPCDSource\", f:parsenoop },\n\t0x00BB: { n:\"BrtBeginPCDSRange\", f:parsenoop },\n\t0x00BC: { n:\"BrtEndPCDSRange\", f:parsenoop },\n\t0x00BD: { n:\"BrtBeginPCDFAtbl\", f:parsenoop },\n\t0x00BE: { n:\"BrtEndPCDFAtbl\", f:parsenoop },\n\t0x00BF: { n:\"BrtBeginPCDIRun\", f:parsenoop },\n\t0x00C0: { n:\"BrtEndPCDIRun\", f:parsenoop },\n\t0x00C1: { n:\"BrtBeginPivotCacheRecords\", f:parsenoop },\n\t0x00C2: { n:\"BrtEndPivotCacheRecords\", f:parsenoop },\n\t0x00C3: { n:\"BrtBeginPCDHierarchies\", f:parsenoop },\n\t0x00C4: { n:\"BrtEndPCDHierarchies\", f:parsenoop },\n\t0x00C5: { n:\"BrtBeginPCDHierarchy\", f:parsenoop },\n\t0x00C6: { n:\"BrtEndPCDHierarchy\", f:parsenoop },\n\t0x00C7: { n:\"BrtBeginPCDHFieldsUsage\", f:parsenoop },\n\t0x00C8: { n:\"BrtEndPCDHFieldsUsage\", f:parsenoop },\n\t0x00C9: { n:\"BrtBeginExtConnection\", f:parsenoop },\n\t0x00CA: { n:\"BrtEndExtConnection\", f:parsenoop },\n\t0x00CB: { n:\"BrtBeginECDbProps\", f:parsenoop },\n\t0x00CC: { n:\"BrtEndECDbProps\", f:parsenoop },\n\t0x00CD: { n:\"BrtBeginECOlapProps\", f:parsenoop },\n\t0x00CE: { n:\"BrtEndECOlapProps\", f:parsenoop },\n\t0x00CF: { n:\"BrtBeginPCDSConsol\", f:parsenoop },\n\t0x00D0: { n:\"BrtEndPCDSConsol\", f:parsenoop },\n\t0x00D1: { n:\"BrtBeginPCDSCPages\", f:parsenoop },\n\t0x00D2: { n:\"BrtEndPCDSCPages\", f:parsenoop },\n\t0x00D3: { n:\"BrtBeginPCDSCPage\", f:parsenoop },\n\t0x00D4: { n:\"BrtEndPCDSCPage\", f:parsenoop },\n\t0x00D5: { n:\"BrtBeginPCDSCPItem\", f:parsenoop },\n\t0x00D6: { n:\"BrtEndPCDSCPItem\", f:parsenoop },\n\t0x00D7: { n:\"BrtBeginPCDSCSets\", f:parsenoop },\n\t0x00D8: { n:\"BrtEndPCDSCSets\", f:parsenoop },\n\t0x00D9: { n:\"BrtBeginPCDSCSet\", f:parsenoop },\n\t0x00DA: { n:\"BrtEndPCDSCSet\", f:parsenoop },\n\t0x00DB: { n:\"BrtBeginPCDFGroup\", f:parsenoop },\n\t0x00DC: { n:\"BrtEndPCDFGroup\", f:parsenoop },\n\t0x00DD: { n:\"BrtBeginPCDFGItems\", f:parsenoop },\n\t0x00DE: { n:\"BrtEndPCDFGItems\", f:parsenoop },\n\t0x00DF: { n:\"BrtBeginPCDFGRange\", f:parsenoop },\n\t0x00E0: { n:\"BrtEndPCDFGRange\", f:parsenoop },\n\t0x00E1: { n:\"BrtBeginPCDFGDiscrete\", f:parsenoop },\n\t0x00E2: { n:\"BrtEndPCDFGDiscrete\", f:parsenoop },\n\t0x00E3: { n:\"BrtBeginPCDSDTupleCache\", f:parsenoop },\n\t0x00E4: { n:\"BrtEndPCDSDTupleCache\", f:parsenoop },\n\t0x00E5: { n:\"BrtBeginPCDSDTCEntries\", f:parsenoop },\n\t0x00E6: { n:\"BrtEndPCDSDTCEntries\", f:parsenoop },\n\t0x00E7: { n:\"BrtBeginPCDSDTCEMembers\", f:parsenoop },\n\t0x00E8: { n:\"BrtEndPCDSDTCEMembers\", f:parsenoop },\n\t0x00E9: { n:\"BrtBeginPCDSDTCEMember\", f:parsenoop },\n\t0x00EA: { n:\"BrtEndPCDSDTCEMember\", f:parsenoop },\n\t0x00EB: { n:\"BrtBeginPCDSDTCQueries\", f:parsenoop },\n\t0x00EC: { n:\"BrtEndPCDSDTCQueries\", f:parsenoop },\n\t0x00ED: { n:\"BrtBeginPCDSDTCQuery\", f:parsenoop },\n\t0x00EE: { n:\"BrtEndPCDSDTCQuery\", f:parsenoop },\n\t0x00EF: { n:\"BrtBeginPCDSDTCSets\", f:parsenoop },\n\t0x00F0: { n:\"BrtEndPCDSDTCSets\", f:parsenoop },\n\t0x00F1: { n:\"BrtBeginPCDSDTCSet\", f:parsenoop },\n\t0x00F2: { n:\"BrtEndPCDSDTCSet\", f:parsenoop },\n\t0x00F3: { n:\"BrtBeginPCDCalcItems\", f:parsenoop },\n\t0x00F4: { n:\"BrtEndPCDCalcItems\", f:parsenoop },\n\t0x00F5: { n:\"BrtBeginPCDCalcItem\", f:parsenoop },\n\t0x00F6: { n:\"BrtEndPCDCalcItem\", f:parsenoop },\n\t0x00F7: { n:\"BrtBeginPRule\", f:parsenoop },\n\t0x00F8: { n:\"BrtEndPRule\", f:parsenoop },\n\t0x00F9: { n:\"BrtBeginPRFilters\", f:parsenoop },\n\t0x00FA: { n:\"BrtEndPRFilters\", f:parsenoop },\n\t0x00FB: { n:\"BrtBeginPRFilter\", f:parsenoop },\n\t0x00FC: { n:\"BrtEndPRFilter\", f:parsenoop },\n\t0x00FD: { n:\"BrtBeginPNames\", f:parsenoop },\n\t0x00FE: { n:\"BrtEndPNames\", f:parsenoop },\n\t0x00FF: { n:\"BrtBeginPName\", f:parsenoop },\n\t0x0100: { n:\"BrtEndPName\", f:parsenoop },\n\t0x0101: { n:\"BrtBeginPNPairs\", f:parsenoop },\n\t0x0102: { n:\"BrtEndPNPairs\", f:parsenoop },\n\t0x0103: { n:\"BrtBeginPNPair\", f:parsenoop },\n\t0x0104: { n:\"BrtEndPNPair\", f:parsenoop },\n\t0x0105: { n:\"BrtBeginECWebProps\", f:parsenoop },\n\t0x0106: { n:\"BrtEndECWebProps\", f:parsenoop },\n\t0x0107: { n:\"BrtBeginEcWpTables\", f:parsenoop },\n\t0x0108: { n:\"BrtEndECWPTables\", f:parsenoop },\n\t0x0109: { n:\"BrtBeginECParams\", f:parsenoop },\n\t0x010A: { n:\"BrtEndECParams\", f:parsenoop },\n\t0x010B: { n:\"BrtBeginECParam\", f:parsenoop },\n\t0x010C: { n:\"BrtEndECParam\", f:parsenoop },\n\t0x010D: { n:\"BrtBeginPCDKPIs\", f:parsenoop },\n\t0x010E: { n:\"BrtEndPCDKPIs\", f:parsenoop },\n\t0x010F: { n:\"BrtBeginPCDKPI\", f:parsenoop },\n\t0x0110: { n:\"BrtEndPCDKPI\", f:parsenoop },\n\t0x0111: { n:\"BrtBeginDims\", f:parsenoop },\n\t0x0112: { n:\"BrtEndDims\", f:parsenoop },\n\t0x0113: { n:\"BrtBeginDim\", f:parsenoop },\n\t0x0114: { n:\"BrtEndDim\", f:parsenoop },\n\t0x0115: { n:\"BrtIndexPartEnd\", f:parsenoop },\n\t0x0116: { n:\"BrtBeginStyleSheet\", f:parsenoop },\n\t0x0117: { n:\"BrtEndStyleSheet\", f:parsenoop },\n\t0x0118: { n:\"BrtBeginSXView\", f:parsenoop },\n\t0x0119: { n:\"BrtEndSXVI\", f:parsenoop },\n\t0x011A: { n:\"BrtBeginSXVI\", f:parsenoop },\n\t0x011B: { n:\"BrtBeginSXVIs\", f:parsenoop },\n\t0x011C: { n:\"BrtEndSXVIs\", f:parsenoop },\n\t0x011D: { n:\"BrtBeginSXVD\", f:parsenoop },\n\t0x011E: { n:\"BrtEndSXVD\", f:parsenoop },\n\t0x011F: { n:\"BrtBeginSXVDs\", f:parsenoop },\n\t0x0120: { n:\"BrtEndSXVDs\", f:parsenoop },\n\t0x0121: { n:\"BrtBeginSXPI\", f:parsenoop },\n\t0x0122: { n:\"BrtEndSXPI\", f:parsenoop },\n\t0x0123: { n:\"BrtBeginSXPIs\", f:parsenoop },\n\t0x0124: { n:\"BrtEndSXPIs\", f:parsenoop },\n\t0x0125: { n:\"BrtBeginSXDI\", f:parsenoop },\n\t0x0126: { n:\"BrtEndSXDI\", f:parsenoop },\n\t0x0127: { n:\"BrtBeginSXDIs\", f:parsenoop },\n\t0x0128: { n:\"BrtEndSXDIs\", f:parsenoop },\n\t0x0129: { n:\"BrtBeginSXLI\", f:parsenoop },\n\t0x012A: { n:\"BrtEndSXLI\", f:parsenoop },\n\t0x012B: { n:\"BrtBeginSXLIRws\", f:parsenoop },\n\t0x012C: { n:\"BrtEndSXLIRws\", f:parsenoop },\n\t0x012D: { n:\"BrtBeginSXLICols\", f:parsenoop },\n\t0x012E: { n:\"BrtEndSXLICols\", f:parsenoop },\n\t0x012F: { n:\"BrtBeginSXFormat\", f:parsenoop },\n\t0x0130: { n:\"BrtEndSXFormat\", f:parsenoop },\n\t0x0131: { n:\"BrtBeginSXFormats\", f:parsenoop },\n\t0x0132: { n:\"BrtEndSxFormats\", f:parsenoop },\n\t0x0133: { n:\"BrtBeginSxSelect\", f:parsenoop },\n\t0x0134: { n:\"BrtEndSxSelect\", f:parsenoop },\n\t0x0135: { n:\"BrtBeginISXVDRws\", f:parsenoop },\n\t0x0136: { n:\"BrtEndISXVDRws\", f:parsenoop },\n\t0x0137: { n:\"BrtBeginISXVDCols\", f:parsenoop },\n\t0x0138: { n:\"BrtEndISXVDCols\", f:parsenoop },\n\t0x0139: { n:\"BrtEndSXLocation\", f:parsenoop },\n\t0x013A: { n:\"BrtBeginSXLocation\", f:parsenoop },\n\t0x013B: { n:\"BrtEndSXView\", f:parsenoop },\n\t0x013C: { n:\"BrtBeginSXTHs\", f:parsenoop },\n\t0x013D: { n:\"BrtEndSXTHs\", f:parsenoop },\n\t0x013E: { n:\"BrtBeginSXTH\", f:parsenoop },\n\t0x013F: { n:\"BrtEndSXTH\", f:parsenoop },\n\t0x0140: { n:\"BrtBeginISXTHRws\", f:parsenoop },\n\t0x0141: { n:\"BrtEndISXTHRws\", f:parsenoop },\n\t0x0142: { n:\"BrtBeginISXTHCols\", f:parsenoop },\n\t0x0143: { n:\"BrtEndISXTHCols\", f:parsenoop },\n\t0x0144: { n:\"BrtBeginSXTDMPS\", f:parsenoop },\n\t0x0145: { n:\"BrtEndSXTDMPs\", f:parsenoop },\n\t0x0146: { n:\"BrtBeginSXTDMP\", f:parsenoop },\n\t0x0147: { n:\"BrtEndSXTDMP\", f:parsenoop },\n\t0x0148: { n:\"BrtBeginSXTHItems\", f:parsenoop },\n\t0x0149: { n:\"BrtEndSXTHItems\", f:parsenoop },\n\t0x014A: { n:\"BrtBeginSXTHItem\", f:parsenoop },\n\t0x014B: { n:\"BrtEndSXTHItem\", f:parsenoop },\n\t0x014C: { n:\"BrtBeginMetadata\", f:parsenoop },\n\t0x014D: { n:\"BrtEndMetadata\", f:parsenoop },\n\t0x014E: { n:\"BrtBeginEsmdtinfo\", f:parsenoop },\n\t0x014F: { n:\"BrtMdtinfo\", f:parsenoop },\n\t0x0150: { n:\"BrtEndEsmdtinfo\", f:parsenoop },\n\t0x0151: { n:\"BrtBeginEsmdb\", f:parsenoop },\n\t0x0152: { n:\"BrtEndEsmdb\", f:parsenoop },\n\t0x0153: { n:\"BrtBeginEsfmd\", f:parsenoop },\n\t0x0154: { n:\"BrtEndEsfmd\", f:parsenoop },\n\t0x0155: { n:\"BrtBeginSingleCells\", f:parsenoop },\n\t0x0156: { n:\"BrtEndSingleCells\", f:parsenoop },\n\t0x0157: { n:\"BrtBeginList\", f:parsenoop },\n\t0x0158: { n:\"BrtEndList\", f:parsenoop },\n\t0x0159: { n:\"BrtBeginListCols\", f:parsenoop },\n\t0x015A: { n:\"BrtEndListCols\", f:parsenoop },\n\t0x015B: { n:\"BrtBeginListCol\", f:parsenoop },\n\t0x015C: { n:\"BrtEndListCol\", f:parsenoop },\n\t0x015D: { n:\"BrtBeginListXmlCPr\", f:parsenoop },\n\t0x015E: { n:\"BrtEndListXmlCPr\", f:parsenoop },\n\t0x015F: { n:\"BrtListCCFmla\", f:parsenoop },\n\t0x0160: { n:\"BrtListTrFmla\", f:parsenoop },\n\t0x0161: { n:\"BrtBeginExternals\", f:parsenoop },\n\t0x0162: { n:\"BrtEndExternals\", f:parsenoop },\n\t0x0163: { n:\"BrtSupBookSrc\", f:parsenoop },\n\t0x0165: { n:\"BrtSupSelf\", f:parsenoop },\n\t0x0166: { n:\"BrtSupSame\", f:parsenoop },\n\t0x0167: { n:\"BrtSupTabs\", f:parsenoop },\n\t0x0168: { n:\"BrtBeginSupBook\", f:parsenoop },\n\t0x0169: { n:\"BrtPlaceholderName\", f:parsenoop },\n\t0x016A: { n:\"BrtExternSheet\", f:parsenoop },\n\t0x016B: { n:\"BrtExternTableStart\", f:parsenoop },\n\t0x016C: { n:\"BrtExternTableEnd\", f:parsenoop },\n\t0x016E: { n:\"BrtExternRowHdr\", f:parsenoop },\n\t0x016F: { n:\"BrtExternCellBlank\", f:parsenoop },\n\t0x0170: { n:\"BrtExternCellReal\", f:parsenoop },\n\t0x0171: { n:\"BrtExternCellBool\", f:parsenoop },\n\t0x0172: { n:\"BrtExternCellError\", f:parsenoop },\n\t0x0173: { n:\"BrtExternCellString\", f:parsenoop },\n\t0x0174: { n:\"BrtBeginEsmdx\", f:parsenoop },\n\t0x0175: { n:\"BrtEndEsmdx\", f:parsenoop },\n\t0x0176: { n:\"BrtBeginMdxSet\", f:parsenoop },\n\t0x0177: { n:\"BrtEndMdxSet\", f:parsenoop },\n\t0x0178: { n:\"BrtBeginMdxMbrProp\", f:parsenoop },\n\t0x0179: { n:\"BrtEndMdxMbrProp\", f:parsenoop },\n\t0x017A: { n:\"BrtBeginMdxKPI\", f:parsenoop },\n\t0x017B: { n:\"BrtEndMdxKPI\", f:parsenoop },\n\t0x017C: { n:\"BrtBeginEsstr\", f:parsenoop },\n\t0x017D: { n:\"BrtEndEsstr\", f:parsenoop },\n\t0x017E: { n:\"BrtBeginPRFItem\", f:parsenoop },\n\t0x017F: { n:\"BrtEndPRFItem\", f:parsenoop },\n\t0x0180: { n:\"BrtBeginPivotCacheIDs\", f:parsenoop },\n\t0x0181: { n:\"BrtEndPivotCacheIDs\", f:parsenoop },\n\t0x0182: { n:\"BrtBeginPivotCacheID\", f:parsenoop },\n\t0x0183: { n:\"BrtEndPivotCacheID\", f:parsenoop },\n\t0x0184: { n:\"BrtBeginISXVIs\", f:parsenoop },\n\t0x0185: { n:\"BrtEndISXVIs\", f:parsenoop },\n\t0x0186: { n:\"BrtBeginColInfos\", f:parsenoop },\n\t0x0187: { n:\"BrtEndColInfos\", f:parsenoop },\n\t0x0188: { n:\"BrtBeginRwBrk\", f:parsenoop },\n\t0x0189: { n:\"BrtEndRwBrk\", f:parsenoop },\n\t0x018A: { n:\"BrtBeginColBrk\", f:parsenoop },\n\t0x018B: { n:\"BrtEndColBrk\", f:parsenoop },\n\t0x018C: { n:\"BrtBrk\", f:parsenoop },\n\t0x018D: { n:\"BrtUserBookView\", f:parsenoop },\n\t0x018E: { n:\"BrtInfo\", f:parsenoop },\n\t0x018F: { n:\"BrtCUsr\", f:parsenoop },\n\t0x0190: { n:\"BrtUsr\", f:parsenoop },\n\t0x0191: { n:\"BrtBeginUsers\", f:parsenoop },\n\t0x0193: { n:\"BrtEOF\", f:parsenoop },\n\t0x0194: { n:\"BrtUCR\", f:parsenoop },\n\t0x0195: { n:\"BrtRRInsDel\", f:parsenoop },\n\t0x0196: { n:\"BrtRREndInsDel\", f:parsenoop },\n\t0x0197: { n:\"BrtRRMove\", f:parsenoop },\n\t0x0198: { n:\"BrtRREndMove\", f:parsenoop },\n\t0x0199: { n:\"BrtRRChgCell\", f:parsenoop },\n\t0x019A: { n:\"BrtRREndChgCell\", f:parsenoop },\n\t0x019B: { n:\"BrtRRHeader\", f:parsenoop },\n\t0x019C: { n:\"BrtRRUserView\", f:parsenoop },\n\t0x019D: { n:\"BrtRRRenSheet\", f:parsenoop },\n\t0x019E: { n:\"BrtRRInsertSh\", f:parsenoop },\n\t0x019F: { n:\"BrtRRDefName\", f:parsenoop },\n\t0x01A0: { n:\"BrtRRNote\", f:parsenoop },\n\t0x01A1: { n:\"BrtRRConflict\", f:parsenoop },\n\t0x01A2: { n:\"BrtRRTQSIF\", f:parsenoop },\n\t0x01A3: { n:\"BrtRRFormat\", f:parsenoop },\n\t0x01A4: { n:\"BrtRREndFormat\", f:parsenoop },\n\t0x01A5: { n:\"BrtRRAutoFmt\", f:parsenoop },\n\t0x01A6: { n:\"BrtBeginUserShViews\", f:parsenoop },\n\t0x01A7: { n:\"BrtBeginUserShView\", f:parsenoop },\n\t0x01A8: { n:\"BrtEndUserShView\", f:parsenoop },\n\t0x01A9: { n:\"BrtEndUserShViews\", f:parsenoop },\n\t0x01AA: { n:\"BrtArrFmla\", f:parsenoop },\n\t0x01AB: { n:\"BrtShrFmla\", f:parsenoop },\n\t0x01AC: { n:\"BrtTable\", f:parsenoop },\n\t0x01AD: { n:\"BrtBeginExtConnections\", f:parsenoop },\n\t0x01AE: { n:\"BrtEndExtConnections\", f:parsenoop },\n\t0x01AF: { n:\"BrtBeginPCDCalcMems\", f:parsenoop },\n\t0x01B0: { n:\"BrtEndPCDCalcMems\", f:parsenoop },\n\t0x01B1: { n:\"BrtBeginPCDCalcMem\", f:parsenoop },\n\t0x01B2: { n:\"BrtEndPCDCalcMem\", f:parsenoop },\n\t0x01B3: { n:\"BrtBeginPCDHGLevels\", f:parsenoop },\n\t0x01B4: { n:\"BrtEndPCDHGLevels\", f:parsenoop },\n\t0x01B5: { n:\"BrtBeginPCDHGLevel\", f:parsenoop },\n\t0x01B6: { n:\"BrtEndPCDHGLevel\", f:parsenoop },\n\t0x01B7: { n:\"BrtBeginPCDHGLGroups\", f:parsenoop },\n\t0x01B8: { n:\"BrtEndPCDHGLGroups\", f:parsenoop },\n\t0x01B9: { n:\"BrtBeginPCDHGLGroup\", f:parsenoop },\n\t0x01BA: { n:\"BrtEndPCDHGLGroup\", f:parsenoop },\n\t0x01BB: { n:\"BrtBeginPCDHGLGMembers\", f:parsenoop },\n\t0x01BC: { n:\"BrtEndPCDHGLGMembers\", f:parsenoop },\n\t0x01BD: { n:\"BrtBeginPCDHGLGMember\", f:parsenoop },\n\t0x01BE: { n:\"BrtEndPCDHGLGMember\", f:parsenoop },\n\t0x01BF: { n:\"BrtBeginQSI\", f:parsenoop },\n\t0x01C0: { n:\"BrtEndQSI\", f:parsenoop },\n\t0x01C1: { n:\"BrtBeginQSIR\", f:parsenoop },\n\t0x01C2: { n:\"BrtEndQSIR\", f:parsenoop },\n\t0x01C3: { n:\"BrtBeginDeletedNames\", f:parsenoop },\n\t0x01C4: { n:\"BrtEndDeletedNames\", f:parsenoop },\n\t0x01C5: { n:\"BrtBeginDeletedName\", f:parsenoop },\n\t0x01C6: { n:\"BrtEndDeletedName\", f:parsenoop },\n\t0x01C7: { n:\"BrtBeginQSIFs\", f:parsenoop },\n\t0x01C8: { n:\"BrtEndQSIFs\", f:parsenoop },\n\t0x01C9: { n:\"BrtBeginQSIF\", f:parsenoop },\n\t0x01CA: { n:\"BrtEndQSIF\", f:parsenoop },\n\t0x01CB: { n:\"BrtBeginAutoSortScope\", f:parsenoop },\n\t0x01CC: { n:\"BrtEndAutoSortScope\", f:parsenoop },\n\t0x01CD: { n:\"BrtBeginConditionalFormatting\", f:parsenoop },\n\t0x01CE: { n:\"BrtEndConditionalFormatting\", f:parsenoop },\n\t0x01CF: { n:\"BrtBeginCFRule\", f:parsenoop },\n\t0x01D0: { n:\"BrtEndCFRule\", f:parsenoop },\n\t0x01D1: { n:\"BrtBeginIconSet\", f:parsenoop },\n\t0x01D2: { n:\"BrtEndIconSet\", f:parsenoop },\n\t0x01D3: { n:\"BrtBeginDatabar\", f:parsenoop },\n\t0x01D4: { n:\"BrtEndDatabar\", f:parsenoop },\n\t0x01D5: { n:\"BrtBeginColorScale\", f:parsenoop },\n\t0x01D6: { n:\"BrtEndColorScale\", f:parsenoop },\n\t0x01D7: { n:\"BrtCFVO\", f:parsenoop },\n\t0x01D8: { n:\"BrtExternValueMeta\", f:parsenoop },\n\t0x01D9: { n:\"BrtBeginColorPalette\", f:parsenoop },\n\t0x01DA: { n:\"BrtEndColorPalette\", f:parsenoop },\n\t0x01DB: { n:\"BrtIndexedColor\", f:parsenoop },\n\t0x01DC: { n:\"BrtMargins\", f:parsenoop },\n\t0x01DD: { n:\"BrtPrintOptions\", f:parsenoop },\n\t0x01DE: { n:\"BrtPageSetup\", f:parsenoop },\n\t0x01DF: { n:\"BrtBeginHeaderFooter\", f:parsenoop },\n\t0x01E0: { n:\"BrtEndHeaderFooter\", f:parsenoop },\n\t0x01E1: { n:\"BrtBeginSXCrtFormat\", f:parsenoop },\n\t0x01E2: { n:\"BrtEndSXCrtFormat\", f:parsenoop },\n\t0x01E3: { n:\"BrtBeginSXCrtFormats\", f:parsenoop },\n\t0x01E4: { n:\"BrtEndSXCrtFormats\", f:parsenoop },\n\t0x01E5: { n:\"BrtWsFmtInfo\", f:parsenoop },\n\t0x01E6: { n:\"BrtBeginMgs\", f:parsenoop },\n\t0x01E7: { n:\"BrtEndMGs\", f:parsenoop },\n\t0x01E8: { n:\"BrtBeginMGMaps\", f:parsenoop },\n\t0x01E9: { n:\"BrtEndMGMaps\", f:parsenoop },\n\t0x01EA: { n:\"BrtBeginMG\", f:parsenoop },\n\t0x01EB: { n:\"BrtEndMG\", f:parsenoop },\n\t0x01EC: { n:\"BrtBeginMap\", f:parsenoop },\n\t0x01ED: { n:\"BrtEndMap\", f:parsenoop },\n\t0x01EE: { n:\"BrtHLink\", f:parse_BrtHLink },\n\t0x01EF: { n:\"BrtBeginDCon\", f:parsenoop },\n\t0x01F0: { n:\"BrtEndDCon\", f:parsenoop },\n\t0x01F1: { n:\"BrtBeginDRefs\", f:parsenoop },\n\t0x01F2: { n:\"BrtEndDRefs\", f:parsenoop },\n\t0x01F3: { n:\"BrtDRef\", f:parsenoop },\n\t0x01F4: { n:\"BrtBeginScenMan\", f:parsenoop },\n\t0x01F5: { n:\"BrtEndScenMan\", f:parsenoop },\n\t0x01F6: { n:\"BrtBeginSct\", f:parsenoop },\n\t0x01F7: { n:\"BrtEndSct\", f:parsenoop },\n\t0x01F8: { n:\"BrtSlc\", f:parsenoop },\n\t0x01F9: { n:\"BrtBeginDXFs\", f:parsenoop },\n\t0x01FA: { n:\"BrtEndDXFs\", f:parsenoop },\n\t0x01FB: { n:\"BrtDXF\", f:parsenoop },\n\t0x01FC: { n:\"BrtBeginTableStyles\", f:parsenoop },\n\t0x01FD: { n:\"BrtEndTableStyles\", f:parsenoop },\n\t0x01FE: { n:\"BrtBeginTableStyle\", f:parsenoop },\n\t0x01FF: { n:\"BrtEndTableStyle\", f:parsenoop },\n\t0x0200: { n:\"BrtTableStyleElement\", f:parsenoop },\n\t0x0201: { n:\"BrtTableStyleClient\", f:parsenoop },\n\t0x0202: { n:\"BrtBeginVolDeps\", f:parsenoop },\n\t0x0203: { n:\"BrtEndVolDeps\", f:parsenoop },\n\t0x0204: { n:\"BrtBeginVolType\", f:parsenoop },\n\t0x0205: { n:\"BrtEndVolType\", f:parsenoop },\n\t0x0206: { n:\"BrtBeginVolMain\", f:parsenoop },\n\t0x0207: { n:\"BrtEndVolMain\", f:parsenoop },\n\t0x0208: { n:\"BrtBeginVolTopic\", f:parsenoop },\n\t0x0209: { n:\"BrtEndVolTopic\", f:parsenoop },\n\t0x020A: { n:\"BrtVolSubtopic\", f:parsenoop },\n\t0x020B: { n:\"BrtVolRef\", f:parsenoop },\n\t0x020C: { n:\"BrtVolNum\", f:parsenoop },\n\t0x020D: { n:\"BrtVolErr\", f:parsenoop },\n\t0x020E: { n:\"BrtVolStr\", f:parsenoop },\n\t0x020F: { n:\"BrtVolBool\", f:parsenoop },\n\t0x0210: { n:\"BrtBeginCalcChain$\", f:parsenoop },\n\t0x0211: { n:\"BrtEndCalcChain$\", f:parsenoop },\n\t0x0212: { n:\"BrtBeginSortState\", f:parsenoop },\n\t0x0213: { n:\"BrtEndSortState\", f:parsenoop },\n\t0x0214: { n:\"BrtBeginSortCond\", f:parsenoop },\n\t0x0215: { n:\"BrtEndSortCond\", f:parsenoop },\n\t0x0216: { n:\"BrtBookProtection\", f:parsenoop },\n\t0x0217: { n:\"BrtSheetProtection\", f:parsenoop },\n\t0x0218: { n:\"BrtRangeProtection\", f:parsenoop },\n\t0x0219: { n:\"BrtPhoneticInfo\", f:parsenoop },\n\t0x021A: { n:\"BrtBeginECTxtWiz\", f:parsenoop },\n\t0x021B: { n:\"BrtEndECTxtWiz\", f:parsenoop },\n\t0x021C: { n:\"BrtBeginECTWFldInfoLst\", f:parsenoop },\n\t0x021D: { n:\"BrtEndECTWFldInfoLst\", f:parsenoop },\n\t0x021E: { n:\"BrtBeginECTwFldInfo\", f:parsenoop },\n\t0x0224: { n:\"BrtFileSharing\", f:parsenoop },\n\t0x0225: { n:\"BrtOleSize\", f:parsenoop },\n\t0x0226: { n:\"BrtDrawing\", f:parsenoop },\n\t0x0227: { n:\"BrtLegacyDrawing\", f:parsenoop },\n\t0x0228: { n:\"BrtLegacyDrawingHF\", f:parsenoop },\n\t0x0229: { n:\"BrtWebOpt\", f:parsenoop },\n\t0x022A: { n:\"BrtBeginWebPubItems\", f:parsenoop },\n\t0x022B: { n:\"BrtEndWebPubItems\", f:parsenoop },\n\t0x022C: { n:\"BrtBeginWebPubItem\", f:parsenoop },\n\t0x022D: { n:\"BrtEndWebPubItem\", f:parsenoop },\n\t0x022E: { n:\"BrtBeginSXCondFmt\", f:parsenoop },\n\t0x022F: { n:\"BrtEndSXCondFmt\", f:parsenoop },\n\t0x0230: { n:\"BrtBeginSXCondFmts\", f:parsenoop },\n\t0x0231: { n:\"BrtEndSXCondFmts\", f:parsenoop },\n\t0x0232: { n:\"BrtBkHim\", f:parsenoop },\n\t0x0234: { n:\"BrtColor\", f:parsenoop },\n\t0x0235: { n:\"BrtBeginIndexedColors\", f:parsenoop },\n\t0x0236: { n:\"BrtEndIndexedColors\", f:parsenoop },\n\t0x0239: { n:\"BrtBeginMRUColors\", f:parsenoop },\n\t0x023A: { n:\"BrtEndMRUColors\", f:parsenoop },\n\t0x023C: { n:\"BrtMRUColor\", f:parsenoop },\n\t0x023D: { n:\"BrtBeginDVals\", f:parsenoop },\n\t0x023E: { n:\"BrtEndDVals\", f:parsenoop },\n\t0x0241: { n:\"BrtSupNameStart\", f:parsenoop },\n\t0x0242: { n:\"BrtSupNameValueStart\", f:parsenoop },\n\t0x0243: { n:\"BrtSupNameValueEnd\", f:parsenoop },\n\t0x0244: { n:\"BrtSupNameNum\", f:parsenoop },\n\t0x0245: { n:\"BrtSupNameErr\", f:parsenoop },\n\t0x0246: { n:\"BrtSupNameSt\", f:parsenoop },\n\t0x0247: { n:\"BrtSupNameNil\", f:parsenoop },\n\t0x0248: { n:\"BrtSupNameBool\", f:parsenoop },\n\t0x0249: { n:\"BrtSupNameFmla\", f:parsenoop },\n\t0x024A: { n:\"BrtSupNameBits\", f:parsenoop },\n\t0x024B: { n:\"BrtSupNameEnd\", f:parsenoop },\n\t0x024C: { n:\"BrtEndSupBook\", f:parsenoop },\n\t0x024D: { n:\"BrtCellSmartTagProperty\", f:parsenoop },\n\t0x024E: { n:\"BrtBeginCellSmartTag\", f:parsenoop },\n\t0x024F: { n:\"BrtEndCellSmartTag\", f:parsenoop },\n\t0x0250: { n:\"BrtBeginCellSmartTags\", f:parsenoop },\n\t0x0251: { n:\"BrtEndCellSmartTags\", f:parsenoop },\n\t0x0252: { n:\"BrtBeginSmartTags\", f:parsenoop },\n\t0x0253: { n:\"BrtEndSmartTags\", f:parsenoop },\n\t0x0254: { n:\"BrtSmartTagType\", f:parsenoop },\n\t0x0255: { n:\"BrtBeginSmartTagTypes\", f:parsenoop },\n\t0x0256: { n:\"BrtEndSmartTagTypes\", f:parsenoop },\n\t0x0257: { n:\"BrtBeginSXFilters\", f:parsenoop },\n\t0x0258: { n:\"BrtEndSXFilters\", f:parsenoop },\n\t0x0259: { n:\"BrtBeginSXFILTER\", f:parsenoop },\n\t0x025A: { n:\"BrtEndSXFilter\", f:parsenoop },\n\t0x025B: { n:\"BrtBeginFills\", f:parsenoop },\n\t0x025C: { n:\"BrtEndFills\", f:parsenoop },\n\t0x025D: { n:\"BrtBeginCellWatches\", f:parsenoop },\n\t0x025E: { n:\"BrtEndCellWatches\", f:parsenoop },\n\t0x025F: { n:\"BrtCellWatch\", f:parsenoop },\n\t0x0260: { n:\"BrtBeginCRErrs\", f:parsenoop },\n\t0x0261: { n:\"BrtEndCRErrs\", f:parsenoop },\n\t0x0262: { n:\"BrtCrashRecErr\", f:parsenoop },\n\t0x0263: { n:\"BrtBeginFonts\", f:parsenoop },\n\t0x0264: { n:\"BrtEndFonts\", f:parsenoop },\n\t0x0265: { n:\"BrtBeginBorders\", f:parsenoop },\n\t0x0266: { n:\"BrtEndBorders\", f:parsenoop },\n\t0x0267: { n:\"BrtBeginFmts\", f:parsenoop },\n\t0x0268: { n:\"BrtEndFmts\", f:parsenoop },\n\t0x0269: { n:\"BrtBeginCellXFs\", f:parsenoop },\n\t0x026A: { n:\"BrtEndCellXFs\", f:parsenoop },\n\t0x026B: { n:\"BrtBeginStyles\", f:parsenoop },\n\t0x026C: { n:\"BrtEndStyles\", f:parsenoop },\n\t0x0271: { n:\"BrtBigName\", f:parsenoop },\n\t0x0272: { n:\"BrtBeginCellStyleXFs\", f:parsenoop },\n\t0x0273: { n:\"BrtEndCellStyleXFs\", f:parsenoop },\n\t0x0274: { n:\"BrtBeginComments\", f:parsenoop },\n\t0x0275: { n:\"BrtEndComments\", f:parsenoop },\n\t0x0276: { n:\"BrtBeginCommentAuthors\", f:parsenoop },\n\t0x0277: { n:\"BrtEndCommentAuthors\", f:parsenoop },\n\t0x0278: { n:\"BrtCommentAuthor\", f:parse_BrtCommentAuthor },\n\t0x0279: { n:\"BrtBeginCommentList\", f:parsenoop },\n\t0x027A: { n:\"BrtEndCommentList\", f:parsenoop },\n\t0x027B: { n:\"BrtBeginComment\", f:parse_BrtBeginComment},\n\t0x027C: { n:\"BrtEndComment\", f:parsenoop },\n\t0x027D: { n:\"BrtCommentText\", f:parse_BrtCommentText },\n\t0x027E: { n:\"BrtBeginOleObjects\", f:parsenoop },\n\t0x027F: { n:\"BrtOleObject\", f:parsenoop },\n\t0x0280: { n:\"BrtEndOleObjects\", f:parsenoop },\n\t0x0281: { n:\"BrtBeginSxrules\", f:parsenoop },\n\t0x0282: { n:\"BrtEndSxRules\", f:parsenoop },\n\t0x0283: { n:\"BrtBeginActiveXControls\", f:parsenoop },\n\t0x0284: { n:\"BrtActiveX\", f:parsenoop },\n\t0x0285: { n:\"BrtEndActiveXControls\", f:parsenoop },\n\t0x0286: { n:\"BrtBeginPCDSDTCEMembersSortBy\", f:parsenoop },\n\t0x0288: { n:\"BrtBeginCellIgnoreECs\", f:parsenoop },\n\t0x0289: { n:\"BrtCellIgnoreEC\", f:parsenoop },\n\t0x028A: { n:\"BrtEndCellIgnoreECs\", f:parsenoop },\n\t0x028B: { n:\"BrtCsProp\", f:parsenoop },\n\t0x028C: { n:\"BrtCsPageSetup\", f:parsenoop },\n\t0x028D: { n:\"BrtBeginUserCsViews\", f:parsenoop },\n\t0x028E: { n:\"BrtEndUserCsViews\", f:parsenoop },\n\t0x028F: { n:\"BrtBeginUserCsView\", f:parsenoop },\n\t0x0290: { n:\"BrtEndUserCsView\", f:parsenoop },\n\t0x0291: { n:\"BrtBeginPcdSFCIEntries\", f:parsenoop },\n\t0x0292: { n:\"BrtEndPCDSFCIEntries\", f:parsenoop },\n\t0x0293: { n:\"BrtPCDSFCIEntry\", f:parsenoop },\n\t0x0294: { n:\"BrtBeginListParts\", f:parsenoop },\n\t0x0295: { n:\"BrtListPart\", f:parsenoop },\n\t0x0296: { n:\"BrtEndListParts\", f:parsenoop },\n\t0x0297: { n:\"BrtSheetCalcProp\", f:parsenoop },\n\t0x0298: { n:\"BrtBeginFnGroup\", f:parsenoop },\n\t0x0299: { n:\"BrtFnGroup\", f:parsenoop },\n\t0x029A: { n:\"BrtEndFnGroup\", f:parsenoop },\n\t0x029B: { n:\"BrtSupAddin\", f:parsenoop },\n\t0x029C: { n:\"BrtSXTDMPOrder\", f:parsenoop },\n\t0x029D: { n:\"BrtCsProtection\", f:parsenoop },\n\t0x029F: { n:\"BrtBeginWsSortMap\", f:parsenoop },\n\t0x02A0: { n:\"BrtEndWsSortMap\", f:parsenoop },\n\t0x02A1: { n:\"BrtBeginRRSort\", f:parsenoop },\n\t0x02A2: { n:\"BrtEndRRSort\", f:parsenoop },\n\t0x02A3: { n:\"BrtRRSortItem\", f:parsenoop },\n\t0x02A4: { n:\"BrtFileSharingIso\", f:parsenoop },\n\t0x02A5: { n:\"BrtBookProtectionIso\", f:parsenoop },\n\t0x02A6: { n:\"BrtSheetProtectionIso\", f:parsenoop },\n\t0x02A7: { n:\"BrtCsProtectionIso\", f:parsenoop },\n\t0x02A8: { n:\"BrtRangeProtectionIso\", f:parsenoop },\n\t0x0400: { n:\"BrtRwDescent\", f:parsenoop },\n\t0x0401: { n:\"BrtKnownFonts\", f:parsenoop },\n\t0x0402: { n:\"BrtBeginSXTupleSet\", f:parsenoop },\n\t0x0403: { n:\"BrtEndSXTupleSet\", f:parsenoop },\n\t0x0404: { n:\"BrtBeginSXTupleSetHeader\", f:parsenoop },\n\t0x0405: { n:\"BrtEndSXTupleSetHeader\", f:parsenoop },\n\t0x0406: { n:\"BrtSXTupleSetHeaderItem\", f:parsenoop },\n\t0x0407: { n:\"BrtBeginSXTupleSetData\", f:parsenoop },\n\t0x0408: { n:\"BrtEndSXTupleSetData\", f:parsenoop },\n\t0x0409: { n:\"BrtBeginSXTupleSetRow\", f:parsenoop },\n\t0x040A: { n:\"BrtEndSXTupleSetRow\", f:parsenoop },\n\t0x040B: { n:\"BrtSXTupleSetRowItem\", f:parsenoop },\n\t0x040C: { n:\"BrtNameExt\", f:parsenoop },\n\t0x040D: { n:\"BrtPCDH14\", f:parsenoop },\n\t0x040E: { n:\"BrtBeginPCDCalcMem14\", f:parsenoop },\n\t0x040F: { n:\"BrtEndPCDCalcMem14\", f:parsenoop },\n\t0x0410: { n:\"BrtSXTH14\", f:parsenoop },\n\t0x0411: { n:\"BrtBeginSparklineGroup\", f:parsenoop },\n\t0x0412: { n:\"BrtEndSparklineGroup\", f:parsenoop },\n\t0x0413: { n:\"BrtSparkline\", f:parsenoop },\n\t0x0414: { n:\"BrtSXDI14\", f:parsenoop },\n\t0x0415: { n:\"BrtWsFmtInfoEx14\", f:parsenoop },\n\t0x0416: { n:\"BrtBeginConditionalFormatting14\", f:parsenoop },\n\t0x0417: { n:\"BrtEndConditionalFormatting14\", f:parsenoop },\n\t0x0418: { n:\"BrtBeginCFRule14\", f:parsenoop },\n\t0x0419: { n:\"BrtEndCFRule14\", f:parsenoop },\n\t0x041A: { n:\"BrtCFVO14\", f:parsenoop },\n\t0x041B: { n:\"BrtBeginDatabar14\", f:parsenoop },\n\t0x041C: { n:\"BrtBeginIconSet14\", f:parsenoop },\n\t0x041D: { n:\"BrtDVal14\", f:parsenoop },\n\t0x041E: { n:\"BrtBeginDVals14\", f:parsenoop },\n\t0x041F: { n:\"BrtColor14\", f:parsenoop },\n\t0x0420: { n:\"BrtBeginSparklines\", f:parsenoop },\n\t0x0421: { n:\"BrtEndSparklines\", f:parsenoop },\n\t0x0422: { n:\"BrtBeginSparklineGroups\", f:parsenoop },\n\t0x0423: { n:\"BrtEndSparklineGroups\", f:parsenoop },\n\t0x0425: { n:\"BrtSXVD14\", f:parsenoop },\n\t0x0426: { n:\"BrtBeginSxview14\", f:parsenoop },\n\t0x0427: { n:\"BrtEndSxview14\", f:parsenoop },\n\t0x042A: { n:\"BrtBeginPCD14\", f:parsenoop },\n\t0x042B: { n:\"BrtEndPCD14\", f:parsenoop },\n\t0x042C: { n:\"BrtBeginExtConn14\", f:parsenoop },\n\t0x042D: { n:\"BrtEndExtConn14\", f:parsenoop },\n\t0x042E: { n:\"BrtBeginSlicerCacheIDs\", f:parsenoop },\n\t0x042F: { n:\"BrtEndSlicerCacheIDs\", f:parsenoop },\n\t0x0430: { n:\"BrtBeginSlicerCacheID\", f:parsenoop },\n\t0x0431: { n:\"BrtEndSlicerCacheID\", f:parsenoop },\n\t0x0433: { n:\"BrtBeginSlicerCache\", f:parsenoop },\n\t0x0434: { n:\"BrtEndSlicerCache\", f:parsenoop },\n\t0x0435: { n:\"BrtBeginSlicerCacheDef\", f:parsenoop },\n\t0x0436: { n:\"BrtEndSlicerCacheDef\", f:parsenoop },\n\t0x0437: { n:\"BrtBeginSlicersEx\", f:parsenoop },\n\t0x0438: { n:\"BrtEndSlicersEx\", f:parsenoop },\n\t0x0439: { n:\"BrtBeginSlicerEx\", f:parsenoop },\n\t0x043A: { n:\"BrtEndSlicerEx\", f:parsenoop },\n\t0x043B: { n:\"BrtBeginSlicer\", f:parsenoop },\n\t0x043C: { n:\"BrtEndSlicer\", f:parsenoop },\n\t0x043D: { n:\"BrtSlicerCachePivotTables\", f:parsenoop },\n\t0x043E: { n:\"BrtBeginSlicerCacheOlapImpl\", f:parsenoop },\n\t0x043F: { n:\"BrtEndSlicerCacheOlapImpl\", f:parsenoop },\n\t0x0440: { n:\"BrtBeginSlicerCacheLevelsData\", f:parsenoop },\n\t0x0441: { n:\"BrtEndSlicerCacheLevelsData\", f:parsenoop },\n\t0x0442: { n:\"BrtBeginSlicerCacheLevelData\", f:parsenoop },\n\t0x0443: { n:\"BrtEndSlicerCacheLevelData\", f:parsenoop },\n\t0x0444: { n:\"BrtBeginSlicerCacheSiRanges\", f:parsenoop },\n\t0x0445: { n:\"BrtEndSlicerCacheSiRanges\", f:parsenoop },\n\t0x0446: { n:\"BrtBeginSlicerCacheSiRange\", f:parsenoop },\n\t0x0447: { n:\"BrtEndSlicerCacheSiRange\", f:parsenoop },\n\t0x0448: { n:\"BrtSlicerCacheOlapItem\", f:parsenoop },\n\t0x0449: { n:\"BrtBeginSlicerCacheSelections\", f:parsenoop },\n\t0x044A: { n:\"BrtSlicerCacheSelection\", f:parsenoop },\n\t0x044B: { n:\"BrtEndSlicerCacheSelections\", f:parsenoop },\n\t0x044C: { n:\"BrtBeginSlicerCacheNative\", f:parsenoop },\n\t0x044D: { n:\"BrtEndSlicerCacheNative\", f:parsenoop },\n\t0x044E: { n:\"BrtSlicerCacheNativeItem\", f:parsenoop },\n\t0x044F: { n:\"BrtRangeProtection14\", f:parsenoop },\n\t0x0450: { n:\"BrtRangeProtectionIso14\", f:parsenoop },\n\t0x0451: { n:\"BrtCellIgnoreEC14\", f:parsenoop },\n\t0x0457: { n:\"BrtList14\", f:parsenoop },\n\t0x0458: { n:\"BrtCFIcon\", f:parsenoop },\n\t0x0459: { n:\"BrtBeginSlicerCachesPivotCacheIDs\", f:parsenoop },\n\t0x045A: { n:\"BrtEndSlicerCachesPivotCacheIDs\", f:parsenoop },\n\t0x045B: { n:\"BrtBeginSlicers\", f:parsenoop },\n\t0x045C: { n:\"BrtEndSlicers\", f:parsenoop },\n\t0x045D: { n:\"BrtWbProp14\", f:parsenoop },\n\t0x045E: { n:\"BrtBeginSXEdit\", f:parsenoop },\n\t0x045F: { n:\"BrtEndSXEdit\", f:parsenoop },\n\t0x0460: { n:\"BrtBeginSXEdits\", f:parsenoop },\n\t0x0461: { n:\"BrtEndSXEdits\", f:parsenoop },\n\t0x0462: { n:\"BrtBeginSXChange\", f:parsenoop },\n\t0x0463: { n:\"BrtEndSXChange\", f:parsenoop },\n\t0x0464: { n:\"BrtBeginSXChanges\", f:parsenoop },\n\t0x0465: { n:\"BrtEndSXChanges\", f:parsenoop },\n\t0x0466: { n:\"BrtSXTupleItems\", f:parsenoop },\n\t0x0468: { n:\"BrtBeginSlicerStyle\", f:parsenoop },\n\t0x0469: { n:\"BrtEndSlicerStyle\", f:parsenoop },\n\t0x046A: { n:\"BrtSlicerStyleElement\", f:parsenoop },\n\t0x046B: { n:\"BrtBeginStyleSheetExt14\", f:parsenoop },\n\t0x046C: { n:\"BrtEndStyleSheetExt14\", f:parsenoop },\n\t0x046D: { n:\"BrtBeginSlicerCachesPivotCacheID\", f:parsenoop },\n\t0x046E: { n:\"BrtEndSlicerCachesPivotCacheID\", f:parsenoop },\n\t0x046F: { n:\"BrtBeginConditionalFormattings\", f:parsenoop },\n\t0x0470: { n:\"BrtEndConditionalFormattings\", f:parsenoop },\n\t0x0471: { n:\"BrtBeginPCDCalcMemExt\", f:parsenoop },\n\t0x0472: { n:\"BrtEndPCDCalcMemExt\", f:parsenoop },\n\t0x0473: { n:\"BrtBeginPCDCalcMemsExt\", f:parsenoop },\n\t0x0474: { n:\"BrtEndPCDCalcMemsExt\", f:parsenoop },\n\t0x0475: { n:\"BrtPCDField14\", f:parsenoop },\n\t0x0476: { n:\"BrtBeginSlicerStyles\", f:parsenoop },\n\t0x0477: { n:\"BrtEndSlicerStyles\", f:parsenoop },\n\t0x0478: { n:\"BrtBeginSlicerStyleElements\", f:parsenoop },\n\t0x0479: { n:\"BrtEndSlicerStyleElements\", f:parsenoop },\n\t0x047A: { n:\"BrtCFRuleExt\", f:parsenoop },\n\t0x047B: { n:\"BrtBeginSXCondFmt14\", f:parsenoop },\n\t0x047C: { n:\"BrtEndSXCondFmt14\", f:parsenoop },\n\t0x047D: { n:\"BrtBeginSXCondFmts14\", f:parsenoop },\n\t0x047E: { n:\"BrtEndSXCondFmts14\", f:parsenoop },\n\t0x0480: { n:\"BrtBeginSortCond14\", f:parsenoop },\n\t0x0481: { n:\"BrtEndSortCond14\", f:parsenoop },\n\t0x0482: { n:\"BrtEndDVals14\", f:parsenoop },\n\t0x0483: { n:\"BrtEndIconSet14\", f:parsenoop },\n\t0x0484: { n:\"BrtEndDatabar14\", f:parsenoop },\n\t0x0485: { n:\"BrtBeginColorScale14\", f:parsenoop },\n\t0x0486: { n:\"BrtEndColorScale14\", f:parsenoop },\n\t0x0487: { n:\"BrtBeginSxrules14\", f:parsenoop },\n\t0x0488: { n:\"BrtEndSxrules14\", f:parsenoop },\n\t0x0489: { n:\"BrtBeginPRule14\", f:parsenoop },\n\t0x048A: { n:\"BrtEndPRule14\", f:parsenoop },\n\t0x048B: { n:\"BrtBeginPRFilters14\", f:parsenoop },\n\t0x048C: { n:\"BrtEndPRFilters14\", f:parsenoop },\n\t0x048D: { n:\"BrtBeginPRFilter14\", f:parsenoop },\n\t0x048E: { n:\"BrtEndPRFilter14\", f:parsenoop },\n\t0x048F: { n:\"BrtBeginPRFItem14\", f:parsenoop },\n\t0x0490: { n:\"BrtEndPRFItem14\", f:parsenoop },\n\t0x0491: { n:\"BrtBeginCellIgnoreECs14\", f:parsenoop },\n\t0x0492: { n:\"BrtEndCellIgnoreECs14\", f:parsenoop },\n\t0x0493: { n:\"BrtDxf14\", f:parsenoop },\n\t0x0494: { n:\"BrtBeginDxF14s\", f:parsenoop },\n\t0x0495: { n:\"BrtEndDxf14s\", f:parsenoop },\n\t0x0499: { n:\"BrtFilter14\", f:parsenoop },\n\t0x049A: { n:\"BrtBeginCustomFilters14\", f:parsenoop },\n\t0x049C: { n:\"BrtCustomFilter14\", f:parsenoop },\n\t0x049D: { n:\"BrtIconFilter14\", f:parsenoop },\n\t0x049E: { n:\"BrtPivotCacheConnectionName\", f:parsenoop },\n\t0x0800: { n:\"BrtBeginDecoupledPivotCacheIDs\", f:parsenoop },\n\t0x0801: { n:\"BrtEndDecoupledPivotCacheIDs\", f:parsenoop },\n\t0x0802: { n:\"BrtDecoupledPivotCacheID\", f:parsenoop },\n\t0x0803: { n:\"BrtBeginPivotTableRefs\", f:parsenoop },\n\t0x0804: { n:\"BrtEndPivotTableRefs\", f:parsenoop },\n\t0x0805: { n:\"BrtPivotTableRef\", f:parsenoop },\n\t0x0806: { n:\"BrtSlicerCacheBookPivotTables\", f:parsenoop },\n\t0x0807: { n:\"BrtBeginSxvcells\", f:parsenoop },\n\t0x0808: { n:\"BrtEndSxvcells\", f:parsenoop },\n\t0x0809: { n:\"BrtBeginSxRow\", f:parsenoop },\n\t0x080A: { n:\"BrtEndSxRow\", f:parsenoop },\n\t0x080C: { n:\"BrtPcdCalcMem15\", f:parsenoop },\n\t0x0813: { n:\"BrtQsi15\", f:parsenoop },\n\t0x0814: { n:\"BrtBeginWebExtensions\", f:parsenoop },\n\t0x0815: { n:\"BrtEndWebExtensions\", f:parsenoop },\n\t0x0816: { n:\"BrtWebExtension\", f:parsenoop },\n\t0x0817: { n:\"BrtAbsPath15\", f:parsenoop },\n\t0x0818: { n:\"BrtBeginPivotTableUISettings\", f:parsenoop },\n\t0x0819: { n:\"BrtEndPivotTableUISettings\", f:parsenoop },\n\t0x081B: { n:\"BrtTableSlicerCacheIDs\", f:parsenoop },\n\t0x081C: { n:\"BrtTableSlicerCacheID\", f:parsenoop },\n\t0x081D: { n:\"BrtBeginTableSlicerCache\", f:parsenoop },\n\t0x081E: { n:\"BrtEndTableSlicerCache\", f:parsenoop },\n\t0x081F: { n:\"BrtSxFilter15\", f:parsenoop },\n\t0x0820: { n:\"BrtBeginTimelineCachePivotCacheIDs\", f:parsenoop },\n\t0x0821: { n:\"BrtEndTimelineCachePivotCacheIDs\", f:parsenoop },\n\t0x0822: { n:\"BrtTimelineCachePivotCacheID\", f:parsenoop },\n\t0x0823: { n:\"BrtBeginTimelineCacheIDs\", f:parsenoop },\n\t0x0824: { n:\"BrtEndTimelineCacheIDs\", f:parsenoop },\n\t0x0825: { n:\"BrtBeginTimelineCacheID\", f:parsenoop },\n\t0x0826: { n:\"BrtEndTimelineCacheID\", f:parsenoop },\n\t0x0827: { n:\"BrtBeginTimelinesEx\", f:parsenoop },\n\t0x0828: { n:\"BrtEndTimelinesEx\", f:parsenoop },\n\t0x0829: { n:\"BrtBeginTimelineEx\", f:parsenoop },\n\t0x082A: { n:\"BrtEndTimelineEx\", f:parsenoop },\n\t0x082B: { n:\"BrtWorkBookPr15\", f:parsenoop },\n\t0x082C: { n:\"BrtPCDH15\", f:parsenoop },\n\t0x082D: { n:\"BrtBeginTimelineStyle\", f:parsenoop },\n\t0x082E: { n:\"BrtEndTimelineStyle\", f:parsenoop },\n\t0x082F: { n:\"BrtTimelineStyleElement\", f:parsenoop },\n\t0x0830: { n:\"BrtBeginTimelineStylesheetExt15\", f:parsenoop },\n\t0x0831: { n:\"BrtEndTimelineStylesheetExt15\", f:parsenoop },\n\t0x0832: { n:\"BrtBeginTimelineStyles\", f:parsenoop },\n\t0x0833: { n:\"BrtEndTimelineStyles\", f:parsenoop },\n\t0x0834: { n:\"BrtBeginTimelineStyleElements\", f:parsenoop },\n\t0x0835: { n:\"BrtEndTimelineStyleElements\", f:parsenoop },\n\t0x0836: { n:\"BrtDxf15\", f:parsenoop },\n\t0x0837: { n:\"BrtBeginDxfs15\", f:parsenoop },\n\t0x0838: { n:\"brtEndDxfs15\", f:parsenoop },\n\t0x0839: { n:\"BrtSlicerCacheHideItemsWithNoData\", f:parsenoop },\n\t0x083A: { n:\"BrtBeginItemUniqueNames\", f:parsenoop },\n\t0x083B: { n:\"BrtEndItemUniqueNames\", f:parsenoop },\n\t0x083C: { n:\"BrtItemUniqueName\", f:parsenoop },\n\t0x083D: { n:\"BrtBeginExtConn15\", f:parsenoop },\n\t0x083E: { n:\"BrtEndExtConn15\", f:parsenoop },\n\t0x083F: { n:\"BrtBeginOledbPr15\", f:parsenoop },\n\t0x0840: { n:\"BrtEndOledbPr15\", f:parsenoop },\n\t0x0841: { n:\"BrtBeginDataFeedPr15\", f:parsenoop },\n\t0x0842: { n:\"BrtEndDataFeedPr15\", f:parsenoop },\n\t0x0843: { n:\"BrtTextPr15\", f:parsenoop },\n\t0x0844: { n:\"BrtRangePr15\", f:parsenoop },\n\t0x0845: { n:\"BrtDbCommand15\", f:parsenoop },\n\t0x0846: { n:\"BrtBeginDbTables15\", f:parsenoop },\n\t0x0847: { n:\"BrtEndDbTables15\", f:parsenoop },\n\t0x0848: { n:\"BrtDbTable15\", f:parsenoop },\n\t0x0849: { n:\"BrtBeginDataModel\", f:parsenoop },\n\t0x084A: { n:\"BrtEndDataModel\", f:parsenoop },\n\t0x084B: { n:\"BrtBeginModelTables\", f:parsenoop },\n\t0x084C: { n:\"BrtEndModelTables\", f:parsenoop },\n\t0x084D: { n:\"BrtModelTable\", f:parsenoop },\n\t0x084E: { n:\"BrtBeginModelRelationships\", f:parsenoop },\n\t0x084F: { n:\"BrtEndModelRelationships\", f:parsenoop },\n\t0x0850: { n:\"BrtModelRelationship\", f:parsenoop },\n\t0x0851: { n:\"BrtBeginECTxtWiz15\", f:parsenoop },\n\t0x0852: { n:\"BrtEndECTxtWiz15\", f:parsenoop },\n\t0x0853: { n:\"BrtBeginECTWFldInfoLst15\", f:parsenoop },\n\t0x0854: { n:\"BrtEndECTWFldInfoLst15\", f:parsenoop },\n\t0x0855: { n:\"BrtBeginECTWFldInfo15\", f:parsenoop },\n\t0x0856: { n:\"BrtFieldListActiveItem\", f:parsenoop },\n\t0x0857: { n:\"BrtPivotCacheIdVersion\", f:parsenoop },\n\t0x0858: { n:\"BrtSXDI15\", f:parsenoop },\n\t0xFFFF: { n:\"\", f:parsenoop }\n};\n\nvar evert_RE = evert_key(XLSBRecordEnum, 'n');\n\n/* [MS-XLS] 2.3 Record Enumeration */\nvar XLSRecordEnum = {\n\t0x0003: { n:\"BIFF2NUM\", f:parse_BIFF2NUM },\n\t0x0004: { n:\"BIFF2STR\", f:parse_BIFF2STR },\n\t0x0006: { n:\"Formula\", f:parse_Formula },\n\t0x0009: { n:'BOF', f:parse_BOF },\n\t0x000a: { n:'EOF', f:parse_EOF },\n\t0x000c: { n:\"CalcCount\", f:parse_CalcCount },\n\t0x000d: { n:\"CalcMode\", f:parse_CalcMode },\n\t0x000e: { n:\"CalcPrecision\", f:parse_CalcPrecision },\n\t0x000f: { n:\"CalcRefMode\", f:parse_CalcRefMode },\n\t0x0010: { n:\"CalcDelta\", f:parse_CalcDelta },\n\t0x0011: { n:\"CalcIter\", f:parse_CalcIter },\n\t0x0012: { n:\"Protect\", f:parse_Protect },\n\t0x0013: { n:\"Password\", f:parse_Password },\n\t0x0014: { n:\"Header\", f:parse_Header },\n\t0x0015: { n:\"Footer\", f:parse_Footer },\n\t0x0017: { n:\"ExternSheet\", f:parse_ExternSheet },\n\t0x0018: { n:\"Lbl\", f:parse_Lbl },\n\t0x0019: { n:\"WinProtect\", f:parse_WinProtect },\n\t0x001a: { n:\"VerticalPageBreaks\", f:parse_VerticalPageBreaks },\n\t0x001b: { n:\"HorizontalPageBreaks\", f:parse_HorizontalPageBreaks },\n\t0x001c: { n:\"Note\", f:parse_Note },\n\t0x001d: { n:\"Selection\", f:parse_Selection },\n\t0x0022: { n:\"Date1904\", f:parse_Date1904 },\n\t0x0023: { n:\"ExternName\", f:parse_ExternName },\n\t0x0026: { n:\"LeftMargin\", f:parse_LeftMargin },\n\t0x0027: { n:\"RightMargin\", f:parse_RightMargin },\n\t0x0028: { n:\"TopMargin\", f:parse_TopMargin },\n\t0x0029: { n:\"BottomMargin\", f:parse_BottomMargin },\n\t0x002a: { n:\"PrintRowCol\", f:parse_PrintRowCol },\n\t0x002b: { n:\"PrintGrid\", f:parse_PrintGrid },\n\t0x002f: { n:\"FilePass\", f:parse_FilePass },\n\t0x0031: { n:\"Font\", f:parse_Font },\n\t0x0033: { n:\"PrintSize\", f:parse_PrintSize },\n\t0x003c: { n:\"Continue\", f:parse_Continue },\n\t0x003d: { n:\"Window1\", f:parse_Window1 },\n\t0x0040: { n:\"Backup\", f:parse_Backup },\n\t0x0041: { n:\"Pane\", f:parse_Pane },\n\t0x0042: { n:'CodePage', f:parse_CodePage },\n\t0x004d: { n:\"Pls\", f:parse_Pls },\n\t0x0050: { n:\"DCon\", f:parse_DCon },\n\t0x0051: { n:\"DConRef\", f:parse_DConRef },\n\t0x0052: { n:\"DConName\", f:parse_DConName },\n\t0x0055: { n:\"DefColWidth\", f:parse_DefColWidth },\n\t0x0059: { n:\"XCT\", f:parse_XCT },\n\t0x005a: { n:\"CRN\", f:parse_CRN },\n\t0x005b: { n:\"FileSharing\", f:parse_FileSharing },\n\t0x005c: { n:'WriteAccess', f:parse_WriteAccess },\n\t0x005d: { n:\"Obj\", f:parse_Obj },\n\t0x005e: { n:\"Uncalced\", f:parse_Uncalced },\n\t0x005f: { n:\"CalcSaveRecalc\", f:parse_CalcSaveRecalc },\n\t0x0060: { n:\"Template\", f:parse_Template },\n\t0x0061: { n:\"Intl\", f:parse_Intl },\n\t0x0063: { n:\"ObjProtect\", f:parse_ObjProtect },\n\t0x007d: { n:\"ColInfo\", f:parse_ColInfo },\n\t0x0080: { n:\"Guts\", f:parse_Guts },\n\t0x0081: { n:\"WsBool\", f:parse_WsBool },\n\t0x0082: { n:\"GridSet\", f:parse_GridSet },\n\t0x0083: { n:\"HCenter\", f:parse_HCenter },\n\t0x0084: { n:\"VCenter\", f:parse_VCenter },\n\t0x0085: { n:'BoundSheet8', f:parse_BoundSheet8 },\n\t0x0086: { n:\"WriteProtect\", f:parse_WriteProtect },\n\t0x008c: { n:\"Country\", f:parse_Country },\n\t0x008d: { n:\"HideObj\", f:parse_HideObj },\n\t0x0090: { n:\"Sort\", f:parse_Sort },\n\t0x0092: { n:\"Palette\", f:parse_Palette },\n\t0x0097: { n:\"Sync\", f:parse_Sync },\n\t0x0098: { n:\"LPr\", f:parse_LPr },\n\t0x0099: { n:\"DxGCol\", f:parse_DxGCol },\n\t0x009a: { n:\"FnGroupName\", f:parse_FnGroupName },\n\t0x009b: { n:\"FilterMode\", f:parse_FilterMode },\n\t0x009c: { n:\"BuiltInFnGroupCount\", f:parse_BuiltInFnGroupCount },\n\t0x009d: { n:\"AutoFilterInfo\", f:parse_AutoFilterInfo },\n\t0x009e: { n:\"AutoFilter\", f:parse_AutoFilter },\n\t0x00a0: { n:\"Scl\", f:parse_Scl },\n\t0x00a1: { n:\"Setup\", f:parse_Setup },\n\t0x00ae: { n:\"ScenMan\", f:parse_ScenMan },\n\t0x00af: { n:\"SCENARIO\", f:parse_SCENARIO },\n\t0x00b0: { n:\"SxView\", f:parse_SxView },\n\t0x00b1: { n:\"Sxvd\", f:parse_Sxvd },\n\t0x00b2: { n:\"SXVI\", f:parse_SXVI },\n\t0x00b4: { n:\"SxIvd\", f:parse_SxIvd },\n\t0x00b5: { n:\"SXLI\", f:parse_SXLI },\n\t0x00b6: { n:\"SXPI\", f:parse_SXPI },\n\t0x00b8: { n:\"DocRoute\", f:parse_DocRoute },\n\t0x00b9: { n:\"RecipName\", f:parse_RecipName },\n\t0x00bd: { n:\"MulRk\", f:parse_MulRk },\n\t0x00be: { n:\"MulBlank\", f:parse_MulBlank },\n\t0x00c1: { n:'Mms', f:parse_Mms },\n\t0x00c5: { n:\"SXDI\", f:parse_SXDI },\n\t0x00c6: { n:\"SXDB\", f:parse_SXDB },\n\t0x00c7: { n:\"SXFDB\", f:parse_SXFDB },\n\t0x00c8: { n:\"SXDBB\", f:parse_SXDBB },\n\t0x00c9: { n:\"SXNum\", f:parse_SXNum },\n\t0x00ca: { n:\"SxBool\", f:parse_SxBool },\n\t0x00cb: { n:\"SxErr\", f:parse_SxErr },\n\t0x00cc: { n:\"SXInt\", f:parse_SXInt },\n\t0x00cd: { n:\"SXString\", f:parse_SXString },\n\t0x00ce: { n:\"SXDtr\", f:parse_SXDtr },\n\t0x00cf: { n:\"SxNil\", f:parse_SxNil },\n\t0x00d0: { n:\"SXTbl\", f:parse_SXTbl },\n\t0x00d1: { n:\"SXTBRGIITM\", f:parse_SXTBRGIITM },\n\t0x00d2: { n:\"SxTbpg\", f:parse_SxTbpg },\n\t0x00d3: { n:\"ObProj\", f:parse_ObProj },\n\t0x00d5: { n:\"SXStreamID\", f:parse_SXStreamID },\n\t0x00d7: { n:\"DBCell\", f:parse_DBCell },\n\t0x00d8: { n:\"SXRng\", f:parse_SXRng },\n\t0x00d9: { n:\"SxIsxoper\", f:parse_SxIsxoper },\n\t0x00da: { n:\"BookBool\", f:parse_BookBool },\n\t0x00dc: { n:\"DbOrParamQry\", f:parse_DbOrParamQry },\n\t0x00dd: { n:\"ScenarioProtect\", f:parse_ScenarioProtect },\n\t0x00de: { n:\"OleObjectSize\", f:parse_OleObjectSize },\n\t0x00e0: { n:\"XF\", f:parse_XF },\n\t0x00e1: { n:'InterfaceHdr', f:parse_InterfaceHdr },\n\t0x00e2: { n:'InterfaceEnd', f:parse_InterfaceEnd },\n\t0x00e3: { n:\"SXVS\", f:parse_SXVS },\n\t0x00e5: { n:\"MergeCells\", f:parse_MergeCells },\n\t0x00e9: { n:\"BkHim\", f:parse_BkHim },\n\t0x00eb: { n:\"MsoDrawingGroup\", f:parse_MsoDrawingGroup },\n\t0x00ec: { n:\"MsoDrawing\", f:parse_MsoDrawing },\n\t0x00ed: { n:\"MsoDrawingSelection\", f:parse_MsoDrawingSelection },\n\t0x00ef: { n:\"PhoneticInfo\", f:parse_PhoneticInfo },\n\t0x00f0: { n:\"SxRule\", f:parse_SxRule },\n\t0x00f1: { n:\"SXEx\", f:parse_SXEx },\n\t0x00f2: { n:\"SxFilt\", f:parse_SxFilt },\n\t0x00f4: { n:\"SxDXF\", f:parse_SxDXF },\n\t0x00f5: { n:\"SxItm\", f:parse_SxItm },\n\t0x00f6: { n:\"SxName\", f:parse_SxName },\n\t0x00f7: { n:\"SxSelect\", f:parse_SxSelect },\n\t0x00f8: { n:\"SXPair\", f:parse_SXPair },\n\t0x00f9: { n:\"SxFmla\", f:parse_SxFmla },\n\t0x00fb: { n:\"SxFormat\", f:parse_SxFormat },\n\t0x00fc: { n:\"SST\", f:parse_SST },\n\t0x00fd: { n:\"LabelSst\", f:parse_LabelSst },\n\t0x00ff: { n:\"ExtSST\", f:parse_ExtSST },\n\t0x0100: { n:\"SXVDEx\", f:parse_SXVDEx },\n\t0x0103: { n:\"SXFormula\", f:parse_SXFormula },\n\t0x0122: { n:\"SXDBEx\", f:parse_SXDBEx },\n\t0x0137: { n:\"RRDInsDel\", f:parse_RRDInsDel },\n\t0x0138: { n:\"RRDHead\", f:parse_RRDHead },\n\t0x013b: { n:\"RRDChgCell\", f:parse_RRDChgCell },\n\t0x013d: { n:\"RRTabId\", f:parse_RRTabId },\n\t0x013e: { n:\"RRDRenSheet\", f:parse_RRDRenSheet },\n\t0x013f: { n:\"RRSort\", f:parse_RRSort },\n\t0x0140: { n:\"RRDMove\", f:parse_RRDMove },\n\t0x014a: { n:\"RRFormat\", f:parse_RRFormat },\n\t0x014b: { n:\"RRAutoFmt\", f:parse_RRAutoFmt },\n\t0x014d: { n:\"RRInsertSh\", f:parse_RRInsertSh },\n\t0x014e: { n:\"RRDMoveBegin\", f:parse_RRDMoveBegin },\n\t0x014f: { n:\"RRDMoveEnd\", f:parse_RRDMoveEnd },\n\t0x0150: { n:\"RRDInsDelBegin\", f:parse_RRDInsDelBegin },\n\t0x0151: { n:\"RRDInsDelEnd\", f:parse_RRDInsDelEnd },\n\t0x0152: { n:\"RRDConflict\", f:parse_RRDConflict },\n\t0x0153: { n:\"RRDDefName\", f:parse_RRDDefName },\n\t0x0154: { n:\"RRDRstEtxp\", f:parse_RRDRstEtxp },\n\t0x015f: { n:\"LRng\", f:parse_LRng },\n\t0x0160: { n:\"UsesELFs\", f:parse_UsesELFs },\n\t0x0161: { n:\"DSF\", f:parse_DSF },\n\t0x0191: { n:\"CUsr\", f:parse_CUsr },\n\t0x0192: { n:\"CbUsr\", f:parse_CbUsr },\n\t0x0193: { n:\"UsrInfo\", f:parse_UsrInfo },\n\t0x0194: { n:\"UsrExcl\", f:parse_UsrExcl },\n\t0x0195: { n:\"FileLock\", f:parse_FileLock },\n\t0x0196: { n:\"RRDInfo\", f:parse_RRDInfo },\n\t0x0197: { n:\"BCUsrs\", f:parse_BCUsrs },\n\t0x0198: { n:\"UsrChk\", f:parse_UsrChk },\n\t0x01a9: { n:\"UserBView\", f:parse_UserBView },\n\t0x01aa: { n:\"UserSViewBegin\", f:parse_UserSViewBegin },\n\t0x01ab: { n:\"UserSViewEnd\", f:parse_UserSViewEnd },\n\t0x01ac: { n:\"RRDUserView\", f:parse_RRDUserView },\n\t0x01ad: { n:\"Qsi\", f:parse_Qsi },\n\t0x01ae: { n:\"SupBook\", f:parse_SupBook },\n\t0x01af: { n:\"Prot4Rev\", f:parse_Prot4Rev },\n\t0x01b0: { n:\"CondFmt\", f:parse_CondFmt },\n\t0x01b1: { n:\"CF\", f:parse_CF },\n\t0x01b2: { n:\"DVal\", f:parse_DVal },\n\t0x01b5: { n:\"DConBin\", f:parse_DConBin },\n\t0x01b6: { n:\"TxO\", f:parse_TxO },\n\t0x01b7: { n:\"RefreshAll\", f:parse_RefreshAll },\n\t0x01b8: { n:\"HLink\", f:parse_HLink },\n\t0x01b9: { n:\"Lel\", f:parse_Lel },\n\t0x01ba: { n:\"CodeName\", f:parse_XLSCodeName },\n\t0x01bb: { n:\"SXFDBType\", f:parse_SXFDBType },\n\t0x01bc: { n:\"Prot4RevPass\", f:parse_Prot4RevPass },\n\t0x01bd: { n:\"ObNoMacros\", f:parse_ObNoMacros },\n\t0x01be: { n:\"Dv\", f:parse_Dv },\n\t0x01c0: { n:\"Excel9File\", f:parse_Excel9File },\n\t0x01c1: { n:\"RecalcId\", f:parse_RecalcId, r:2},\n\t0x01c2: { n:\"EntExU2\", f:parse_EntExU2 },\n\t0x0200: { n:\"Dimensions\", f:parse_Dimensions },\n\t0x0201: { n:\"Blank\", f:parse_Blank },\n\t0x0203: { n:\"Number\", f:parse_Number },\n\t0x0204: { n:\"Label\", f:parse_Label },\n\t0x0205: { n:\"BoolErr\", f:parse_BoolErr },\n\t0x0207: { n:\"String\", f:parse_String },\n\t0x0208: { n:'Row', f:parse_Row },\n\t0x020b: { n:\"Index\", f:parse_Index },\n\t0x0221: { n:\"Array\", f:parse_Array },\n\t0x0225: { n:\"DefaultRowHeight\", f:parse_DefaultRowHeight },\n\t0x0236: { n:\"Table\", f:parse_Table },\n\t0x023e: { n:\"Window2\", f:parse_Window2 },\n\t0x027e: { n:\"RK\", f:parse_RK },\n\t0x0293: { n:\"Style\", f:parse_Style },\n\t0x0418: { n:\"BigName\", f:parse_BigName },\n\t0x041e: { n:\"Format\", f:parse_Format },\n\t0x043c: { n:\"ContinueBigName\", f:parse_ContinueBigName },\n\t0x04bc: { n:\"ShrFmla\", f:parse_ShrFmla },\n\t0x0800: { n:\"HLinkTooltip\", f:parse_HLinkTooltip },\n\t0x0801: { n:\"WebPub\", f:parse_WebPub },\n\t0x0802: { n:\"QsiSXTag\", f:parse_QsiSXTag },\n\t0x0803: { n:\"DBQueryExt\", f:parse_DBQueryExt },\n\t0x0804: { n:\"ExtString\", f:parse_ExtString },\n\t0x0805: { n:\"TxtQry\", f:parse_TxtQry },\n\t0x0806: { n:\"Qsir\", f:parse_Qsir },\n\t0x0807: { n:\"Qsif\", f:parse_Qsif },\n\t0x0808: { n:\"RRDTQSIF\", f:parse_RRDTQSIF },\n\t0x0809: { n:'BOF', f:parse_BOF },\n\t0x080a: { n:\"OleDbConn\", f:parse_OleDbConn },\n\t0x080b: { n:\"WOpt\", f:parse_WOpt },\n\t0x080c: { n:\"SXViewEx\", f:parse_SXViewEx },\n\t0x080d: { n:\"SXTH\", f:parse_SXTH },\n\t0x080e: { n:\"SXPIEx\", f:parse_SXPIEx },\n\t0x080f: { n:\"SXVDTEx\", f:parse_SXVDTEx },\n\t0x0810: { n:\"SXViewEx9\", f:parse_SXViewEx9 },\n\t0x0812: { n:\"ContinueFrt\", f:parse_ContinueFrt },\n\t0x0813: { n:\"RealTimeData\", f:parse_RealTimeData },\n\t0x0850: { n:\"ChartFrtInfo\", f:parse_ChartFrtInfo },\n\t0x0851: { n:\"FrtWrapper\", f:parse_FrtWrapper },\n\t0x0852: { n:\"StartBlock\", f:parse_StartBlock },\n\t0x0853: { n:\"EndBlock\", f:parse_EndBlock },\n\t0x0854: { n:\"StartObject\", f:parse_StartObject },\n\t0x0855: { n:\"EndObject\", f:parse_EndObject },\n\t0x0856: { n:\"CatLab\", f:parse_CatLab },\n\t0x0857: { n:\"YMult\", f:parse_YMult },\n\t0x0858: { n:\"SXViewLink\", f:parse_SXViewLink },\n\t0x0859: { n:\"PivotChartBits\", f:parse_PivotChartBits },\n\t0x085a: { n:\"FrtFontList\", f:parse_FrtFontList },\n\t0x0862: { n:\"SheetExt\", f:parse_SheetExt },\n\t0x0863: { n:\"BookExt\", f:parse_BookExt, r:12},\n\t0x0864: { n:\"SXAddl\", f:parse_SXAddl },\n\t0x0865: { n:\"CrErr\", f:parse_CrErr },\n\t0x0866: { n:\"HFPicture\", f:parse_HFPicture },\n\t0x0867: { n:'FeatHdr', f:parse_FeatHdr },\n\t0x0868: { n:\"Feat\", f:parse_Feat },\n\t0x086a: { n:\"DataLabExt\", f:parse_DataLabExt },\n\t0x086b: { n:\"DataLabExtContents\", f:parse_DataLabExtContents },\n\t0x086c: { n:\"CellWatch\", f:parse_CellWatch },\n\t0x0871: { n:\"FeatHdr11\", f:parse_FeatHdr11 },\n\t0x0872: { n:\"Feature11\", f:parse_Feature11 },\n\t0x0874: { n:\"DropDownObjIds\", f:parse_DropDownObjIds },\n\t0x0875: { n:\"ContinueFrt11\", f:parse_ContinueFrt11 },\n\t0x0876: { n:\"DConn\", f:parse_DConn },\n\t0x0877: { n:\"List12\", f:parse_List12 },\n\t0x0878: { n:\"Feature12\", f:parse_Feature12 },\n\t0x0879: { n:\"CondFmt12\", f:parse_CondFmt12 },\n\t0x087a: { n:\"CF12\", f:parse_CF12 },\n\t0x087b: { n:\"CFEx\", f:parse_CFEx },\n\t0x087c: { n:\"XFCRC\", f:parse_XFCRC, r:12 },\n\t0x087d: { n:\"XFExt\", f:parse_XFExt, r:12 },\n\t0x087e: { n:\"AutoFilter12\", f:parse_AutoFilter12 },\n\t0x087f: { n:\"ContinueFrt12\", f:parse_ContinueFrt12 },\n\t0x0884: { n:\"MDTInfo\", f:parse_MDTInfo },\n\t0x0885: { n:\"MDXStr\", f:parse_MDXStr },\n\t0x0886: { n:\"MDXTuple\", f:parse_MDXTuple },\n\t0x0887: { n:\"MDXSet\", f:parse_MDXSet },\n\t0x0888: { n:\"MDXProp\", f:parse_MDXProp },\n\t0x0889: { n:\"MDXKPI\", f:parse_MDXKPI },\n\t0x088a: { n:\"MDB\", f:parse_MDB },\n\t0x088b: { n:\"PLV\", f:parse_PLV },\n\t0x088c: { n:\"Compat12\", f:parse_Compat12, r:12 },\n\t0x088d: { n:\"DXF\", f:parse_DXF },\n\t0x088e: { n:\"TableStyles\", f:parse_TableStyles, r:12 },\n\t0x088f: { n:\"TableStyle\", f:parse_TableStyle },\n\t0x0890: { n:\"TableStyleElement\", f:parse_TableStyleElement },\n\t0x0892: { n:\"StyleExt\", f:parse_StyleExt },\n\t0x0893: { n:\"NamePublish\", f:parse_NamePublish },\n\t0x0894: { n:\"NameCmt\", f:parse_NameCmt },\n\t0x0895: { n:\"SortData\", f:parse_SortData },\n\t0x0896: { n:\"Theme\", f:parse_Theme, r:12 },\n\t0x0897: { n:\"GUIDTypeLib\", f:parse_GUIDTypeLib },\n\t0x0898: { n:\"FnGrp12\", f:parse_FnGrp12 },\n\t0x0899: { n:\"NameFnGrp12\", f:parse_NameFnGrp12 },\n\t0x089a: { n:\"MTRSettings\", f:parse_MTRSettings, r:12 },\n\t0x089b: { n:\"CompressPictures\", f:parse_CompressPictures },\n\t0x089c: { n:\"HeaderFooter\", f:parse_HeaderFooter },\n\t0x089d: { n:\"CrtLayout12\", f:parse_CrtLayout12 },\n\t0x089e: { n:\"CrtMlFrt\", f:parse_CrtMlFrt },\n\t0x089f: { n:\"CrtMlFrtContinue\", f:parse_CrtMlFrtContinue },\n\t0x08a3: { n:\"ForceFullCalculation\", f:parse_ForceFullCalculation },\n\t0x08a4: { n:\"ShapePropsStream\", f:parse_ShapePropsStream },\n\t0x08a5: { n:\"TextPropsStream\", f:parse_TextPropsStream },\n\t0x08a6: { n:\"RichTextStream\", f:parse_RichTextStream },\n\t0x08a7: { n:\"CrtLayout12A\", f:parse_CrtLayout12A },\n\t0x1001: { n:\"Units\", f:parse_Units },\n\t0x1002: { n:\"Chart\", f:parse_Chart },\n\t0x1003: { n:\"Series\", f:parse_Series },\n\t0x1006: { n:\"DataFormat\", f:parse_DataFormat },\n\t0x1007: { n:\"LineFormat\", f:parse_LineFormat },\n\t0x1009: { n:\"MarkerFormat\", f:parse_MarkerFormat },\n\t0x100a: { n:\"AreaFormat\", f:parse_AreaFormat },\n\t0x100b: { n:\"PieFormat\", f:parse_PieFormat },\n\t0x100c: { n:\"AttachedLabel\", f:parse_AttachedLabel },\n\t0x100d: { n:\"SeriesText\", f:parse_SeriesText },\n\t0x1014: { n:\"ChartFormat\", f:parse_ChartFormat },\n\t0x1015: { n:\"Legend\", f:parse_Legend },\n\t0x1016: { n:\"SeriesList\", f:parse_SeriesList },\n\t0x1017: { n:\"Bar\", f:parse_Bar },\n\t0x1018: { n:\"Line\", f:parse_Line },\n\t0x1019: { n:\"Pie\", f:parse_Pie },\n\t0x101a: { n:\"Area\", f:parse_Area },\n\t0x101b: { n:\"Scatter\", f:parse_Scatter },\n\t0x101c: { n:\"CrtLine\", f:parse_CrtLine },\n\t0x101d: { n:\"Axis\", f:parse_Axis },\n\t0x101e: { n:\"Tick\", f:parse_Tick },\n\t0x101f: { n:\"ValueRange\", f:parse_ValueRange },\n\t0x1020: { n:\"CatSerRange\", f:parse_CatSerRange },\n\t0x1021: { n:\"AxisLine\", f:parse_AxisLine },\n\t0x1022: { n:\"CrtLink\", f:parse_CrtLink },\n\t0x1024: { n:\"DefaultText\", f:parse_DefaultText },\n\t0x1025: { n:\"Text\", f:parse_Text },\n\t0x1026: { n:\"FontX\", f:parse_FontX },\n\t0x1027: { n:\"ObjectLink\", f:parse_ObjectLink },\n\t0x1032: { n:\"Frame\", f:parse_Frame },\n\t0x1033: { n:\"Begin\", f:parse_Begin },\n\t0x1034: { n:\"End\", f:parse_End },\n\t0x1035: { n:\"PlotArea\", f:parse_PlotArea },\n\t0x103a: { n:\"Chart3d\", f:parse_Chart3d },\n\t0x103c: { n:\"PicF\", f:parse_PicF },\n\t0x103d: { n:\"DropBar\", f:parse_DropBar },\n\t0x103e: { n:\"Radar\", f:parse_Radar },\n\t0x103f: { n:\"Surf\", f:parse_Surf },\n\t0x1040: { n:\"RadarArea\", f:parse_RadarArea },\n\t0x1041: { n:\"AxisParent\", f:parse_AxisParent },\n\t0x1043: { n:\"LegendException\", f:parse_LegendException },\n\t0x1044: { n:\"ShtProps\", f:parse_ShtProps },\n\t0x1045: { n:\"SerToCrt\", f:parse_SerToCrt },\n\t0x1046: { n:\"AxesUsed\", f:parse_AxesUsed },\n\t0x1048: { n:\"SBaseRef\", f:parse_SBaseRef },\n\t0x104a: { n:\"SerParent\", f:parse_SerParent },\n\t0x104b: { n:\"SerAuxTrend\", f:parse_SerAuxTrend },\n\t0x104e: { n:\"IFmtRecord\", f:parse_IFmtRecord },\n\t0x104f: { n:\"Pos\", f:parse_Pos },\n\t0x1050: { n:\"AlRuns\", f:parse_AlRuns },\n\t0x1051: { n:\"BRAI\", f:parse_BRAI },\n\t0x105b: { n:\"SerAuxErrBar\", f:parse_SerAuxErrBar },\n\t0x105c: { n:\"ClrtClient\", f:parse_ClrtClient },\n\t0x105d: { n:\"SerFmt\", f:parse_SerFmt },\n\t0x105f: { n:\"Chart3DBarShape\", f:parse_Chart3DBarShape },\n\t0x1060: { n:\"Fbi\", f:parse_Fbi },\n\t0x1061: { n:\"BopPop\", f:parse_BopPop },\n\t0x1062: { n:\"AxcExt\", f:parse_AxcExt },\n\t0x1063: { n:\"Dat\", f:parse_Dat },\n\t0x1064: { n:\"PlotGrowth\", f:parse_PlotGrowth },\n\t0x1065: { n:\"SIIndex\", f:parse_SIIndex },\n\t0x1066: { n:\"GelFrame\", f:parse_GelFrame },\n\t0x1067: { n:\"BopPopCustom\", f:parse_BopPopCustom },\n\t0x1068: { n:\"Fbi2\", f:parse_Fbi2 },\n\n\t/* These are specified in an older version of the spec */\n\t0x0016: { n:\"ExternCount\", f:parsenoop },\n\t0x007e: { n:\"RK\", f:parsenoop }, /* Not necessarily same as 0x027e */\n\t0x007f: { n:\"ImData\", f:parsenoop },\n\t0x0087: { n:\"Addin\", f:parsenoop },\n\t0x0088: { n:\"Edg\", f:parsenoop },\n\t0x0089: { n:\"Pub\", f:parsenoop },\n\t0x0091: { n:\"Sub\", f:parsenoop },\n\t0x0094: { n:\"LHRecord\", f:parsenoop },\n\t0x0095: { n:\"LHNGraph\", f:parsenoop },\n\t0x0096: { n:\"Sound\", f:parsenoop },\n\t0x00a9: { n:\"CoordList\", f:parsenoop },\n\t0x00ab: { n:\"GCW\", f:parsenoop },\n\t0x00bc: { n:\"ShrFmla\", f:parsenoop }, /* Not necessarily same as 0x04bc */\n\t0x00c2: { n:\"AddMenu\", f:parsenoop },\n\t0x00c3: { n:\"DelMenu\", f:parsenoop },\n\t0x00d6: { n:\"RString\", f:parsenoop },\n\t0x00df: { n:\"UDDesc\", f:parsenoop },\n\t0x00ea: { n:\"TabIdConf\", f:parsenoop },\n\t0x0162: { n:\"XL5Modify\", f:parsenoop },\n\t0x01a5: { n:\"FileSharing2\", f:parsenoop },\n\t0x0218: { n:\"Name\", f:parsenoop },\n\t0x0223: { n:\"ExternName\", f:parse_ExternName },\n\t0x0231: { n:\"Font\", f:parsenoop },\n\t0x0406: { n:\"Formula\", f:parse_Formula },\n\t0x086d: { n:\"FeatInfo\", f:parsenoop },\n\t0x0873: { n:\"FeatInfo11\", f:parsenoop },\n\t0x0881: { n:\"SXAddl12\", f:parsenoop },\n\t0x08c0: { n:\"AutoWebPub\", f:parsenoop },\n\t0x08c1: { n:\"ListObj\", f:parsenoop },\n\t0x08c2: { n:\"ListField\", f:parsenoop },\n\t0x08c3: { n:\"ListDV\", f:parsenoop },\n\t0x08c4: { n:\"ListCondFmt\", f:parsenoop },\n\t0x08c5: { n:\"ListCF\", f:parsenoop },\n\t0x08c6: { n:\"FMQry\", f:parsenoop },\n\t0x08c7: { n:\"FMSQry\", f:parsenoop },\n\t0x08c8: { n:\"PLV\", f:parsenoop }, /* supposedly PLV for Excel 11 */\n\t0x08c9: { n:\"LnExt\", f:parsenoop },\n\t0x08ca: { n:\"MkrExt\", f:parsenoop },\n\t0x08cb: { n:\"CrtCoopt\", f:parsenoop },\n\n\t0x0000: {}\n};\n\n\n/* Helper function to call out to ODS parser */\nfunction parse_ods(zip, opts) {\n\t//if(typeof module !== \"undefined\" && typeof require !== 'undefined' && typeof ODS === 'undefined') ODS = require('./od' + 's');\n\tif(typeof ODS === 'undefined' || !ODS.parse_ods) throw new Error(\"Unsupported ODS\");\n\treturn ODS.parse_ods(zip, opts);\n}\nfunction fix_opts_func(defaults) {\n\treturn function fix_opts(opts) {\n\t\tfor(var i = 0; i != defaults.length; ++i) {\n\t\t\tvar d = defaults[i];\n\t\t\tif(opts[d[0]] === undefined) opts[d[0]] = d[1];\n\t\t\tif(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);\n\t\t}\n\t};\n}\n\nvar fix_read_opts = fix_opts_func([\n\t['cellNF', false], /* emit cell number format string as .z */\n\t['cellHTML', true], /* emit html string as .h */\n\t['cellFormula', true], /* emit formulae as .f */\n\t['cellStyles', false], /* emits style/theme as .s */\n\t['cellDates', false], /* emit date cells with type `d` */\n\n\t['sheetStubs', false], /* emit empty cells */\n\t['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */\n\n\t['bookDeps', false], /* parse calculation chains */\n\t['bookSheets', false], /* only try to get sheet names (no Sheets) */\n\t['bookProps', false], /* only try to get properties (no Sheets) */\n\t['bookFiles', false], /* include raw file structure (keys, files, cfb) */\n\t['bookVBA', false], /* include vba raw data (vbaraw) */\n\n\t['password',''], /* password */\n\t['WTF', false] /* WTF mode (throws errors) */\n]);\n\n\nvar fix_write_opts = fix_opts_func([\n\t['cellDates', false], /* write date cells with type `d` */\n\n\t['bookSST', false], /* Generate Shared String Table */\n\n\t['bookType', 'xlsx'], /* Type of workbook (xlsx/m/b) */\n\n\t['WTF', false] /* WTF mode (throws errors) */\n]);\nfunction safe_parse_wbrels(wbrels, sheets) {\n\tif(!wbrels) return 0;\n\ttry {\n\t\twbrels = sheets.map(function pwbr(w) { return [w.name, wbrels['!id'][w.id].Target]; });\n\t} catch(e) { return null; }\n\treturn !wbrels || wbrels.length === 0 ? null : wbrels;\n}\n\nfunction safe_parse_ws(zip, path, relsPath, sheet, sheetRels, sheets, opts) {\n\ttry {\n\t\tsheetRels[sheet]=parse_rels(getzipdata(zip, relsPath, true), path);\n\t\tsheets[sheet]=parse_ws(getzipdata(zip, path),path,opts,sheetRels[sheet]);\n\t} catch(e) { if(opts.WTF) throw e; }\n}\n\nvar nodirs = function nodirs(x){return x.substr(-1) != '/';};\nfunction parse_zip(zip, opts) {\n\tmake_ssf(SSF);\n\topts = opts || {};\n\tfix_read_opts(opts);\n\treset_cp();\n\n\t/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */\n\tif(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);\n\n\tvar entries = keys(zip.files).filter(nodirs).sort();\n\tvar dir = parse_ct(getzipdata(zip, '[Content_Types].xml'), opts);\n\tvar xlsb = false;\n\tvar sheets, binname;\n\tif(dir.workbooks.length === 0) {\n\t\tbinname = \"xl/workbook.xml\";\n\t\tif(getzipdata(zip,binname, true)) dir.workbooks.push(binname);\n\t}\n\tif(dir.workbooks.length === 0) {\n\t\tbinname = \"xl/workbook.bin\";\n\t\tif(!getzipfile(zip,binname,true)) throw new Error(\"Could not find workbook\");\n\t\tdir.workbooks.push(binname);\n\t\txlsb = true;\n\t}\n\tif(dir.workbooks[0].substr(-3) == \"bin\") xlsb = true;\n\tif(xlsb) set_cp(1200);\n\n\tif(!opts.bookSheets && !opts.bookProps) {\n\t\tstrs = [];\n\t\tif(dir.sst) strs=parse_sst(getzipdata(zip, dir.sst.replace(/^\\//,'')), dir.sst, opts);\n\n    // parse themes before styles so that we can reliably decode theme/tint into rgb when parsing styles\n    themes = {};\n    if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipdata(zip, dir.themes[0].replace(/^\\//,''), true),dir.themes[0], opts);\n\n    styles = {};\n\t\tif(dir.style) styles = parse_sty(getzipdata(zip, dir.style.replace(/^\\//,'')),dir.style, opts);\n\n\t}\n\n\tvar wb = parse_wb(getzipdata(zip, dir.workbooks[0].replace(/^\\//,'')), dir.workbooks[0], opts);\n\n\tvar props = {}, propdata = \"\";\n\n\tif(dir.coreprops.length !== 0) {\n\t\tpropdata = getzipdata(zip, dir.coreprops[0].replace(/^\\//,''), true);\n\t\tif(propdata) props = parse_core_props(propdata);\n\t\tif(dir.extprops.length !== 0) {\n\t\t\tpropdata = getzipdata(zip, dir.extprops[0].replace(/^\\//,''), true);\n\t\t\tif(propdata) parse_ext_props(propdata, props);\n\t\t}\n\t}\n\n\tvar custprops = {};\n\tif(!opts.bookSheets || opts.bookProps) {\n\t\tif (dir.custprops.length !== 0) {\n\t\t\tpropdata = getzipdata(zip, dir.custprops[0].replace(/^\\//,''), true);\n\t\t\tif(propdata) custprops = parse_cust_props(propdata, opts);\n\t\t}\n\t}\n\n\tvar out = {};\n\tif(opts.bookSheets || opts.bookProps) {\n\t\tif(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;\n\t\telse if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });\n\t\tif(opts.bookProps) { out.Props = props; out.Custprops = custprops; }\n\t\tif(typeof sheets !== 'undefined') out.SheetNames = sheets;\n\t\tif(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;\n\t}\n\tsheets = {};\n\n\tvar deps = {};\n\tif(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, dir.calcchain.replace(/^\\//,'')),dir.calcchain,opts);\n\n\tvar i=0;\n\tvar sheetRels = {};\n\tvar path, relsPath;\n\tif(!props.Worksheets) {\n\t\tvar wbsheets = wb.Sheets;\n\t\tprops.Worksheets = wbsheets.length;\n\t\tprops.SheetNames = [];\n\t\tfor(var j = 0; j != wbsheets.length; ++j) {\n\t\t\tprops.SheetNames[j] = wbsheets[j].name;\n\t\t}\n\t}\n\n\tvar wbext = xlsb ? \"bin\" : \"xml\";\n\tvar wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';\n\tvar wbrels = parse_rels(getzipdata(zip, wbrelsfile, true), wbrelsfile);\n\tif(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);\n\t/* Numbers iOS hack */\n\tvar nmode = (getzipdata(zip,\"xl/worksheets/sheet.xml\",true))?1:0;\n\tfor(i = 0; i != props.Worksheets; ++i) {\n\t\tif(wbrels) path = 'xl/' + (wbrels[i][1]).replace(/[\\/]?xl\\//, \"\");\n\t\telse {\n\t\t\tpath = 'xl/worksheets/sheet'+(i+1-nmode)+\".\" + wbext;\n\t\t\tpath = path.replace(/sheet0\\./,\"sheet.\");\n\t\t}\n\t\trelsPath = path.replace(/^(.*)(\\/)([^\\/]*)$/, \"$1/_rels/$3.rels\");\n\t\tsafe_parse_ws(zip, path, relsPath, props.SheetNames[i], sheetRels, sheets, opts);\n\t}\n\n\tif(dir.comments) parse_comments(zip, dir.comments, sheets, sheetRels, opts);\n\n\tout = {\n\t\tDirectory: dir,\n\t\tWorkbook: wb,\n\t\tProps: props,\n\t\tCustprops: custprops,\n\t\tDeps: deps,\n\t\tSheets: sheets,\n\t\tSheetNames: props.SheetNames,\n\t\tStrings: strs,\n\t\tStyles: styles,\n\t\tThemes: themes,\n\t\tSSF: SSF.get_table()\n\t};\n\tif(opts.bookFiles) {\n\t\tout.keys = entries;\n\t\tout.files = zip.files;\n\t}\n\tif(opts.bookVBA) {\n\t\tif(dir.vba.length > 0) out.vbaraw = getzipdata(zip,dir.vba[0],true);\n\t\telse if(dir.defaults.bin === 'application/vnd.ms-office.vbaProject') out.vbaraw = getzipdata(zip,'xl/vbaProject.bin',true);\n\t}\n\treturn out;\n}\nfunction add_rels(rels, rId, f, type, relobj) {\n\tif(!relobj) relobj = {};\n\tif(!rels['!id']) rels['!id'] = {};\n\trelobj.Id = 'rId' + rId;\n\trelobj.Type = type;\n\trelobj.Target = f;\n\tif(rels['!id'][relobj.Id]) throw new Error(\"Cannot rewrite rId \" + rId);\n\trels['!id'][relobj.Id] = relobj;\n\trels[('/' + relobj.Target).replace(\"//\",\"/\")] = relobj;\n}\n\nfunction write_zip(wb, opts) {\n\tif(wb && !wb.SSF) {\n\t\twb.SSF = SSF.get_table();\n\t}\n\tif(wb && wb.SSF) {\n\t\tmake_ssf(SSF); SSF.load_table(wb.SSF);\n\t\topts.revssf = evert_num(wb.SSF); opts.revssf[wb.SSF[65535]] = 0;\n\t}\n\topts.rels = {}; opts.wbrels = {};\n\topts.Strings = []; opts.Strings.Count = 0; opts.Strings.Unique = 0;\n\tvar wbext = opts.bookType == \"xlsb\" ? \"bin\" : \"xml\";\n\tvar ct = { workbooks: [], sheets: [], calcchains: [], themes: [], styles: [],\n\t\tcoreprops: [], extprops: [], custprops: [], strs:[], comments: [], vba: [],\n\t\tTODO:[], rels:[], xmlns: \"\" };\n\tfix_write_opts(opts = opts || {});\n\tvar zip = new jszip();\n\tvar f = \"\", rId = 0;\n\n\topts.cellXfs = [];\n\tget_cell_style(opts.cellXfs, {}, {revssf:{\"General\":0}});\n\n\tf = \"docProps/core.xml\";\n\tzip.file(f, write_core_props(wb.Props, opts));\n\tct.coreprops.push(f);\n\tadd_rels(opts.rels, 2, f, RELS.CORE_PROPS);\n\n\tf = \"docProps/app.xml\";\n\tif(!wb.Props) wb.Props = {};\n\twb.Props.SheetNames = wb.SheetNames;\n\twb.Props.Worksheets = wb.SheetNames.length;\n\tzip.file(f, write_ext_props(wb.Props, opts));\n\tct.extprops.push(f);\n\tadd_rels(opts.rels, 3, f, RELS.EXT_PROPS);\n\n\tif(wb.Custprops !== wb.Props && keys(wb.Custprops||{}).length > 0) {\n\t\tf = \"docProps/custom.xml\";\n\t\tzip.file(f, write_cust_props(wb.Custprops, opts));\n\t\tct.custprops.push(f);\n\t\tadd_rels(opts.rels, 4, f, RELS.CUST_PROPS);\n\t}\n\n\tf = \"xl/workbook.\" + wbext;\n\tzip.file(f, write_wb(wb, f, opts));\n\tct.workbooks.push(f);\n\tadd_rels(opts.rels, 1, f, RELS.WB);\n\n\tfor(rId=1;rId <= wb.SheetNames.length; ++rId) {\n\t\tf = \"xl/worksheets/sheet\" + rId + \".\" + wbext;\n\t\tzip.file(f, write_ws(rId-1, f, opts, wb));\n\t\tct.sheets.push(f);\n\t\tadd_rels(opts.wbrels, rId, \"worksheets/sheet\" + rId + \".\" + wbext, RELS.WS);\n\t}\n\n\tif(opts.Strings != null && opts.Strings.length > 0) {\n\t\tf = \"xl/sharedStrings.\" + wbext;\n\t\tzip.file(f, write_sst(opts.Strings, f, opts));\n\t\tct.strs.push(f);\n\t\tadd_rels(opts.wbrels, ++rId, \"sharedStrings.\" + wbext, RELS.SST);\n\t}\n\n\t/* TODO: something more intelligent with themes */\n\n\tf = \"xl/theme/theme1.xml\";\n  zip.file(f, write_theme(opts));\n\tct.themes.push(f);\n\tadd_rels(opts.wbrels, ++rId, \"theme/theme1.xml\", RELS.THEME);\n\n\t/* TODO: something more intelligent with styles */\n\n\tf = \"xl/styles.\" + wbext;\n\tzip.file(f, write_sty(wb, f, opts));\n\tct.styles.push(f);\n\tadd_rels(opts.wbrels, ++rId, \"styles.\" + wbext, RELS.STY);\n\n\tzip.file(\"[Content_Types].xml\", write_ct(ct, opts));\n\tzip.file('_rels/.rels', write_rels(opts.rels));\n\tzip.file('xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));\n\treturn zip;\n}\nfunction firstbyte(f,o) {\n\tswitch((o||{}).type || \"base64\") {\n\t\tcase 'buffer': return f[0];\n\t\tcase 'base64': return Base64.decode(f.substr(0,12)).charCodeAt(0);\n\t\tcase 'binary': return f.charCodeAt(0);\n\t\tcase 'array': return f[0];\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n}\n\nfunction read_zip(data, opts) {\n\tvar zip, d = data;\n\tvar o = opts||{};\n\tif(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? \"buffer\" : \"base64\";\n\tswitch(o.type) {\n\t\tcase \"base64\": zip = new jszip(d, { base64:true }); break;\n\t\tcase \"binary\": case \"array\": zip = new jszip(d, { base64:false }); break;\n\t\tcase \"buffer\": zip = new jszip(d); break;\n\t\tcase \"file\": zip=new jszip(d=_fs.readFileSync(data)); break;\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n\treturn parse_zip(zip, o);\n}\n\nfunction readSync(data, opts) {\n\tvar zip, d = data, isfile = false, n;\n\tvar o = opts||{};\n\tif(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? \"buffer\" : \"base64\";\n\tif(o.type == \"file\") { isfile = true; o.type = \"buffer\"; d = _fs.readFileSync(data); }\n\tswitch((n = firstbyte(d, o))) {\n\t\tcase 0xD0:\n\t\t\tif(isfile) o.type = \"file\";\n\t\t\treturn parse_xlscfb(CFB.read(data, o), o);\n\t\tcase 0x09: return parse_xlscfb(s2a(o.type === 'base64' ? Base64.decode(data) : data), o);\n\t\tcase 0x3C: return parse_xlml(d, o);\n\t\tcase 0x50:\n\t\t\tif(isfile) o.type = \"file\";\n\t\t\treturn read_zip(data, opts);\n\t\tdefault: throw new Error(\"Unsupported file \" + n);\n\t}\n}\n\nfunction readFileSync(data, opts) {\n\tvar o = opts||{}; o.type = 'file'\n  var wb = readSync(data, o);\n  wb.FILENAME = data;\n\treturn wb;\n}\nfunction write_zip_type(wb, opts) {\n\tvar o = opts||{};\n  style_builder  = new StyleBuilder(opts);\n\n  var z = write_zip(wb, o);\n\tswitch(o.type) {\n\t\tcase \"base64\": return z.generate({type:\"base64\"});\n\t\tcase \"binary\": return z.generate({type:\"string\"});\n\t\tcase \"buffer\": return z.generate({type:\"nodebuffer\"});\n\t\tcase \"file\": return _fs.writeFileSync(o.file, z.generate({type:\"nodebuffer\"}));\n\t\tdefault: throw new Error(\"Unrecognized type \" + o.type);\n\t}\n}\n\nfunction writeSync(wb, opts) {\n\tvar o = opts||{};\n\tswitch(o.bookType) {\n\t\tcase 'xml': return write_xlml(wb, o);\n\t\tdefault: return write_zip_type(wb, o);\n\t}\n}\n\nfunction writeFileSync(wb, filename, opts) {\n\tvar o = opts||{}; o.type = 'file';\n\n\to.file = filename;\n\tswitch(o.file.substr(-5).toLowerCase()) {\n\t\tcase '.xlsx': o.bookType = 'xlsx'; break;\n\t\tcase '.xlsm': o.bookType = 'xlsm'; break;\n\t\tcase '.xlsb': o.bookType = 'xlsb'; break;\n\tdefault: switch(o.file.substr(-4).toLowerCase()) {\n\t\tcase '.xls': o.bookType = 'xls'; break;\n\t\tcase '.xml': o.bookType = 'xml'; break;\n\t}}\n\treturn writeSync(wb, o);\n}\n\nfunction decode_row(rowstr) { return parseInt(unfix_row(rowstr),10) - 1; }\nfunction encode_row(row) { return \"\" + (row + 1); }\nfunction fix_row(cstr) { return cstr.replace(/([A-Z]|^)(\\d+)$/,\"$1$$$2\"); }\nfunction unfix_row(cstr) { return cstr.replace(/\\$(\\d+)$/,\"$1\"); }\n\nfunction decode_col(colstr) { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }\nfunction encode_col(col) { var s=\"\"; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }\nfunction fix_col(cstr) { return cstr.replace(/^([A-Z])/,\"$$$1\"); }\nfunction unfix_col(cstr) { return cstr.replace(/^\\$([A-Z])/,\"$1\"); }\n\nfunction split_cell(cstr) { return cstr.replace(/(\\$?[A-Z]*)(\\$?\\d*)/,\"$1,$2\").split(\",\"); }\nfunction decode_cell(cstr) { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }\nfunction encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }\nfunction fix_cell(cstr) { return fix_col(fix_row(cstr)); }\nfunction unfix_cell(cstr) { return unfix_col(unfix_row(cstr)); }\nfunction decode_range(range) { var x =range.split(\":\").map(decode_cell); return {s:x[0],e:x[x.length-1]}; }\nfunction encode_range(cs,ce) {\n\tif(ce === undefined || typeof ce === 'number') return encode_range(cs.s, cs.e);\n\tif(typeof cs !== 'string') cs = encode_cell(cs); if(typeof ce !== 'string') ce = encode_cell(ce);\n\treturn cs == ce ? cs : cs + \":\" + ce;\n}\n\nfunction safe_decode_range(range) {\n\tvar o = {s:{c:0,r:0},e:{c:0,r:0}};\n\tvar idx = 0, i = 0, cc = 0;\n\tvar len = range.length;\n\tfor(idx = 0; i < len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\tidx = 26*idx + cc;\n\t}\n\to.s.c = --idx;\n\n\tfor(idx = 0; i < len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;\n\t\tidx = 10*idx + cc;\n\t}\n\to.s.r = --idx;\n\n\tif(i === len || range.charCodeAt(++i) === 58) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }\n\n\tfor(idx = 0; i != len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;\n\t\tidx = 26*idx + cc;\n\t}\n\to.e.c = --idx;\n\n\tfor(idx = 0; i != len; ++i) {\n\t\tif((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;\n\t\tidx = 10*idx + cc;\n\t}\n\to.e.r = --idx;\n\treturn o;\n}\n\nfunction safe_format_cell(cell, v) {\n\tif(cell.z !== undefined) try { return (cell.w = SSF.format(cell.z, v)); } catch(e) { }\n\tif(!cell.XF) return v;\n\ttry { return (cell.w = SSF.format(cell.XF.ifmt||0, v)); } catch(e) { return ''+v; }\n}\n\nfunction format_cell(cell, v) {\n\tif(cell == null || cell.t == null) return \"\";\n\tif(cell.w !== undefined) return cell.w;\n\tif(v === undefined) return safe_format_cell(cell, cell.v);\n\treturn safe_format_cell(cell, v);\n}\n\nfunction sheet_to_json(sheet, opts){\n\tvar val, row, range, header = 0, offset = 1, r, hdr = [], isempty, R, C, v;\n\tvar o = opts != null ? opts : {};\n\tvar raw = o.raw;\n\tif(sheet == null || sheet[\"!ref\"] == null) return [];\n\trange = o.range !== undefined ? o.range : sheet[\"!ref\"];\n\tif(o.header === 1) header = 1;\n\telse if(o.header === \"A\") header = 2;\n\telse if(Array.isArray(o.header)) header = 3;\n\tswitch(typeof range) {\n\t\tcase 'string': r = safe_decode_range(range); break;\n\t\tcase 'number': r = safe_decode_range(sheet[\"!ref\"]); r.s.r = range; break;\n\t\tdefault: r = range;\n\t}\n\tif(header > 0) offset = 0;\n\tvar rr = encode_row(r.s.r);\n\tvar cols = new Array(r.e.c-r.s.c+1);\n\tvar out = new Array(r.e.r-r.s.r-offset+1);\n\tvar outi = 0;\n\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\tcols[C] = encode_col(C);\n\t\tval = sheet[cols[C] + rr];\n\t\tswitch(header) {\n\t\t\tcase 1: hdr[C] = C; break;\n\t\t\tcase 2: hdr[C] = cols[C]; break;\n\t\t\tcase 3: hdr[C] = o.header[C - r.s.c]; break;\n\t\t\tdefault:\n\t\t\t\tif(val === undefined) continue;\n\t\t\t\thdr[C] = format_cell(val);\n\t\t}\n\t}\n\n\tfor (R = r.s.r + offset; R <= r.e.r; ++R) {\n\t\trr = encode_row(R);\n\t\tisempty = true;\n\t\tif(header === 1) row = [];\n\t\telse {\n\t\t\trow = {};\n\t\t\tif(Object.defineProperty) Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false});\n\t\t\telse row.__rowNum__ = R;\n\t\t}\n\t\tfor (C = r.s.c; C <= r.e.c; ++C) {\n\t\t\tval = sheet[cols[C] + rr];\n\t\t\tif(val === undefined || val.t === undefined) continue;\n\t\t\tv = val.v;\n\t\t\tswitch(val.t){\n\t\t\t\tcase 'e': continue;\n\t\t\t\tcase 's': break;\n\t\t\t\tcase 'b': case 'n': break;\n\t\t\t\tdefault: throw 'unrecognized type ' + val.t;\n\t\t\t}\n\t\t\tif(v !== undefined) {\n\t\t\t\trow[hdr[C]] = raw ? v : format_cell(val,v);\n\t\t\t\tisempty = false;\n\t\t\t}\n\t\t}\n\t\tif(isempty === false || header === 1) out[outi++] = row;\n\t}\n\tout.length = outi;\n\treturn out;\n}\n\nfunction sheet_to_row_object_array(sheet, opts) { return sheet_to_json(sheet, opts != null ? opts : {}); }\n\nfunction sheet_to_csv(sheet, opts) {\n\tvar out = \"\", txt = \"\", qreg = /\"/g;\n\tvar o = opts == null ? {} : opts;\n\tif(sheet == null || sheet[\"!ref\"] == null) return \"\";\n\tvar r = safe_decode_range(sheet[\"!ref\"]);\n\tvar FS = o.FS !== undefined ? o.FS : \",\", fs = FS.charCodeAt(0);\n\tvar RS = o.RS !== undefined ? o.RS : \"\\n\", rs = RS.charCodeAt(0);\n\tvar row = \"\", rr = \"\", cols = [];\n\tvar i = 0, cc = 0, val;\n\tvar R = 0, C = 0;\n\tfor(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);\n\tfor(R = r.s.r; R <= r.e.r; ++R) {\n\t\trow = \"\";\n\t\trr = encode_row(R);\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\tval = sheet[cols[C] + rr];\n\t\t\ttxt = val !== undefined ? ''+format_cell(val) : \"\";\n\t\t\tfor(i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34) {\n\t\t\t\ttxt = \"\\\"\" + txt.replace(qreg, '\"\"') + \"\\\"\"; break; }\n\t\t\trow += (C === r.s.c ? \"\" : FS) + txt;\n\t\t}\n\t\tout += row + RS;\n\t}\n\treturn out;\n}\nvar make_csv = sheet_to_csv;\n\nfunction sheet_to_formulae(sheet) {\n\tvar cmds, y = \"\", x, val=\"\";\n\tif(sheet == null || sheet[\"!ref\"] == null) return \"\";\n\tvar r = safe_decode_range(sheet['!ref']), rr = \"\", cols = [], C;\n\tcmds = new Array((r.e.r-r.s.r+1)*(r.e.c-r.s.c+1));\n\tvar i = 0;\n\tfor(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);\n\tfor(var R = r.s.r; R <= r.e.r; ++R) {\n\t\trr = encode_row(R);\n\t\tfor(C = r.s.c; C <= r.e.c; ++C) {\n\t\t\ty = cols[C] + rr;\n\t\t\tx = sheet[y];\n\t\t\tval = \"\";\n\t\t\tif(x === undefined) continue;\n\t\t\tif(x.f != null) val = x.f;\n\t\t\telse if(x.w !== undefined) val = \"'\" + x.w;\n\t\t\telse if(x.v === undefined) continue;\n\t\t\telse val = \"\"+x.v;\n\t\t\tcmds[i++] = y + \"=\" + val;\n\t\t}\n\t}\n\tcmds.length = i;\n\treturn cmds;\n}\n\nvar utils = {\n\tencode_col: encode_col,\n\tencode_row: encode_row,\n\tencode_cell: encode_cell,\n\tencode_range: encode_range,\n\tdecode_col: decode_col,\n\tdecode_row: decode_row,\n\tsplit_cell: split_cell,\n\tdecode_cell: decode_cell,\n\tdecode_range: decode_range,\n\tformat_cell: format_cell,\n\tget_formulae: sheet_to_formulae,\n\tmake_csv: sheet_to_csv,\n\tmake_json: sheet_to_json,\n\tmake_formulae: sheet_to_formulae,\n\tsheet_to_csv: sheet_to_csv,\n\tsheet_to_json: sheet_to_json,\n\tsheet_to_formulae: sheet_to_formulae,\n\tsheet_to_row_object_array: sheet_to_row_object_array\n};\n\n\n\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////\nvar XmlNode = (function () {\n  function XmlNode(tagName, attributes, children) {\n\n    if (!(this instanceof XmlNode)) {\n      return new XmlNode(tagName, attributes, children);\n    }\n    this.tagName = tagName;\n    this._attributes = attributes || {};\n    this._children = children || [];\n    this._prefix = '';\n    return this;\n  }\n\n  XmlNode.prototype.createElement = function () {\n    return new XmlNode(arguments)\n  }\n\n  XmlNode.prototype.children = function() {\n    return this._children;\n  }\n\n  XmlNode.prototype.append = function (node) {\n    this._children.push(node);\n    return this;\n  }\n\n  XmlNode.prototype.prefix = function (prefix) {\n    if (arguments.length==0) { return this._prefix;}\n    this._prefix = prefix;\n    return this;\n  }\n\n  XmlNode.prototype.attr = function (attr, value) {\n    if (value == undefined) {\n      delete this._attributes[attr];\n      return this;\n    }\n    if (arguments.length == 0) {\n      return this._attributes;\n    }\n    else if (typeof attr == 'string' && arguments.length == 1) {\n      return this._attributes.attr[attr];\n    }\n    if (typeof attr == 'object' && arguments.length == 1) {\n      for (var key in attr) {\n        this._attributes[key] = attr[key];\n      }\n    }\n    else if (arguments.length == 2 && typeof attr == 'string') {\n      this._attributes[attr] = value;\n    }\n    return this;\n  }\n\n  var APOS = \"'\"; QUOTE = '\"'\n  var ESCAPED_QUOTE = {  }\n  ESCAPED_QUOTE[QUOTE] = '&quot;'\n  ESCAPED_QUOTE[APOS] = '&apos;'\n\n  XmlNode.prototype.escapeAttributeValue = function(att_value) {\n    return '\"' + att_value.replace(/\\\"/g,'&quot;') + '\"';// TODO Extend with four other codes\n\n  }\n\n  XmlNode.prototype.toXml = function (node) {\n    if (!node) node = this;\n    var xml = node._prefix;\n    xml += '<' + node.tagName;\n    if (node._attributes) {\n      for (var key in node._attributes) {\n        xml += ' ' + key + '=' + this.escapeAttributeValue(''+node._attributes[key]) + ''\n      }\n    }\n    if (node._children && node._children.length > 0) {\n      xml += \">\";\n      for (var i = 0; i < node._children.length; i++) {\n        xml += this.toXml(node._children[i]);\n      }\n      xml += '</' + node.tagName + '>';\n    }\n    else {\n      xml += '/>';\n    }\n    return xml;\n  }\n  return XmlNode;\n})();\n/////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  var StyleBuilder = function (options) {\n\n    var customNumFmtId = 164;\n\n\n\n    var table_fmt = {\n      0:  'General',\n      1:  '0',\n      2:  '0.00',\n      3:  '#,##0',\n      4:  '#,##0.00',\n      9:  '0%',\n      10: '0.00%',\n      11: '0.00E+00',\n      12: '# ?/?',\n      13: '# ??/??',\n      14: 'm/d/yy',\n      15: 'd-mmm-yy',\n      16: 'd-mmm',\n      17: 'mmm-yy',\n      18: 'h:mm AM/PM',\n      19: 'h:mm:ss AM/PM',\n      20: 'h:mm',\n      21: 'h:mm:ss',\n      22: 'm/d/yy h:mm',\n      37: '#,##0 ;(#,##0)',\n      38: '#,##0 ;[Red](#,##0)',\n      39: '#,##0.00;(#,##0.00)',\n      40: '#,##0.00;[Red](#,##0.00)',\n      45: 'mm:ss',\n      46: '[h]:mm:ss',\n      47: 'mmss.0',\n      48: '##0.0E+0',\n      49: '@',\n      56: '\"上午/下午 \"hh\"時\"mm\"分\"ss\"秒 \"'    };\n    var fmt_table = {};\n\n    for (var idx in table_fmt) {\n      fmt_table[table_fmt[idx]] = idx;\n    }\n\n\n    // cache style specs to avoid excessive duplication\n    _hashIndex = {};\n    _listIndex = [];\n\n    return {\n\n      initialize: function (options) {\n\n        this.$fonts = XmlNode('fonts').attr('count',0).attr(\"x14ac:knownFonts\",\"1\");\n        this.$fills = XmlNode('fills').attr('count',0);\n        this.$borders = XmlNode('borders').attr('count',0);\n        this.$numFmts = XmlNode('numFmts').attr('count',0);\n        this.$cellStyleXfs = XmlNode('cellStyleXfs');\n        this.$xf = XmlNode('xf')\n            .attr('numFmtId', 0)\n            .attr('fontId', 0)\n            .attr('fillId', 0)\n            .attr('borderId', 0);\n\n        this.$cellXfs = XmlNode('cellXfs').attr('count',0);\n        this.$cellStyles = XmlNode('cellStyles')\n            .append(XmlNode('cellStyle')\n                .attr('name', 'Normal')\n                .attr('xfId',0)\n                .attr('builtinId',0)\n            );\n        this.$dxfs = XmlNode('dxfs').attr('count', \"0\");\n        this.$tableStyles = XmlNode('tableStyles')\n            .attr('count','0')\n            .attr('defaultTableStyle','TableStyleMedium9')\n            .attr('defaultPivotStyle','PivotStyleMedium4')\n\n\n        this.$styles = XmlNode('styleSheet')\n            .attr('xmlns:mc','http://schemas.openxmlformats.org/markup-compatibility/2006')\n            .attr('xmlns:x14ac','http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac')\n            .attr('xmlns','http://schemas.openxmlformats.org/spreadsheetml/2006/main')\n            .attr('mc:Ignorable','x14ac')\n            .prefix('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>')\n            .append(this.$numFmts)\n            .append(this.$fonts)\n            .append(this.$fills)\n            .append(this.$borders)\n            .append(this.$cellStyleXfs.append(this.$xf))\n            .append(this.$cellXfs)\n            .append(this.$cellStyles)\n            .append(this.$dxfs)\n            .append(this.$tableStyles);\n\n\n        // need to specify styles at index 0 and 1.\n        // the second style MUST be gray125 for some reason\n\n        var defaultStyle = options.defaultCellStyle || {};\n        if (!defaultStyle.font) defaultStyle.font = {name: 'Calibri', sz: '12'};\n        if (!defaultStyle.font.name) defaultStyle.font.name = 'Calibri';\n        if (!defaultStyle.font.sz) defaultStyle.font.sz = 11;\n        if (!defaultStyle.fill) defaultStyle.fill = {  patternType: \"none\", fgColor: {}};\n        if (!defaultStyle.border) defaultStyle.border = {};\n        if (!defaultStyle.numFmt) defaultStyle.numFmt = 0;\n\n        this.defaultStyle = defaultStyle;\n\n        var gray125Style = JSON.parse(JSON.stringify(defaultStyle));\n        gray125Style.fill = {patternType: \"gray125\", fgColor: { }}\n\n        this.addStyles([defaultStyle, gray125Style]);\n        return this;\n      },\n\n      // create a style entry and returns an integer index that can be used in the cell .s property\n      // these format of this object follows the emerging Common Spreadsheet Format\n      addStyle: function (attributes) {\n\n        var hashKey = JSON.stringify(attributes);\n        var index = _hashIndex[hashKey];\n        if (index == undefined) {\n\n          index = this._addXf(attributes); //_listIndex.push(attributes) -1;\n          _hashIndex[hashKey] = index;\n        }\n        else {\n          index = _hashIndex[hashKey];\n        }\n        return index;\n      },\n\n      // create style entries and returns array of integer indexes that can be used in cell .s property\n      addStyles: function (styles) {\n        var self = this;\n        return styles.map(function (style) {\n          return self.addStyle(style);\n        })\n      },\n\n      _duckTypeStyle: function(attributes) {\n\n        if (typeof attributes == 'object' && (attributes.patternFill || attributes.fgColor)) {\n          return {fill: attributes }; // this must be read via XLSX.parseFile(...)\n        }\n        else if (attributes.font || attributes.numFmt || attributes.border || attributes.fill) {\n          return attributes;\n        }\n        else {\n          return this._getStyleCSS(attributes)\n        }\n      },\n\n      _getStyleCSS: function(css) {\n        return css; //TODO\n      },\n\n      // Create an <xf> record for the style as well as corresponding <font>, <fill>, <border>, <numfmts>\n      // Right now this is simple and creates a <font>, <fill>, <border>, <numfmts> for every <xf>\n      // We could perhaps get fancier and avoid duplicating  auxiliary entries as Excel presumably intended, but bother.\n      _addXf: function (attributes) {\n\n\n        var fontId = this._addFont(attributes.font);\n        var fillId = this._addFill(attributes.fill);\n        var borderId = this._addBorder(attributes.border);\n        var numFmtId = this._addNumFmt(attributes.numFmt);\n\n        var $xf = XmlNode('xf')\n            .attr(\"numFmtId\", numFmtId)\n            .attr(\"fontId\", fontId)\n            .attr(\"fillId\", fillId)\n            .attr(\"borderId\", borderId)\n            .attr(\"xfId\", \"0\");\n\n        if (fontId > 0) {\n          $xf.attr('applyFont', \"1\");\n        }\n        if (fillId > 0) {\n          $xf.attr('applyFill', \"1\");\n        }\n        if (borderId > 0) {\n          $xf.attr('applyBorder', \"1\");\n        }\n        if (numFmtId > 0) {\n          $xf.attr('applyNumberFormat', \"1\");\n        }\n\n        if (attributes.alignment) {\n          var $alignment = XmlNode('alignment');\n          if (attributes.alignment.horizontal) { $alignment.attr('horizontal', attributes.alignment.horizontal);}\n          if (attributes.alignment.vertical)  { $alignment.attr('vertical', attributes.alignment.vertical);}\n          if (attributes.alignment.indent)  { $alignment.attr('indent', attributes.alignment.indent);}\n          if (attributes.alignment.readingOrder)  { $alignment.attr('readingOrder', attributes.alignment.readingOrder);}\n          if (attributes.alignment.wrapText)  { $alignment.attr('wrapText', attributes.alignment.wrapText);}\n          if (attributes.alignment.textRotation!=undefined)  { $alignment.attr('textRotation', attributes.alignment.textRotation);}\n\n          $xf.append($alignment).attr('applyAlignment',1)\n\n        }\n        this.$cellXfs.append($xf);\n        var count = +this.$cellXfs.children().length;\n\n        this.$cellXfs.attr('count', count);\n        return count - 1;\n      },\n\n      _addFont: function (attributes) {\n\n        if (!attributes) {  return 0; }\n\n        var $font = XmlNode('font')\n            .append(XmlNode('sz').attr('val', attributes.sz || this.defaultStyle.font.sz))\n            .append(XmlNode('name').attr('val', attributes.name || this.defaultStyle.font.name))\n\n        if (attributes.bold) $font.append(XmlNode('b'));\n        if (attributes.underline)  $font.append(XmlNode('u'));\n        if (attributes.italic)  $font.append(XmlNode('i'));\n        if (attributes.strike)  $font.append(XmlNode('strike'));\n        if (attributes.outline)  $font.append(XmlNode('outline'));\n        if (attributes.shadow)  $font.append(XmlNode('shadow'));\n\n        if (attributes.vertAlign) {\n          $font.append(XmlNode('vertAlign').attr('val', attributes.vertAlign))\n        }\n\n\n        if (attributes.color) {\n          if (attributes.color.theme) {\n            $font.append(XmlNode('color').attr('theme', attributes.color.theme))\n\n            if (attributes.color.tint) { //tint only if theme\n              $font.append(XmlNode('tint').attr('theme', attributes.color.tint))\n            }\n\n          } else if (attributes.color.rgb) { // not both rgb and theme\n            $font.append(XmlNode('color').attr('rgb', attributes.color.rgb))\n          }\n        }\n\n        this.$fonts.append($font);\n\n        var count = this.$fonts.children().length;\n        this.$fonts.attr('count', count);\n        return count - 1;\n      },\n\n        _addNumFmt: function (numFmt) {\n        if (!numFmt) { return 0; }\n\n        if (typeof numFmt == 'string') {\n          var numFmtIdx = fmt_table[numFmt];\n          if (numFmtIdx >= 0) {\n            return numFmtIdx; // we found a match against built in formats\n          }\n        }\n\n        if (/^[0-9]+$/.exec(numFmt)) {\n          return numFmt; // we're matching an integer against some known code\n        }\n        numFmt = numFmt\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;');\n\n\n        var $numFmt = XmlNode('numFmt')\n            .attr('numFmtId', (++customNumFmtId))\n            .attr('formatCode', numFmt);\n\n\n        this.$numFmts.append($numFmt);\n\n        var count = this.$numFmts.children().length;\n        this.$numFmts.attr('count', count);\n        return customNumFmtId ;\n      },\n\n      _addFill: function (attributes) {\n\n        if (!attributes) { return 0; }\n\n        var $patternFill = XmlNode('patternFill')\n            .attr('patternType', attributes.patternType || 'solid');\n\n        if (attributes.fgColor) {\n          var $fgColor = XmlNode('fgColor');\n\n          //Excel doesn't like it when we set both rgb and theme+tint, but xlsx.parseFile() sets both\n          //var $fgColor = createElement('<fgColor/>', null, null, {xmlMode: true}).attr(attributes.fgColor)\n          if (attributes.fgColor.rgb) {\n\n            if (attributes.fgColor.rgb.length == 6) {\n              attributes.fgColor.rgb = \"FF\" + attributes.fgColor.rgb /// add alpha to an RGB as Excel expects aRGB\n            }\n\n            $fgColor.attr('rgb', attributes.fgColor.rgb);\n            $patternFill.append($fgColor);\n          }\n          else if (attributes.fgColor.theme) {\n            $fgColor.attr('theme', attributes.fgColor.theme);\n            if (attributes.fgColor.tint) {\n              $fgColor.attr('tint', attributes.fgColor.tint);\n            }\n            $patternFill.append($fgColor);\n          }\n\n          if (!attributes.bgColor) {\n            attributes.bgColor = { \"indexed\": \"64\"}\n          }\n        }\n\n        if (attributes.bgColor) {\n          var $bgColor = XmlNode('bgColor').attr(attributes.bgColor);\n          $patternFill.append($bgColor);\n        }\n\n        var $fill = XmlNode('fill')\n            .append($patternFill);\n\n        this.$fills.append($fill);\n\n        var count = this.$fills.children().length;\n        this.$fills.attr('count', count);\n        return count - 1;\n      },\n\n      _getSubBorder: function(direction, spec) {\n\n        var $direction = XmlNode(direction);\n        if (spec){\n          if (spec.style) $direction.attr('style', spec.style);\n          if (spec.color) {\n            var $color = XmlNode('color');\n            if (spec.color.auto) {\n              $color.attr('auto', spec.color.auto);\n            }\n            else if (spec.color.rgb) {\n              $color.attr('rgb', spec.color.rgb);\n            }\n            else if (spec.color.theme || spec.color.tint) {\n              $color.attr('theme', spec.color.theme || \"1\");\n              $color.attr('tint', spec.color.tint || \"0\");\n            }\n            $direction.append($color)\n          }\n        }\n        return $direction;\n      },\n\n      _addBorder: function (attributes) {\n        if (!attributes) { return 0; }\n\n        var self = this;\n\n        var $border = XmlNode('border')\n            .attr(\"diagonalUp\",attributes.diagonalUp)\n            .attr(\"diagonalDown\",attributes.diagonalDown);\n\n        var directions = [\"left\",\"right\",\"top\",\"bottom\",\"diagonal\"];\n\n        directions.forEach(function(direction) {\n          $border.append(self._getSubBorder(direction, attributes[direction]))\n        });\n        this.$borders.append($border);\n\n        var count = this.$borders.children().length;\n        this.$borders.attr('count', count);\n        return count -1;\n      },\n\n      toXml: function () {\n        return this.$styles.toXml();\n      }\n    }.initialize(options||{});\n  }\n\n\nXLSX.parse_xlscfb = parse_xlscfb;\nXLSX.parse_zip = parse_zip;\nXLSX.read = readSync; //xlsread\nXLSX.readFile = readFileSync; //readFile\nXLSX.readFileSync = readFileSync;\nXLSX.write = writeSync;\nXLSX.writeFile = writeFileSync;\nXLSX.writeFileSync = writeFileSync;\nXLSX.utils = utils;\nXLSX.CFB = CFB;\nXLSX.SSF = SSF;\n})(typeof exports !== 'undefined' ? exports : XLSX);\nvar XLS = XLSX;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/xlsx.js\n ** module id = 1\n ** module chunks = 0\n **/","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('is-array')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property\n *     on objects.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = (function () {\n  function Bar () {}\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    arr.constructor = Bar\n    return arr.foo() === 42 && // typed array instances can be augmented\n        arr.constructor === Bar && // constructor can be set\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n})()\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * Class: Buffer\n * =============\n *\n * The Buffer constructor returns instances of `Uint8Array` that are augmented\n * with function properties for all the node `Buffer` API functions. We use\n * `Uint8Array` so that square bracket notation works as expected -- it returns\n * a single octet.\n *\n * By augmenting the instances, we can avoid modifying the `Uint8Array`\n * prototype.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  this.length = 0\n  this.parent = undefined\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    array.byteLength\n    that = Buffer._augment(new Uint8Array(array))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = Buffer._augment(new Uint8Array(length))\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n    that._isBuffer = true\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  var i = 0\n  var len = Math.min(x, y)\n  while (i < len) {\n    if (a[i] !== b[i]) break\n\n    ++i\n  }\n\n  if (i !== len) {\n    x = a[i]\n    y = b[i]\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\n// pre-set for values that may exist in the future\nBuffer.prototype.length = undefined\nBuffer.prototype.parent = undefined\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return 0\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\n// `get` is deprecated\nBuffer.prototype.get = function get (offset) {\n  console.log('.get() is deprecated. Access using array indexes instead.')\n  return this.readUInt8(offset)\n}\n\n// `set` is deprecated\nBuffer.prototype.set = function set (v, offset) {\n  console.log('.set() is deprecated. Access using array indexes instead.')\n  return this.writeUInt8(v, offset)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  var res = ''\n  var tmp = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    if (buf[i] <= 0x7F) {\n      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])\n      tmp = ''\n    } else {\n      tmp += '%' + buf[i].toString(16)\n    }\n  }\n\n  return res + decodeUtf8Char(tmp)\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = Buffer._augment(this.subarray(start, end))\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = value\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = value\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = value\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = value\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = value\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = value\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    target._set(this.subarray(start, start + len), targetStart)\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n/**\n * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.\n * Added in Node 0.12. Only available in browsers that support ArrayBuffer.\n */\nBuffer.prototype.toArrayBuffer = function toArrayBuffer () {\n  if (typeof Uint8Array !== 'undefined') {\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      return (new Buffer(this)).buffer\n    } else {\n      var buf = new Uint8Array(this.length)\n      for (var i = 0, len = buf.length; i < len; i += 1) {\n        buf[i] = this[i]\n      }\n      return buf.buffer\n    }\n  } else {\n    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')\n  }\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar BP = Buffer.prototype\n\n/**\n * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods\n */\nBuffer._augment = function _augment (arr) {\n  arr.constructor = Buffer\n  arr._isBuffer = true\n\n  // save reference to original Uint8Array set method before overwriting\n  arr._set = arr.set\n\n  // deprecated\n  arr.get = BP.get\n  arr.set = BP.set\n\n  arr.write = BP.write\n  arr.toString = BP.toString\n  arr.toLocaleString = BP.toString\n  arr.toJSON = BP.toJSON\n  arr.equals = BP.equals\n  arr.compare = BP.compare\n  arr.indexOf = BP.indexOf\n  arr.copy = BP.copy\n  arr.slice = BP.slice\n  arr.readUIntLE = BP.readUIntLE\n  arr.readUIntBE = BP.readUIntBE\n  arr.readUInt8 = BP.readUInt8\n  arr.readUInt16LE = BP.readUInt16LE\n  arr.readUInt16BE = BP.readUInt16BE\n  arr.readUInt32LE = BP.readUInt32LE\n  arr.readUInt32BE = BP.readUInt32BE\n  arr.readIntLE = BP.readIntLE\n  arr.readIntBE = BP.readIntBE\n  arr.readInt8 = BP.readInt8\n  arr.readInt16LE = BP.readInt16LE\n  arr.readInt16BE = BP.readInt16BE\n  arr.readInt32LE = BP.readInt32LE\n  arr.readInt32BE = BP.readInt32BE\n  arr.readFloatLE = BP.readFloatLE\n  arr.readFloatBE = BP.readFloatBE\n  arr.readDoubleLE = BP.readDoubleLE\n  arr.readDoubleBE = BP.readDoubleBE\n  arr.writeUInt8 = BP.writeUInt8\n  arr.writeUIntLE = BP.writeUIntLE\n  arr.writeUIntBE = BP.writeUIntBE\n  arr.writeUInt16LE = BP.writeUInt16LE\n  arr.writeUInt16BE = BP.writeUInt16BE\n  arr.writeUInt32LE = BP.writeUInt32LE\n  arr.writeUInt32BE = BP.writeUInt32BE\n  arr.writeIntLE = BP.writeIntLE\n  arr.writeIntBE = BP.writeIntBE\n  arr.writeInt8 = BP.writeInt8\n  arr.writeInt16LE = BP.writeInt16LE\n  arr.writeInt16BE = BP.writeInt16BE\n  arr.writeInt32LE = BP.writeInt32LE\n  arr.writeInt32BE = BP.writeInt32BE\n  arr.writeFloatLE = BP.writeFloatLE\n  arr.writeFloatBE = BP.writeFloatBE\n  arr.writeDoubleLE = BP.writeDoubleLE\n  arr.writeDoubleBE = BP.writeDoubleBE\n  arr.fill = BP.fill\n  arr.inspect = BP.inspect\n  arr.toArrayBuffer = BP.toArrayBuffer\n\n  return arr\n}\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n  var i = 0\n\n  for (; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (leadSurrogate) {\n        // 2 leads in a row\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          leadSurrogate = codePoint\n          continue\n        } else {\n          // valid surrogate pair\n          codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000\n          leadSurrogate = null\n        }\n      } else {\n        // no lead yet\n\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else {\n          // valid lead\n          leadSurrogate = codePoint\n          continue\n        }\n      }\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n      leadSurrogate = null\n    }\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x200000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction decodeUtf8Char (str) {\n  try {\n    return decodeURIComponent(str)\n  } catch (err) {\n    return String.fromCharCode(0xFFFD) // UTF 8 invalid char\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/index.js\n ** module id = 2\n ** module chunks = 0\n **/","var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n;(function (exports) {\n\t'use strict';\n\n  var Arr = (typeof Uint8Array !== 'undefined')\n    ? Uint8Array\n    : Array\n\n\tvar PLUS   = '+'.charCodeAt(0)\n\tvar SLASH  = '/'.charCodeAt(0)\n\tvar NUMBER = '0'.charCodeAt(0)\n\tvar LOWER  = 'a'.charCodeAt(0)\n\tvar UPPER  = 'A'.charCodeAt(0)\n\tvar PLUS_URL_SAFE = '-'.charCodeAt(0)\n\tvar SLASH_URL_SAFE = '_'.charCodeAt(0)\n\n\tfunction decode (elt) {\n\t\tvar code = elt.charCodeAt(0)\n\t\tif (code === PLUS ||\n\t\t    code === PLUS_URL_SAFE)\n\t\t\treturn 62 // '+'\n\t\tif (code === SLASH ||\n\t\t    code === SLASH_URL_SAFE)\n\t\t\treturn 63 // '/'\n\t\tif (code < NUMBER)\n\t\t\treturn -1 //no match\n\t\tif (code < NUMBER + 10)\n\t\t\treturn code - NUMBER + 26 + 26\n\t\tif (code < UPPER + 26)\n\t\t\treturn code - UPPER\n\t\tif (code < LOWER + 26)\n\t\t\treturn code - LOWER + 26\n\t}\n\n\tfunction b64ToByteArray (b64) {\n\t\tvar i, j, l, tmp, placeHolders, arr\n\n\t\tif (b64.length % 4 > 0) {\n\t\t\tthrow new Error('Invalid string. Length must be a multiple of 4')\n\t\t}\n\n\t\t// the number of equal signs (place holders)\n\t\t// if there are two placeholders, than the two characters before it\n\t\t// represent one byte\n\t\t// if there is only one, then the three characters before it represent 2 bytes\n\t\t// this is just a cheap hack to not do indexOf twice\n\t\tvar len = b64.length\n\t\tplaceHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0\n\n\t\t// base64 is 4/3 + up to two characters of the original data\n\t\tarr = new Arr(b64.length * 3 / 4 - placeHolders)\n\n\t\t// if there are placeholders, only get up to the last complete 4 chars\n\t\tl = placeHolders > 0 ? b64.length - 4 : b64.length\n\n\t\tvar L = 0\n\n\t\tfunction push (v) {\n\t\t\tarr[L++] = v\n\t\t}\n\n\t\tfor (i = 0, j = 0; i < l; i += 4, j += 3) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))\n\t\t\tpush((tmp & 0xFF0000) >> 16)\n\t\t\tpush((tmp & 0xFF00) >> 8)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\tif (placeHolders === 2) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)\n\t\t\tpush(tmp & 0xFF)\n\t\t} else if (placeHolders === 1) {\n\t\t\ttmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)\n\t\t\tpush((tmp >> 8) & 0xFF)\n\t\t\tpush(tmp & 0xFF)\n\t\t}\n\n\t\treturn arr\n\t}\n\n\tfunction uint8ToBase64 (uint8) {\n\t\tvar i,\n\t\t\textraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes\n\t\t\toutput = \"\",\n\t\t\ttemp, length\n\n\t\tfunction encode (num) {\n\t\t\treturn lookup.charAt(num)\n\t\t}\n\n\t\tfunction tripletToBase64 (num) {\n\t\t\treturn encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\n\t\t}\n\n\t\t// go through the array every three bytes, we'll deal with trailing stuff later\n\t\tfor (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\n\t\t\ttemp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n\t\t\toutput += tripletToBase64(temp)\n\t\t}\n\n\t\t// pad the end with zeros, but make sure to not forget the extra bytes\n\t\tswitch (extraBytes) {\n\t\t\tcase 1:\n\t\t\t\ttemp = uint8[uint8.length - 1]\n\t\t\t\toutput += encode(temp >> 2)\n\t\t\t\toutput += encode((temp << 4) & 0x3F)\n\t\t\t\toutput += '=='\n\t\t\t\tbreak\n\t\t\tcase 2:\n\t\t\t\ttemp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])\n\t\t\t\toutput += encode(temp >> 10)\n\t\t\t\toutput += encode((temp >> 4) & 0x3F)\n\t\t\t\toutput += encode((temp << 2) & 0x3F)\n\t\t\t\toutput += '='\n\t\t\t\tbreak\n\t\t}\n\n\t\treturn output\n\t}\n\n\texports.toByteArray = b64ToByteArray\n\texports.fromByteArray = uint8ToBase64\n}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/base64-js/lib/b64.js\n ** module id = 3\n ** module chunks = 0\n **/","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/ieee754/index.js\n ** module id = 4\n ** module chunks = 0\n **/","\n/**\n * isArray\n */\n\nvar isArray = Array.isArray;\n\n/**\n * toString\n */\n\nvar str = Object.prototype.toString;\n\n/**\n * Whether or not the given `val`\n * is an array.\n *\n * example:\n *\n *        isArray([]);\n *        // > true\n *        isArray(arguments);\n *        // > false\n *        isArray('');\n *        // > false\n *\n * @param {mixed} val\n * @return {bool}\n */\n\nmodule.exports = isArray || function (val) {\n  return !! val && '[object Array]' == str.call(val);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/buffer/~/is-array/index.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n\nvar base64 = require('./base64');\n\n/**\nUsage:\n   zip = new JSZip();\n   zip.file(\"hello.txt\", \"Hello, World!\").file(\"tempfile\", \"nothing\");\n   zip.folder(\"images\").file(\"smile.gif\", base64Data, {base64: true});\n   zip.file(\"Xmas.txt\", \"Ho ho ho !\", {date : new Date(\"December 25, 2007 00:00:01\")});\n   zip.remove(\"tempfile\");\n\n   base64zip = zip.generate();\n\n**/\n\n/**\n * Representation a of zip file in js\n * @constructor\n * @param {String=|ArrayBuffer=|Uint8Array=} data the data to load, if any (optional).\n * @param {Object=} options the options for creating this objects (optional).\n */\nfunction JSZip(data, options) {\n    // if this constructor is used without `new`, it adds `new` before itself:\n    if(!(this instanceof JSZip)) return new JSZip(data, options);\n\n    // object containing the files :\n    // {\n    //   \"folder/\" : {...},\n    //   \"folder/data.txt\" : {...}\n    // }\n    this.files = {};\n\n    this.comment = null;\n\n    // Where we are in the hierarchy\n    this.root = \"\";\n    if (data) {\n        this.load(data, options);\n    }\n    this.clone = function() {\n        var newObj = new JSZip();\n        for (var i in this) {\n            if (typeof this[i] !== \"function\") {\n                newObj[i] = this[i];\n            }\n        }\n        return newObj;\n    };\n}\nJSZip.prototype = require('./object');\nJSZip.prototype.load = require('./load');\nJSZip.support = require('./support');\nJSZip.defaults = require('./defaults');\n\n/**\n * @deprecated\n * This namespace will be removed in a future version without replacement.\n */\nJSZip.utils = require('./deprecatedPublicUtils');\n\nJSZip.base64 = {\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    encode : function(input) {\n        return base64.encode(input);\n    },\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    decode : function(input) {\n        return base64.decode(input);\n    }\n};\nJSZip.compressions = require('./compressions');\nmodule.exports = JSZip;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/index.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n// private property\nvar _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n\n// public method for encoding\nexports.encode = function(input, utf8) {\n    var output = \"\";\n    var chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    while (i < input.length) {\n\n        chr1 = input.charCodeAt(i++);\n        chr2 = input.charCodeAt(i++);\n        chr3 = input.charCodeAt(i++);\n\n        enc1 = chr1 >> 2;\n        enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n        enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n        enc4 = chr3 & 63;\n\n        if (isNaN(chr2)) {\n            enc3 = enc4 = 64;\n        }\n        else if (isNaN(chr3)) {\n            enc4 = 64;\n        }\n\n        output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);\n\n    }\n\n    return output;\n};\n\n// public method for decoding\nexports.decode = function(input, utf8) {\n    var output = \"\";\n    var chr1, chr2, chr3;\n    var enc1, enc2, enc3, enc4;\n    var i = 0;\n\n    input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n    while (i < input.length) {\n\n        enc1 = _keyStr.indexOf(input.charAt(i++));\n        enc2 = _keyStr.indexOf(input.charAt(i++));\n        enc3 = _keyStr.indexOf(input.charAt(i++));\n        enc4 = _keyStr.indexOf(input.charAt(i++));\n\n        chr1 = (enc1 << 2) | (enc2 >> 4);\n        chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n        chr3 = ((enc3 & 3) << 6) | enc4;\n\n        output = output + String.fromCharCode(chr1);\n\n        if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n        }\n        if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n        }\n\n    }\n\n    return output;\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/base64.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\nvar support = require('./support');\nvar utils = require('./utils');\nvar crc32 = require('./crc32');\nvar signature = require('./signature');\nvar defaults = require('./defaults');\nvar base64 = require('./base64');\nvar compressions = require('./compressions');\nvar CompressedObject = require('./compressedObject');\nvar nodeBuffer = require('./nodeBuffer');\nvar utf8 = require('./utf8');\nvar StringWriter = require('./stringWriter');\nvar Uint8ArrayWriter = require('./uint8ArrayWriter');\n\n/**\n * Returns the raw data of a ZipObject, decompress the content if necessary.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getRawData = function(file) {\n    if (file._data instanceof CompressedObject) {\n        file._data = file._data.getContent();\n        file.options.binary = true;\n        file.options.base64 = false;\n\n        if (utils.getTypeOf(file._data) === \"uint8array\") {\n            var copy = file._data;\n            // when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.\n            // if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).\n            file._data = new Uint8Array(copy.length);\n            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n            if (copy.length !== 0) {\n                file._data.set(copy, 0);\n            }\n        }\n    }\n    return file._data;\n};\n\n/**\n * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.\n * @param {ZipObject} file the file to use.\n * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.\n */\nvar getBinaryData = function(file) {\n    var result = getRawData(file),\n        type = utils.getTypeOf(result);\n    if (type === \"string\") {\n        if (!file.options.binary) {\n            // unicode text !\n            // unicode string => binary string is a painful process, check if we can avoid it.\n            if (support.nodebuffer) {\n                return nodeBuffer(result, \"utf-8\");\n            }\n        }\n        return file.asBinary();\n    }\n    return result;\n};\n\n/**\n * Transform this._data into a string.\n * @param {function} filter a function String -> String, applied if not null on the result.\n * @return {String} the string representing this._data.\n */\nvar dataToString = function(asUTF8) {\n    var result = getRawData(this);\n    if (result === null || typeof result === \"undefined\") {\n        return \"\";\n    }\n    // if the data is a base64 string, we decode it before checking the encoding !\n    if (this.options.base64) {\n        result = base64.decode(result);\n    }\n    if (asUTF8 && this.options.binary) {\n        // JSZip.prototype.utf8decode supports arrays as input\n        // skip to array => string step, utf8decode will do it.\n        result = out.utf8decode(result);\n    }\n    else {\n        // no utf8 transformation, do the array => string step.\n        result = utils.transformTo(\"string\", result);\n    }\n\n    if (!asUTF8 && !this.options.binary) {\n        result = utils.transformTo(\"string\", out.utf8encode(result));\n    }\n    return result;\n};\n/**\n * A simple object representing a file in the zip file.\n * @constructor\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data\n * @param {Object} options the options of the file\n */\nvar ZipObject = function(name, data, options) {\n    this.name = name;\n    this.dir = options.dir;\n    this.date = options.date;\n    this.comment = options.comment;\n    this.unixPermissions = options.unixPermissions;\n    this.dosPermissions = options.dosPermissions;\n\n    this._data = data;\n    this.options = options;\n\n    /*\n     * This object contains initial values for dir and date.\n     * With them, we can check if the user changed the deprecated metadata in\n     * `ZipObject#options` or not.\n     */\n    this._initialMetadata = {\n      dir : options.dir,\n      date : options.date\n    };\n};\n\nZipObject.prototype = {\n    /**\n     * Return the content as UTF8 string.\n     * @return {string} the UTF8 string.\n     */\n    asText: function() {\n        return dataToString.call(this, true);\n    },\n    /**\n     * Returns the binary content.\n     * @return {string} the content as binary.\n     */\n    asBinary: function() {\n        return dataToString.call(this, false);\n    },\n    /**\n     * Returns the content as a nodejs Buffer.\n     * @return {Buffer} the content as a Buffer.\n     */\n    asNodeBuffer: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"nodebuffer\", result);\n    },\n    /**\n     * Returns the content as an Uint8Array.\n     * @return {Uint8Array} the content as an Uint8Array.\n     */\n    asUint8Array: function() {\n        var result = getBinaryData(this);\n        return utils.transformTo(\"uint8array\", result);\n    },\n    /**\n     * Returns the content as an ArrayBuffer.\n     * @return {ArrayBuffer} the content as an ArrayBufer.\n     */\n    asArrayBuffer: function() {\n        return this.asUint8Array().buffer;\n    }\n};\n\n/**\n * Transform an integer into a string in hexadecimal.\n * @private\n * @param {number} dec the number to convert.\n * @param {number} bytes the number of bytes to generate.\n * @returns {string} the result.\n */\nvar decToHex = function(dec, bytes) {\n    var hex = \"\",\n        i;\n    for (i = 0; i < bytes; i++) {\n        hex += String.fromCharCode(dec & 0xff);\n        dec = dec >>> 8;\n    }\n    return hex;\n};\n\n/**\n * Merge the objects passed as parameters into a new one.\n * @private\n * @param {...Object} var_args All objects to merge.\n * @return {Object} a new object with the data of the others.\n */\nvar extend = function() {\n    var result = {}, i, attr;\n    for (i = 0; i < arguments.length; i++) { // arguments is not enumerable in some browsers\n        for (attr in arguments[i]) {\n            if (arguments[i].hasOwnProperty(attr) && typeof result[attr] === \"undefined\") {\n                result[attr] = arguments[i][attr];\n            }\n        }\n    }\n    return result;\n};\n\n/**\n * Transforms the (incomplete) options from the user into the complete\n * set of options to create a file.\n * @private\n * @param {Object} o the options from the user.\n * @return {Object} the complete set of options.\n */\nvar prepareFileAttrs = function(o) {\n    o = o || {};\n    if (o.base64 === true && (o.binary === null || o.binary === undefined)) {\n        o.binary = true;\n    }\n    o = extend(o, defaults);\n    o.date = o.date || new Date();\n    if (o.compression !== null) o.compression = o.compression.toUpperCase();\n\n    return o;\n};\n\n/**\n * Add a file in the current folder.\n * @private\n * @param {string} name the name of the file\n * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file\n * @param {Object} o the options of the file\n * @return {Object} the new file.\n */\nvar fileAdd = function(name, data, o) {\n    // be sure sub folders exist\n    var dataType = utils.getTypeOf(data),\n        parent;\n\n    o = prepareFileAttrs(o);\n\n    if (typeof o.unixPermissions === \"string\") {\n        o.unixPermissions = parseInt(o.unixPermissions, 8);\n    }\n\n    // UNX_IFDIR  0040000 see zipinfo.c\n    if (o.unixPermissions && (o.unixPermissions & 0x4000)) {\n        o.dir = true;\n    }\n    // Bit 4    Directory\n    if (o.dosPermissions && (o.dosPermissions & 0x0010)) {\n        o.dir = true;\n    }\n\n    if (o.dir) {\n        name = forceTrailingSlash(name);\n    }\n\n    if (o.createFolders && (parent = parentFolder(name))) {\n        folderAdd.call(this, parent, true);\n    }\n\n    if (o.dir || data === null || typeof data === \"undefined\") {\n        o.base64 = false;\n        o.binary = false;\n        data = null;\n        dataType = null;\n    }\n    else if (dataType === \"string\") {\n        if (o.binary && !o.base64) {\n            // optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask\n            if (o.optimizedBinaryString !== true) {\n                // this is a string, not in a base64 format.\n                // Be sure that this is a correct \"binary string\"\n                data = utils.string2binary(data);\n            }\n        }\n    }\n    else { // arraybuffer, uint8array, ...\n        o.base64 = false;\n        o.binary = true;\n\n        if (!dataType && !(data instanceof CompressedObject)) {\n            throw new Error(\"The data of '\" + name + \"' is in an unsupported format !\");\n        }\n\n        // special case : it's way easier to work with Uint8Array than with ArrayBuffer\n        if (dataType === \"arraybuffer\") {\n            data = utils.transformTo(\"uint8array\", data);\n        }\n    }\n\n    var object = new ZipObject(name, data, o);\n    this.files[name] = object;\n    return object;\n};\n\n/**\n * Find the parent folder of the path.\n * @private\n * @param {string} path the path to use\n * @return {string} the parent folder, or \"\"\n */\nvar parentFolder = function (path) {\n    if (path.slice(-1) == '/') {\n        path = path.substring(0, path.length - 1);\n    }\n    var lastSlash = path.lastIndexOf('/');\n    return (lastSlash > 0) ? path.substring(0, lastSlash) : \"\";\n};\n\n\n/**\n * Returns the path with a slash at the end.\n * @private\n * @param {String} path the path to check.\n * @return {String} the path with a trailing slash.\n */\nvar forceTrailingSlash = function(path) {\n    // Check the name ends with a /\n    if (path.slice(-1) != \"/\") {\n        path += \"/\"; // IE doesn't like substr(-1)\n    }\n    return path;\n};\n/**\n * Add a (sub) folder in the current folder.\n * @private\n * @param {string} name the folder's name\n * @param {boolean=} [createFolders] If true, automatically create sub\n *  folders. Defaults to false.\n * @return {Object} the new folder.\n */\nvar folderAdd = function(name, createFolders) {\n    createFolders = (typeof createFolders !== 'undefined') ? createFolders : false;\n\n    name = forceTrailingSlash(name);\n\n    // Does this folder already exist?\n    if (!this.files[name]) {\n        fileAdd.call(this, name, null, {\n            dir: true,\n            createFolders: createFolders\n        });\n    }\n    return this.files[name];\n};\n\n/**\n * Generate a JSZip.CompressedObject for a given zipOject.\n * @param {ZipObject} file the object to read.\n * @param {JSZip.compression} compression the compression to use.\n * @param {Object} compressionOptions the options to use when compressing.\n * @return {JSZip.CompressedObject} the compressed result.\n */\nvar generateCompressedObjectFrom = function(file, compression, compressionOptions) {\n    var result = new CompressedObject(),\n        content;\n\n    // the data has not been decompressed, we might reuse things !\n    if (file._data instanceof CompressedObject) {\n        result.uncompressedSize = file._data.uncompressedSize;\n        result.crc32 = file._data.crc32;\n\n        if (result.uncompressedSize === 0 || file.dir) {\n            compression = compressions['STORE'];\n            result.compressedContent = \"\";\n            result.crc32 = 0;\n        }\n        else if (file._data.compressionMethod === compression.magic) {\n            result.compressedContent = file._data.getCompressedContent();\n        }\n        else {\n            content = file._data.getContent();\n            // need to decompress / recompress\n            result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n        }\n    }\n    else {\n        // have uncompressed data\n        content = getBinaryData(file);\n        if (!content || content.length === 0 || file.dir) {\n            compression = compressions['STORE'];\n            content = \"\";\n        }\n        result.uncompressedSize = content.length;\n        result.crc32 = crc32(content);\n        result.compressedContent = compression.compress(utils.transformTo(compression.compressInputType, content), compressionOptions);\n    }\n\n    result.compressedSize = result.compressedContent.length;\n    result.compressionMethod = compression.magic;\n\n    return result;\n};\n\n\n\n\n/**\n * Generate the UNIX part of the external file attributes.\n * @param {Object} unixPermissions the unix permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :\n *\n * TTTTsstrwxrwxrwx0000000000ADVSHR\n * ^^^^____________________________ file type, see zipinfo.c (UNX_*)\n *     ^^^_________________________ setuid, setgid, sticky\n *        ^^^^^^^^^________________ permissions\n *                 ^^^^^^^^^^______ not used ?\n *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only\n */\nvar generateUnixExternalFileAttr = function (unixPermissions, isDir) {\n\n    var result = unixPermissions;\n    if (!unixPermissions) {\n        // I can't use octal values in strict mode, hence the hexa.\n        //  040775 => 0x41fd\n        // 0100664 => 0x81b4\n        result = isDir ? 0x41fd : 0x81b4;\n    }\n\n    return (result & 0xFFFF) << 16;\n};\n\n/**\n * Generate the DOS part of the external file attributes.\n * @param {Object} dosPermissions the dos permissions or null.\n * @param {Boolean} isDir true if the entry is a directory, false otherwise.\n * @return {Number} a 32 bit integer.\n *\n * Bit 0     Read-Only\n * Bit 1     Hidden\n * Bit 2     System\n * Bit 3     Volume Label\n * Bit 4     Directory\n * Bit 5     Archive\n */\nvar generateDosExternalFileAttr = function (dosPermissions, isDir) {\n\n    // the dir flag is already set for compatibility\n\n    return (dosPermissions || 0)  & 0x3F;\n};\n\n/**\n * Generate the various parts used in the construction of the final zip file.\n * @param {string} name the file name.\n * @param {ZipObject} file the file content.\n * @param {JSZip.CompressedObject} compressedObject the compressed object.\n * @param {number} offset the current offset from the start of the zip file.\n * @param {String} platform let's pretend we are this platform (change platform dependents fields)\n * @return {object} the zip parts.\n */\nvar generateZipParts = function(name, file, compressedObject, offset, platform) {\n    var data = compressedObject.compressedContent,\n        utfEncodedFileName = utils.transformTo(\"string\", utf8.utf8encode(file.name)),\n        comment = file.comment || \"\",\n        utfEncodedComment = utils.transformTo(\"string\", utf8.utf8encode(comment)),\n        useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,\n        useUTF8ForComment = utfEncodedComment.length !== comment.length,\n        o = file.options,\n        dosTime,\n        dosDate,\n        extraFields = \"\",\n        unicodePathExtraField = \"\",\n        unicodeCommentExtraField = \"\",\n        dir, date;\n\n\n    // handle the deprecated options.dir\n    if (file._initialMetadata.dir !== file.dir) {\n        dir = file.dir;\n    } else {\n        dir = o.dir;\n    }\n\n    // handle the deprecated options.date\n    if(file._initialMetadata.date !== file.date) {\n        date = file.date;\n    } else {\n        date = o.date;\n    }\n\n    var extFileAttr = 0;\n    var versionMadeBy = 0;\n    if (dir) {\n        // dos or unix, we set the dos dir flag\n        extFileAttr |= 0x00010;\n    }\n    if(platform === \"UNIX\") {\n        versionMadeBy = 0x031E; // UNIX, version 3.0\n        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);\n    } else { // DOS or other, fallback to DOS\n        versionMadeBy = 0x0014; // DOS, version 2.0\n        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);\n    }\n\n    // date\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html\n    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html\n\n    dosTime = date.getHours();\n    dosTime = dosTime << 6;\n    dosTime = dosTime | date.getMinutes();\n    dosTime = dosTime << 5;\n    dosTime = dosTime | date.getSeconds() / 2;\n\n    dosDate = date.getFullYear() - 1980;\n    dosDate = dosDate << 4;\n    dosDate = dosDate | (date.getMonth() + 1);\n    dosDate = dosDate << 5;\n    dosDate = dosDate | date.getDate();\n\n    if (useUTF8ForFileName) {\n        // set the unicode path extra field. unzip needs at least one extra\n        // field to correctly handle unicode path, so using the path is as good\n        // as any other information. This could improve the situation with\n        // other archive managers too.\n        // This field is usually used without the utf8 flag, with a non\n        // unicode path in the header (winrar, winzip). This helps (a bit)\n        // with the messy Windows' default compressed folders feature but\n        // breaks on p7zip which doesn't seek the unicode path extra field.\n        // So for now, UTF-8 everywhere !\n        unicodePathExtraField =\n            // Version\n            decToHex(1, 1) +\n            // NameCRC32\n            decToHex(crc32(utfEncodedFileName), 4) +\n            // UnicodeName\n            utfEncodedFileName;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x70\" +\n            // size\n            decToHex(unicodePathExtraField.length, 2) +\n            // content\n            unicodePathExtraField;\n    }\n\n    if(useUTF8ForComment) {\n\n        unicodeCommentExtraField =\n            // Version\n            decToHex(1, 1) +\n            // CommentCRC32\n            decToHex(this.crc32(utfEncodedComment), 4) +\n            // UnicodeName\n            utfEncodedComment;\n\n        extraFields +=\n            // Info-ZIP Unicode Path Extra Field\n            \"\\x75\\x63\" +\n            // size\n            decToHex(unicodeCommentExtraField.length, 2) +\n            // content\n            unicodeCommentExtraField;\n    }\n\n    var header = \"\";\n\n    // version needed to extract\n    header += \"\\x0A\\x00\";\n    // general purpose bit flag\n    // set bit 11 if utf8\n    header += (useUTF8ForFileName || useUTF8ForComment) ? \"\\x00\\x08\" : \"\\x00\\x00\";\n    // compression method\n    header += compressedObject.compressionMethod;\n    // last mod file time\n    header += decToHex(dosTime, 2);\n    // last mod file date\n    header += decToHex(dosDate, 2);\n    // crc-32\n    header += decToHex(compressedObject.crc32, 4);\n    // compressed size\n    header += decToHex(compressedObject.compressedSize, 4);\n    // uncompressed size\n    header += decToHex(compressedObject.uncompressedSize, 4);\n    // file name length\n    header += decToHex(utfEncodedFileName.length, 2);\n    // extra field length\n    header += decToHex(extraFields.length, 2);\n\n\n    var fileRecord = signature.LOCAL_FILE_HEADER + header + utfEncodedFileName + extraFields;\n\n    var dirRecord = signature.CENTRAL_FILE_HEADER +\n    // version made by (00: DOS)\n    decToHex(versionMadeBy, 2) +\n    // file header (common to file and central directory)\n    header +\n    // file comment length\n    decToHex(utfEncodedComment.length, 2) +\n    // disk number start\n    \"\\x00\\x00\" +\n    // internal file attributes TODO\n    \"\\x00\\x00\" +\n    // external file attributes\n    decToHex(extFileAttr, 4) +\n    // relative offset of local header\n    decToHex(offset, 4) +\n    // file name\n    utfEncodedFileName +\n    // extra field\n    extraFields +\n    // file comment\n    utfEncodedComment;\n\n    return {\n        fileRecord: fileRecord,\n        dirRecord: dirRecord,\n        compressedObject: compressedObject\n    };\n};\n\n\n// return the actual prototype of JSZip\nvar out = {\n    /**\n     * Read an existing zip and merge the data in the current JSZip object.\n     * The implementation is in jszip-load.js, don't forget to include it.\n     * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load\n     * @param {Object} options Options for loading the stream.\n     *  options.base64 : is the stream in base64 ? default : false\n     * @return {JSZip} the current JSZip object\n     */\n    load: function(stream, options) {\n        throw new Error(\"Load method is not defined. Is the file jszip-load.js included ?\");\n    },\n\n    /**\n     * Filter nested files/folders with the specified function.\n     * @param {Function} search the predicate to use :\n     * function (relativePath, file) {...}\n     * It takes 2 arguments : the relative path and the file.\n     * @return {Array} An array of matching elements.\n     */\n    filter: function(search) {\n        var result = [],\n            filename, relativePath, file, fileClone;\n        for (filename in this.files) {\n            if (!this.files.hasOwnProperty(filename)) {\n                continue;\n            }\n            file = this.files[filename];\n            // return a new object, don't let the user mess with our internal objects :)\n            fileClone = new ZipObject(file.name, file._data, extend(file.options));\n            relativePath = filename.slice(this.root.length, filename.length);\n            if (filename.slice(0, this.root.length) === this.root && // the file is in the current root\n            search(relativePath, fileClone)) { // and the file matches the function\n                result.push(fileClone);\n            }\n        }\n        return result;\n    },\n\n    /**\n     * Add a file to the zip file, or search a file.\n     * @param   {string|RegExp} name The name of the file to add (if data is defined),\n     * the name of the file to find (if no data) or a regex to match files.\n     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded\n     * @param   {Object} o     File options\n     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),\n     * a file (when searching by string) or an array of files (when searching by regex).\n     */\n    file: function(name, data, o) {\n        if (arguments.length === 1) {\n            if (utils.isRegExp(name)) {\n                var regexp = name;\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && regexp.test(relativePath);\n                });\n            }\n            else { // text\n                return this.filter(function(relativePath, file) {\n                    return !file.dir && relativePath === name;\n                })[0] || null;\n            }\n        }\n        else { // more than one argument : we have data !\n            name = this.root + name;\n            fileAdd.call(this, name, data, o);\n        }\n        return this;\n    },\n\n    /**\n     * Add a directory to the zip file, or search.\n     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.\n     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.\n     */\n    folder: function(arg) {\n        if (!arg) {\n            return this;\n        }\n\n        if (utils.isRegExp(arg)) {\n            return this.filter(function(relativePath, file) {\n                return file.dir && arg.test(relativePath);\n            });\n        }\n\n        // else, name is a new folder\n        var name = this.root + arg;\n        var newFolder = folderAdd.call(this, name);\n\n        // Allow chaining by returning a new object with this folder as the root\n        var ret = this.clone();\n        ret.root = newFolder.name;\n        return ret;\n    },\n\n    /**\n     * Delete a file, or a directory and all sub-files, from the zip\n     * @param {string} name the name of the file to delete\n     * @return {JSZip} this JSZip object\n     */\n    remove: function(name) {\n        name = this.root + name;\n        var file = this.files[name];\n        if (!file) {\n            // Look for any folders\n            if (name.slice(-1) != \"/\") {\n                name += \"/\";\n            }\n            file = this.files[name];\n        }\n\n        if (file && !file.dir) {\n            // file\n            delete this.files[name];\n        } else {\n            // maybe a folder, delete recursively\n            var kids = this.filter(function(relativePath, file) {\n                return file.name.slice(0, name.length) === name;\n            });\n            for (var i = 0; i < kids.length; i++) {\n                delete this.files[kids[i].name];\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * Generate the complete zip file\n     * @param {Object} options the options to generate the zip file :\n     * - base64, (deprecated, use type instead) true to generate base64.\n     * - compression, \"STORE\" by default.\n     * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.\n     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file\n     */\n    generate: function(options) {\n        options = extend(options || {}, {\n            base64: true,\n            compression: \"STORE\",\n            compressionOptions : null,\n            type: \"base64\",\n            platform: \"DOS\",\n            comment: null,\n            mimeType: 'application/zip'\n        });\n\n        utils.checkSupport(options.type);\n\n        // accept nodejs `process.platform`\n        if(\n          options.platform === 'darwin' ||\n          options.platform === 'freebsd' ||\n          options.platform === 'linux' ||\n          options.platform === 'sunos'\n        ) {\n          options.platform = \"UNIX\";\n        }\n        if (options.platform === 'win32') {\n          options.platform = \"DOS\";\n        }\n\n        var zipData = [],\n            localDirLength = 0,\n            centralDirLength = 0,\n            writer, i,\n            utfEncodedComment = utils.transformTo(\"string\", this.utf8encode(options.comment || this.comment || \"\"));\n\n        // first, generate all the zip parts.\n        for (var name in this.files) {\n            if (!this.files.hasOwnProperty(name)) {\n                continue;\n            }\n            var file = this.files[name];\n\n            var compressionName = file.options.compression || options.compression.toUpperCase();\n            var compression = compressions[compressionName];\n            if (!compression) {\n                throw new Error(compressionName + \" is not a valid compression method !\");\n            }\n            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};\n\n            var compressedObject = generateCompressedObjectFrom.call(this, file, compression, compressionOptions);\n\n            var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength, options.platform);\n            localDirLength += zipPart.fileRecord.length + compressedObject.compressedSize;\n            centralDirLength += zipPart.dirRecord.length;\n            zipData.push(zipPart);\n        }\n\n        var dirEnd = \"\";\n\n        // end of central dir signature\n        dirEnd = signature.CENTRAL_DIRECTORY_END +\n        // number of this disk\n        \"\\x00\\x00\" +\n        // number of the disk with the start of the central directory\n        \"\\x00\\x00\" +\n        // total number of entries in the central directory on this disk\n        decToHex(zipData.length, 2) +\n        // total number of entries in the central directory\n        decToHex(zipData.length, 2) +\n        // size of the central directory   4 bytes\n        decToHex(centralDirLength, 4) +\n        // offset of start of central directory with respect to the starting disk number\n        decToHex(localDirLength, 4) +\n        // .ZIP file comment length\n        decToHex(utfEncodedComment.length, 2) +\n        // .ZIP file comment\n        utfEncodedComment;\n\n\n        // we have all the parts (and the total length)\n        // time to create a writer !\n        var typeName = options.type.toLowerCase();\n        if(typeName===\"uint8array\"||typeName===\"arraybuffer\"||typeName===\"blob\"||typeName===\"nodebuffer\") {\n            writer = new Uint8ArrayWriter(localDirLength + centralDirLength + dirEnd.length);\n        }else{\n            writer = new StringWriter(localDirLength + centralDirLength + dirEnd.length);\n        }\n\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].fileRecord);\n            writer.append(zipData[i].compressedObject.compressedContent);\n        }\n        for (i = 0; i < zipData.length; i++) {\n            writer.append(zipData[i].dirRecord);\n        }\n\n        writer.append(dirEnd);\n\n        var zip = writer.finalize();\n\n\n\n        switch(options.type.toLowerCase()) {\n            // case \"zip is an Uint8Array\"\n            case \"uint8array\" :\n            case \"arraybuffer\" :\n            case \"nodebuffer\" :\n               return utils.transformTo(options.type.toLowerCase(), zip);\n            case \"blob\" :\n               return utils.arrayBuffer2Blob(utils.transformTo(\"arraybuffer\", zip), options.mimeType);\n            // case \"zip is a string\"\n            case \"base64\" :\n               return (options.base64) ? base64.encode(zip) : zip;\n            default : // case \"string\" :\n               return zip;\n         }\n\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    crc32: function (input, crc) {\n        return crc32(input, crc);\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8encode: function (string) {\n        return utils.transformTo(\"string\", utf8.utf8encode(string));\n    },\n\n    /**\n     * @deprecated\n     * This method will be removed in a future version without replacement.\n     */\n    utf8decode: function (input) {\n        return utf8.utf8decode(input);\n    }\n};\nmodule.exports = out;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/object.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\nexports.base64 = true;\nexports.array = true;\nexports.string = true;\nexports.arraybuffer = typeof ArrayBuffer !== \"undefined\" && typeof Uint8Array !== \"undefined\";\n// contains true if JSZip can read/generate nodejs Buffer, false otherwise.\n// Browserify will provide a Buffer implementation for browsers, which is\n// an augmented Uint8Array (i.e., can be used as either Buffer or U8).\nexports.nodebuffer = typeof Buffer !== \"undefined\";\n// contains true if JSZip can read/generate Uint8Array, false otherwise.\nexports.uint8array = typeof Uint8Array !== \"undefined\";\n\nif (typeof ArrayBuffer === \"undefined\") {\n    exports.blob = false;\n}\nelse {\n    var buffer = new ArrayBuffer(0);\n    try {\n        exports.blob = new Blob([buffer], {\n            type: \"application/zip\"\n        }).size === 0;\n    }\n    catch (e) {\n        try {\n            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n            var builder = new Builder();\n            builder.append(buffer);\n            exports.blob = builder.getBlob('application/zip').size === 0;\n        }\n        catch (e) {\n            exports.blob = false;\n        }\n    }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/support.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\nvar support = require('./support');\nvar compressions = require('./compressions');\nvar nodeBuffer = require('./nodeBuffer');\n/**\n * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.\n * @param {string} str the string to transform.\n * @return {String} the binary string.\n */\nexports.string2binary = function(str) {\n    var result = \"\";\n    for (var i = 0; i < str.length; i++) {\n        result += String.fromCharCode(str.charCodeAt(i) & 0xff);\n    }\n    return result;\n};\nexports.arrayBuffer2Blob = function(buffer, mimeType) {\n    exports.checkSupport(\"blob\");\n\tmimeType = mimeType || 'application/zip';\n\n    try {\n        // Blob constructor\n        return new Blob([buffer], {\n            type: mimeType\n        });\n    }\n    catch (e) {\n\n        try {\n            // deprecated, browser only, old way\n            var Builder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n            var builder = new Builder();\n            builder.append(buffer);\n            return builder.getBlob(mimeType);\n        }\n        catch (e) {\n\n            // well, fuck ?!\n            throw new Error(\"Bug : can't construct the Blob.\");\n        }\n    }\n\n\n};\n/**\n * The identity function.\n * @param {Object} input the input.\n * @return {Object} the same input.\n */\nfunction identity(input) {\n    return input;\n}\n\n/**\n * Fill in an array with a string.\n * @param {String} str the string to use.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.\n */\nfunction stringToArrayLike(str, array) {\n    for (var i = 0; i < str.length; ++i) {\n        array[i] = str.charCodeAt(i) & 0xFF;\n    }\n    return array;\n}\n\n/**\n * Transform an array-like object to a string.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.\n * @return {String} the result.\n */\nfunction arrayLikeToString(array) {\n    // Performances notes :\n    // --------------------\n    // String.fromCharCode.apply(null, array) is the fastest, see\n    // see http://jsperf.com/converting-a-uint8array-to-a-string/2\n    // but the stack is limited (and we can get huge arrays !).\n    //\n    // result += String.fromCharCode(array[i]); generate too many strings !\n    //\n    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2\n    var chunk = 65536;\n    var result = [],\n        len = array.length,\n        type = exports.getTypeOf(array),\n        k = 0,\n        canUseApply = true;\n      try {\n         switch(type) {\n            case \"uint8array\":\n               String.fromCharCode.apply(null, new Uint8Array(0));\n               break;\n            case \"nodebuffer\":\n               String.fromCharCode.apply(null, nodeBuffer(0));\n               break;\n         }\n      } catch(e) {\n         canUseApply = false;\n      }\n\n      // no apply : slow and painful algorithm\n      // default browser on android 4.*\n      if (!canUseApply) {\n         var resultStr = \"\";\n         for(var i = 0; i < array.length;i++) {\n            resultStr += String.fromCharCode(array[i]);\n         }\n    return resultStr;\n    }\n    while (k < len && chunk > 1) {\n        try {\n            if (type === \"array\" || type === \"nodebuffer\") {\n                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));\n            }\n            else {\n                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));\n            }\n            k += chunk;\n        }\n        catch (e) {\n            chunk = Math.floor(chunk / 2);\n        }\n    }\n    return result.join(\"\");\n}\n\nexports.applyFromCharCode = arrayLikeToString;\n\n\n/**\n * Copy the data from an array-like to an other array-like.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.\n * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.\n * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.\n */\nfunction arrayLikeToArrayLike(arrayFrom, arrayTo) {\n    for (var i = 0; i < arrayFrom.length; i++) {\n        arrayTo[i] = arrayFrom[i];\n    }\n    return arrayTo;\n}\n\n// a matrix containing functions to transform everything into everything.\nvar transform = {};\n\n// string to ?\ntransform[\"string\"] = {\n    \"string\": identity,\n    \"array\": function(input) {\n        return stringToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"string\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return stringToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": function(input) {\n        return stringToArrayLike(input, nodeBuffer(input.length));\n    }\n};\n\n// array to ?\ntransform[\"array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": identity,\n    \"arraybuffer\": function(input) {\n        return (new Uint8Array(input)).buffer;\n    },\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(input);\n    }\n};\n\n// arraybuffer to ?\ntransform[\"arraybuffer\"] = {\n    \"string\": function(input) {\n        return arrayLikeToString(new Uint8Array(input));\n    },\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));\n    },\n    \"arraybuffer\": identity,\n    \"uint8array\": function(input) {\n        return new Uint8Array(input);\n    },\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(new Uint8Array(input));\n    }\n};\n\n// uint8array to ?\ntransform[\"uint8array\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return input.buffer;\n    },\n    \"uint8array\": identity,\n    \"nodebuffer\": function(input) {\n        return nodeBuffer(input);\n    }\n};\n\n// nodebuffer to ?\ntransform[\"nodebuffer\"] = {\n    \"string\": arrayLikeToString,\n    \"array\": function(input) {\n        return arrayLikeToArrayLike(input, new Array(input.length));\n    },\n    \"arraybuffer\": function(input) {\n        return transform[\"nodebuffer\"][\"uint8array\"](input).buffer;\n    },\n    \"uint8array\": function(input) {\n        return arrayLikeToArrayLike(input, new Uint8Array(input.length));\n    },\n    \"nodebuffer\": identity\n};\n\n/**\n * Transform an input into any type.\n * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.\n * If no output type is specified, the unmodified input will be returned.\n * @param {String} outputType the output type.\n * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.\n * @throws {Error} an Error if the browser doesn't support the requested output type.\n */\nexports.transformTo = function(outputType, input) {\n    if (!input) {\n        // undefined, null, etc\n        // an empty string won't harm.\n        input = \"\";\n    }\n    if (!outputType) {\n        return input;\n    }\n    exports.checkSupport(outputType);\n    var inputType = exports.getTypeOf(input);\n    var result = transform[inputType][outputType](input);\n    return result;\n};\n\n/**\n * Return the type of the input.\n * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.\n * @param {Object} input the input to identify.\n * @return {String} the (lowercase) type of the input.\n */\nexports.getTypeOf = function(input) {\n    if (typeof input === \"string\") {\n        return \"string\";\n    }\n    if (Object.prototype.toString.call(input) === \"[object Array]\") {\n        return \"array\";\n    }\n    if (support.nodebuffer && nodeBuffer.test(input)) {\n        return \"nodebuffer\";\n    }\n    if (support.uint8array && input instanceof Uint8Array) {\n        return \"uint8array\";\n    }\n    if (support.arraybuffer && input instanceof ArrayBuffer) {\n        return \"arraybuffer\";\n    }\n};\n\n/**\n * Throw an exception if the type is not supported.\n * @param {String} type the type to check.\n * @throws {Error} an Error if the browser doesn't support the requested type.\n */\nexports.checkSupport = function(type) {\n    var supported = support[type.toLowerCase()];\n    if (!supported) {\n        throw new Error(type + \" is not supported by this browser\");\n    }\n};\nexports.MAX_VALUE_16BITS = 65535;\nexports.MAX_VALUE_32BITS = -1; // well, \"\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\\xFF\" is parsed as -1\n\n/**\n * Prettify a string read as binary.\n * @param {string} str the string to prettify.\n * @return {string} a pretty string.\n */\nexports.pretty = function(str) {\n    var res = '',\n        code, i;\n    for (i = 0; i < (str || \"\").length; i++) {\n        code = str.charCodeAt(i);\n        res += '\\\\x' + (code < 16 ? \"0\" : \"\") + code.toString(16).toUpperCase();\n    }\n    return res;\n};\n\n/**\n * Find a compression registered in JSZip.\n * @param {string} compressionMethod the method magic to find.\n * @return {Object|null} the JSZip compression object, null if none found.\n */\nexports.findCompression = function(compressionMethod) {\n    for (var method in compressions) {\n        if (!compressions.hasOwnProperty(method)) {\n            continue;\n        }\n        if (compressions[method].magic === compressionMethod) {\n            return compressions[method];\n        }\n    }\n    return null;\n};\n/**\n* Cross-window, cross-Node-context regular expression detection\n* @param  {Object}  object Anything\n* @return {Boolean}        true if the object is a regular expression,\n* false otherwise\n*/\nexports.isRegExp = function (object) {\n    return Object.prototype.toString.call(object) === \"[object RegExp]\";\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/utils.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\nexports.STORE = {\n    magic: \"\\x00\\x00\",\n    compress: function(content, compressionOptions) {\n        return content; // no compression\n    },\n    uncompress: function(content) {\n        return content; // no compression\n    },\n    compressInputType: null,\n    uncompressInputType: null\n};\nexports.DEFLATE = require('./flate');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/compressions.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\nvar USE_TYPEDARRAY = (typeof Uint8Array !== 'undefined') && (typeof Uint16Array !== 'undefined') && (typeof Uint32Array !== 'undefined');\n\nvar pako = require(\"pako\");\nexports.uncompressInputType = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\nexports.compressInputType = USE_TYPEDARRAY ? \"uint8array\" : \"array\";\n\nexports.magic = \"\\x08\\x00\";\nexports.compress = function(input, compressionOptions) {\n    return pako.deflateRaw(input, {\n        level : compressionOptions.level || -1 // default compression\n    });\n};\nexports.uncompress =  function(input) {\n    return pako.inflateRaw(input);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/flate.js\n ** module id = 12\n ** module chunks = 0\n **/","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/index.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs+len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i=0, l=chunks.length; i<l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i=0; i<len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function(chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/utils/common.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nvar Deflate = function(options) {\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n};\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate alrorythm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/deflate.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg   = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only (s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH-1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH-1)) ? s.strstart : MIN_MATCH-1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH-1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size-MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH-1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1- s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length-1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH-1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart-1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH-1 ? s.strstart : MIN_MATCH-1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nvar Config = function (good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n};\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2*D_CODES+1) * 2);\n  this.bl_tree    = new utils.Buf16((2*BL_CODES+1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2*L_CODES+1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2*L_CODES+1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n/* =========================================================================\n * Copy the source state to the destination state\n */\n//function deflateCopy(dest, source) {\n//\n//}\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/deflate.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2*L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES+2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH-MIN_MATCH+1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nvar StaticTreeDesc = function (static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n};\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nvar TreeDesc = function(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n};\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short (s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c*2]/*.Code*/, tree[c*2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max]*2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max+1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n*2 +1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n*2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n-base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n*2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length-1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits+1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m*2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m*2 + 1]/*.Len*/)*tree[m*2]/*.Freq*/;\n        tree[m*2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS+1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits-1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n*2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n*2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS+1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES-1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1<<extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length-1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0 ; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1<<extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1<<(extra_dbits[code]-7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n*2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n*2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n*2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES+1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n*2 + 1]/*.Len*/ = 5;\n    static_dtree[n*2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS+1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc =new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n*2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n*2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK*2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n*2;\n  var _m2 = m*2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j+1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx*2] << 8) | (s.pending_buf[s.d_buf + lx*2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code+LITERALS+1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n*2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node*2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n*2 + 1]/*.Dad*/ = tree[m*2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code+1)*2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6*2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10*2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138*2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0*2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n+1)*2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count-3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count-3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count-11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES-1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex]*2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3*(max_blindex+1) + 5+5+4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes-257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes-1,   5);\n  send_bits(s, blcodes-4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank]*2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes-1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes-1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n*2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK<<1)+(last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES<<1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len+3+7) >>> 3;\n    static_lenb = (s.static_len+3+7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len+4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES<<1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES<<1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code+1, s.d_desc.max_code+1, max_blindex+1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc*2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc]+LITERALS+1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize-1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/trees.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/adler32.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n =0; n < 256; n++) {\n    c = n;\n    for (var k =0; k < 8; k++) {\n      c = ((c&1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc = crc ^ (-1);\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/crc32.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = {\n  '2':    'need dictionary',     /* Z_NEED_DICT       2  */\n  '1':    'stream end',          /* Z_STREAM_END      1  */\n  '0':    '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/messages.js\n ** module id = 20\n ** module chunks = 0\n **/","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [0]); } catch(__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch(__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q=0; q<256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n      c2 = str.charCodeAt(m_pos+1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i=0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function(buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function(str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i=0, len=buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len*2);\n\n  for (out=0, i=0; i<len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function(buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max-1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/utils/strings.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/zstream.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate.js');\nvar utils = require('./utils/common');\nvar strings = require('./utils/strings');\nvar c = require('./zlib/constants');\nvar msg = require('./zlib/messages');\nvar zstream = require('./zlib/zstream');\nvar gzheader = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nvar Inflate = function(options) {\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new gzheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n};\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function(data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n  } while ((strm.avail_in > 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function(chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function(status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/inflate.js\n ** module id = 23\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar inflate_fast = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction ZSWAP32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, {bits: 9});\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, {bits: 5});\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window,src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window,src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window,src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0 /*crc32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = ZSWAP32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = {bits: state.lenbits};\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = {bits: state.lenbits};\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = {bits: state.distbits};\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) -1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) -1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) -1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) -1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, ZSWAP32 returns signed too\n        if ((state.flags ? hold : ZSWAP32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/inflate.js\n ** module id = 24\n ** module chunks = 0\n **/","'use strict';\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  var window;                 /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/inffast.js\n ** module id = 25\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS+1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  var i=0;\n  /* process all codes and make table entries */\n  for (;;) {\n    i++;\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/inftrees.js\n ** module id = 26\n ** module chunks = 0\n **/","module.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/constants.js\n ** module id = 27\n ** module chunks = 0\n **/","'use strict';\n\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/~/pako/lib/zlib/gzheader.js\n ** module id = 28\n ** module chunks = 0\n **/","'use strict';\nmodule.exports = function(data, encoding){\n    return new Buffer(data, encoding);\n};\nmodule.exports.test = function(b){\n    return Buffer.isBuffer(b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/nodeBuffer.js\n ** module id = 29\n ** module chunks = 0\n **/","'use strict';\n\nvar utils = require('./utils');\n\nvar table = [\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\n    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\n    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\n    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\n    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\n    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\n    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\n    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\n    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\n    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\n    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\n    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\n    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\n    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\n    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\n    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\n    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\n    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\n    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\n    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\n    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\n    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\n    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\n    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\n    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\n    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\n    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\n    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\n    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\n    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\n    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\n    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\n    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\n    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\n    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\n    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\n    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\n    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\n    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\n    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D\n];\n\n/**\n *\n *  Javascript crc32\n *  http://www.webtoolkit.info/\n *\n */\nmodule.exports = function crc32(input, crc) {\n    if (typeof input === \"undefined\" || !input.length) {\n        return 0;\n    }\n\n    var isArray = utils.getTypeOf(input) !== \"string\";\n\n    if (typeof(crc) == \"undefined\") {\n        crc = 0;\n    }\n    var x = 0;\n    var y = 0;\n    var b = 0;\n\n    crc = crc ^ (-1);\n    for (var i = 0, iTop = input.length; i < iTop; i++) {\n        b = isArray ? input[i] : input.charCodeAt(i);\n        y = (crc ^ b) & 0xFF;\n        x = table[y];\n        crc = (crc >>> 8) ^ x;\n    }\n\n    return crc ^ (-1);\n};\n// vim: set shiftwidth=4 softtabstop=4:\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/crc32.js\n ** module id = 30\n ** module chunks = 0\n **/","'use strict';\nexports.LOCAL_FILE_HEADER = \"PK\\x03\\x04\";\nexports.CENTRAL_FILE_HEADER = \"PK\\x01\\x02\";\nexports.CENTRAL_DIRECTORY_END = \"PK\\x05\\x06\";\nexports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = \"PK\\x06\\x07\";\nexports.ZIP64_CENTRAL_DIRECTORY_END = \"PK\\x06\\x06\";\nexports.DATA_DESCRIPTOR = \"PK\\x07\\x08\";\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/signature.js\n ** module id = 31\n ** module chunks = 0\n **/","'use strict';\nexports.base64 = false;\nexports.binary = false;\nexports.dir = false;\nexports.createFolders = false;\nexports.date = null;\nexports.compression = null;\nexports.compressionOptions = null;\nexports.comment = null;\nexports.unixPermissions = null;\nexports.dosPermissions = null;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/defaults.js\n ** module id = 32\n ** module chunks = 0\n **/","'use strict';\nfunction CompressedObject() {\n    this.compressedSize = 0;\n    this.uncompressedSize = 0;\n    this.crc32 = 0;\n    this.compressionMethod = null;\n    this.compressedContent = null;\n}\n\nCompressedObject.prototype = {\n    /**\n     * Return the decompressed content in an unspecified format.\n     * The format will depend on the decompressor.\n     * @return {Object} the decompressed content.\n     */\n    getContent: function() {\n        return null; // see implementation\n    },\n    /**\n     * Return the compressed content in an unspecified format.\n     * The format will depend on the compressed conten source.\n     * @return {Object} the compressed content.\n     */\n    getCompressedContent: function() {\n        return null; // see implementation\n    }\n};\nmodule.exports = CompressedObject;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/compressedObject.js\n ** module id = 33\n ** module chunks = 0\n **/","'use strict';\n\nvar utils = require('./utils');\nvar support = require('./support');\nvar nodeBuffer = require('./nodeBuffer');\n\n/**\n * The following functions come from pako, from pako/lib/utils/strings\n * released under the MIT license, see pako https://github.com/nodeca/pako/\n */\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new Array(256);\nfor (var i=0; i<256; i++) {\n  _utf8len[i] = (i >= 252 ? 6 : i >= 248 ? 5 : i >= 240 ? 4 : i >= 224 ? 3 : i >= 192 ? 2 : 1);\n}\n_utf8len[254]=_utf8len[254]=1; // Invalid sequence start\n\n// convert string to array (typed, when possible)\nvar string2buf = function (str) {\n    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n    // count binary size\n    for (m_pos = 0; m_pos < str_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n    }\n\n    // allocate buffer\n    if (support.uint8array) {\n        buf = new Uint8Array(buf_len);\n    } else {\n        buf = new Array(buf_len);\n    }\n\n    // convert\n    for (i=0, m_pos = 0; i < buf_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos+1 < str_len)) {\n            c2 = str.charCodeAt(m_pos+1);\n            if ((c2 & 0xfc00) === 0xdc00) {\n                c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n                m_pos++;\n            }\n        }\n        if (c < 0x80) {\n            /* one byte */\n            buf[i++] = c;\n        } else if (c < 0x800) {\n            /* two bytes */\n            buf[i++] = 0xC0 | (c >>> 6);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else if (c < 0x10000) {\n            /* three bytes */\n            buf[i++] = 0xE0 | (c >>> 12);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        } else {\n            /* four bytes */\n            buf[i++] = 0xf0 | (c >>> 18);\n            buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n            buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n            buf[i++] = 0x80 | (c & 0x3f);\n        }\n    }\n\n    return buf;\n};\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = function(buf, max) {\n    var pos;\n\n    max = max || buf.length;\n    if (max > buf.length) { max = buf.length; }\n\n    // go back from last position, until start of sequence found\n    pos = max-1;\n    while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n    // Fuckup - very small and broken sequence,\n    // return max, because we should return something anyway.\n    if (pos < 0) { return max; }\n\n    // If we came to start of buffer - that means vuffer is too small,\n    // return max too.\n    if (pos === 0) { return max; }\n\n    return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n// convert array to string\nvar buf2string = function (buf) {\n    var str, i, out, c, c_len;\n    var len = buf.length;\n\n    // Reserve max possible length (2 words per char)\n    // NB: by unknown reasons, Array is significantly faster for\n    //     String.fromCharCode.apply than Uint16Array.\n    var utf16buf = new Array(len*2);\n\n    for (out=0, i=0; i<len;) {\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len-1; continue; }\n\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while (c_len > 1 && i < len) {\n            c = (c << 6) | (buf[i++] & 0x3f);\n            c_len--;\n        }\n\n        // terminated by end of string?\n        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n        if (c < 0x10000) {\n            utf16buf[out++] = c;\n        } else {\n            c -= 0x10000;\n            utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n            utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n        }\n    }\n\n    // shrinkBuf(utf16buf, out)\n    if (utf16buf.length !== out) {\n        if(utf16buf.subarray) {\n            utf16buf = utf16buf.subarray(0, out);\n        } else {\n            utf16buf.length = out;\n        }\n    }\n\n    // return String.fromCharCode.apply(null, utf16buf);\n    return utils.applyFromCharCode(utf16buf);\n};\n\n\n// That's all for the pako functions.\n\n\n/**\n * Transform a javascript string into an array (typed if possible) of bytes,\n * UTF-8 encoded.\n * @param {String} str the string to encode\n * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.\n */\nexports.utf8encode = function utf8encode(str) {\n    if (support.nodebuffer) {\n        return nodeBuffer(str, \"utf-8\");\n    }\n\n    return string2buf(str);\n};\n\n\n/**\n * Transform a bytes array (or a representation) representing an UTF-8 encoded\n * string into a javascript string.\n * @param {Array|Uint8Array|Buffer} buf the data de decode\n * @return {String} the decoded string.\n */\nexports.utf8decode = function utf8decode(buf) {\n    if (support.nodebuffer) {\n        return utils.transformTo(\"nodebuffer\", buf).toString(\"utf-8\");\n    }\n\n    buf = utils.transformTo(support.uint8array ? \"uint8array\" : \"array\", buf);\n\n    // return buf2string(buf);\n    // Chrome prefers to work with \"small\" chunks of data\n    // for the method buf2string.\n    // Firefox and Chrome has their own shortcut, IE doesn't seem to really care.\n    var result = [], k = 0, len = buf.length, chunk = 65536;\n    while (k < len) {\n        var nextBoundary = utf8border(buf, Math.min(k + chunk, len));\n        if (support.uint8array) {\n            result.push(buf2string(buf.subarray(k, nextBoundary)));\n        } else {\n            result.push(buf2string(buf.slice(k, nextBoundary)));\n        }\n        k = nextBoundary;\n    }\n    return result.join(\"\");\n\n};\n// vim: set shiftwidth=4 softtabstop=4:\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/utf8.js\n ** module id = 34\n ** module chunks = 0\n **/","'use strict';\n\nvar utils = require('./utils');\n\n/**\n * An object to write any content to a string.\n * @constructor\n */\nvar StringWriter = function() {\n    this.data = [];\n};\nStringWriter.prototype = {\n    /**\n     * Append any content to the current string.\n     * @param {Object} input the content to add.\n     */\n    append: function(input) {\n        input = utils.transformTo(\"string\", input);\n        this.data.push(input);\n    },\n    /**\n     * Finalize the construction an return the result.\n     * @return {string} the generated string.\n     */\n    finalize: function() {\n        return this.data.join(\"\");\n    }\n};\n\nmodule.exports = StringWriter;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/stringWriter.js\n ** module id = 35\n ** module chunks = 0\n **/","'use strict';\n\nvar utils = require('./utils');\n\n/**\n * An object to write any content to an Uint8Array.\n * @constructor\n * @param {number} length The length of the array.\n */\nvar Uint8ArrayWriter = function(length) {\n    this.data = new Uint8Array(length);\n    this.index = 0;\n};\nUint8ArrayWriter.prototype = {\n    /**\n     * Append any content to the current array.\n     * @param {Object} input the content to add.\n     */\n    append: function(input) {\n        if (input.length !== 0) {\n            // with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"\n            input = utils.transformTo(\"uint8array\", input);\n            this.data.set(input, this.index);\n            this.index += input.length;\n        }\n    },\n    /**\n     * Finalize the construction an return the result.\n     * @return {Uint8Array} the generated array.\n     */\n    finalize: function() {\n        return this.data;\n    }\n};\n\nmodule.exports = Uint8ArrayWriter;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/uint8ArrayWriter.js\n ** module id = 36\n ** module chunks = 0\n **/","'use strict';\nvar base64 = require('./base64');\nvar ZipEntries = require('./zipEntries');\nmodule.exports = function(data, options) {\n    var files, zipEntries, i, input;\n    options = options || {};\n    if (options.base64) {\n        data = base64.decode(data);\n    }\n\n    zipEntries = new ZipEntries(data, options);\n    files = zipEntries.files;\n    for (i = 0; i < files.length; i++) {\n        input = files[i];\n        this.file(input.fileName, input.decompressed, {\n            binary: true,\n            optimizedBinaryString: true,\n            date: input.date,\n            dir: input.dir,\n            comment : input.fileComment.length ? input.fileComment : null,\n            unixPermissions : input.unixPermissions,\n            dosPermissions : input.dosPermissions,\n            createFolders: options.createFolders\n        });\n    }\n    if (zipEntries.zipComment.length) {\n        this.comment = zipEntries.zipComment;\n    }\n\n    return this;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/load.js\n ** module id = 37\n ** module chunks = 0\n **/","'use strict';\nvar StringReader = require('./stringReader');\nvar NodeBufferReader = require('./nodeBufferReader');\nvar Uint8ArrayReader = require('./uint8ArrayReader');\nvar utils = require('./utils');\nvar sig = require('./signature');\nvar ZipEntry = require('./zipEntry');\nvar support = require('./support');\nvar jszipProto = require('./object');\n//  class ZipEntries {{{\n/**\n * All the entries in the zip file.\n * @constructor\n * @param {String|ArrayBuffer|Uint8Array} data the binary stream to load.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntries(data, loadOptions) {\n    this.files = [];\n    this.loadOptions = loadOptions;\n    if (data) {\n        this.load(data);\n    }\n}\nZipEntries.prototype = {\n    /**\n     * Check that the reader is on the speficied signature.\n     * @param {string} expectedSignature the expected signature.\n     * @throws {Error} if it is an other signature.\n     */\n    checkSignature: function(expectedSignature) {\n        var signature = this.reader.readString(4);\n        if (signature !== expectedSignature) {\n            throw new Error(\"Corrupted zip or bug : unexpected signature \" + \"(\" + utils.pretty(signature) + \", expected \" + utils.pretty(expectedSignature) + \")\");\n        }\n    },\n    /**\n     * Read the end of the central directory.\n     */\n    readBlockEndOfCentral: function() {\n        this.diskNumber = this.reader.readInt(2);\n        this.diskWithCentralDirStart = this.reader.readInt(2);\n        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);\n        this.centralDirRecords = this.reader.readInt(2);\n        this.centralDirSize = this.reader.readInt(4);\n        this.centralDirOffset = this.reader.readInt(4);\n\n        this.zipCommentLength = this.reader.readInt(2);\n        // warning : the encoding depends of the system locale\n        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.\n        // On a windows machine, this field is encoded with the localized windows code page.\n        this.zipComment = this.reader.readString(this.zipCommentLength);\n        // To get consistent behavior with the generation part, we will assume that\n        // this is utf8 encoded.\n        this.zipComment = jszipProto.utf8decode(this.zipComment);\n    },\n    /**\n     * Read the end of the Zip 64 central directory.\n     * Not merged with the method readEndOfCentral :\n     * The end of central can coexist with its Zip64 brother,\n     * I don't want to read the wrong number of bytes !\n     */\n    readBlockZip64EndOfCentral: function() {\n        this.zip64EndOfCentralSize = this.reader.readInt(8);\n        this.versionMadeBy = this.reader.readString(2);\n        this.versionNeeded = this.reader.readInt(2);\n        this.diskNumber = this.reader.readInt(4);\n        this.diskWithCentralDirStart = this.reader.readInt(4);\n        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);\n        this.centralDirRecords = this.reader.readInt(8);\n        this.centralDirSize = this.reader.readInt(8);\n        this.centralDirOffset = this.reader.readInt(8);\n\n        this.zip64ExtensibleData = {};\n        var extraDataSize = this.zip64EndOfCentralSize - 44,\n            index = 0,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n        while (index < extraDataSize) {\n            extraFieldId = this.reader.readInt(2);\n            extraFieldLength = this.reader.readInt(4);\n            extraFieldValue = this.reader.readString(extraFieldLength);\n            this.zip64ExtensibleData[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Read the end of the Zip 64 central directory locator.\n     */\n    readBlockZip64EndOfCentralLocator: function() {\n        this.diskWithZip64CentralDirStart = this.reader.readInt(4);\n        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);\n        this.disksCount = this.reader.readInt(4);\n        if (this.disksCount > 1) {\n            throw new Error(\"Multi-volumes zip are not supported\");\n        }\n    },\n    /**\n     * Read the local files, based on the offset read in the central part.\n     */\n    readLocalFiles: function() {\n        var i, file;\n        for (i = 0; i < this.files.length; i++) {\n            file = this.files[i];\n            this.reader.setIndex(file.localHeaderOffset);\n            this.checkSignature(sig.LOCAL_FILE_HEADER);\n            file.readLocalPart(this.reader);\n            file.handleUTF8();\n            file.processAttributes();\n        }\n    },\n    /**\n     * Read the central directory.\n     */\n    readCentralDir: function() {\n        var file;\n\n        this.reader.setIndex(this.centralDirOffset);\n        while (this.reader.readString(4) === sig.CENTRAL_FILE_HEADER) {\n            file = new ZipEntry({\n                zip64: this.zip64\n            }, this.loadOptions);\n            file.readCentralPart(this.reader);\n            this.files.push(file);\n        }\n    },\n    /**\n     * Read the end of central directory.\n     */\n    readEndOfCentral: function() {\n        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);\n        if (offset === -1) {\n            // Check if the content is a truncated zip or complete garbage.\n            // A \"LOCAL_FILE_HEADER\" is not required at the beginning (auto\n            // extractible zip for example) but it can give a good hint.\n            // If an ajax request was used without responseType, we will also\n            // get unreadable data.\n            var isGarbage = true;\n            try {\n                this.reader.setIndex(0);\n                this.checkSignature(sig.LOCAL_FILE_HEADER);\n                isGarbage = false;\n            } catch (e) {}\n\n            if (isGarbage) {\n                throw new Error(\"Can't find end of central directory : is this a zip file ? \" +\n                                \"If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html\");\n            } else {\n                throw new Error(\"Corrupted zip : can't find end of central directory\");\n            }\n        }\n        this.reader.setIndex(offset);\n        this.checkSignature(sig.CENTRAL_DIRECTORY_END);\n        this.readBlockEndOfCentral();\n\n\n        /* extract from the zip spec :\n            4)  If one of the fields in the end of central directory\n                record is too small to hold required data, the field\n                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the\n                ZIP64 format record should be created.\n            5)  The end of central directory record and the\n                Zip64 end of central directory locator record must\n                reside on the same disk when splitting or spanning\n                an archive.\n         */\n        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {\n            this.zip64 = true;\n\n            /*\n            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from\n            the zip file can fit into a 32bits integer. This cannot be solved : Javascript represents\n            all numbers as 64-bit double precision IEEE 754 floating point numbers.\n            So, we have 53bits for integers and bitwise operations treat everything as 32bits.\n            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators\n            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5\n            */\n\n            // should look for a zip64 EOCD locator\n            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n            if (offset === -1) {\n                throw new Error(\"Corrupted zip : can't find the ZIP64 end of central directory locator\");\n            }\n            this.reader.setIndex(offset);\n            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);\n            this.readBlockZip64EndOfCentralLocator();\n\n            // now the zip64 EOCD record\n            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);\n            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);\n            this.readBlockZip64EndOfCentral();\n        }\n    },\n    prepareReader: function(data) {\n        var type = utils.getTypeOf(data);\n        if (type === \"string\" && !support.uint8array) {\n            this.reader = new StringReader(data, this.loadOptions.optimizedBinaryString);\n        }\n        else if (type === \"nodebuffer\") {\n            this.reader = new NodeBufferReader(data);\n        }\n        else {\n            this.reader = new Uint8ArrayReader(utils.transformTo(\"uint8array\", data));\n        }\n    },\n    /**\n     * Read a zip file and create ZipEntries.\n     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.\n     */\n    load: function(data) {\n        this.prepareReader(data);\n        this.readEndOfCentral();\n        this.readCentralDir();\n        this.readLocalFiles();\n    }\n};\n// }}} end of ZipEntries\nmodule.exports = ZipEntries;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/zipEntries.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\nvar DataReader = require('./dataReader');\nvar utils = require('./utils');\n\nfunction StringReader(data, optimizedBinaryString) {\n    this.data = data;\n    if (!optimizedBinaryString) {\n        this.data = utils.string2binary(this.data);\n    }\n    this.length = this.data.length;\n    this.index = 0;\n}\nStringReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\nStringReader.prototype.byteAt = function(i) {\n    return this.data.charCodeAt(i);\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\nStringReader.prototype.lastIndexOfSignature = function(sig) {\n    return this.data.lastIndexOf(sig);\n};\n/**\n * @see DataReader.readData\n */\nStringReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    // this will work because the constructor applied the \"& 0xff\" mask.\n    var result = this.data.slice(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = StringReader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/stringReader.js\n ** module id = 39\n ** module chunks = 0\n **/","'use strict';\nvar utils = require('./utils');\n\nfunction DataReader(data) {\n    this.data = null; // type : see implementation\n    this.length = 0;\n    this.index = 0;\n}\nDataReader.prototype = {\n    /**\n     * Check that the offset will not go too far.\n     * @param {string} offset the additional offset to check.\n     * @throws {Error} an Error if the offset is out of bounds.\n     */\n    checkOffset: function(offset) {\n        this.checkIndex(this.index + offset);\n    },\n    /**\n     * Check that the specifed index will not be too far.\n     * @param {string} newIndex the index to check.\n     * @throws {Error} an Error if the index is out of bounds.\n     */\n    checkIndex: function(newIndex) {\n        if (this.length < newIndex || newIndex < 0) {\n            throw new Error(\"End of data reached (data length = \" + this.length + \", asked index = \" + (newIndex) + \"). Corrupted zip ?\");\n        }\n    },\n    /**\n     * Change the index.\n     * @param {number} newIndex The new index.\n     * @throws {Error} if the new index is out of the data.\n     */\n    setIndex: function(newIndex) {\n        this.checkIndex(newIndex);\n        this.index = newIndex;\n    },\n    /**\n     * Skip the next n bytes.\n     * @param {number} n the number of bytes to skip.\n     * @throws {Error} if the new index is out of the data.\n     */\n    skip: function(n) {\n        this.setIndex(this.index + n);\n    },\n    /**\n     * Get the byte at the specified index.\n     * @param {number} i the index to use.\n     * @return {number} a byte.\n     */\n    byteAt: function(i) {\n        // see implementations\n    },\n    /**\n     * Get the next number with a given byte size.\n     * @param {number} size the number of bytes to read.\n     * @return {number} the corresponding number.\n     */\n    readInt: function(size) {\n        var result = 0,\n            i;\n        this.checkOffset(size);\n        for (i = this.index + size - 1; i >= this.index; i--) {\n            result = (result << 8) + this.byteAt(i);\n        }\n        this.index += size;\n        return result;\n    },\n    /**\n     * Get the next string with a given byte size.\n     * @param {number} size the number of bytes to read.\n     * @return {string} the corresponding string.\n     */\n    readString: function(size) {\n        return utils.transformTo(\"string\", this.readData(size));\n    },\n    /**\n     * Get raw data without conversion, <size> bytes.\n     * @param {number} size the number of bytes to read.\n     * @return {Object} the raw data, implementation specific.\n     */\n    readData: function(size) {\n        // see implementations\n    },\n    /**\n     * Find the last occurence of a zip signature (4 bytes).\n     * @param {string} sig the signature to find.\n     * @return {number} the index of the last occurence, -1 if not found.\n     */\n    lastIndexOfSignature: function(sig) {\n        // see implementations\n    },\n    /**\n     * Get the next date.\n     * @return {Date} the date.\n     */\n    readDate: function() {\n        var dostime = this.readInt(4);\n        return new Date(\n        ((dostime >> 25) & 0x7f) + 1980, // year\n        ((dostime >> 21) & 0x0f) - 1, // month\n        (dostime >> 16) & 0x1f, // day\n        (dostime >> 11) & 0x1f, // hour\n        (dostime >> 5) & 0x3f, // minute\n        (dostime & 0x1f) << 1); // second\n    }\n};\nmodule.exports = DataReader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/dataReader.js\n ** module id = 40\n ** module chunks = 0\n **/","'use strict';\nvar Uint8ArrayReader = require('./uint8ArrayReader');\n\nfunction NodeBufferReader(data) {\n    this.data = data;\n    this.length = this.data.length;\n    this.index = 0;\n}\nNodeBufferReader.prototype = new Uint8ArrayReader();\n\n/**\n * @see DataReader.readData\n */\nNodeBufferReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    var result = this.data.slice(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = NodeBufferReader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/nodeBufferReader.js\n ** module id = 41\n ** module chunks = 0\n **/","'use strict';\nvar DataReader = require('./dataReader');\n\nfunction Uint8ArrayReader(data) {\n    if (data) {\n        this.data = data;\n        this.length = this.data.length;\n        this.index = 0;\n    }\n}\nUint8ArrayReader.prototype = new DataReader();\n/**\n * @see DataReader.byteAt\n */\nUint8ArrayReader.prototype.byteAt = function(i) {\n    return this.data[i];\n};\n/**\n * @see DataReader.lastIndexOfSignature\n */\nUint8ArrayReader.prototype.lastIndexOfSignature = function(sig) {\n    var sig0 = sig.charCodeAt(0),\n        sig1 = sig.charCodeAt(1),\n        sig2 = sig.charCodeAt(2),\n        sig3 = sig.charCodeAt(3);\n    for (var i = this.length - 4; i >= 0; --i) {\n        if (this.data[i] === sig0 && this.data[i + 1] === sig1 && this.data[i + 2] === sig2 && this.data[i + 3] === sig3) {\n            return i;\n        }\n    }\n\n    return -1;\n};\n/**\n * @see DataReader.readData\n */\nUint8ArrayReader.prototype.readData = function(size) {\n    this.checkOffset(size);\n    if(size === 0) {\n        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].\n        return new Uint8Array(0);\n    }\n    var result = this.data.subarray(this.index, this.index + size);\n    this.index += size;\n    return result;\n};\nmodule.exports = Uint8ArrayReader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/uint8ArrayReader.js\n ** module id = 42\n ** module chunks = 0\n **/","'use strict';\nvar StringReader = require('./stringReader');\nvar utils = require('./utils');\nvar CompressedObject = require('./compressedObject');\nvar jszipProto = require('./object');\n\nvar MADE_BY_DOS = 0x00;\nvar MADE_BY_UNIX = 0x03;\n\n// class ZipEntry {{{\n/**\n * An entry in the zip file.\n * @constructor\n * @param {Object} options Options of the current file.\n * @param {Object} loadOptions Options for loading the stream.\n */\nfunction ZipEntry(options, loadOptions) {\n    this.options = options;\n    this.loadOptions = loadOptions;\n}\nZipEntry.prototype = {\n    /**\n     * say if the file is encrypted.\n     * @return {boolean} true if the file is encrypted, false otherwise.\n     */\n    isEncrypted: function() {\n        // bit 1 is set\n        return (this.bitFlag & 0x0001) === 0x0001;\n    },\n    /**\n     * say if the file has utf-8 filename/comment.\n     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.\n     */\n    useUTF8: function() {\n        // bit 11 is set\n        return (this.bitFlag & 0x0800) === 0x0800;\n    },\n    /**\n     * Prepare the function used to generate the compressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @return {Function} the callback to get the compressed content (the type depends of the DataReader class).\n     */\n    prepareCompressedContent: function(reader, from, length) {\n        return function() {\n            var previousIndex = reader.index;\n            reader.setIndex(from);\n            var compressedFileData = reader.readData(length);\n            reader.setIndex(previousIndex);\n\n            return compressedFileData;\n        };\n    },\n    /**\n     * Prepare the function used to generate the uncompressed content from this ZipFile.\n     * @param {DataReader} reader the reader to use.\n     * @param {number} from the offset from where we should read the data.\n     * @param {number} length the length of the data to read.\n     * @param {JSZip.compression} compression the compression used on this file.\n     * @param {number} uncompressedSize the uncompressed size to expect.\n     * @return {Function} the callback to get the uncompressed content (the type depends of the DataReader class).\n     */\n    prepareContent: function(reader, from, length, compression, uncompressedSize) {\n        return function() {\n\n            var compressedFileData = utils.transformTo(compression.uncompressInputType, this.getCompressedContent());\n            var uncompressedFileData = compression.uncompress(compressedFileData);\n\n            if (uncompressedFileData.length !== uncompressedSize) {\n                throw new Error(\"Bug : uncompressed data size mismatch\");\n            }\n\n            return uncompressedFileData;\n        };\n    },\n    /**\n     * Read the local part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readLocalPart: function(reader) {\n        var compression, localExtraFieldsLength;\n\n        // we already know everything from the central dir !\n        // If the central dir data are false, we are doomed.\n        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.\n        // The less data we get here, the more reliable this should be.\n        // Let's skip the whole header and dash to the data !\n        reader.skip(22);\n        // in some zip created on windows, the filename stored in the central dir contains \\ instead of /.\n        // Strangely, the filename here is OK.\n        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes\n        // or APPNOTE#4.4.17.1, \"All slashes MUST be forward slashes '/'\") but there are a lot of bad zip generators...\n        // Search \"unzip mismatching \"local\" filename continuing with \"central\" filename version\" on\n        // the internet.\n        //\n        // I think I see the logic here : the central directory is used to display\n        // content and the local directory is used to extract the files. Mixing / and \\\n        // may be used to display \\ to windows users and use / when extracting the files.\n        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394\n        this.fileNameLength = reader.readInt(2);\n        localExtraFieldsLength = reader.readInt(2); // can't be sure this will be the same as the central dir\n        this.fileName = reader.readString(this.fileNameLength);\n        reader.skip(localExtraFieldsLength);\n\n        if (this.compressedSize == -1 || this.uncompressedSize == -1) {\n            throw new Error(\"Bug or corrupted zip : didn't get enough informations from the central directory \" + \"(compressedSize == -1 || uncompressedSize == -1)\");\n        }\n\n        compression = utils.findCompression(this.compressionMethod);\n        if (compression === null) { // no compression found\n            throw new Error(\"Corrupted zip : compression \" + utils.pretty(this.compressionMethod) + \" unknown (inner file : \" + this.fileName + \")\");\n        }\n        this.decompressed = new CompressedObject();\n        this.decompressed.compressedSize = this.compressedSize;\n        this.decompressed.uncompressedSize = this.uncompressedSize;\n        this.decompressed.crc32 = this.crc32;\n        this.decompressed.compressionMethod = this.compressionMethod;\n        this.decompressed.getCompressedContent = this.prepareCompressedContent(reader, reader.index, this.compressedSize, compression);\n        this.decompressed.getContent = this.prepareContent(reader, reader.index, this.compressedSize, compression, this.uncompressedSize);\n\n        // we need to compute the crc32...\n        if (this.loadOptions.checkCRC32) {\n            this.decompressed = utils.transformTo(\"string\", this.decompressed.getContent());\n            if (jszipProto.crc32(this.decompressed) !== this.crc32) {\n                throw new Error(\"Corrupted zip : CRC32 mismatch\");\n            }\n        }\n    },\n\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readCentralPart: function(reader) {\n        this.versionMadeBy = reader.readInt(2);\n        this.versionNeeded = reader.readInt(2);\n        this.bitFlag = reader.readInt(2);\n        this.compressionMethod = reader.readString(2);\n        this.date = reader.readDate();\n        this.crc32 = reader.readInt(4);\n        this.compressedSize = reader.readInt(4);\n        this.uncompressedSize = reader.readInt(4);\n        this.fileNameLength = reader.readInt(2);\n        this.extraFieldsLength = reader.readInt(2);\n        this.fileCommentLength = reader.readInt(2);\n        this.diskNumberStart = reader.readInt(2);\n        this.internalFileAttributes = reader.readInt(2);\n        this.externalFileAttributes = reader.readInt(4);\n        this.localHeaderOffset = reader.readInt(4);\n\n        if (this.isEncrypted()) {\n            throw new Error(\"Encrypted zip are not supported\");\n        }\n\n        this.fileName = reader.readString(this.fileNameLength);\n        this.readExtraFields(reader);\n        this.parseZIP64ExtraField(reader);\n        this.fileComment = reader.readString(this.fileCommentLength);\n    },\n\n    /**\n     * Parse the external file attributes and get the unix/dos permissions.\n     */\n    processAttributes: function () {\n        this.unixPermissions = null;\n        this.dosPermissions = null;\n        var madeBy = this.versionMadeBy >> 8;\n\n        // Check if we have the DOS directory flag set.\n        // We look for it in the DOS and UNIX permissions\n        // but some unknown platform could set it as a compatibility flag.\n        this.dir = this.externalFileAttributes & 0x0010 ? true : false;\n\n        if(madeBy === MADE_BY_DOS) {\n            // first 6 bits (0 to 5)\n            this.dosPermissions = this.externalFileAttributes & 0x3F;\n        }\n\n        if(madeBy === MADE_BY_UNIX) {\n            this.unixPermissions = (this.externalFileAttributes >> 16) & 0xFFFF;\n            // the octal permissions are in (this.unixPermissions & 0x01FF).toString(8);\n        }\n\n        // fail safe : if the name ends with a / it probably means a folder\n        if (!this.dir && this.fileName.slice(-1) === '/') {\n            this.dir = true;\n        }\n    },\n\n    /**\n     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.\n     * @param {DataReader} reader the reader to use.\n     */\n    parseZIP64ExtraField: function(reader) {\n\n        if (!this.extraFields[0x0001]) {\n            return;\n        }\n\n        // should be something, preparing the extra reader\n        var extraReader = new StringReader(this.extraFields[0x0001].value);\n\n        // I really hope that these 64bits integer can fit in 32 bits integer, because js\n        // won't let us have more.\n        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {\n            this.uncompressedSize = extraReader.readInt(8);\n        }\n        if (this.compressedSize === utils.MAX_VALUE_32BITS) {\n            this.compressedSize = extraReader.readInt(8);\n        }\n        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {\n            this.localHeaderOffset = extraReader.readInt(8);\n        }\n        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {\n            this.diskNumberStart = extraReader.readInt(4);\n        }\n    },\n    /**\n     * Read the central part of a zip file and add the info in this object.\n     * @param {DataReader} reader the reader to use.\n     */\n    readExtraFields: function(reader) {\n        var start = reader.index,\n            extraFieldId,\n            extraFieldLength,\n            extraFieldValue;\n\n        this.extraFields = this.extraFields || {};\n\n        while (reader.index < start + this.extraFieldsLength) {\n            extraFieldId = reader.readInt(2);\n            extraFieldLength = reader.readInt(2);\n            extraFieldValue = reader.readString(extraFieldLength);\n\n            this.extraFields[extraFieldId] = {\n                id: extraFieldId,\n                length: extraFieldLength,\n                value: extraFieldValue\n            };\n        }\n    },\n    /**\n     * Apply an UTF8 transformation if needed.\n     */\n    handleUTF8: function() {\n        if (this.useUTF8()) {\n            this.fileName = jszipProto.utf8decode(this.fileName);\n            this.fileComment = jszipProto.utf8decode(this.fileComment);\n        } else {\n            var upath = this.findExtraFieldUnicodePath();\n            if (upath !== null) {\n                this.fileName = upath;\n            }\n            var ucomment = this.findExtraFieldUnicodeComment();\n            if (ucomment !== null) {\n                this.fileComment = ucomment;\n            }\n        }\n    },\n\n    /**\n     * Find the unicode path declared in the extra field, if any.\n     * @return {String} the unicode path, null otherwise.\n     */\n    findExtraFieldUnicodePath: function() {\n        var upathField = this.extraFields[0x7075];\n        if (upathField) {\n            var extraReader = new StringReader(upathField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the filename changed, this field is out of date.\n            if (jszipProto.crc32(this.fileName) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(upathField.length - 5));\n        }\n        return null;\n    },\n\n    /**\n     * Find the unicode comment declared in the extra field, if any.\n     * @return {String} the unicode comment, null otherwise.\n     */\n    findExtraFieldUnicodeComment: function() {\n        var ucommentField = this.extraFields[0x6375];\n        if (ucommentField) {\n            var extraReader = new StringReader(ucommentField.value);\n\n            // wrong version\n            if (extraReader.readInt(1) !== 1) {\n                return null;\n            }\n\n            // the crc of the comment changed, this field is out of date.\n            if (jszipProto.crc32(this.fileComment) !== extraReader.readInt(4)) {\n                return null;\n            }\n\n            return jszipProto.utf8decode(extraReader.readString(ucommentField.length - 5));\n        }\n        return null;\n    }\n};\nmodule.exports = ZipEntry;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/zipEntry.js\n ** module id = 43\n ** module chunks = 0\n **/","'use strict';\nvar utils = require('./utils');\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.string2binary = function(str) {\n    return utils.string2binary(str);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.string2Uint8Array = function(str) {\n    return utils.transformTo(\"uint8array\", str);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.uint8Array2String = function(array) {\n    return utils.transformTo(\"string\", array);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.string2Blob = function(str) {\n    var buffer = utils.transformTo(\"arraybuffer\", str);\n    return utils.arrayBuffer2Blob(buffer);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.arrayBuffer2Blob = function(buffer) {\n    return utils.arrayBuffer2Blob(buffer);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.transformTo = function(outputType, input) {\n    return utils.transformTo(outputType, input);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.getTypeOf = function(input) {\n    return utils.getTypeOf(input);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.checkSupport = function(type) {\n    return utils.checkSupport(type);\n};\n\n/**\n * @deprecated\n * This value will be removed in a future version without replacement.\n */\nexports.MAX_VALUE_16BITS = utils.MAX_VALUE_16BITS;\n\n/**\n * @deprecated\n * This value will be removed in a future version without replacement.\n */\nexports.MAX_VALUE_32BITS = utils.MAX_VALUE_32BITS;\n\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.pretty = function(str) {\n    return utils.pretty(str);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.findCompression = function(compressionMethod) {\n    return utils.findCompression(compressionMethod);\n};\n\n/**\n * @deprecated\n * This function will be removed in a future version without replacement.\n */\nexports.isRegExp = function (object) {\n    return utils.isRegExp(object);\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/jszip/lib/deprecatedPublicUtils.js\n ** module id = 44\n ** module chunks = 0\n **/","var rng = require('./rng')\n\nfunction error () {\n  var m = [].slice.call(arguments).join(' ')\n  throw new Error([\n    m,\n    'we accept pull requests',\n    'http://github.com/dominictarr/crypto-browserify'\n    ].join('\\n'))\n}\n\nexports.createHash = require('./create-hash')\n\nexports.createHmac = require('./create-hmac')\n\nexports.randomBytes = function(size, callback) {\n  if (callback && callback.call) {\n    try {\n      callback.call(this, undefined, new Buffer(rng(size)))\n    } catch (err) { callback(err) }\n  } else {\n    return new Buffer(rng(size))\n  }\n}\n\nfunction each(a, f) {\n  for(var i in a)\n    f(a[i], i)\n}\n\nexports.getHashes = function () {\n  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']\n}\n\nvar p = require('./pbkdf2')(exports)\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\neach(['createCredentials'\n, 'createCipher'\n, 'createCipheriv'\n, 'createDecipher'\n, 'createDecipheriv'\n, 'createSign'\n, 'createVerify'\n, 'createDiffieHellman'\n], function (name) {\n  exports[name] = function () {\n    error('sorry,', name, 'is not implemented yet')\n  }\n})\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/index.js\n ** module id = 45\n ** module chunks = 0\n **/","(function() {\n  var g = ('undefined' === typeof window ? global : window) || {}\n  _crypto = (\n    g.crypto || g.msCrypto || require('crypto')\n  )\n  module.exports = function(size) {\n    // Modern Browsers\n    if(_crypto.getRandomValues) {\n      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array\n      /* This will not work in older browsers.\n       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues\n       */\n    \n      _crypto.getRandomValues(bytes);\n      return bytes;\n    }\n    else if (_crypto.randomBytes) {\n      return _crypto.randomBytes(size)\n    }\n    else\n      throw new Error(\n        'secure random number generation not supported by this browser\\n'+\n        'use chrome, FireFox or Internet Explorer 11'\n      )\n  }\n}())\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/rng.js\n ** module id = 46\n ** module chunks = 0\n **/","var createHash = require('sha.js')\n\nvar md5 = toConstructor(require('./md5'))\nvar rmd160 = toConstructor(require('ripemd160'))\n\nfunction toConstructor (fn) {\n  return function () {\n    var buffers = []\n    var m= {\n      update: function (data, enc) {\n        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)\n        buffers.push(data)\n        return this\n      },\n      digest: function (enc) {\n        var buf = Buffer.concat(buffers)\n        var r = fn(buf)\n        buffers = null\n        return enc ? r.toString(enc) : r\n      }\n    }\n    return m\n  }\n}\n\nmodule.exports = function (alg) {\n  if('md5' === alg) return new md5()\n  if('rmd160' === alg) return new rmd160()\n  return createHash(alg)\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/create-hash.js\n ** module id = 48\n ** module chunks = 0\n **/","var exports = module.exports = function (alg) {\n  var Alg = exports[alg]\n  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')\n  return new Alg()\n}\n\nvar Buffer = require('buffer').Buffer\nvar Hash   = require('./hash')(Buffer)\n\nexports.sha1 = require('./sha1')(Buffer, Hash)\nexports.sha256 = require('./sha256')(Buffer, Hash)\nexports.sha512 = require('./sha512')(Buffer, Hash)\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/index.js\n ** module id = 49\n ** module chunks = 0\n **/","module.exports = function (Buffer) {\n\n  //prototype class for hash functions\n  function Hash (blockSize, finalSize) {\n    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)\n    this._finalSize = finalSize\n    this._blockSize = blockSize\n    this._len = 0\n    this._s = 0\n  }\n\n  Hash.prototype.init = function () {\n    this._s = 0\n    this._len = 0\n  }\n\n  Hash.prototype.update = function (data, enc) {\n    if (\"string\" === typeof data) {\n      enc = enc || \"utf8\"\n      data = new Buffer(data, enc)\n    }\n\n    var l = this._len += data.length\n    var s = this._s = (this._s || 0)\n    var f = 0\n    var buffer = this._block\n\n    while (s < l) {\n      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))\n      var ch = (t - f)\n\n      for (var i = 0; i < ch; i++) {\n        buffer[(s % this._blockSize) + i] = data[i + f]\n      }\n\n      s += ch\n      f += ch\n\n      if ((s % this._blockSize) === 0) {\n        this._update(buffer)\n      }\n    }\n    this._s = s\n\n    return this\n  }\n\n  Hash.prototype.digest = function (enc) {\n    // Suppose the length of the message M, in bits, is l\n    var l = this._len * 8\n\n    // Append the bit 1 to the end of the message\n    this._block[this._len % this._blockSize] = 0x80\n\n    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize\n    this._block.fill(0, this._len % this._blockSize + 1)\n\n    if (l % (this._blockSize * 8) >= this._finalSize * 8) {\n      this._update(this._block)\n      this._block.fill(0)\n    }\n\n    // to this append the block which is equal to the number l written in binary\n    // TODO: handle case where l is > Math.pow(2, 29)\n    this._block.writeInt32BE(l, this._blockSize - 4)\n\n    var hash = this._update(this._block) || this._hash()\n\n    return enc ? hash.toString(enc) : hash\n  }\n\n  Hash.prototype._update = function () {\n    throw new Error('_update must be implemented by subclass')\n  }\n\n  return Hash\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/hash.js\n ** module id = 50\n ** module chunks = 0\n **/","/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\nvar inherits = require('util').inherits\n\nmodule.exports = function (Buffer, Hash) {\n\n  var A = 0|0\n  var B = 4|0\n  var C = 8|0\n  var D = 12|0\n  var E = 16|0\n\n  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)\n\n  var POOL = []\n\n  function Sha1 () {\n    if(POOL.length)\n      return POOL.pop().init()\n\n    if(!(this instanceof Sha1)) return new Sha1()\n    this._w = W\n    Hash.call(this, 16*4, 14*4)\n\n    this._h = null\n    this.init()\n  }\n\n  inherits(Sha1, Hash)\n\n  Sha1.prototype.init = function () {\n    this._a = 0x67452301\n    this._b = 0xefcdab89\n    this._c = 0x98badcfe\n    this._d = 0x10325476\n    this._e = 0xc3d2e1f0\n\n    Hash.prototype.init.call(this)\n    return this\n  }\n\n  Sha1.prototype._POOL = POOL\n  Sha1.prototype._update = function (X) {\n\n    var a, b, c, d, e, _a, _b, _c, _d, _e\n\n    a = _a = this._a\n    b = _b = this._b\n    c = _c = this._c\n    d = _d = this._d\n    e = _e = this._e\n\n    var w = this._w\n\n    for(var j = 0; j < 80; j++) {\n      var W = w[j] = j < 16 ? X.readInt32BE(j*4)\n        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)\n\n      var t = add(\n        add(rol(a, 5), sha1_ft(j, b, c, d)),\n        add(add(e, W), sha1_kt(j))\n      )\n\n      e = d\n      d = c\n      c = rol(b, 30)\n      b = a\n      a = t\n    }\n\n    this._a = add(a, _a)\n    this._b = add(b, _b)\n    this._c = add(c, _c)\n    this._d = add(d, _d)\n    this._e = add(e, _e)\n  }\n\n  Sha1.prototype._hash = function () {\n    if(POOL.length < 100) POOL.push(this)\n    var H = new Buffer(20)\n    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)\n    H.writeInt32BE(this._a|0, A)\n    H.writeInt32BE(this._b|0, B)\n    H.writeInt32BE(this._c|0, C)\n    H.writeInt32BE(this._d|0, D)\n    H.writeInt32BE(this._e|0, E)\n    return H\n  }\n\n  /*\n   * Perform the appropriate triplet combination function for the current\n   * iteration\n   */\n  function sha1_ft(t, b, c, d) {\n    if(t < 20) return (b & c) | ((~b) & d);\n    if(t < 40) return b ^ c ^ d;\n    if(t < 60) return (b & c) | (b & d) | (c & d);\n    return b ^ c ^ d;\n  }\n\n  /*\n   * Determine the appropriate additive constant for the current iteration\n   */\n  function sha1_kt(t) {\n    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n           (t < 60) ? -1894007588 : -899497514;\n  }\n\n  /*\n   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n   * to work around bugs in some JS interpreters.\n   * //dominictarr: this is 10 years old, so maybe this can be dropped?)\n   *\n   */\n  function add(x, y) {\n    return (x + y ) | 0\n  //lets see how this goes on testling.\n  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  //  return (msw << 16) | (lsw & 0xFFFF);\n  }\n\n  /*\n   * Bitwise rotate a 32-bit number to the left.\n   */\n  function rol(num, cnt) {\n    return (num << cnt) | (num >>> (32 - cnt));\n  }\n\n  return Sha1\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha1.js\n ** module id = 51\n ** module chunks = 0\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/util/util.js\n ** module id = 52\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 53\n ** module chunks = 0\n **/","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/util/support/isBufferBrowser.js\n ** module id = 54\n ** module chunks = 0\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/util/~/inherits/inherits_browser.js\n ** module id = 55\n ** module chunks = 0\n **/","\n/**\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined\n * in FIPS 180-2\n * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n *\n */\n\nvar inherits = require('util').inherits\n\nmodule.exports = function (Buffer, Hash) {\n\n  var K = [\n      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,\n      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,\n      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,\n      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,\n      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,\n      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,\n      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,\n      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,\n      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,\n      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,\n      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,\n      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,\n      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,\n      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,\n      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,\n      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2\n    ]\n\n  var W = new Array(64)\n\n  function Sha256() {\n    this.init()\n\n    this._w = W //new Array(64)\n\n    Hash.call(this, 16*4, 14*4)\n  }\n\n  inherits(Sha256, Hash)\n\n  Sha256.prototype.init = function () {\n\n    this._a = 0x6a09e667|0\n    this._b = 0xbb67ae85|0\n    this._c = 0x3c6ef372|0\n    this._d = 0xa54ff53a|0\n    this._e = 0x510e527f|0\n    this._f = 0x9b05688c|0\n    this._g = 0x1f83d9ab|0\n    this._h = 0x5be0cd19|0\n\n    this._len = this._s = 0\n\n    return this\n  }\n\n  function S (X, n) {\n    return (X >>> n) | (X << (32 - n));\n  }\n\n  function R (X, n) {\n    return (X >>> n);\n  }\n\n  function Ch (x, y, z) {\n    return ((x & y) ^ ((~x) & z));\n  }\n\n  function Maj (x, y, z) {\n    return ((x & y) ^ (x & z) ^ (y & z));\n  }\n\n  function Sigma0256 (x) {\n    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));\n  }\n\n  function Sigma1256 (x) {\n    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));\n  }\n\n  function Gamma0256 (x) {\n    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));\n  }\n\n  function Gamma1256 (x) {\n    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));\n  }\n\n  Sha256.prototype._update = function(M) {\n\n    var W = this._w\n    var a, b, c, d, e, f, g, h\n    var T1, T2\n\n    a = this._a | 0\n    b = this._b | 0\n    c = this._c | 0\n    d = this._d | 0\n    e = this._e | 0\n    f = this._f | 0\n    g = this._g | 0\n    h = this._h | 0\n\n    for (var j = 0; j < 64; j++) {\n      var w = W[j] = j < 16\n        ? M.readInt32BE(j * 4)\n        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]\n\n      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w\n\n      T2 = Sigma0256(a) + Maj(a, b, c);\n      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;\n    }\n\n    this._a = (a + this._a) | 0\n    this._b = (b + this._b) | 0\n    this._c = (c + this._c) | 0\n    this._d = (d + this._d) | 0\n    this._e = (e + this._e) | 0\n    this._f = (f + this._f) | 0\n    this._g = (g + this._g) | 0\n    this._h = (h + this._h) | 0\n\n  };\n\n  Sha256.prototype._hash = function () {\n    var H = new Buffer(32)\n\n    H.writeInt32BE(this._a,  0)\n    H.writeInt32BE(this._b,  4)\n    H.writeInt32BE(this._c,  8)\n    H.writeInt32BE(this._d, 12)\n    H.writeInt32BE(this._e, 16)\n    H.writeInt32BE(this._f, 20)\n    H.writeInt32BE(this._g, 24)\n    H.writeInt32BE(this._h, 28)\n\n    return H\n  }\n\n  return Sha256\n\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha256.js\n ** module id = 56\n ** module chunks = 0\n **/","var inherits = require('util').inherits\n\nmodule.exports = function (Buffer, Hash) {\n  var K = [\n    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n  ]\n\n  var W = new Array(160)\n\n  function Sha512() {\n    this.init()\n    this._w = W\n\n    Hash.call(this, 128, 112)\n  }\n\n  inherits(Sha512, Hash)\n\n  Sha512.prototype.init = function () {\n\n    this._a = 0x6a09e667|0\n    this._b = 0xbb67ae85|0\n    this._c = 0x3c6ef372|0\n    this._d = 0xa54ff53a|0\n    this._e = 0x510e527f|0\n    this._f = 0x9b05688c|0\n    this._g = 0x1f83d9ab|0\n    this._h = 0x5be0cd19|0\n\n    this._al = 0xf3bcc908|0\n    this._bl = 0x84caa73b|0\n    this._cl = 0xfe94f82b|0\n    this._dl = 0x5f1d36f1|0\n    this._el = 0xade682d1|0\n    this._fl = 0x2b3e6c1f|0\n    this._gl = 0xfb41bd6b|0\n    this._hl = 0x137e2179|0\n\n    this._len = this._s = 0\n\n    return this\n  }\n\n  function S (X, Xl, n) {\n    return (X >>> n) | (Xl << (32 - n))\n  }\n\n  function Ch (x, y, z) {\n    return ((x & y) ^ ((~x) & z));\n  }\n\n  function Maj (x, y, z) {\n    return ((x & y) ^ (x & z) ^ (y & z));\n  }\n\n  Sha512.prototype._update = function(M) {\n\n    var W = this._w\n    var a, b, c, d, e, f, g, h\n    var al, bl, cl, dl, el, fl, gl, hl\n\n    a = this._a | 0\n    b = this._b | 0\n    c = this._c | 0\n    d = this._d | 0\n    e = this._e | 0\n    f = this._f | 0\n    g = this._g | 0\n    h = this._h | 0\n\n    al = this._al | 0\n    bl = this._bl | 0\n    cl = this._cl | 0\n    dl = this._dl | 0\n    el = this._el | 0\n    fl = this._fl | 0\n    gl = this._gl | 0\n    hl = this._hl | 0\n\n    for (var i = 0; i < 80; i++) {\n      var j = i * 2\n\n      var Wi, Wil\n\n      if (i < 16) {\n        Wi = W[j] = M.readInt32BE(j * 4)\n        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)\n\n      } else {\n        var x  = W[j - 15*2]\n        var xl = W[j - 15*2 + 1]\n        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)\n        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)\n\n        x  = W[j - 2*2]\n        xl = W[j - 2*2 + 1]\n        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)\n        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)\n\n        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n        var Wi7  = W[j - 7*2]\n        var Wi7l = W[j - 7*2 + 1]\n\n        var Wi16  = W[j - 16*2]\n        var Wi16l = W[j - 16*2 + 1]\n\n        Wil = gamma0l + Wi7l\n        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)\n        Wil = Wil + gamma1l\n        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)\n        Wil = Wil + Wi16l\n        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)\n\n        W[j] = Wi\n        W[j + 1] = Wil\n      }\n\n      var maj = Maj(a, b, c)\n      var majl = Maj(al, bl, cl)\n\n      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)\n      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)\n      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)\n      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)\n\n      // t1 = h + sigma1 + ch + K[i] + W[i]\n      var Ki = K[j]\n      var Kil = K[j + 1]\n\n      var ch = Ch(e, f, g)\n      var chl = Ch(el, fl, gl)\n\n      var t1l = hl + sigma1l\n      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)\n      t1l = t1l + chl\n      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)\n      t1l = t1l + Kil\n      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)\n      t1l = t1l + Wil\n      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)\n\n      // t2 = sigma0 + maj\n      var t2l = sigma0l + majl\n      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)\n\n      h  = g\n      hl = gl\n      g  = f\n      gl = fl\n      f  = e\n      fl = el\n      el = (dl + t1l) | 0\n      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n      d  = c\n      dl = cl\n      c  = b\n      cl = bl\n      b  = a\n      bl = al\n      al = (t1l + t2l) | 0\n      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0\n    }\n\n    this._al = (this._al + al) | 0\n    this._bl = (this._bl + bl) | 0\n    this._cl = (this._cl + cl) | 0\n    this._dl = (this._dl + dl) | 0\n    this._el = (this._el + el) | 0\n    this._fl = (this._fl + fl) | 0\n    this._gl = (this._gl + gl) | 0\n    this._hl = (this._hl + hl) | 0\n\n    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0\n    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0\n    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0\n    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0\n    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0\n    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0\n    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0\n    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0\n  }\n\n  Sha512.prototype._hash = function () {\n    var H = new Buffer(64)\n\n    function writeInt64BE(h, l, offset) {\n      H.writeInt32BE(h, offset)\n      H.writeInt32BE(l, offset + 4)\n    }\n\n    writeInt64BE(this._a, this._al, 0)\n    writeInt64BE(this._b, this._bl, 8)\n    writeInt64BE(this._c, this._cl, 16)\n    writeInt64BE(this._d, this._dl, 24)\n    writeInt64BE(this._e, this._el, 32)\n    writeInt64BE(this._f, this._fl, 40)\n    writeInt64BE(this._g, this._gl, 48)\n    writeInt64BE(this._h, this._hl, 56)\n\n    return H\n  }\n\n  return Sha512\n\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/sha.js/sha512.js\n ** module id = 57\n ** module chunks = 0\n **/","/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n\nvar helpers = require('./helpers');\n\n/*\n * Calculate the MD5 of an array of little-endian words, and a bit length\n */\nfunction core_md5(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << ((len) % 32);\n  x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n\n  for(var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n\n    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n  return Array(a, b, c, d);\n\n}\n\n/*\n * These functions implement the four basic operations the algorithm uses.\n */\nfunction md5_cmn(q, a, b, x, s, t)\n{\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);\n}\nfunction md5_ff(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n}\nfunction md5_gg(a, b, c, d, x, s, t)\n{\n  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n}\nfunction md5_hh(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5_ii(a, b, c, d, x, s, t)\n{\n  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction bit_rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\nmodule.exports = function md5(buf) {\n  return helpers.hash(buf, core_md5, 16);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/md5.js\n ** module id = 58\n ** module chunks = 0\n **/","var intSize = 4;\nvar zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);\nvar chrsz = 8;\n\nfunction toArray(buf, bigEndian) {\n  if ((buf.length % intSize) !== 0) {\n    var len = buf.length + (intSize - (buf.length % intSize));\n    buf = Buffer.concat([buf, zeroBuffer], len);\n  }\n\n  var arr = [];\n  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;\n  for (var i = 0; i < buf.length; i += intSize) {\n    arr.push(fn.call(buf, i));\n  }\n  return arr;\n}\n\nfunction toBuffer(arr, size, bigEndian) {\n  var buf = new Buffer(size);\n  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;\n  for (var i = 0; i < arr.length; i++) {\n    fn.call(buf, arr[i], i * 4, true);\n  }\n  return buf;\n}\n\nfunction hash(buf, fn, hashSize, bigEndian) {\n  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);\n  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);\n  return toBuffer(arr, hashSize, bigEndian);\n}\n\nmodule.exports = { hash: hash };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/helpers.js\n ** module id = 59\n ** module chunks = 0\n **/","\nmodule.exports = ripemd160\n\n\n\n/*\nCryptoJS v3.1.2\ncode.google.com/p/crypto-js\n(c) 2009-2013 by Jeff Mott. All rights reserved.\ncode.google.com/p/crypto-js/wiki/License\n*/\n/** @preserve\n(c) 2012 by Cédric Mesnil. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\n// Constants table\nvar zl = [\n    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];\nvar zr = [\n    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];\nvar sl = [\n     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];\nvar sr = [\n    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];\n\nvar hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];\nvar hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];\n\nvar bytesToWords = function (bytes) {\n  var words = [];\n  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {\n    words[b >>> 5] |= bytes[i] << (24 - b % 32);\n  }\n  return words;\n};\n\nvar wordsToBytes = function (words) {\n  var bytes = [];\n  for (var b = 0; b < words.length * 32; b += 8) {\n    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n  }\n  return bytes;\n};\n\nvar processBlock = function (H, M, offset) {\n\n  // Swap endian\n  for (var i = 0; i < 16; i++) {\n    var offset_i = offset + i;\n    var M_offset_i = M[offset_i];\n\n    // Swap\n    M[offset_i] = (\n        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n    );\n  }\n\n  // Working variables\n  var al, bl, cl, dl, el;\n  var ar, br, cr, dr, er;\n\n  ar = al = H[0];\n  br = bl = H[1];\n  cr = cl = H[2];\n  dr = dl = H[3];\n  er = el = H[4];\n  // Computation\n  var t;\n  for (var i = 0; i < 80; i += 1) {\n    t = (al +  M[offset+zl[i]])|0;\n    if (i<16){\n        t +=  f1(bl,cl,dl) + hl[0];\n    } else if (i<32) {\n        t +=  f2(bl,cl,dl) + hl[1];\n    } else if (i<48) {\n        t +=  f3(bl,cl,dl) + hl[2];\n    } else if (i<64) {\n        t +=  f4(bl,cl,dl) + hl[3];\n    } else {// if (i<80) {\n        t +=  f5(bl,cl,dl) + hl[4];\n    }\n    t = t|0;\n    t =  rotl(t,sl[i]);\n    t = (t+el)|0;\n    al = el;\n    el = dl;\n    dl = rotl(cl, 10);\n    cl = bl;\n    bl = t;\n\n    t = (ar + M[offset+zr[i]])|0;\n    if (i<16){\n        t +=  f5(br,cr,dr) + hr[0];\n    } else if (i<32) {\n        t +=  f4(br,cr,dr) + hr[1];\n    } else if (i<48) {\n        t +=  f3(br,cr,dr) + hr[2];\n    } else if (i<64) {\n        t +=  f2(br,cr,dr) + hr[3];\n    } else {// if (i<80) {\n        t +=  f1(br,cr,dr) + hr[4];\n    }\n    t = t|0;\n    t =  rotl(t,sr[i]) ;\n    t = (t+er)|0;\n    ar = er;\n    er = dr;\n    dr = rotl(cr, 10);\n    cr = br;\n    br = t;\n  }\n  // Intermediate hash value\n  t    = (H[1] + cl + dr)|0;\n  H[1] = (H[2] + dl + er)|0;\n  H[2] = (H[3] + el + ar)|0;\n  H[3] = (H[4] + al + br)|0;\n  H[4] = (H[0] + bl + cr)|0;\n  H[0] =  t;\n};\n\nfunction f1(x, y, z) {\n  return ((x) ^ (y) ^ (z));\n}\n\nfunction f2(x, y, z) {\n  return (((x)&(y)) | ((~x)&(z)));\n}\n\nfunction f3(x, y, z) {\n  return (((x) | (~(y))) ^ (z));\n}\n\nfunction f4(x, y, z) {\n  return (((x) & (z)) | ((y)&(~(z))));\n}\n\nfunction f5(x, y, z) {\n  return ((x) ^ ((y) |(~(z))));\n}\n\nfunction rotl(x,n) {\n  return (x<<n) | (x>>>(32-n));\n}\n\nfunction ripemd160(message) {\n  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];\n\n  if (typeof message == 'string')\n    message = new Buffer(message, 'utf8');\n\n  var m = bytesToWords(message);\n\n  var nBitsLeft = message.length * 8;\n  var nBitsTotal = message.length * 8;\n\n  // Add padding\n  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n  );\n\n  for (var i=0 ; i<m.length; i += 16) {\n    processBlock(H, m, i);\n  }\n\n  // Swap endian\n  for (var i = 0; i < 5; i++) {\n      // Shortcut\n    var H_i = H[i];\n\n    // Swap\n    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n  }\n\n  var digestbytes = wordsToBytes(H);\n  return new Buffer(digestbytes);\n}\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/ripemd160/lib/ripemd160.js\n ** module id = 60\n ** module chunks = 0\n **/","var createHash = require('./create-hash')\n\nvar zeroBuffer = new Buffer(128)\nzeroBuffer.fill(0)\n\nmodule.exports = Hmac\n\nfunction Hmac (alg, key) {\n  if(!(this instanceof Hmac)) return new Hmac(alg, key)\n  this._opad = opad\n  this._alg = alg\n\n  var blocksize = (alg === 'sha512') ? 128 : 64\n\n  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key\n\n  if(key.length > blocksize) {\n    key = createHash(alg).update(key).digest()\n  } else if(key.length < blocksize) {\n    key = Buffer.concat([key, zeroBuffer], blocksize)\n  }\n\n  var ipad = this._ipad = new Buffer(blocksize)\n  var opad = this._opad = new Buffer(blocksize)\n\n  for(var i = 0; i < blocksize; i++) {\n    ipad[i] = key[i] ^ 0x36\n    opad[i] = key[i] ^ 0x5C\n  }\n\n  this._hash = createHash(alg).update(ipad)\n}\n\nHmac.prototype.update = function (data, enc) {\n  this._hash.update(data, enc)\n  return this\n}\n\nHmac.prototype.digest = function (enc) {\n  var h = this._hash.digest()\n  return createHash(this._alg).update(this._opad).update(h).digest(enc)\n}\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/create-hmac.js\n ** module id = 61\n ** module chunks = 0\n **/","var pbkdf2Export = require('pbkdf2-compat/pbkdf2')\n\nmodule.exports = function (crypto, exports) {\n  exports = exports || {}\n\n  var exported = pbkdf2Export(crypto)\n\n  exports.pbkdf2 = exported.pbkdf2\n  exports.pbkdf2Sync = exported.pbkdf2Sync\n\n  return exports\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/pbkdf2.js\n ** module id = 62\n ** module chunks = 0\n **/","module.exports = function(crypto) {\n  function pbkdf2(password, salt, iterations, keylen, digest, callback) {\n    if ('function' === typeof digest) {\n      callback = digest\n      digest = undefined\n    }\n\n    if ('function' !== typeof callback)\n      throw new Error('No callback provided to pbkdf2')\n\n    setTimeout(function() {\n      var result\n\n      try {\n        result = pbkdf2Sync(password, salt, iterations, keylen, digest)\n      } catch (e) {\n        return callback(e)\n      }\n\n      callback(undefined, result)\n    })\n  }\n\n  function pbkdf2Sync(password, salt, iterations, keylen, digest) {\n    if ('number' !== typeof iterations)\n      throw new TypeError('Iterations not a number')\n\n    if (iterations < 0)\n      throw new TypeError('Bad iterations')\n\n    if ('number' !== typeof keylen)\n      throw new TypeError('Key length not a number')\n\n    if (keylen < 0)\n      throw new TypeError('Bad key length')\n\n    digest = digest || 'sha1'\n\n    if (!Buffer.isBuffer(password)) password = new Buffer(password)\n    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)\n\n    var hLen, l = 1, r, T\n    var DK = new Buffer(keylen)\n    var block1 = new Buffer(salt.length + 4)\n    salt.copy(block1, 0, 0, salt.length)\n\n    for (var i = 1; i <= l; i++) {\n      block1.writeUInt32BE(i, salt.length)\n\n      var U = crypto.createHmac(digest, password).update(block1).digest()\n\n      if (!hLen) {\n        hLen = U.length\n        T = new Buffer(hLen)\n        l = Math.ceil(keylen / hLen)\n        r = keylen - (l - 1) * hLen\n\n        if (keylen > (Math.pow(2, 32) - 1) * hLen)\n          throw new TypeError('keylen exceeds maximum length')\n      }\n\n      U.copy(T, 0, 0, hLen)\n\n      for (var j = 1; j < iterations; j++) {\n        U = crypto.createHmac(digest, password).update(U).digest()\n\n        for (var k = 0; k < hLen; k++) {\n          T[k] ^= U[k]\n        }\n      }\n\n      var destPos = (i - 1) * hLen\n      var len = (i == l ? r : hLen)\n      T.copy(DK, destPos, 0, len)\n    }\n\n    return DK\n  }\n\n  return {\n    pbkdf2: pbkdf2,\n    pbkdf2Sync: pbkdf2Sync\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/crypto-browserify/~/pbkdf2-compat/pbkdf2.js\n ** module id = 63\n ** module chunks = 0\n **/","// Support  CommonJS, AMD or independent user\n(function (name, definition) {\n  if (typeof define == 'function' && typeof define.amd == 'object') {\n    define(definition);\n  }\n  else if (typeof module != 'undefined') module.exports = definition();\n  else this[name] = definition();\n}('Workbook', function () {\n\n  // encode functions lifted from XLSX to eliminate dependency on XLSX so this can be serialized/deserialized to JSON\n  function encode_row(row) { return \"\" + (row + 1); }\n  function encode_col(col) { var s=\"\"; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }\n  function encode_cell(cell) { return encode_col(cell.c) + encode_row(cell.r); }\n  function encode_range(cs,ce) {\n    if(ce === undefined || typeof ce === 'number') return encode_range(cs.s, cs.e);\n    if(typeof cs !== 'string') cs = encode_cell(cs); if(typeof ce !== 'string') ce = encode_cell(ce);\n    return cs == ce ? cs : cs + \":\" + ce;\n  }\n\n  function datenum(v, date1904) {\n    if (date1904) v += 1462;\n    return (Date.parse(v) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\n  }\n\n  return function Workbook() {\n\n      var ranges = {}; //track  extent of each sheet\n      var rows = {};   // accumulate data rows for each sheet\n\n      return {\n        SheetNames: [],\n        Sheets: {},\n        CellStyles: [],\n\n        getSheet: function (sheetName) {\n          if (!this.Sheets[sheetName]) {\n            this.Sheets[sheetName] = {};\n\n            this.SheetNames.push(sheetName);\n            ranges[sheetName] = {s: {c: 10000000, r: 10000000}, e: {c: 0, r: 0 }};\n            rows[sheetName] = [];\n          }\n          return this.Sheets[sheetName];\n        },\n\n        getSheetRows: function (sheetName) {\n          var ws = this.getSheet(sheetName); // init if not previously called\n          return rows[sheetName];\n        },\n\n        getRange: function (sheetName) {\n          return ranges[sheetName];\n        },\n\n        getColumnProperties: function(sheetName) {\n          var ws = this.getSheet(sheetName);\n          if (!ws['!cols']) ws['!cols'] = [];\n          return ws['!cols'];\n        },\n        setCell: function (sheetName, rowIdx, colIdx, val) {\n          var rows = this.getSheetRows(sheetName);\n          if (!rows[rowIdx]) {\n            rows[rowIdx] = [];\n          }\n          rows[rowIdx][colIdx] = val;\n          return this;\n        },\n        setColWidthChars: function(sheetName, colId, width) {\n          var cps = this.getColumnProperties(sheetName);\n          if (!cps[colId]) cps[colId] = {};\n          cps[colId].wch = width;\n          return this;\n        },\n        setColWidthPixels: function(sheetName, colId, width) {\n          var cps = this.getColumnProperties(sheetName);\n          if (!cps[colId]) cps[colId] = {};\n          cps[colId].wpx = width;\n          return this;\n        },\n        getCell: function (sheetName, rowIdx, colIdx, val) {\n          var rows = this.getSheetRows(sheetName);\n          if (!rows[rowIdx]) {\n            rows[rowIdx] = [];\n          }\n          return rows[rowIdx][colIdx] = val;\n        },\n\n\n        addRowsToSheet: function (sheetName, rows) {\n          var ws = this.getSheet(sheetName);\n          var sheetRows = this.getSheetRows(sheetName);\n          rows.forEach(function (row) {\n            sheetRows.push(row);\n          });\n          return this;\n        },\n\n        finalize: function () {\n          var self = this;\n          this.SheetNames.forEach(function (sheetName) {\n            self._finalizeSheet(sheetName);\n          });\n          return this;\n        },\n\n        // { s: { c: 0, r: 0}, e: {c: 2, r: 2}}\n        mergeCells: function (sheetName, merge) {\n          var sheet = this.getSheet(sheetName);\n          sheet[\"!merges\"] = sheet[\"!merges\"] || [];\n          sheet[\"!merges\"].push(merge);\n          return this;\n        },\n\n        // data is an array of row arrays\n        // from https://gist.github.com/SheetJSDev/88a3ca3533adf389d13c\n        _finalizeSheet: function (sheetName) {\n          var ws = this.getSheet(sheetName), range = this.getRange(sheetName);\n\n          var data = this.getSheetRows(sheetName) || [];\n\n          for (var R = 0; R < data.length; ++R) {\n\n            for (var C = 0; data[R] && C < data[R].length; ++C) {\n              if (range.s.r > R) range.s.r = R;\n              if (range.s.c > C) range.s.c = C;\n              if (range.e.r < R) range.e.r = R;\n              if (range.e.c < C) range.e.c = C;\n\n              var cell = (typeof data[R][C] == 'object' ? data[R][C] : {v: data[R][C] });\n              if (cell.v == null) continue;\n              var cell_ref = encode_cell({c: C, r: R});\n\n              if (typeof cell.v === 'number') cell.t = 'n';\n              else if (typeof cell.v === 'boolean') cell.t = 'b';\n              else if (cell.v instanceof Date) {\n                cell.t = 'n';\n                cell.z = cell.z || 'dd/mm/yy';\n                cell.v = datenum(cell.v);\n              }\n              else cell.t = 's';\n\n              ws[cell_ref] = cell;\n            }\n          }\n          if (range && range.s.c < 10000000) ws['!ref'] = encode_range(range);\n          return ws;\n        }\n      }\n    }\n}));\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/workbook.js\n ** module id = 64\n ** module chunks = 0\n **/","/**\n * Create a blob builder even when vendor prefixes exist\n */\n\nvar BlobBuilder = global.BlobBuilder\n  || global.WebKitBlobBuilder\n  || global.MSBlobBuilder\n  || global.MozBlobBuilder;\n\n/**\n * Check if Blob constructor is supported\n */\n\nvar blobSupported = (function() {\n  try {\n    var a = new Blob(['hi']);\n    return a.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if Blob constructor supports ArrayBufferViews\n * Fails in Safari 6, so we need to map to ArrayBuffers there.\n */\n\nvar blobSupportsArrayBufferView = blobSupported && (function() {\n  try {\n    var b = new Blob([new Uint8Array([1,2])]);\n    return b.size === 2;\n  } catch(e) {\n    return false;\n  }\n})();\n\n/**\n * Check if BlobBuilder is supported\n */\n\nvar blobBuilderSupported = BlobBuilder\n  && BlobBuilder.prototype.append\n  && BlobBuilder.prototype.getBlob;\n\n/**\n * Helper function that maps ArrayBufferViews to ArrayBuffers\n * Used by BlobBuilder constructor and old browsers that didn't\n * support it in the Blob constructor.\n */\n\nfunction mapArrayBufferViews(ary) {\n  for (var i = 0; i < ary.length; i++) {\n    var chunk = ary[i];\n    if (chunk.buffer instanceof ArrayBuffer) {\n      var buf = chunk.buffer;\n\n      // if this is a subarray, make a copy so we only\n      // include the subarray region from the underlying buffer\n      if (chunk.byteLength !== buf.byteLength) {\n        var copy = new Uint8Array(chunk.byteLength);\n        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));\n        buf = copy.buffer;\n      }\n\n      ary[i] = buf;\n    }\n  }\n}\n\nfunction BlobBuilderConstructor(ary, options) {\n  options = options || {};\n\n  var bb = new BlobBuilder();\n  mapArrayBufferViews(ary);\n\n  for (var i = 0; i < ary.length; i++) {\n    bb.append(ary[i]);\n  }\n\n  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();\n};\n\nfunction BlobConstructor(ary, options) {\n  mapArrayBufferViews(ary);\n  return new Blob(ary, options || {});\n};\n\nmodule.exports = (function() {\n  if (blobSupported) {\n    return blobSupportsArrayBufferView ? global.Blob : BlobConstructor;\n  } else if (blobBuilderSupported) {\n    return BlobBuilderConstructor;\n  } else {\n    return undefined;\n  }\n})();\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** /home/everton/programacao/github/xlsx/~/blob/index.js\n ** module id = 65\n ** module chunks = 0\n **/","/*! FileSaver.js\n *  A saveAs() FileSaver implementation.\n *  2014-01-24\n *\n *  By Eli Grey, http://eligrey.com\n *  License: X11/MIT\n *    See LICENSE.md\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = saveAs\n  // IE 10+ (native saveAs)\n  || (typeof navigator !== \"undefined\" &&\n      navigator.msSaveOrOpenBlob && navigator.msSaveOrOpenBlob.bind(navigator))\n  // Everyone else\n  || (function(view) {\n\t\"use strict\";\n\t// IE <10 is explicitly unsupported\n\tif (typeof navigator !== \"undefined\" &&\n\t    /MSIE [1-9]\\./.test(navigator.userAgent)) {\n\t\treturn;\n\t}\n\tvar\n\t\t  doc = view.document\n\t\t  // only get URL when necessary in case BlobBuilder.js hasn't overridden it yet\n\t\t, get_URL = function() {\n\t\t\treturn view.URL || view.webkitURL || view;\n\t\t}\n\t\t, URL = view.URL || view.webkitURL || view\n\t\t, save_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\")\n\t\t, can_use_save_link = !view.externalHost && \"download\" in save_link\n\t\t, click = function(node) {\n\t\t\tvar event = doc.createEvent(\"MouseEvents\");\n\t\t\tevent.initMouseEvent(\n\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0\n\t\t\t\t, false, false, false, false, 0, null\n\t\t\t);\n\t\t\tnode.dispatchEvent(event);\n\t\t}\n\t\t, webkit_req_fs = view.webkitRequestFileSystem\n\t\t, req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem\n\t\t, throw_outside = function(ex) {\n\t\t\t(view.setImmediate || view.setTimeout)(function() {\n\t\t\t\tthrow ex;\n\t\t\t}, 0);\n\t\t}\n\t\t, force_saveable_type = \"application/octet-stream\"\n\t\t, fs_min_size = 0\n\t\t, deletion_queue = []\n\t\t, process_deletion_queue = function() {\n\t\t\tvar i = deletion_queue.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar file = deletion_queue[i];\n\t\t\t\tif (typeof file === \"string\") { // file is an object URL\n\t\t\t\t\tURL.revokeObjectURL(file);\n\t\t\t\t} else { // file is a File\n\t\t\t\t\tfile.remove();\n\t\t\t\t}\n\t\t\t}\n\t\t\tdeletion_queue.length = 0; // clear queue\n\t\t}\n\t\t, dispatch = function(filesaver, event_types, event) {\n\t\t\tevent_types = [].concat(event_types);\n\t\t\tvar i = event_types.length;\n\t\t\twhile (i--) {\n\t\t\t\tvar listener = filesaver[\"on\" + event_types[i]];\n\t\t\t\tif (typeof listener === \"function\") {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlistener.call(filesaver, event || filesaver);\n\t\t\t\t\t} catch (ex) {\n\t\t\t\t\t\tthrow_outside(ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t, FileSaver = function(blob, name) {\n\t\t\t// First try a.download, then web filesystem, then object URLs\n\t\t\tvar\n\t\t\t\t  filesaver = this\n\t\t\t\t, type = blob.type\n\t\t\t\t, blob_changed = false\n\t\t\t\t, object_url\n\t\t\t\t, target_view\n\t\t\t\t, get_object_url = function() {\n\t\t\t\t\tvar object_url = get_URL().createObjectURL(blob);\n\t\t\t\t\tdeletion_queue.push(object_url);\n\t\t\t\t\treturn object_url;\n\t\t\t\t}\n\t\t\t\t, dispatch_all = function() {\n\t\t\t\t\tdispatch(filesaver, \"writestart progress write writeend\".split(\" \"));\n\t\t\t\t}\n\t\t\t\t// on any filesys errors revert to saving with object URLs\n\t\t\t\t, fs_error = function() {\n\t\t\t\t\t// don't create more object URLs than needed\n\t\t\t\t\tif (blob_changed || !object_url) {\n\t\t\t\t\t\tobject_url = get_object_url(blob);\n\t\t\t\t\t}\n\t\t\t\t\tif (target_view) {\n\t\t\t\t\t\ttarget_view.location.href = object_url;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(navigator.userAgent.match(/7\\.[\\d\\s\\.]+Safari/)\t// is Safari 7.x\n\t\t\t\t\t\t\t\t&& typeof window.FileReader !== \"undefined\"\t\t\t// can convert to base64\n\t\t\t\t\t\t\t\t&& blob.size <= 1024*1024*150\t\t\t\t\t\t\t\t\t\t// file size max 150MB\n\t\t\t\t\t\t\t\t) {\t\n\t\t\t\t\t\t\tvar reader = new window.FileReader();\n\t\t\t\t\t\t\treader.readAsDataURL(blob);\n\t\t\t\t\t\t\treader.onloadend = function() {\n\t\t\t\t\t\t\t\tvar frame = doc.createElement(\"iframe\");\n\t\t\t\t\t\t\t\tframe.src = reader.result;\n\t\t\t\t\t\t\t\tframe.style.display = \"none\";\n\t\t\t\t\t\t\t\tdoc.body.appendChild(frame);\n\t\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASUNKNOWN;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\twindow.open(object_url, \"_blank\");\n\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASBLOB;\n\t\t\t\t\t\t\tdispatch_all();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t, abortable = function(func) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif (filesaver.readyState !== filesaver.DONE) {\n\t\t\t\t\t\t\treturn func.apply(this, arguments);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t, create_if_not_found = {create: true, exclusive: false}\n\t\t\t\t, slice\n\t\t\t;\n\t\t\tfilesaver.readyState = filesaver.INIT;\n\t\t\tif (!name) {\n\t\t\t\tname = \"download\";\n\t\t\t}\n\t\t\tif (can_use_save_link) {\n\t\t\t\tobject_url = get_object_url(blob);\n\t\t\t\t// FF for Android has a nasty garbage collection mechanism\n\t\t\t\t// that turns all objects that are not pure javascript into 'deadObject'\n\t\t\t\t// this means `doc` and `save_link` are unusable and need to be recreated\n\t\t\t\t// `view` is usable though:\n\t\t\t\tdoc = view.document;\n\t\t\t\tsave_link = doc.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\");\n\t\t\t\tsave_link.href = object_url;\n\t\t\t\tsave_link.download = name;\n\t\t\t\tvar event = doc.createEvent(\"MouseEvents\");\n\t\t\t\tevent.initMouseEvent(\n\t\t\t\t\t\"click\", true, false, view, 0, 0, 0, 0, 0\n\t\t\t\t\t, false, false, false, false, 0, null\n\t\t\t\t);\n\t\t\t\tsave_link.dispatchEvent(event);\n\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASBLOB;\n\t\t\t\tdispatch_all();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Object and web filesystem URLs have a problem saving in Google Chrome when\n\t\t\t// viewed in a tab, so I force save with application/octet-stream\n\t\t\t// http://code.google.com/p/chromium/issues/detail?id=91158\n\t\t\tif (view.chrome && type && type !== force_saveable_type) {\n\t\t\t\tslice = blob.slice || blob.webkitSlice;\n\t\t\t\tblob = slice.call(blob, 0, blob.size, force_saveable_type);\n\t\t\t\tblob_changed = true;\n\t\t\t}\n\t\t\t// Since I can't be sure that the guessed media type will trigger a download\n\t\t\t// in WebKit, I append .download to the filename.\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=65440\n\t\t\tif (webkit_req_fs && name !== \"download\") {\n\t\t\t\tname += \".download\";\n\t\t\t}\n\t\t\tif (type === force_saveable_type || webkit_req_fs) {\n\t\t\t\ttarget_view = view;\n\t\t\t}\n\t\t\tif (!req_fs) {\n\t\t\t\tfs_error();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfs_min_size += blob.size;\n\t\t\treq_fs(view.TEMPORARY, fs_min_size, abortable(function(fs) {\n\t\t\t\tfs.root.getDirectory(\"saved\", create_if_not_found, abortable(function(dir) {\n\t\t\t\t\tvar save = function() {\n\t\t\t\t\t\tdir.getFile(name, create_if_not_found, abortable(function(file) {\n\t\t\t\t\t\t\tfile.createWriter(abortable(function(writer) {\n\t\t\t\t\t\t\t\twriter.onwriteend = function(event) {\n\t\t\t\t\t\t\t\t\ttarget_view.location.href = file.toURL();\n\t\t\t\t\t\t\t\t\tdeletion_queue.push(file);\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.SAVEDASBLOB;\n\t\t\t\t\t\t\t\t\tdispatch(filesaver, \"writeend\", event);\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\twriter.onerror = function() {\n\t\t\t\t\t\t\t\t\tvar error = writer.error;\n\t\t\t\t\t\t\t\t\tif (error.code !== error.ABORT_ERR) {\n\t\t\t\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\"writestart progress write abort\".split(\" \").forEach(function(event) {\n\t\t\t\t\t\t\t\t\twriter[\"on\" + event] = filesaver[\"on\" + event];\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\twriter.write(blob);\n\t\t\t\t\t\t\t\tfilesaver.abort = function() {\n\t\t\t\t\t\t\t\t\twriter.abort();\n\t\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.DONE;\n\t\t\t\t\t\t\t\t\tfilesaver.savedAs = filesaver.FAILED;\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tfilesaver.readyState = filesaver.WRITING;\n\t\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t\t}), fs_error);\n\t\t\t\t\t};\n\t\t\t\t\tdir.getFile(name, {create: false}, abortable(function(file) {\n\t\t\t\t\t\t// delete file if it already exists\n\t\t\t\t\t\tfile.remove();\n\t\t\t\t\t\tsave();\n\t\t\t\t\t}), abortable(function(ex) {\n\t\t\t\t\t\tif (ex.code === ex.NOT_FOUND_ERR) {\n\t\t\t\t\t\t\tsave();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfs_error();\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}), fs_error);\n\t\t\t}), fs_error);\n\t\t}\n\t\t, FS_proto = FileSaver.prototype\n\t\t, saveAs = function(blob, name) {\n\t\t\treturn new FileSaver(blob, name);\n\t\t}\n\t;\n\tFS_proto.abort = function() {\n\t\tvar filesaver = this;\n\t\tfilesaver.readyState = filesaver.DONE;\n\t\tfilesaver.savedAs = filesaver.FAILED;\n\t\tdispatch(filesaver, \"abort\");\n\t};\n\tFS_proto.readyState = FS_proto.INIT = 0;\n\tFS_proto.WRITING = 1;\n\tFS_proto.DONE = 2;\n\tFS_proto.FAILED = -1;\n\tFS_proto.SAVEDASBLOB = 1;\n\tFS_proto.SAVEDASURI = 2;\n\tFS_proto.SAVEDASUNKNOWN = 3;\n\n\tFS_proto.error =\n\tFS_proto.onwritestart =\n\tFS_proto.onprogress =\n\tFS_proto.onwrite =\n\tFS_proto.onabort =\n\tFS_proto.onerror =\n\tFS_proto.onwriteend =\n\t\tnull;\n\n\tview.addEventListener(\"unload\", process_deletion_queue, false);\n\tsaveAs.unload = function() {\n\t\tprocess_deletion_queue();\n\t\tview.removeEventListener(\"unload\", process_deletion_queue, false);\n\t};\n\treturn saveAs;\n}(\n\t   typeof self !== \"undefined\" && self\n\t|| typeof window !== \"undefined\" && window\n\t|| this.content\n));\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nif (typeof module !== \"undefined\" && module !== null) {\n  module.exports = saveAs;\n} else if ((typeof define !== \"undefined\" && define !== null) && (define.amd != null)) {\n  define([], function() {\n    return saveAs;\n  });\n} else if(typeof Meteor !== 'undefined') { // make it available for Meteor\n  Meteor.saveAs = saveAs;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/FileSaver.js\n ** module id = 66\n ** module chunks = 0\n **/","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tmodule.children = [];\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/module.js\n ** module id = 67\n ** module chunks = 0\n **/","module.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-define.js\n ** module id = 68\n ** module chunks = 0\n **/","module.exports = __webpack_amd_options__;\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/buildin/amd-options.js\n ** module id = 69\n ** module chunks = 0\n **/"],"sourceRoot":""}